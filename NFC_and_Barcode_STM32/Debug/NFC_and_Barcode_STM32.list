
NFC_and_Barcode_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007108  08007108  0002047c  2**0
                  CONTENTS
  4 .ARM          00000000  08007108  08007108  0002047c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007108  08007108  0002047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800710c  0800710c  0001710c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000047c  20000000  08007110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  2000047c  0800758c  0002047c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b9c  0800758c  00020b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d16a  00000000  00000000  000204a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027eb  00000000  00000000  0002d60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0002fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00030b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010966  00000000  00000000  000317f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0ba  00000000  00000000  00042156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c89a  00000000  00000000  0004f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009baaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d8  00000000  00000000  0009bafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000047c 	.word	0x2000047c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006e2c 	.word	0x08006e2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000480 	.word	0x20000480
 8000148:	08006e2c 	.word	0x08006e2c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SystemInit>:
    *         SystemCoreClock variable.
    * @note   This function should be used only after reset.
    * @param  None
    * @retval None
    */
void SystemInit() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	SetSysClock();
 8000160:	f000 f802 	bl	8000168 <SetSysClock>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800016c:	f000 f802 	bl	8000174 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}

08000174 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	2300      	movs	r3, #0
 8000180:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000182:	4b3a      	ldr	r3, [pc, #232]	; (800026c <SetSysClockTo72+0xf8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a39      	ldr	r2, [pc, #228]	; (800026c <SetSysClockTo72+0xf8>)
 8000188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800018c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800018e:	4b37      	ldr	r3, [pc, #220]	; (800026c <SetSysClockTo72+0xf8>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000196:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <SetSysClockTo72+0x38>
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001aa:	d1f0      	bne.n	800018e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001ac:	4b2f      	ldr	r3, [pc, #188]	; (800026c <SetSysClockTo72+0xf8>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80001b8:	2301      	movs	r3, #1
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	e001      	b.n	80001c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d14b      	bne.n	8000260 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001c8:	4b29      	ldr	r3, [pc, #164]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a28      	ldr	r2, [pc, #160]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001d4:	4b26      	ldr	r3, [pc, #152]	; (8000270 <SetSysClockTo72+0xfc>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <SetSysClockTo72+0xfc>)
 80001da:	f023 0303 	bic.w	r3, r3, #3
 80001de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a22      	ldr	r2, [pc, #136]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001ec:	4b1f      	ldr	r3, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f6:	4a1d      	ldr	r2, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <SetSysClockTo72+0xf8>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <SetSysClockTo72+0xf8>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <SetSysClockTo72+0xf8>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <SetSysClockTo72+0xf8>)
 800020e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000212:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <SetSysClockTo72+0xf8>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <SetSysClockTo72+0xf8>)
 800021a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800021e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <SetSysClockTo72+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <SetSysClockTo72+0xf8>)
 8000226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800022c:	bf00      	nop
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <SetSysClockTo72+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SetSysClockTo72+0xf8>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <SetSysClockTo72+0xf8>)
 8000240:	f023 0303 	bic.w	r3, r3, #3
 8000244:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <SetSysClockTo72+0xf8>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <SetSysClockTo72+0xf8>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000252:	bf00      	nop
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SetSysClockTo72+0xf8>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	f003 030c 	and.w	r3, r3, #12
 800025c:	2b08      	cmp	r3, #8
 800025e:	d1f9      	bne.n	8000254 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000
 8000270:	40022000 	.word	0x40022000

08000274 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da0b      	bge.n	80002a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <NVIC_SetPriority+0x4c>)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 030f 	and.w	r3, r3, #15
 8000294:	3b04      	subs	r3, #4
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800029e:	e009      	b.n	80002b4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <NVIC_SetPriority+0x50>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	0112      	lsls	r2, r2, #4
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002d6:	d301      	bcc.n	80002dc <SysTick_Config+0x14>
 80002d8:	2301      	movs	r3, #1
 80002da:	e011      	b.n	8000300 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <SysTick_Config+0x40>)
 80002e4:	3b01      	subs	r3, #1
 80002e6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80002e8:	210f      	movs	r1, #15
 80002ea:	f04f 30ff 	mov.w	r0, #4294967295
 80002ee:	f7ff ffc1 	bl	8000274 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SysTick_Config+0x40>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SysTick_Config+0x40>)
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e010 	.word	0xe000e010

0800030c <LCD_PN532_CreateRunInfoString>:

uint32_t jedec_test = 0;

extern volatile uint8_t SpiActive;

void LCD_PN532_CreateRunInfoString(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	strcpy( s_pn_info, s_pn_fchip);	//копирую первую заготовку в пустую строку
 8000310:	4912      	ldr	r1, [pc, #72]	; (800035c <LCD_PN532_CreateRunInfoString+0x50>)
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000314:	f005 fc49 	bl	8005baa <strcpy>
	strcat(s_pn_info, s_pn_nchip);	//копирую в заготовку пробельную строку
 8000318:	4912      	ldr	r1, [pc, #72]	; (8000364 <LCD_PN532_CreateRunInfoString+0x58>)
 800031a:	4811      	ldr	r0, [pc, #68]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800031c:	f005 fc36 	bl	8005b8c <strcat>
	strcat(s_pn_info,s_space );
 8000320:	4911      	ldr	r1, [pc, #68]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000324:	f005 fc32 	bl	8005b8c <strcat>
	strcat(s_pn_info,s_pn_wfchip );
 8000328:	4910      	ldr	r1, [pc, #64]	; (800036c <LCD_PN532_CreateRunInfoString+0x60>)
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800032c:	f005 fc2e 	bl	8005b8c <strcat>
	strcat(s_pn_info, s_pn_fw1nchip);
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <LCD_PN532_CreateRunInfoString+0x64>)
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000334:	f005 fc2a 	bl	8005b8c <strcat>
	strcat(s_pn_info,s_pn_fw2nchip );
 8000338:	490e      	ldr	r1, [pc, #56]	; (8000374 <LCD_PN532_CreateRunInfoString+0x68>)
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800033c:	f005 fc26 	bl	8005b8c <strcat>
	strcat(s_pn_info,s_space );
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000344:	f005 fc22 	bl	8005b8c <strcat>
	strcat(s_pn_info,s_pn_suppchip);
 8000348:	490b      	ldr	r1, [pc, #44]	; (8000378 <LCD_PN532_CreateRunInfoString+0x6c>)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800034c:	f005 fc1e 	bl	8005b8c <strcat>
	strcat(s_pn_info,s_pn_suchip);
 8000350:	490a      	ldr	r1, [pc, #40]	; (800037c <LCD_PN532_CreateRunInfoString+0x70>)
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000354:	f005 fc1a 	bl	8005b8c <strcat>

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200001ec 	.word	0x200001ec
 8000360:	200006c4 	.word	0x200006c4
 8000364:	200001dc 	.word	0x200001dc
 8000368:	200001d0 	.word	0x200001d0
 800036c:	200001fc 	.word	0x200001fc
 8000370:	200001e0 	.word	0x200001e0
 8000374:	200001e4 	.word	0x200001e4
 8000378:	2000020c 	.word	0x2000020c
 800037c:	200001e8 	.word	0x200001e8

08000380 <LCD_BAR_CreateRunInfoString>:


//Сборка сборка бегущей строки с версией ПО сканера штрих-кодов модуля для LCD
void LCD_BAR_CreateRunInfoString(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
//				s_bar_info++;
//			}
//		}
//	}

	char *ptr_bar_ver_info=strtok(ScanerVersion,"\r\n");
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LCD_BAR_CreateRunInfoString+0x40>)
 800038a:	f005 fc6d 	bl	8005c68 <strtok>
 800038e:	6078      	str	r0, [r7, #4]
	strcpy(s_bar_info,ptr_bar_ver_info);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 8000394:	f005 fc09 	bl	8005baa <strcpy>
	strcat(s_bar_info,s_space);
 8000398:	490b      	ldr	r1, [pc, #44]	; (80003c8 <LCD_BAR_CreateRunInfoString+0x48>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 800039c:	f005 fbf6 	bl	8005b8c <strcat>
	ptr_bar_ver_info=strtok(NULL,"\r\n");
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 80003a2:	2000      	movs	r0, #0
 80003a4:	f005 fc60 	bl	8005c68 <strtok>
 80003a8:	6078      	str	r0, [r7, #4]
	strcat(s_bar_info,ptr_bar_ver_info);
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 80003ae:	f005 fbed 	bl	8005b8c <strcat>

//	char *s_bar_info=strcat(s_bar_ver_info,s_bar_site_info);
//	strcpy(s_bar_info,s_bar_ver_info);


}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	08006e44 	.word	0x08006e44
 80003c0:	20000aac 	.word	0x20000aac
 80003c4:	20000744 	.word	0x20000744
 80003c8:	200001d0 	.word	0x200001d0

080003cc <PN532_Write_Data>:


uint8_t PN532_Write_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b092      	sub	sp, #72	; 0x48
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	72fb      	strb	r3, [r7, #11]
 80003da:	4613      	mov	r3, r2
 80003dc:	72bb      	strb	r3, [r7, #10]
//	uint8_t success=0;	// Flag to check if there was an error with the PN532
	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 80003de:	4a51      	ldr	r2, [pc, #324]	; (8000524 <PN532_Write_Data+0x158>)
 80003e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e8:	6018      	str	r0, [r3, #0]
 80003ea:	3304      	adds	r3, #4
 80003ec:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

	bool authenticated = FALSE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t blockBuffer[16];                  // Buffer to store block contents
	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 80003f4:	4a4c      	ldr	r2, [pc, #304]	; (8000528 <PN532_Write_Data+0x15c>)
 80003f6:	f107 0320 	add.w	r3, r7, #32
 80003fa:	6812      	ldr	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	8019      	strh	r1, [r3, #0]
 8000400:	3302      	adds	r3, #2
 8000402:	0c12      	lsrs	r2, r2, #16
 8000404:	701a      	strb	r2, [r3, #0]
	//uint8_t idx = 0;
	uint8_t numOfSector = 16;                 // Assume Mifare Classic 1K for now (16 4-block sectors)
 8000406:	2310      	movs	r3, #16
 8000408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t i=0;
 800040c:	2300      	movs	r3, #0
 800040e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    uint8_t RdWrDataBlock[16];


	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8000412:	7af9      	ldrb	r1, [r7, #11]
 8000414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2301      	movs	r3, #1
 800041c:	2200      	movs	r2, #0
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f003 f9dc 	bl	80037dc <PN532_mifareclassic_AuthenticateBlock>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d105      	bne.n	8000436 <PN532_Write_Data+0x6a>
	        {
	          return res_excep=1;	//выход из-за ошибки аутентификации блока
 800042a:	2301      	movs	r3, #1
 800042c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000430:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000434:	e072      	b.n	800051c <PN532_Write_Data+0x150>
	        }

	        res_excep=PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f003 fa43 	bl	80038c8 <PN532_mifareclassic_ReadDataBlock>
 8000442:	4603      	mov	r3, r0
 8000444:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	        if (!(PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock)))
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	f003 fa3a 	bl	80038c8 <PN532_mifareclassic_ReadDataBlock>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d105      	bne.n	8000466 <PN532_Write_Data+0x9a>
	        {
	          return res_excep=2;	//выход из-за ошибки чтения блока
 800045a:	2302      	movs	r3, #2
 800045c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000460:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000464:	e05a      	b.n	800051c <PN532_Write_Data+0x150>
	        }
	        else{

	    		  for(i=0;i<4;i++){
 8000466:	2300      	movs	r3, #0
 8000468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800046c:	e00f      	b.n	800048e <PN532_Write_Data+0xc2>
	    			  RdWrDataBlock[i]=data[i];
 800046e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	441a      	add	r2, r3
 8000476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	3340      	adds	r3, #64	; 0x40
 800047e:	443b      	add	r3, r7
 8000480:	f803 2c30 	strb.w	r2, [r3, #-48]
	    		  for(i=0;i<4;i++){
 8000484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000488:	3301      	adds	r3, #1
 800048a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800048e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000492:	2b03      	cmp	r3, #3
 8000494:	d9eb      	bls.n	800046e <PN532_Write_Data+0xa2>
	    		}



	    		  if(!(PN532_mifareclassic_WriteDataBlock(1,RdWrDataBlock))){
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	2001      	movs	r0, #1
 800049e:	f003 fa4f 	bl	8003940 <PN532_mifareclassic_WriteDataBlock>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d105      	bne.n	80004b4 <PN532_Write_Data+0xe8>
	    			  return res_excep=3;	//выход из-за ошибки запииси блока
 80004a8:	2303      	movs	r3, #3
 80004aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80004ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80004b2:	e033      	b.n	800051c <PN532_Write_Data+0x150>
	    		  }

	        // Step 3: Reset both keys to 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
	        memcpy(blockBuffer, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80004bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c0:	6018      	str	r0, [r3, #0]
 80004c2:	3304      	adds	r3, #4
 80004c4:	8019      	strh	r1, [r3, #0]
	        memcpy(blockBuffer + 6, blankAccessBits, sizeof(blankAccessBits));
 80004c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ca:	3306      	adds	r3, #6
 80004cc:	461a      	mov	r2, r3
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	8819      	ldrh	r1, [r3, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	8011      	strh	r1, [r2, #0]
 80004d8:	7093      	strb	r3, [r2, #2]
	        blockBuffer[9] = 0x69;
 80004da:	2369      	movs	r3, #105	; 0x69
 80004dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	        memcpy(blockBuffer + 10, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e4:	330a      	adds	r3, #10
 80004e6:	461a      	mov	r2, r3
 80004e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	6010      	str	r0, [r2, #0]
 80004f0:	889b      	ldrh	r3, [r3, #4]
 80004f2:	8093      	strh	r3, [r2, #4]

	         //Step 4: Write the trailer block
	        if (!(PN532_mifareclassic_WriteDataBlock(3, blockBuffer)))
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4619      	mov	r1, r3
 80004fa:	2003      	movs	r0, #3
 80004fc:	f003 fa20 	bl	8003940 <PN532_mifareclassic_WriteDataBlock>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d105      	bne.n	8000512 <PN532_Write_Data+0x146>
	        {
	          return res_excep=4;	//выход из-за ошибки записи ключа блока
 8000506:	2304      	movs	r3, #4
 8000508:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800050c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000510:	e004      	b.n	800051c <PN532_Write_Data+0x150>
	        }else return res_excep=0;
 8000512:	2300      	movs	r3, #0
 8000514:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000518:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c

	        }

}
 800051c:	4618      	mov	r0, r3
 800051e:	3740      	adds	r7, #64	; 0x40
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	08006e48 	.word	0x08006e48
 8000528:	08006e50 	.word	0x08006e50

0800052c <main>:





int main(void){
 800052c:	b580      	push	{r7, lr}
 800052e:	b090      	sub	sp, #64	; 0x40
 8000530:	af00      	add	r7, sp, #0

	g_sSum[SUM_STR_LEN + 1] = '\0';
 8000532:	4bb5      	ldr	r3, [pc, #724]	; (8000808 <main+0x2dc>)
 8000534:	2200      	movs	r2, #0
 8000536:	721a      	strb	r2, [r3, #8]


	rtc_cal rtc_time;
	RTC_INIT();
 8000538:	f003 fa8c 	bl	8003a54 <RTC_INIT>

	RCC_PLLCmd(DISABLE);
 800053c:	2000      	movs	r0, #0
 800053e:	f004 fb4f 	bl	8004be0 <RCC_PLLCmd>
		RCC_HSEConfig(RCC_HSE_ON);
 8000542:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000546:	f004 faff 	bl	8004b48 <RCC_HSEConfig>
		RCC_ClockSecuritySystemCmd(ENABLE);
 800054a:	2001      	movs	r0, #1
 800054c:	f004 fc66 	bl	8004e1c <RCC_ClockSecuritySystemCmd>
	    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000550:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000554:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000558:	f004 fb24 	bl	8004ba4 <RCC_PLLConfig>
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800055c:	2002      	movs	r0, #2
 800055e:	f004 fb4f 	bl	8004c00 <RCC_SYSCLKConfig>

		uint32_t tmpreg = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
		tmpreg=RCC->CFGR;
 8000566:	4ba9      	ldr	r3, [pc, #676]	; (800080c <main+0x2e0>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC->CFGR=tmpreg & 0xFFFFF0FF;
 800056c:	4aa7      	ldr	r2, [pc, #668]	; (800080c <main+0x2e0>)
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000574:	6053      	str	r3, [r2, #4]
		//RCC->CFGR=tmpreg|0x00000400;//HCLK / 2 - значение по умолчанию? (36МГц)
		RCC->CFGR=tmpreg|0x00000500;//HCLK / 4
 8000576:	4aa5      	ldr	r2, [pc, #660]	; (800080c <main+0x2e0>)
 8000578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800057e:	6053      	str	r3, [r2, #4]

		RCC->CFGR|=RCC_CFGR_USBPRE;	//предделитель для usb
 8000580:	4ba2      	ldr	r3, [pc, #648]	; (800080c <main+0x2e0>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4aa1      	ldr	r2, [pc, #644]	; (800080c <main+0x2e0>)
 8000586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058a:	6053      	str	r3, [r2, #4]

		//RCC->CFGR=tmpreg | 0x00000600;//HCLK / 8

	    RCC_PLLCmd(ENABLE);
 800058c:	2001      	movs	r0, #1
 800058e:	f004 fb27 	bl	8004be0 <RCC_PLLCmd>

		/* SysTick end of count event each 1 ms */
		RCC_GetClocksFreq ( &RCC_Clocks );
 8000592:	489f      	ldr	r0, [pc, #636]	; (8000810 <main+0x2e4>)
 8000594:	f004 fb50 	bl	8004c38 <RCC_GetClocksFreq>
		SysTick_Config ( RCC_Clocks.HCLK_Frequency / 1000 );
 8000598:	4b9d      	ldr	r3, [pc, #628]	; (8000810 <main+0x2e4>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a9d      	ldr	r2, [pc, #628]	; (8000814 <main+0x2e8>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe8f 	bl	80002c8 <SysTick_Config>

		btnpress=0;
 80005aa:	4b9b      	ldr	r3, [pc, #620]	; (8000818 <main+0x2ec>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

		RTC_SET_COUNTER(timer);
 80005b0:	4b9a      	ldr	r3, [pc, #616]	; (800081c <main+0x2f0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fadf 	bl	8003b78 <RTC_SET_COUNTER>


		 LCD_Init();
 80005ba:	f002 fcb5 	bl	8002f28 <LCD_Init>
		BTN_Init();
 80005be:	f001 fc0f 	bl	8001de0 <BTN_Init>
		u8_btnstate=GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN );
 80005c2:	2101      	movs	r1, #1
 80005c4:	4896      	ldr	r0, [pc, #600]	; (8000820 <main+0x2f4>)
 80005c6:	f004 f915 	bl	80047f4 <GPIO_ReadInputDataBit>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b95      	ldr	r3, [pc, #596]	; (8000824 <main+0x2f8>)
 80005d0:	701a      	strb	r2, [r3, #0]
		previousState=u8_btnstate;
 80005d2:	4b94      	ldr	r3, [pc, #592]	; (8000824 <main+0x2f8>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b94      	ldr	r3, [pc, #592]	; (8000828 <main+0x2fc>)
 80005d8:	701a      	strb	r2, [r3, #0]
		 LED_Init();
 80005da:	f001 fbe1 	bl	8001da0 <LED_Init>

		 spi_gpio_init();
 80005de:	f002 f88d 	bl	80026fc <spi_gpio_init>

		   Usart2Init();
 80005e2:	f004 ffc7 	bl	8005574 <Usart2Init>
			SCAN_UsartInit();
 80005e6:	f005 f845 	bl	8005674 <SCAN_UsartInit>
			PN532_SPIInit();
 80005ea:	f003 fe11 	bl	8004210 <PN532_SPIInit>
	//		SPI_FLASH_INIT();
	//		jedec_test = spiFlash_readJEDECDesc();



			nfc_cntcomand=0;
 80005ee:	4b8f      	ldr	r3, [pc, #572]	; (800082c <main+0x300>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]


			statusDevice=ST_DEV_ALL_ERR;
 80005f4:	4b8e      	ldr	r3, [pc, #568]	; (8000830 <main+0x304>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]

				uint32_t buttonTick = GetTickCount();
 80005fa:	f001 fdcd 	bl	8002198 <GetTickCount>
 80005fe:	62b8      	str	r0, [r7, #40]	; 0x28
				uint32_t ledTick1 = GetTickCount();
 8000600:	f001 fdca 	bl	8002198 <GetTickCount>
 8000604:	6278      	str	r0, [r7, #36]	; 0x24
				uint32_t ledTick2 = ledTick1;
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	623b      	str	r3, [r7, #32]

				uint32_t versiondata;
				uint32_t st;


				Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
 800060a:	488a      	ldr	r0, [pc, #552]	; (8000834 <main+0x308>)
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	4619      	mov	r1, r3
 8000614:	4887      	ldr	r0, [pc, #540]	; (8000834 <main+0x308>)
 8000616:	f005 f805 	bl	8005624 <Usart2_SendData>
				Usart2_SendData(s_pc_scanner,strlen(s_pc_scanner));
 800061a:	4887      	ldr	r0, [pc, #540]	; (8000838 <main+0x30c>)
 800061c:	f7ff fd96 	bl	800014c <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	4619      	mov	r1, r3
 8000624:	4884      	ldr	r0, [pc, #528]	; (8000838 <main+0x30c>)
 8000626:	f004 fffd 	bl	8005624 <Usart2_SendData>
				Usart2_SendData(s_pc_test,strlen(s_pc_test));
 800062a:	4884      	ldr	r0, [pc, #528]	; (800083c <main+0x310>)
 800062c:	f7ff fd8e 	bl	800014c <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	4881      	ldr	r0, [pc, #516]	; (800083c <main+0x310>)
 8000636:	f004 fff5 	bl	8005624 <Usart2_SendData>


			LCD_RunStringDevInfo ( s_lcd_hello,s_lcd_scanner,RUN_STR_DELAY_TST);
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4980      	ldr	r1, [pc, #512]	; (8000840 <main+0x314>)
 800063e:	4881      	ldr	r0, [pc, #516]	; (8000844 <main+0x318>)
 8000640:	f002 fa34 	bl	8002aac <LCD_RunStringDevInfo>


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000644:	bf00      	nop
 8000646:	4b80      	ldr	r3, [pc, #512]	; (8000848 <main+0x31c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d006      	beq.n	800065e <main+0x132>
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	487e      	ldr	r0, [pc, #504]	; (800084c <main+0x320>)
 8000654:	f004 fcdc 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f3      	bne.n	8000646 <main+0x11a>
				SpiActive = 1;
 800065e:	4b7a      	ldr	r3, [pc, #488]	; (8000848 <main+0x31c>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
			b_wakeup=PN532_WakeUp();
 8000664:	f002 fcc0 	bl	8002fe8 <PN532_WakeUp>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b78      	ldr	r3, [pc, #480]	; (8000850 <main+0x324>)
 800066e:	701a      	strb	r2, [r3, #0]
			b_samconfig=PN532_SAMConfig();
 8000670:	f002 fd5e 	bl	8003130 <PN532_SAMConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b76      	ldr	r3, [pc, #472]	; (8000854 <main+0x328>)
 800067a:	701a      	strb	r2, [r3, #0]

			versiondata = PN532_getFirmwareVersion();//Получениe версии ПО PN532
 800067c:	f002 fd84 	bl	8003188 <PN532_getFirmwareVersion>
 8000680:	61f8      	str	r0, [r7, #28]

				if(versiondata){
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d013      	beq.n	80006b0 <main+0x184>
					statusDevice=statusDevice|ST_DEV_NFC_NOERR;//установка флага успешного теста NFC
 8000688:	4b69      	ldr	r3, [pc, #420]	; (8000830 <main+0x304>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b67      	ldr	r3, [pc, #412]	; (8000830 <main+0x304>)
 8000694:	701a      	strb	r2, [r3, #0]
					PN532_FirmWareVersion2String (versiondata);
 8000696:	69f8      	ldr	r0, [r7, #28]
 8000698:	f001 fd88 	bl	80021ac <PN532_FirmWareVersion2String>
					b_rertyes=PN532_setPassiveActivationRetries(0xFF);
 800069c:	20ff      	movs	r0, #255	; 0xff
 800069e:	f002 fcb9 	bl	8003014 <PN532_setPassiveActivationRetries>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <main+0x32c>)
 80006a8:	701a      	strb	r2, [r3, #0]
					b_discannfc=0;
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <main+0x330>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				}
				 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};
 80006b0:	bf00      	nop
 80006b2:	2102      	movs	r1, #2
 80006b4:	4865      	ldr	r0, [pc, #404]	; (800084c <main+0x320>)
 80006b6:	f004 fcab 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f8      	beq.n	80006b2 <main+0x186>
				SpiActive = 0;
 80006c0:	4b61      	ldr	r3, [pc, #388]	; (8000848 <main+0x31c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]




				while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 80006c6:	bf00      	nop
 80006c8:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <main+0x31c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <main+0x1b4>
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	485d      	ldr	r0, [pc, #372]	; (800084c <main+0x320>)
 80006d6:	f004 fc9b 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f3      	bne.n	80006c8 <main+0x19c>
				SPI_FLASH_CONFIG();
 80006e0:	f003 fe9c 	bl	800441c <SPI_FLASH_CONFIG>
				jedec_test = spiFlash_readJEDECDesc();
 80006e4:	f003 fef0 	bl	80044c8 <spiFlash_readJEDECDesc>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <main+0x334>)
 80006ec:	6013      	str	r3, [r2, #0]



				SpiActive = 0;
 80006ee:	4b56      	ldr	r3, [pc, #344]	; (8000848 <main+0x31c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]





			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 80006f4:	bf00      	nop
 80006f6:	4b54      	ldr	r3, [pc, #336]	; (8000848 <main+0x31c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <main+0x1e2>
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	4852      	ldr	r0, [pc, #328]	; (800084c <main+0x320>)
 8000704:	f004 fc84 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f3      	bne.n	80006f6 <main+0x1ca>
				PN532_SPIInit();
 800070e:	f003 fd7f 	bl	8004210 <PN532_SPIInit>
							b_rertyes=PN532_setPassiveActivationRetries(0xFF);
							b_discannfc=0;
						}
*/

				 b_getversion=ENABLE;
 8000712:	4b54      	ldr	r3, [pc, #336]	; (8000864 <main+0x338>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
				 cntbyteversion=0;
 8000718:	4b53      	ldr	r3, [pc, #332]	; (8000868 <main+0x33c>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]

				 SCAN_SendCMD(cmd_Version,STR_CMD_LENGTH);//Запрос версии  ПО сканера штрих-кодов
 800071e:	210c      	movs	r1, #12
 8000720:	4852      	ldr	r0, [pc, #328]	; (800086c <main+0x340>)
 8000722:	f004 ffff 	bl	8005724 <SCAN_SendCMD>

				uint32_t tick1 = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
				uint32_t tick2 = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	63fb      	str	r3, [r7, #60]	; 0x3c

					tick1=GetTickCount();
 800072e:	f001 fd33 	bl	8002198 <GetTickCount>
 8000732:	61b8      	str	r0, [r7, #24]
					tick2=tick1;
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
				while(b_getversion || (tick2 - tick1 > 1000)){
 8000738:	e002      	b.n	8000740 <main+0x214>
						// b_getversion=ENABLE;
						tick2=GetTickCount();
 800073a:	f001 fd2d 	bl	8002198 <GetTickCount>
 800073e:	63f8      	str	r0, [r7, #60]	; 0x3c
				while(b_getversion || (tick2 - tick1 > 1000)){
 8000740:	4b48      	ldr	r3, [pc, #288]	; (8000864 <main+0x338>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f8      	bne.n	800073a <main+0x20e>
 8000748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000752:	d8f2      	bhi.n	800073a <main+0x20e>
					}

					if(!b_getversion){//Получена версия сканера штрих-кодов
 8000754:	4b43      	ldr	r3, [pc, #268]	; (8000864 <main+0x338>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d106      	bne.n	800076a <main+0x23e>
						statusDevice=statusDevice|ST_DEV_BAR_NOERR;//установка флага успешного теста сканера штрих-кодов
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <main+0x304>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <main+0x304>)
 8000768:	701a      	strb	r2, [r3, #0]
					}



switch(statusDevice){
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <main+0x304>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b11      	cmp	r3, #17
 8000770:	f200 8166 	bhi.w	8000a40 <main+0x514>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <main+0x250>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	080007c5 	.word	0x080007c5
 8000780:	08000881 	.word	0x08000881
 8000784:	08000a41 	.word	0x08000a41
 8000788:	08000a41 	.word	0x08000a41
 800078c:	08000a41 	.word	0x08000a41
 8000790:	08000a41 	.word	0x08000a41
 8000794:	08000a41 	.word	0x08000a41
 8000798:	08000a41 	.word	0x08000a41
 800079c:	08000a41 	.word	0x08000a41
 80007a0:	08000a41 	.word	0x08000a41
 80007a4:	08000a41 	.word	0x08000a41
 80007a8:	08000a41 	.word	0x08000a41
 80007ac:	08000a41 	.word	0x08000a41
 80007b0:	08000a41 	.word	0x08000a41
 80007b4:	08000a41 	.word	0x08000a41
 80007b8:	08000a41 	.word	0x08000a41
 80007bc:	0800091b 	.word	0x0800091b
 80007c0:	08000973 	.word	0x08000973
	case ST_DEV_ALL_ERR://Оба устройства не ответили

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <main+0x344>)
 80007c6:	f7ff fcc1 	bl	800014c <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4829      	ldr	r0, [pc, #164]	; (8000874 <main+0x348>)
 80007d0:	f004 ff28 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 80007d4:	4828      	ldr	r0, [pc, #160]	; (8000878 <main+0x34c>)
 80007d6:	f7ff fcb9 	bl	800014c <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	4619      	mov	r1, r3
 80007de:	4826      	ldr	r0, [pc, #152]	; (8000878 <main+0x34c>)
 80007e0:	f004 ff20 	bl	8005624 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 80007e4:	211c      	movs	r1, #28
 80007e6:	4825      	ldr	r0, [pc, #148]	; (800087c <main+0x350>)
 80007e8:	f004 ff1c 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 80007ec:	4822      	ldr	r0, [pc, #136]	; (8000878 <main+0x34c>)
 80007ee:	f7ff fcad 	bl	800014c <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4820      	ldr	r0, [pc, #128]	; (8000878 <main+0x34c>)
 80007f8:	f004 ff14 	bl	8005624 <Usart2_SendData>

		LCD_RunStringDevInfo ( s_lcd_bar_err,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 80007fc:	22c8      	movs	r2, #200	; 0xc8
 80007fe:	491f      	ldr	r1, [pc, #124]	; (800087c <main+0x350>)
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x348>)
 8000802:	f002 f953 	bl	8002aac <LCD_RunStringDevInfo>

	break;
 8000806:	e11b      	b.n	8000a40 <main+0x514>
 8000808:	20000498 	.word	0x20000498
 800080c:	40021000 	.word	0x40021000
 8000810:	200004a8 	.word	0x200004a8
 8000814:	10624dd3 	.word	0x10624dd3
 8000818:	2000057b 	.word	0x2000057b
 800081c:	20000338 	.word	0x20000338
 8000820:	40010c00 	.word	0x40010c00
 8000824:	200006b5 	.word	0x200006b5
 8000828:	200006b4 	.word	0x200006b4
 800082c:	20000689 	.word	0x20000689
 8000830:	200007c4 	.word	0x200007c4
 8000834:	200000e8 	.word	0x200000e8
 8000838:	200000f4 	.word	0x200000f4
 800083c:	20000134 	.word	0x20000134
 8000840:	20000040 	.word	0x20000040
 8000844:	20000028 	.word	0x20000028
 8000848:	20000a8e 	.word	0x20000a8e
 800084c:	40003800 	.word	0x40003800
 8000850:	2000068a 	.word	0x2000068a
 8000854:	2000068b 	.word	0x2000068b
 8000858:	2000068c 	.word	0x2000068c
 800085c:	2000068d 	.word	0x2000068d
 8000860:	20000860 	.word	0x20000860
 8000864:	2000057c 	.word	0x2000057c
 8000868:	20000aaa 	.word	0x20000aaa
 800086c:	20000000 	.word	0x20000000
 8000870:	2000014c 	.word	0x2000014c
 8000874:	2000008c 	.word	0x2000008c
 8000878:	20000168 	.word	0x20000168
 800087c:	20000070 	.word	0x20000070

	case ST_DEV_NFC_NOERR://Ответил только NFC

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000880:	48b8      	ldr	r0, [pc, #736]	; (8000b64 <main+0x638>)
 8000882:	f7ff fc63 	bl	800014c <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	4619      	mov	r1, r3
 800088a:	48b7      	ldr	r0, [pc, #732]	; (8000b68 <main+0x63c>)
 800088c:	f004 feca 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000890:	48b6      	ldr	r0, [pc, #728]	; (8000b6c <main+0x640>)
 8000892:	f7ff fc5b 	bl	800014c <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	4619      	mov	r1, r3
 800089a:	48b4      	ldr	r0, [pc, #720]	; (8000b6c <main+0x640>)
 800089c:	f004 fec2 	bl	8005624 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 80008a0:	48b3      	ldr	r0, [pc, #716]	; (8000b70 <main+0x644>)
 80008a2:	f7ff fc53 	bl	800014c <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4619      	mov	r1, r3
 80008aa:	48b1      	ldr	r0, [pc, #708]	; (8000b70 <main+0x644>)
 80008ac:	f004 feba 	bl	8005624 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 80008b0:	2102      	movs	r1, #2
 80008b2:	48b0      	ldr	r0, [pc, #704]	; (8000b74 <main+0x648>)
 80008b4:	f004 feb6 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80008b8:	2102      	movs	r1, #2
 80008ba:	48af      	ldr	r0, [pc, #700]	; (8000b78 <main+0x64c>)
 80008bc:	f004 feb2 	bl	8005624 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 80008c0:	48ae      	ldr	r0, [pc, #696]	; (8000b7c <main+0x650>)
 80008c2:	f7ff fc43 	bl	800014c <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4619      	mov	r1, r3
 80008ca:	48ac      	ldr	r0, [pc, #688]	; (8000b7c <main+0x650>)
 80008cc:	f004 feaa 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 80008d0:	2103      	movs	r1, #3
 80008d2:	48ab      	ldr	r0, [pc, #684]	; (8000b80 <main+0x654>)
 80008d4:	f004 fea6 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 80008d8:	2300      	movs	r3, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	48a9      	ldr	r0, [pc, #676]	; (8000b84 <main+0x658>)
 80008de:	f004 fea1 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 80008e2:	2103      	movs	r1, #3
 80008e4:	48a8      	ldr	r0, [pc, #672]	; (8000b88 <main+0x65c>)
 80008e6:	f004 fe9d 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80008ea:	2102      	movs	r1, #2
 80008ec:	48a2      	ldr	r0, [pc, #648]	; (8000b78 <main+0x64c>)
 80008ee:	f004 fe99 	bl	8005624 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 80008f2:	210a      	movs	r1, #10
 80008f4:	48a5      	ldr	r0, [pc, #660]	; (8000b8c <main+0x660>)
 80008f6:	f004 fe95 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 80008fa:	2102      	movs	r1, #2
 80008fc:	48a4      	ldr	r0, [pc, #656]	; (8000b90 <main+0x664>)
 80008fe:	f004 fe91 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000902:	2102      	movs	r1, #2
 8000904:	489c      	ldr	r0, [pc, #624]	; (8000b78 <main+0x64c>)
 8000906:	f004 fe8d 	bl	8005624 <Usart2_SendData>


		LCD_PN532_CreateRunInfoString();
 800090a:	f7ff fcff 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_lcd_bar_err,s_pn_info,RUN_STR_DELAY_TST);
 800090e:	22c8      	movs	r2, #200	; 0xc8
 8000910:	49a0      	ldr	r1, [pc, #640]	; (8000b94 <main+0x668>)
 8000912:	4895      	ldr	r0, [pc, #596]	; (8000b68 <main+0x63c>)
 8000914:	f002 f8ca 	bl	8002aac <LCD_RunStringDevInfo>

	break;
 8000918:	e092      	b.n	8000a40 <main+0x514>

	case ST_DEV_BAR_NOERR://Ответил только сканер штрих-кодов

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 800091a:	4892      	ldr	r0, [pc, #584]	; (8000b64 <main+0x638>)
 800091c:	f7ff fc16 	bl	800014c <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	4619      	mov	r1, r3
 8000924:	488f      	ldr	r0, [pc, #572]	; (8000b64 <main+0x638>)
 8000926:	f004 fe7d 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 800092a:	489b      	ldr	r0, [pc, #620]	; (8000b98 <main+0x66c>)
 800092c:	f7ff fc0e 	bl	800014c <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	4619      	mov	r1, r3
 8000934:	4898      	ldr	r0, [pc, #608]	; (8000b98 <main+0x66c>)
 8000936:	f004 fe75 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 800093a:	488c      	ldr	r0, [pc, #560]	; (8000b6c <main+0x640>)
 800093c:	f7ff fc06 	bl	800014c <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	4619      	mov	r1, r3
 8000944:	4889      	ldr	r0, [pc, #548]	; (8000b6c <main+0x640>)
 8000946:	f004 fe6d 	bl	8005624 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 800094a:	211c      	movs	r1, #28
 800094c:	4893      	ldr	r0, [pc, #588]	; (8000b9c <main+0x670>)
 800094e:	f004 fe69 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000952:	4886      	ldr	r0, [pc, #536]	; (8000b6c <main+0x640>)
 8000954:	f7ff fbfa 	bl	800014c <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	4619      	mov	r1, r3
 800095c:	4883      	ldr	r0, [pc, #524]	; (8000b6c <main+0x640>)
 800095e:	f004 fe61 	bl	8005624 <Usart2_SendData>

		LCD_BAR_CreateRunInfoString();
 8000962:	f7ff fd0d 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000966:	22c8      	movs	r2, #200	; 0xc8
 8000968:	498c      	ldr	r1, [pc, #560]	; (8000b9c <main+0x670>)
 800096a:	488d      	ldr	r0, [pc, #564]	; (8000ba0 <main+0x674>)
 800096c:	f002 f89e 	bl	8002aac <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

	break;
 8000970:	e066      	b.n	8000a40 <main+0x514>

	case ST_DEV_ALL_NOERR://Оба устройства ответили

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000972:	487c      	ldr	r0, [pc, #496]	; (8000b64 <main+0x638>)
 8000974:	f7ff fbea 	bl	800014c <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	4619      	mov	r1, r3
 800097c:	4879      	ldr	r0, [pc, #484]	; (8000b64 <main+0x638>)
 800097e:	f004 fe51 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000982:	4885      	ldr	r0, [pc, #532]	; (8000b98 <main+0x66c>)
 8000984:	f7ff fbe2 	bl	800014c <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	4619      	mov	r1, r3
 800098c:	4882      	ldr	r0, [pc, #520]	; (8000b98 <main+0x66c>)
 800098e:	f004 fe49 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000992:	4876      	ldr	r0, [pc, #472]	; (8000b6c <main+0x640>)
 8000994:	f7ff fbda 	bl	800014c <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	4619      	mov	r1, r3
 800099c:	4873      	ldr	r0, [pc, #460]	; (8000b6c <main+0x640>)
 800099e:	f004 fe41 	bl	8005624 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 80009a2:	4873      	ldr	r0, [pc, #460]	; (8000b70 <main+0x644>)
 80009a4:	f7ff fbd2 	bl	800014c <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4619      	mov	r1, r3
 80009ac:	4870      	ldr	r0, [pc, #448]	; (8000b70 <main+0x644>)
 80009ae:	f004 fe39 	bl	8005624 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 80009b2:	2102      	movs	r1, #2
 80009b4:	486f      	ldr	r0, [pc, #444]	; (8000b74 <main+0x648>)
 80009b6:	f004 fe35 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009ba:	2102      	movs	r1, #2
 80009bc:	486e      	ldr	r0, [pc, #440]	; (8000b78 <main+0x64c>)
 80009be:	f004 fe31 	bl	8005624 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 80009c2:	486e      	ldr	r0, [pc, #440]	; (8000b7c <main+0x650>)
 80009c4:	f7ff fbc2 	bl	800014c <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4619      	mov	r1, r3
 80009cc:	486b      	ldr	r0, [pc, #428]	; (8000b7c <main+0x650>)
 80009ce:	f004 fe29 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 80009d2:	2103      	movs	r1, #3
 80009d4:	486a      	ldr	r0, [pc, #424]	; (8000b80 <main+0x654>)
 80009d6:	f004 fe25 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 80009da:	2300      	movs	r3, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4869      	ldr	r0, [pc, #420]	; (8000b84 <main+0x658>)
 80009e0:	f004 fe20 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 80009e4:	2103      	movs	r1, #3
 80009e6:	4868      	ldr	r0, [pc, #416]	; (8000b88 <main+0x65c>)
 80009e8:	f004 fe1c 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009ec:	2102      	movs	r1, #2
 80009ee:	4862      	ldr	r0, [pc, #392]	; (8000b78 <main+0x64c>)
 80009f0:	f004 fe18 	bl	8005624 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 80009f4:	210a      	movs	r1, #10
 80009f6:	4865      	ldr	r0, [pc, #404]	; (8000b8c <main+0x660>)
 80009f8:	f004 fe14 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 80009fc:	2102      	movs	r1, #2
 80009fe:	4864      	ldr	r0, [pc, #400]	; (8000b90 <main+0x664>)
 8000a00:	f004 fe10 	bl	8005624 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000a04:	2102      	movs	r1, #2
 8000a06:	485c      	ldr	r0, [pc, #368]	; (8000b78 <main+0x64c>)
 8000a08:	f004 fe0c 	bl	8005624 <Usart2_SendData>


		LCD_BAR_CreateRunInfoString();
 8000a0c:	f7ff fcb8 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_PN532_CreateRunInfoString();
 8000a10:	f7ff fc7c 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_pn_info,RUN_STR_DELAY_TST);
 8000a14:	22c8      	movs	r2, #200	; 0xc8
 8000a16:	495f      	ldr	r1, [pc, #380]	; (8000b94 <main+0x668>)
 8000a18:	4861      	ldr	r0, [pc, #388]	; (8000ba0 <main+0x674>)
 8000a1a:	f002 f847 	bl	8002aac <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

		LCD_SetCursor ( LCD_CURSOR_1STR );
 8000a1e:	2080      	movs	r0, #128	; 0x80
 8000a20:	f001 ff76 	bl	8002910 <LCD_SetCursor>
		LCD_WriteString (s_lcd_scanner_rdy );
 8000a24:	485f      	ldr	r0, [pc, #380]	; (8000ba4 <main+0x678>)
 8000a26:	f002 f823 	bl	8002a70 <LCD_WriteString>

		LCD_SetCursor ( LCD_CURSOR_2STR );
 8000a2a:	20c0      	movs	r0, #192	; 0xc0
 8000a2c:	f001 ff70 	bl	8002910 <LCD_SetCursor>
		LCD_WriteString (s_lcd_ready );
 8000a30:	485d      	ldr	r0, [pc, #372]	; (8000ba8 <main+0x67c>)
 8000a32:	f002 f81d 	bl	8002a70 <LCD_WriteString>

		Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000a36:	2121      	movs	r1, #33	; 0x21
 8000a38:	485c      	ldr	r0, [pc, #368]	; (8000bac <main+0x680>)
 8000a3a:	f004 fdf3 	bl	8005624 <Usart2_SendData>


	break;
 8000a3e:	bf00      	nop

}

Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000a40:	2121      	movs	r1, #33	; 0x21
 8000a42:	485a      	ldr	r0, [pc, #360]	; (8000bac <main+0x680>)
 8000a44:	f004 fdee 	bl	8005624 <Usart2_SendData>


Timer1Init();
 8000a48:	f001 fa2e 	bl	8001ea8 <Timer1Init>
EnableTimer1Interrupt();
 8000a4c:	f001 fa66 	bl	8001f1c <EnableTimer1Interrupt>

		char cSymbol;

		char date_Symbol;

		if(timer1flag==1){
 8000a50:	4b57      	ldr	r3, [pc, #348]	; (8000bb0 <main+0x684>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d110      	bne.n	8000a7a <main+0x54e>
			ValueInterrupToStr();
 8000a58:	f001 fc5a 	bl	8002310 <ValueInterrupToStr>
			Usart2_SendData(b_bounce_value,sizeof(b_bounce_value));
 8000a5c:	2106      	movs	r1, #6
 8000a5e:	4855      	ldr	r0, [pc, #340]	; (8000bb4 <main+0x688>)
 8000a60:	f004 fde0 	bl	8005624 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8000a64:	4841      	ldr	r0, [pc, #260]	; (8000b6c <main+0x640>)
 8000a66:	f7ff fb71 	bl	800014c <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	483f      	ldr	r0, [pc, #252]	; (8000b6c <main+0x640>)
 8000a70:	f004 fdd8 	bl	8005624 <Usart2_SendData>
			timer1flag=0;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <main+0x684>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
		}



		//если не режим записи метки NFC
		if(u8_wrnfcstatus==0){
 8000a7a:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <main+0x68c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f041 8042 	bne.w	8001b08 <main+0x15dc>

				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000a84:	e01b      	b.n	8000abe <main+0x592>
					g_sBuffer [ g_iBufferLength++ ] = cSymbol;
 8000a86:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <main+0x690>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	494b      	ldr	r1, [pc, #300]	; (8000bbc <main+0x690>)
 8000a8e:	600a      	str	r2, [r1, #0]
 8000a90:	78f9      	ldrb	r1, [r7, #3]
 8000a92:	4a4b      	ldr	r2, [pc, #300]	; (8000bc0 <main+0x694>)
 8000a94:	54d1      	strb	r1, [r2, r3]
					g_sBuffer [ g_iBufferLength ] = '\0';
 8000a96:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <main+0x690>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <main+0x694>)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	54d1      	strb	r1, [r2, r3]
					if ( g_iBufferLength >= BUFFER_LEN ) {
 8000aa0:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <main+0x690>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa6:	dd0a      	ble.n	8000abe <main+0x592>
						memmove ( g_sBuffer, g_sBuffer + 1, BUFFER_LEN );
 8000aa8:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <main+0x698>)
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	4619      	mov	r1, r3
 8000aae:	4844      	ldr	r0, [pc, #272]	; (8000bc0 <main+0x694>)
 8000ab0:	f005 f84a 	bl	8005b48 <memmove>
						g_iBufferLength--;
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <main+0x690>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <main+0x690>)
 8000abc:	6013      	str	r3, [r2, #0]
				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000abe:	1cfb      	adds	r3, r7, #3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 feaf 	bl	8005824 <FIFO_GetNextData>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d0dc      	beq.n	8000a86 <main+0x55a>
					}
				}
		//	прием данных с телефона
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000acc:	e02b      	b.n	8000b26 <main+0x5fa>

				//	Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
				//	Usart2_SendData(s_newline,strlen(s_newline));


					date_sBuffer [ date_iBufferLength++ ] = date_Symbol;
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <main+0x69c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	493c      	ldr	r1, [pc, #240]	; (8000bc8 <main+0x69c>)
 8000ad6:	600a      	str	r2, [r1, #0]
 8000ad8:	78b9      	ldrb	r1, [r7, #2]
 8000ada:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <main+0x6a0>)
 8000adc:	54d1      	strb	r1, [r2, r3]
					date_sBuffer [ date_iBufferLength] = '\0';
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <main+0x69c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <main+0x6a0>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	54d1      	strb	r1, [r2, r3]
					if( date_iBufferLength >= BUFFER_LEN){
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <main+0x69c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b7f      	cmp	r3, #127	; 0x7f
 8000aee:	dd0a      	ble.n	8000b06 <main+0x5da>
						memmove(date_sBuffer, date_sBuffer + 1, BUFFER_LEN);
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <main+0x6a4>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	4619      	mov	r1, r3
 8000af6:	4835      	ldr	r0, [pc, #212]	; (8000bcc <main+0x6a0>)
 8000af8:	f005 f826 	bl	8005b48 <memmove>
						date_iBufferLength--;
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <main+0x69c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a31      	ldr	r2, [pc, #196]	; (8000bc8 <main+0x69c>)
 8000b04:	6013      	str	r3, [r2, #0]
					}
						Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 8000b06:	4831      	ldr	r0, [pc, #196]	; (8000bcc <main+0x6a0>)
 8000b08:	f7ff fb20 	bl	800014c <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	; (8000bcc <main+0x6a0>)
 8000b12:	f004 fd87 	bl	8005624 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8000b16:	4815      	ldr	r0, [pc, #84]	; (8000b6c <main+0x640>)
 8000b18:	f7ff fb18 	bl	800014c <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <main+0x640>)
 8000b22:	f004 fd7f 	bl	8005624 <Usart2_SendData>
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000b26:	1cbb      	adds	r3, r7, #2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 fea9 	bl	8005880 <Date_GetNextDate>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d0cc      	beq.n	8000ace <main+0x5a2>
		*/



		//	декодирование данных с телефона
				if(strstr(date_sBuffer, "\r\n") != NULL){
 8000b34:	4927      	ldr	r1, [pc, #156]	; (8000bd4 <main+0x6a8>)
 8000b36:	4825      	ldr	r0, [pc, #148]	; (8000bcc <main+0x6a0>)
 8000b38:	f005 f87f 	bl	8005c3a <strstr>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 82cb 	beq.w	80010da <main+0xbae>

				//	Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
				//	Usart2_SendData(s_newline,strlen(s_newline));

					char *pstr = date_sBuffer;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <main+0x6a0>)
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38

					if( date_sBuffer[0] == CMD /*&& date_sBuffer[4] == CMD*//**pstr == CMD*/ /*&& *pstr+4 == CMD*/){
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <main+0x6a0>)
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <main+0x6ac>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f040 8274 	bne.w	800103e <main+0xb12>
						pstr++;
 8000b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b58:	3301      	adds	r3, #1
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38

						for(int i = 0; i < SIZE_CMD ; i++){
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b60:	e048      	b.n	8000bf4 <main+0x6c8>
 8000b62:	bf00      	nop
 8000b64:	2000014c 	.word	0x2000014c
 8000b68:	2000008c 	.word	0x2000008c
 8000b6c:	20000168 	.word	0x20000168
 8000b70:	200001ec 	.word	0x200001ec
 8000b74:	200001dc 	.word	0x200001dc
 8000b78:	200001d8 	.word	0x200001d8
 8000b7c:	200001fc 	.word	0x200001fc
 8000b80:	200001e0 	.word	0x200001e0
 8000b84:	200001d4 	.word	0x200001d4
 8000b88:	200001e4 	.word	0x200001e4
 8000b8c:	2000020c 	.word	0x2000020c
 8000b90:	200001e8 	.word	0x200001e8
 8000b94:	200006c4 	.word	0x200006c4
 8000b98:	20000aac 	.word	0x20000aac
 8000b9c:	20000070 	.word	0x20000070
 8000ba0:	20000744 	.word	0x20000744
 8000ba4:	20000034 	.word	0x20000034
 8000ba8:	20000064 	.word	0x20000064
 8000bac:	20000110 	.word	0x20000110
 8000bb0:	200006ba 	.word	0x200006ba
 8000bb4:	20000218 	.word	0x20000218
 8000bb8:	200006bb 	.word	0x200006bb
 8000bbc:	20000540 	.word	0x20000540
 8000bc0:	200004bc 	.word	0x200004bc
 8000bc4:	200004bd 	.word	0x200004bd
 8000bc8:	20000604 	.word	0x20000604
 8000bcc:	20000580 	.word	0x20000580
 8000bd0:	20000581 	.word	0x20000581
 8000bd4:	08006e44 	.word	0x08006e44
 8000bd8:	200003f6 	.word	0x200003f6
							test_buffer[i] = *pstr++;
 8000bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	63ba      	str	r2, [r7, #56]	; 0x38
 8000be2:	7819      	ldrb	r1, [r3, #0]
 8000be4:	4a5e      	ldr	r2, [pc, #376]	; (8000d60 <main+0x834>)
 8000be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be8:	4413      	add	r3, r2
 8000bea:	460a      	mov	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
						for(int i = 0; i < SIZE_CMD ; i++){
 8000bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8000bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	ddf0      	ble.n	8000bdc <main+0x6b0>

						}
						NUM_CMD = atoi(test_buffer);
 8000bfa:	4859      	ldr	r0, [pc, #356]	; (8000d60 <main+0x834>)
 8000bfc:	f004 ff58 	bl	8005ab0 <atoi>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a58      	ldr	r2, [pc, #352]	; (8000d64 <main+0x838>)
 8000c04:	6013      	str	r3, [r2, #0]
						if(NUM_CMD == 0){
 8000c06:	4b57      	ldr	r3, [pc, #348]	; (8000d64 <main+0x838>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10f      	bne.n	8000c2e <main+0x702>
							Usart2_SendData(android_wron_cmd_form,strlen(android_wron_cmd_form));
 8000c0e:	4856      	ldr	r0, [pc, #344]	; (8000d68 <main+0x83c>)
 8000c10:	f7ff fa9c 	bl	800014c <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	4853      	ldr	r0, [pc, #332]	; (8000d68 <main+0x83c>)
 8000c1a:	f004 fd03 	bl	8005624 <Usart2_SendData>
							Usart2_SendData(s_newline,strlen(s_newline));
 8000c1e:	4853      	ldr	r0, [pc, #332]	; (8000d6c <main+0x840>)
 8000c20:	f7ff fa94 	bl	800014c <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4619      	mov	r1, r3
 8000c28:	4850      	ldr	r0, [pc, #320]	; (8000d6c <main+0x840>)
 8000c2a:	f004 fcfb 	bl	8005624 <Usart2_SendData>
						}
						switch (NUM_CMD) {
 8000c2e:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <main+0x838>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2bcb      	cmp	r3, #203	; 0xcb
 8000c34:	f000 81e1 	beq.w	8000ffa <main+0xace>
 8000c38:	2bcb      	cmp	r3, #203	; 0xcb
 8000c3a:	f300 81ef 	bgt.w	800101c <main+0xaf0>
 8000c3e:	2bca      	cmp	r3, #202	; 0xca
 8000c40:	f000 81ca 	beq.w	8000fd8 <main+0xaac>
 8000c44:	2bca      	cmp	r3, #202	; 0xca
 8000c46:	f300 81e9 	bgt.w	800101c <main+0xaf0>
 8000c4a:	2bc9      	cmp	r3, #201	; 0xc9
 8000c4c:	f000 81b3 	beq.w	8000fb6 <main+0xa8a>
 8000c50:	2bc9      	cmp	r3, #201	; 0xc9
 8000c52:	f300 81e3 	bgt.w	800101c <main+0xaf0>
 8000c56:	2b67      	cmp	r3, #103	; 0x67
 8000c58:	f000 8202 	beq.w	8001060 <main+0xb34>
 8000c5c:	2b67      	cmp	r3, #103	; 0x67
 8000c5e:	f300 81dd 	bgt.w	800101c <main+0xaf0>
 8000c62:	2b65      	cmp	r3, #101	; 0x65
 8000c64:	d003      	beq.n	8000c6e <main+0x742>
 8000c66:	2b66      	cmp	r3, #102	; 0x66
 8000c68:	f000 808e 	beq.w	8000d88 <main+0x85c>
 8000c6c:	e1d6      	b.n	800101c <main+0xaf0>
							case 101:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000c6e:	483c      	ldr	r0, [pc, #240]	; (8000d60 <main+0x834>)
 8000c70:	f7ff fa6c 	bl	800014c <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4619      	mov	r1, r3
 8000c78:	4839      	ldr	r0, [pc, #228]	; (8000d60 <main+0x834>)
 8000c7a:	f004 fcd3 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000c7e:	483b      	ldr	r0, [pc, #236]	; (8000d6c <main+0x840>)
 8000c80:	f7ff fa64 	bl	800014c <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4838      	ldr	r0, [pc, #224]	; (8000d6c <main+0x840>)
 8000c8a:	f004 fccb 	bl	8005624 <Usart2_SendData>

								uint8_t date_result;

								date_result = convert_time_from_android(&rtc_time, date_sBuffer);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4937      	ldr	r1, [pc, #220]	; (8000d70 <main+0x844>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 f922 	bl	8003edc <convert_time_from_android>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	75fb      	strb	r3, [r7, #23]
								switch(date_result){
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	f200 81fe 	bhi.w	80010a0 <main+0xb74>
 8000ca4:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <main+0x780>)
 8000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000caa:	bf00      	nop
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000cf7 	.word	0x08000cf7
 8000cb4:	08000d19 	.word	0x08000d19
 8000cb8:	08000d3b 	.word	0x08000d3b
								case 0:
									tim = cal_to_timer(&rtc_time);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 f88e 	bl	8003de0 <cal_to_timer>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <main+0x848>)
 8000cc8:	6013      	str	r3, [r2, #0]
									RTC_SET_COUNTER(tim);
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <main+0x848>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 ff52 	bl	8003b78 <RTC_SET_COUNTER>
									Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 8000cd4:	4828      	ldr	r0, [pc, #160]	; (8000d78 <main+0x84c>)
 8000cd6:	f7ff fa39 	bl	800014c <strlen>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4826      	ldr	r0, [pc, #152]	; (8000d78 <main+0x84c>)
 8000ce0:	f004 fca0 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000ce4:	4821      	ldr	r0, [pc, #132]	; (8000d6c <main+0x840>)
 8000ce6:	f7ff fa31 	bl	800014c <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4619      	mov	r1, r3
 8000cee:	481f      	ldr	r0, [pc, #124]	; (8000d6c <main+0x840>)
 8000cf0:	f004 fc98 	bl	8005624 <Usart2_SendData>
									break;
 8000cf4:	e032      	b.n	8000d5c <main+0x830>
								case 1:
									Usart2_SendData(incorrect_rtc_year,strlen(incorrect_rtc_year));
 8000cf6:	4821      	ldr	r0, [pc, #132]	; (8000d7c <main+0x850>)
 8000cf8:	f7ff fa28 	bl	800014c <strlen>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481e      	ldr	r0, [pc, #120]	; (8000d7c <main+0x850>)
 8000d02:	f004 fc8f 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000d06:	4819      	ldr	r0, [pc, #100]	; (8000d6c <main+0x840>)
 8000d08:	f7ff fa20 	bl	800014c <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <main+0x840>)
 8000d12:	f004 fc87 	bl	8005624 <Usart2_SendData>
									break;
 8000d16:	e021      	b.n	8000d5c <main+0x830>
								case 2:
									Usart2_SendData(incorrect_rtc_mon,strlen(incorrect_rtc_mon));
 8000d18:	4819      	ldr	r0, [pc, #100]	; (8000d80 <main+0x854>)
 8000d1a:	f7ff fa17 	bl	800014c <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4619      	mov	r1, r3
 8000d22:	4817      	ldr	r0, [pc, #92]	; (8000d80 <main+0x854>)
 8000d24:	f004 fc7e 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <main+0x840>)
 8000d2a:	f7ff fa0f 	bl	800014c <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4619      	mov	r1, r3
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <main+0x840>)
 8000d34:	f004 fc76 	bl	8005624 <Usart2_SendData>
									break;
 8000d38:	e010      	b.n	8000d5c <main+0x830>
								case 3:
									Usart2_SendData(incorrect_rtc_day,strlen(incorrect_rtc_day));
 8000d3a:	4812      	ldr	r0, [pc, #72]	; (8000d84 <main+0x858>)
 8000d3c:	f7ff fa06 	bl	800014c <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4619      	mov	r1, r3
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <main+0x858>)
 8000d46:	f004 fc6d 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <main+0x840>)
 8000d4c:	f7ff f9fe 	bl	800014c <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <main+0x840>)
 8000d56:	f004 fc65 	bl	8005624 <Usart2_SendData>
									break;
 8000d5a:	bf00      	nop

								}
								break;
 8000d5c:	e1a0      	b.n	80010a0 <main+0xb74>
 8000d5e:	bf00      	nop
 8000d60:	20000608 	.word	0x20000608
 8000d64:	2000085c 	.word	0x2000085c
 8000d68:	2000035c 	.word	0x2000035c
 8000d6c:	20000168 	.word	0x20000168
 8000d70:	20000580 	.word	0x20000580
 8000d74:	20000858 	.word	0x20000858
 8000d78:	20000058 	.word	0x20000058
 8000d7c:	20000370 	.word	0x20000370
 8000d80:	20000380 	.word	0x20000380
 8000d84:	20000390 	.word	0x20000390
							case 102:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000d88:	48b6      	ldr	r0, [pc, #728]	; (8001064 <main+0xb38>)
 8000d8a:	f7ff f9df 	bl	800014c <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4619      	mov	r1, r3
 8000d92:	48b4      	ldr	r0, [pc, #720]	; (8001064 <main+0xb38>)
 8000d94:	f004 fc46 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000d98:	48b3      	ldr	r0, [pc, #716]	; (8001068 <main+0xb3c>)
 8000d9a:	f7ff f9d7 	bl	800014c <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4619      	mov	r1, r3
 8000da2:	48b1      	ldr	r0, [pc, #708]	; (8001068 <main+0xb3c>)
 8000da4:	f004 fc3e 	bl	8005624 <Usart2_SendData>

								timer = RTC_GET_COUNTER();
 8000da8:	f002 fed6 	bl	8003b58 <RTC_GET_COUNTER>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4aaf      	ldr	r2, [pc, #700]	; (800106c <main+0xb40>)
 8000db0:	6013      	str	r3, [r2, #0]
								timer_to_cal(timer, &rtc_time);
 8000db2:	4bae      	ldr	r3, [pc, #696]	; (800106c <main+0xb40>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1d3a      	adds	r2, r7, #4
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 ff26 	bl	8003c0c <timer_to_cal>
								tim = cal_to_timer(&rtc_time);
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 f80c 	bl	8003de0 <cal_to_timer>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4aa9      	ldr	r2, [pc, #676]	; (8001070 <main+0xb44>)
 8000dcc:	6013      	str	r3, [r2, #0]


								//*xxx*yyyy-MM-dd HH:mm:ss

								s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4aa8      	ldr	r2, [pc, #672]	; (8001074 <main+0xb48>)
 8000dd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd6:	1192      	asrs	r2, r2, #6
 8000dd8:	17db      	asrs	r3, r3, #31
 8000dda:	1ad2      	subs	r2, r2, r3
 8000ddc:	4ba6      	ldr	r3, [pc, #664]	; (8001078 <main+0xb4c>)
 8000dde:	fb83 1302 	smull	r1, r3, r3, r2
 8000de2:	1099      	asrs	r1, r3, #2
 8000de4:	17d3      	asrs	r3, r2, #31
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	460b      	mov	r3, r1
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	1ad1      	subs	r1, r2, r3
 8000df2:	b2cb      	uxtb	r3, r1
 8000df4:	3330      	adds	r3, #48	; 0x30
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4ba0      	ldr	r3, [pc, #640]	; (800107c <main+0xb50>)
 8000dfa:	701a      	strb	r2, [r3, #0]
								s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4aa0      	ldr	r2, [pc, #640]	; (8001080 <main+0xb54>)
 8000e00:	fb82 1203 	smull	r1, r2, r2, r3
 8000e04:	1152      	asrs	r2, r2, #5
 8000e06:	17db      	asrs	r3, r3, #31
 8000e08:	1ad2      	subs	r2, r2, r3
 8000e0a:	4b9b      	ldr	r3, [pc, #620]	; (8001078 <main+0xb4c>)
 8000e0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e10:	1099      	asrs	r1, r3, #2
 8000e12:	17d3      	asrs	r3, r2, #31
 8000e14:	1ac9      	subs	r1, r1, r3
 8000e16:	460b      	mov	r3, r1
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	1ad1      	subs	r1, r2, r3
 8000e20:	b2cb      	uxtb	r3, r1
 8000e22:	3330      	adds	r3, #48	; 0x30
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b95      	ldr	r3, [pc, #596]	; (800107c <main+0xb50>)
 8000e28:	705a      	strb	r2, [r3, #1]
								s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a92      	ldr	r2, [pc, #584]	; (8001078 <main+0xb4c>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1092      	asrs	r2, r2, #2
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad2      	subs	r2, r2, r3
 8000e38:	4b8f      	ldr	r3, [pc, #572]	; (8001078 <main+0xb4c>)
 8000e3a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e3e:	1099      	asrs	r1, r3, #2
 8000e40:	17d3      	asrs	r3, r2, #31
 8000e42:	1ac9      	subs	r1, r1, r3
 8000e44:	460b      	mov	r3, r1
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	1ad1      	subs	r1, r2, r3
 8000e4e:	b2cb      	uxtb	r3, r1
 8000e50:	3330      	adds	r3, #48	; 0x30
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b89      	ldr	r3, [pc, #548]	; (800107c <main+0xb50>)
 8000e56:	709a      	strb	r2, [r3, #2]
								s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4b87      	ldr	r3, [pc, #540]	; (8001078 <main+0xb4c>)
 8000e5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e60:	1099      	asrs	r1, r3, #2
 8000e62:	17d3      	asrs	r3, r2, #31
 8000e64:	1ac9      	subs	r1, r1, r3
 8000e66:	460b      	mov	r3, r1
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	1ad1      	subs	r1, r2, r3
 8000e70:	b2cb      	uxtb	r3, r1
 8000e72:	3330      	adds	r3, #48	; 0x30
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b81      	ldr	r3, [pc, #516]	; (800107c <main+0xb50>)
 8000e78:	70da      	strb	r2, [r3, #3]

								s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8000e7a:	7a3b      	ldrb	r3, [r7, #8]
 8000e7c:	4a81      	ldr	r2, [pc, #516]	; (8001084 <main+0xb58>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3330      	adds	r3, #48	; 0x30
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b7c      	ldr	r3, [pc, #496]	; (800107c <main+0xb50>)
 8000e8c:	715a      	strb	r2, [r3, #5]
								s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8000e8e:	7a3a      	ldrb	r2, [r7, #8]
 8000e90:	4b7c      	ldr	r3, [pc, #496]	; (8001084 <main+0xb58>)
 8000e92:	fba3 1302 	umull	r1, r3, r3, r2
 8000e96:	08d9      	lsrs	r1, r3, #3
 8000e98:	460b      	mov	r3, r1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3330      	adds	r3, #48	; 0x30
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b74      	ldr	r3, [pc, #464]	; (800107c <main+0xb50>)
 8000eaa:	719a      	strb	r2, [r3, #6]

								s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8000eac:	7a7b      	ldrb	r3, [r7, #9]
 8000eae:	4a75      	ldr	r2, [pc, #468]	; (8001084 <main+0xb58>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3330      	adds	r3, #48	; 0x30
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b6f      	ldr	r3, [pc, #444]	; (800107c <main+0xb50>)
 8000ebe:	721a      	strb	r2, [r3, #8]
								s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8000ec0:	7a7a      	ldrb	r2, [r7, #9]
 8000ec2:	4b70      	ldr	r3, [pc, #448]	; (8001084 <main+0xb58>)
 8000ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec8:	08d9      	lsrs	r1, r3, #3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3330      	adds	r3, #48	; 0x30
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b68      	ldr	r3, [pc, #416]	; (800107c <main+0xb50>)
 8000edc:	725a      	strb	r2, [r3, #9]

								s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8000ede:	7abb      	ldrb	r3, [r7, #10]
 8000ee0:	4a68      	ldr	r2, [pc, #416]	; (8001084 <main+0xb58>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	08db      	lsrs	r3, r3, #3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	3330      	adds	r3, #48	; 0x30
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b63      	ldr	r3, [pc, #396]	; (800107c <main+0xb50>)
 8000ef0:	72da      	strb	r2, [r3, #11]
								s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8000ef2:	7aba      	ldrb	r2, [r7, #10]
 8000ef4:	4b63      	ldr	r3, [pc, #396]	; (8001084 <main+0xb58>)
 8000ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8000efa:	08d9      	lsrs	r1, r3, #3
 8000efc:	460b      	mov	r3, r1
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3330      	adds	r3, #48	; 0x30
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b5b      	ldr	r3, [pc, #364]	; (800107c <main+0xb50>)
 8000f0e:	731a      	strb	r2, [r3, #12]

								s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	4a5c      	ldr	r2, [pc, #368]	; (8001084 <main+0xb58>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3330      	adds	r3, #48	; 0x30
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b56      	ldr	r3, [pc, #344]	; (800107c <main+0xb50>)
 8000f22:	739a      	strb	r2, [r3, #14]
								s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8000f24:	7afa      	ldrb	r2, [r7, #11]
 8000f26:	4b57      	ldr	r3, [pc, #348]	; (8001084 <main+0xb58>)
 8000f28:	fba3 1302 	umull	r1, r3, r3, r2
 8000f2c:	08d9      	lsrs	r1, r3, #3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	3330      	adds	r3, #48	; 0x30
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b4f      	ldr	r3, [pc, #316]	; (800107c <main+0xb50>)
 8000f40:	73da      	strb	r2, [r3, #15]

								s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8000f42:	7b3b      	ldrb	r3, [r7, #12]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <main+0xb58>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	3330      	adds	r3, #48	; 0x30
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b4a      	ldr	r3, [pc, #296]	; (800107c <main+0xb50>)
 8000f54:	745a      	strb	r2, [r3, #17]
								s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8000f56:	7b3a      	ldrb	r2, [r7, #12]
 8000f58:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <main+0xb58>)
 8000f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f5e:	08d9      	lsrs	r1, r3, #3
 8000f60:	460b      	mov	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3330      	adds	r3, #48	; 0x30
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b42      	ldr	r3, [pc, #264]	; (800107c <main+0xb50>)
 8000f72:	749a      	strb	r2, [r3, #18]

								Usart2_SendData(s_cal_data,strlen(s_cal_data));
 8000f74:	4841      	ldr	r0, [pc, #260]	; (800107c <main+0xb50>)
 8000f76:	f7ff f8e9 	bl	800014c <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	483f      	ldr	r0, [pc, #252]	; (800107c <main+0xb50>)
 8000f80:	f004 fb50 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000f84:	4838      	ldr	r0, [pc, #224]	; (8001068 <main+0xb3c>)
 8000f86:	f7ff f8e1 	bl	800014c <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4836      	ldr	r0, [pc, #216]	; (8001068 <main+0xb3c>)
 8000f90:	f004 fb48 	bl	8005624 <Usart2_SendData>


								Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 8000f94:	483c      	ldr	r0, [pc, #240]	; (8001088 <main+0xb5c>)
 8000f96:	f7ff f8d9 	bl	800014c <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	483a      	ldr	r0, [pc, #232]	; (8001088 <main+0xb5c>)
 8000fa0:	f004 fb40 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000fa4:	4830      	ldr	r0, [pc, #192]	; (8001068 <main+0xb3c>)
 8000fa6:	f7ff f8d1 	bl	800014c <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4619      	mov	r1, r3
 8000fae:	482e      	ldr	r0, [pc, #184]	; (8001068 <main+0xb3c>)
 8000fb0:	f004 fb38 	bl	8005624 <Usart2_SendData>
								break;
 8000fb4:	e075      	b.n	80010a2 <main+0xb76>
							case 103://отправка настроек устройства

								break;
							case 201://чтение последнего штрих-кода
								Usart2_SendData(android_last_barcode,strlen(android_last_barcode));
 8000fb6:	4835      	ldr	r0, [pc, #212]	; (800108c <main+0xb60>)
 8000fb8:	f7ff f8c8 	bl	800014c <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4832      	ldr	r0, [pc, #200]	; (800108c <main+0xb60>)
 8000fc2:	f004 fb2f 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000fc6:	4828      	ldr	r0, [pc, #160]	; (8001068 <main+0xb3c>)
 8000fc8:	f7ff f8c0 	bl	800014c <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4825      	ldr	r0, [pc, #148]	; (8001068 <main+0xb3c>)
 8000fd2:	f004 fb27 	bl	8005624 <Usart2_SendData>
								break;
 8000fd6:	e064      	b.n	80010a2 <main+0xb76>
							case 202://чтение последней NFC-метки
								Usart2_SendData(android_last_nfc,strlen(android_last_nfc));
 8000fd8:	482d      	ldr	r0, [pc, #180]	; (8001090 <main+0xb64>)
 8000fda:	f7ff f8b7 	bl	800014c <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	482b      	ldr	r0, [pc, #172]	; (8001090 <main+0xb64>)
 8000fe4:	f004 fb1e 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000fe8:	481f      	ldr	r0, [pc, #124]	; (8001068 <main+0xb3c>)
 8000fea:	f7ff f8af 	bl	800014c <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481d      	ldr	r0, [pc, #116]	; (8001068 <main+0xb3c>)
 8000ff4:	f004 fb16 	bl	8005624 <Usart2_SendData>
								break;
 8000ff8:	e053      	b.n	80010a2 <main+0xb76>
							case 203://чтение последних пяти записей
								Usart2_SendData(android_last_5records,strlen(android_last_5records));
 8000ffa:	4826      	ldr	r0, [pc, #152]	; (8001094 <main+0xb68>)
 8000ffc:	f7ff f8a6 	bl	800014c <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	4619      	mov	r1, r3
 8001004:	4823      	ldr	r0, [pc, #140]	; (8001094 <main+0xb68>)
 8001006:	f004 fb0d 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800100a:	4817      	ldr	r0, [pc, #92]	; (8001068 <main+0xb3c>)
 800100c:	f7ff f89e 	bl	800014c <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	4619      	mov	r1, r3
 8001014:	4814      	ldr	r0, [pc, #80]	; (8001068 <main+0xb3c>)
 8001016:	f004 fb05 	bl	8005624 <Usart2_SendData>
								break;
 800101a:	e042      	b.n	80010a2 <main+0xb76>
							default:
								Usart2_SendData(android_no_such_cmd,strlen(android_no_such_cmd));
 800101c:	481e      	ldr	r0, [pc, #120]	; (8001098 <main+0xb6c>)
 800101e:	f7ff f895 	bl	800014c <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	4619      	mov	r1, r3
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <main+0xb6c>)
 8001028:	f004 fafc 	bl	8005624 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800102c:	480e      	ldr	r0, [pc, #56]	; (8001068 <main+0xb3c>)
 800102e:	f7ff f88d 	bl	800014c <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <main+0xb3c>)
 8001038:	f004 faf4 	bl	8005624 <Usart2_SendData>
								break;
 800103c:	e031      	b.n	80010a2 <main+0xb76>
						}
					} else {
						Usart2_SendData(android_no_cmd_error,strlen(android_no_cmd_error));
 800103e:	4817      	ldr	r0, [pc, #92]	; (800109c <main+0xb70>)
 8001040:	f7ff f884 	bl	800014c <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	4619      	mov	r1, r3
 8001048:	4814      	ldr	r0, [pc, #80]	; (800109c <main+0xb70>)
 800104a:	f004 faeb 	bl	8005624 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <main+0xb3c>)
 8001050:	f7ff f87c 	bl	800014c <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	4619      	mov	r1, r3
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <main+0xb3c>)
 800105a:	f004 fae3 	bl	8005624 <Usart2_SendData>
 800105e:	e020      	b.n	80010a2 <main+0xb76>
								break;
 8001060:	bf00      	nop
 8001062:	e01e      	b.n	80010a2 <main+0xb76>
 8001064:	20000608 	.word	0x20000608
 8001068:	20000168 	.word	0x20000168
 800106c:	20000338 	.word	0x20000338
 8001070:	20000858 	.word	0x20000858
 8001074:	10624dd3 	.word	0x10624dd3
 8001078:	66666667 	.word	0x66666667
 800107c:	20000220 	.word	0x20000220
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	cccccccd 	.word	0xcccccccd
 8001088:	20000058 	.word	0x20000058
 800108c:	200003a0 	.word	0x200003a0
 8001090:	200003bc 	.word	0x200003bc
 8001094:	200003d8 	.word	0x200003d8
 8001098:	20000350 	.word	0x20000350
 800109c:	2000033c 	.word	0x2000033c
								break;
 80010a0:	bf00      	nop
					//strcat(date_sCode,dBuffer );

				//	Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
				//	Usart2_SendData(s_newline,strlen(s_newline));

					Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 80010a2:	4815      	ldr	r0, [pc, #84]	; (80010f8 <main+0xbcc>)
 80010a4:	f7ff f852 	bl	800014c <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <main+0xbcc>)
 80010ae:	f004 fab9 	bl	8005624 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <main+0xbd0>)
 80010b4:	f7ff f84a 	bl	800014c <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <main+0xbd0>)
 80010be:	f004 fab1 	bl	8005624 <Usart2_SendData>



					date_iBufferLength=0;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <main+0xbd4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
				//	date_iBufferLength -= strDateLength;
				/*	memmove ( date_sBuffer, date_sBuffer + strDateLength,

							BUFFER_LEN +1 - strDateLength );
*/
					memset(date_sBuffer, 0, strlen(date_sBuffer));
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <main+0xbcc>)
 80010ca:	f7ff f83f 	bl	800014c <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <main+0xbcc>)
 80010d6:	f004 fd51 	bl	8005b7c <memset>
				//GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);

				/*
				 * Декодирование данных сканера
				 */
				if (strstr(g_sBuffer, "\r\n") != NULL) {
 80010da:	490a      	ldr	r1, [pc, #40]	; (8001104 <main+0xbd8>)
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <main+0xbdc>)
 80010de:	f004 fdac 	bl	8005c3a <strstr>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8171 	beq.w	80013cc <main+0xea0>
					/* Выделение лексемы,
					 *  ограниченной справа одним из символов множества "\r\n"
					 */
					strtok ( g_sBuffer, "\r\n" );
 80010ea:	4906      	ldr	r1, [pc, #24]	; (8001104 <main+0xbd8>)
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <main+0xbdc>)
 80010ee:	f004 fdbb 	bl	8005c68 <strtok>

					char * pBuffer = g_sBuffer;
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <main+0xbdc>)
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 80010f6:	e00c      	b.n	8001112 <main+0xbe6>
 80010f8:	20000580 	.word	0x20000580
 80010fc:	20000168 	.word	0x20000168
 8001100:	20000604 	.word	0x20000604
 8001104:	08006e44 	.word	0x08006e44
 8001108:	200004bc 	.word	0x200004bc
						pBuffer++;
 800110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110e:	3301      	adds	r3, #1
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 8001112:	49bb      	ldr	r1, [pc, #748]	; (8001400 <main+0xed4>)
 8001114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001116:	f004 fd78 	bl	8005c0a <strpbrk>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f5      	bne.n	800110c <main+0xbe0>
					}

					memset(g_sBarCode,0,strlen(g_sBarCode));
 8001120:	48b8      	ldr	r0, [pc, #736]	; (8001404 <main+0xed8>)
 8001122:	f7ff f813 	bl	800014c <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	48b5      	ldr	r0, [pc, #724]	; (8001404 <main+0xed8>)
 800112e:	f004 fd25 	bl	8005b7c <memset>
					  strlcpy ( g_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 8001132:	221a      	movs	r2, #26
 8001134:	49b4      	ldr	r1, [pc, #720]	; (8001408 <main+0xedc>)
 8001136:	48b3      	ldr	r0, [pc, #716]	; (8001404 <main+0xed8>)
 8001138:	f004 fd3f 	bl	8005bba <strlcpy>
					  strcat(g_sBarCode,pBuffer );
 800113c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800113e:	48b1      	ldr	r0, [pc, #708]	; (8001404 <main+0xed8>)
 8001140:	f004 fd24 	bl	8005b8c <strcat>
		*/
					//LCD_SetCursor ( LCD_CURSOR_1STR );
					//LCD_WriteString ( s_lcd_barcode );

					//if(b_firstrddata==DISABLE){
						LCD_SetCursor ( LCD_CURSOR_1STR );
 8001144:	2080      	movs	r0, #128	; 0x80
 8001146:	f001 fbe3 	bl	8002910 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 800114a:	48b0      	ldr	r0, [pc, #704]	; (800140c <main+0xee0>)
 800114c:	f001 fc90 	bl	8002a70 <LCD_WriteString>
						LCD_SetCursor ( LCD_CURSOR_2STR );
 8001150:	20c0      	movs	r0, #192	; 0xc0
 8001152:	f001 fbdd 	bl	8002910 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 8001156:	48ad      	ldr	r0, [pc, #692]	; (800140c <main+0xee0>)
 8001158:	f001 fc8a 	bl	8002a70 <LCD_WriteString>
						//b_firstrddata=ENABLE;

					//}

					LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001162:	48a8      	ldr	r0, [pc, #672]	; (8001404 <main+0xed8>)
 8001164:	f001 fdb8 	bl	8002cd8 <LCD_RunStringBARCode>

					int strLength = strlen(g_sBuffer) + 1;
 8001168:	48a9      	ldr	r0, [pc, #676]	; (8001410 <main+0xee4>)
 800116a:	f7fe ffef 	bl	800014c <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	3301      	adds	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
					g_iBufferLength -= strLength;
 8001174:	4ba7      	ldr	r3, [pc, #668]	; (8001414 <main+0xee8>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	4aa5      	ldr	r2, [pc, #660]	; (8001414 <main+0xee8>)
 800117e:	6013      	str	r3, [r2, #0]
					memmove ( g_sBuffer, g_sBuffer + strLength,
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4aa3      	ldr	r2, [pc, #652]	; (8001410 <main+0xee4>)
 8001184:	1899      	adds	r1, r3, r2

							BUFFER_LEN + 1 - strLength );
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	f1c3 0381 	rsb	r3, r3, #129	; 0x81
					memmove ( g_sBuffer, g_sBuffer + strLength,
 800118c:	461a      	mov	r2, r3
 800118e:	48a0      	ldr	r0, [pc, #640]	; (8001410 <main+0xee4>)
 8001190:	f004 fcda 	bl	8005b48 <memmove>



					timer = RTC_GET_COUNTER();
 8001194:	f002 fce0 	bl	8003b58 <RTC_GET_COUNTER>
 8001198:	4603      	mov	r3, r0
 800119a:	4a9f      	ldr	r2, [pc, #636]	; (8001418 <main+0xeec>)
 800119c:	6013      	str	r3, [r2, #0]
					timer_to_cal(timer, &rtc_time);
 800119e:	4b9e      	ldr	r3, [pc, #632]	; (8001418 <main+0xeec>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	1d3a      	adds	r2, r7, #4
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fd30 	bl	8003c0c <timer_to_cal>
					tim = cal_to_timer(&rtc_time);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fe16 	bl	8003de0 <cal_to_timer>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a99      	ldr	r2, [pc, #612]	; (800141c <main+0xef0>)
 80011b8:	6013      	str	r3, [r2, #0]
					s_cal_hour[1] = 0x30 + (unix_time.hour%10);
		*/

					//*xxx*yyyy-MM-dd HH:mm:ss

					s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a98      	ldr	r2, [pc, #608]	; (8001420 <main+0xef4>)
 80011be:	fb82 1203 	smull	r1, r2, r2, r3
 80011c2:	1192      	asrs	r2, r2, #6
 80011c4:	17db      	asrs	r3, r3, #31
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	4b96      	ldr	r3, [pc, #600]	; (8001424 <main+0xef8>)
 80011ca:	fb83 1302 	smull	r1, r3, r3, r2
 80011ce:	1099      	asrs	r1, r3, #2
 80011d0:	17d3      	asrs	r3, r2, #31
 80011d2:	1ac9      	subs	r1, r1, r3
 80011d4:	460b      	mov	r3, r1
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	1ad1      	subs	r1, r2, r3
 80011de:	b2cb      	uxtb	r3, r1
 80011e0:	3330      	adds	r3, #48	; 0x30
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b90      	ldr	r3, [pc, #576]	; (8001428 <main+0xefc>)
 80011e6:	701a      	strb	r2, [r3, #0]
					s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a90      	ldr	r2, [pc, #576]	; (800142c <main+0xf00>)
 80011ec:	fb82 1203 	smull	r1, r2, r2, r3
 80011f0:	1152      	asrs	r2, r2, #5
 80011f2:	17db      	asrs	r3, r3, #31
 80011f4:	1ad2      	subs	r2, r2, r3
 80011f6:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <main+0xef8>)
 80011f8:	fb83 1302 	smull	r1, r3, r3, r2
 80011fc:	1099      	asrs	r1, r3, #2
 80011fe:	17d3      	asrs	r3, r2, #31
 8001200:	1ac9      	subs	r1, r1, r3
 8001202:	460b      	mov	r3, r1
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	1ad1      	subs	r1, r2, r3
 800120c:	b2cb      	uxtb	r3, r1
 800120e:	3330      	adds	r3, #48	; 0x30
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <main+0xefc>)
 8001214:	705a      	strb	r2, [r3, #1]
					s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a82      	ldr	r2, [pc, #520]	; (8001424 <main+0xef8>)
 800121a:	fb82 1203 	smull	r1, r2, r2, r3
 800121e:	1092      	asrs	r2, r2, #2
 8001220:	17db      	asrs	r3, r3, #31
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	4b7f      	ldr	r3, [pc, #508]	; (8001424 <main+0xef8>)
 8001226:	fb83 1302 	smull	r1, r3, r3, r2
 800122a:	1099      	asrs	r1, r3, #2
 800122c:	17d3      	asrs	r3, r2, #31
 800122e:	1ac9      	subs	r1, r1, r3
 8001230:	460b      	mov	r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	1ad1      	subs	r1, r2, r3
 800123a:	b2cb      	uxtb	r3, r1
 800123c:	3330      	adds	r3, #48	; 0x30
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b79      	ldr	r3, [pc, #484]	; (8001428 <main+0xefc>)
 8001242:	709a      	strb	r2, [r3, #2]
					s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4b77      	ldr	r3, [pc, #476]	; (8001424 <main+0xef8>)
 8001248:	fb83 1302 	smull	r1, r3, r3, r2
 800124c:	1099      	asrs	r1, r3, #2
 800124e:	17d3      	asrs	r3, r2, #31
 8001250:	1ac9      	subs	r1, r1, r3
 8001252:	460b      	mov	r3, r1
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	1ad1      	subs	r1, r2, r3
 800125c:	b2cb      	uxtb	r3, r1
 800125e:	3330      	adds	r3, #48	; 0x30
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b71      	ldr	r3, [pc, #452]	; (8001428 <main+0xefc>)
 8001264:	70da      	strb	r2, [r3, #3]

					s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8001266:	7a3b      	ldrb	r3, [r7, #8]
 8001268:	4a71      	ldr	r2, [pc, #452]	; (8001430 <main+0xf04>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3330      	adds	r3, #48	; 0x30
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <main+0xefc>)
 8001278:	715a      	strb	r2, [r3, #5]
					s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 800127a:	7a3a      	ldrb	r2, [r7, #8]
 800127c:	4b6c      	ldr	r3, [pc, #432]	; (8001430 <main+0xf04>)
 800127e:	fba3 1302 	umull	r1, r3, r3, r2
 8001282:	08d9      	lsrs	r1, r3, #3
 8001284:	460b      	mov	r3, r1
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	3330      	adds	r3, #48	; 0x30
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b64      	ldr	r3, [pc, #400]	; (8001428 <main+0xefc>)
 8001296:	719a      	strb	r2, [r3, #6]

					s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001298:	7a7b      	ldrb	r3, [r7, #9]
 800129a:	4a65      	ldr	r2, [pc, #404]	; (8001430 <main+0xf04>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3330      	adds	r3, #48	; 0x30
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <main+0xefc>)
 80012aa:	721a      	strb	r2, [r3, #8]
					s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 80012ac:	7a7a      	ldrb	r2, [r7, #9]
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <main+0xf04>)
 80012b0:	fba3 1302 	umull	r1, r3, r3, r2
 80012b4:	08d9      	lsrs	r1, r3, #3
 80012b6:	460b      	mov	r3, r1
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3330      	adds	r3, #48	; 0x30
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b58      	ldr	r3, [pc, #352]	; (8001428 <main+0xefc>)
 80012c8:	725a      	strb	r2, [r3, #9]

					s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 80012ca:	7abb      	ldrb	r3, [r7, #10]
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <main+0xf04>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	08db      	lsrs	r3, r3, #3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3330      	adds	r3, #48	; 0x30
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <main+0xefc>)
 80012dc:	72da      	strb	r2, [r3, #11]
					s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 80012de:	7aba      	ldrb	r2, [r7, #10]
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <main+0xf04>)
 80012e2:	fba3 1302 	umull	r1, r3, r3, r2
 80012e6:	08d9      	lsrs	r1, r3, #3
 80012e8:	460b      	mov	r3, r1
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3330      	adds	r3, #48	; 0x30
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <main+0xefc>)
 80012fa:	731a      	strb	r2, [r3, #12]

					s_cal_data[14] = 0x30 + (rtc_time.min/10);
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <main+0xf04>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3330      	adds	r3, #48	; 0x30
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b46      	ldr	r3, [pc, #280]	; (8001428 <main+0xefc>)
 800130e:	739a      	strb	r2, [r3, #14]
					s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <main+0xf04>)
 8001314:	fba3 1302 	umull	r1, r3, r3, r2
 8001318:	08d9      	lsrs	r1, r3, #3
 800131a:	460b      	mov	r3, r1
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <main+0xefc>)
 800132c:	73da      	strb	r2, [r3, #15]

					s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <main+0xf04>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	08db      	lsrs	r3, r3, #3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3330      	adds	r3, #48	; 0x30
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <main+0xefc>)
 8001340:	745a      	strb	r2, [r3, #17]
					s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8001342:	7b3a      	ldrb	r2, [r7, #12]
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <main+0xf04>)
 8001346:	fba3 1302 	umull	r1, r3, r3, r2
 800134a:	08d9      	lsrs	r1, r3, #3
 800134c:	460b      	mov	r3, r1
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	3330      	adds	r3, #48	; 0x30
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <main+0xefc>)
 800135e:	749a      	strb	r2, [r3, #18]


					strncat(s_scan_d_c, s_cal_data, 19);
 8001360:	2213      	movs	r2, #19
 8001362:	4931      	ldr	r1, [pc, #196]	; (8001428 <main+0xefc>)
 8001364:	4833      	ldr	r0, [pc, #204]	; (8001434 <main+0xf08>)
 8001366:	f004 fc3d 	bl	8005be4 <strncat>
					strncat(s_scan_d_c, s_space, strlen(s_space));
 800136a:	2300      	movs	r3, #0
 800136c:	461a      	mov	r2, r3
 800136e:	4932      	ldr	r1, [pc, #200]	; (8001438 <main+0xf0c>)
 8001370:	4830      	ldr	r0, [pc, #192]	; (8001434 <main+0xf08>)
 8001372:	f004 fc37 	bl	8005be4 <strncat>
					strncat(s_scan_d_c, g_sBarCode, strlen(g_sBarCode));
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <main+0xed8>)
 8001378:	f7fe fee8 	bl	800014c <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4920      	ldr	r1, [pc, #128]	; (8001404 <main+0xed8>)
 8001382:	482c      	ldr	r0, [pc, #176]	; (8001434 <main+0xf08>)
 8001384:	f004 fc2e 	bl	8005be4 <strncat>
					strncat(s_scan_d_c, s_newline, strlen(s_newline));
 8001388:	482c      	ldr	r0, [pc, #176]	; (800143c <main+0xf10>)
 800138a:	f7fe fedf 	bl	800014c <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	492a      	ldr	r1, [pc, #168]	; (800143c <main+0xf10>)
 8001394:	4827      	ldr	r0, [pc, #156]	; (8001434 <main+0xf08>)
 8001396:	f004 fc25 	bl	8005be4 <strncat>



				//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
					Usart2_SendData(s_scan_d_c,strlen(s_scan_d_c));
 800139a:	4826      	ldr	r0, [pc, #152]	; (8001434 <main+0xf08>)
 800139c:	f7fe fed6 	bl	800014c <strlen>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4823      	ldr	r0, [pc, #140]	; (8001434 <main+0xf08>)
 80013a6:	f004 f93d 	bl	8005624 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 80013aa:	4824      	ldr	r0, [pc, #144]	; (800143c <main+0xf10>)
 80013ac:	f7fe fece 	bl	800014c <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4821      	ldr	r0, [pc, #132]	; (800143c <main+0xf10>)
 80013b6:	f004 f935 	bl	8005624 <Usart2_SendData>

					memset(s_scan_d_c, 0, strlen(s_scan_d_c));
 80013ba:	481e      	ldr	r0, [pc, #120]	; (8001434 <main+0xf08>)
 80013bc:	f7fe fec6 	bl	800014c <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	481b      	ldr	r0, [pc, #108]	; (8001434 <main+0xf08>)
 80013c8:	f004 fbd8 	bl	8005b7c <memset>



				//*****************************************************************************
				//Если тест NFC пройден успешно,то сканируем ID
						if(statusDevice==ST_DEV_NFC_NOERR || statusDevice==ST_DEV_ALL_NOERR ){
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <main+0xf14>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d004      	beq.n	80013de <main+0xeb2>
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <main+0xf14>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b11      	cmp	r3, #17
 80013da:	f040 83d3 	bne.w	8001b84 <main+0x1658>
							if(cntlooppn532==CNT_LOOP_PN532){
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <main+0xf18>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f040 8382 	bne.w	8001af0 <main+0x15c4>

								success=PN532_readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength,1500);
 80013ec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80013f0:	4a15      	ldr	r2, [pc, #84]	; (8001448 <main+0xf1c>)
 80013f2:	4916      	ldr	r1, [pc, #88]	; (800144c <main+0xf20>)
 80013f4:	2000      	movs	r0, #0
 80013f6:	f001 fe33 	bl	8003060 <PN532_readPassiveTargetID>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	e027      	b.n	8001450 <main+0xf24>
 8001400:	08006e54 	.word	0x08006e54
 8001404:	20000544 	.word	0x20000544
 8001408:	200000d4 	.word	0x200000d4
 800140c:	200000b4 	.word	0x200000b4
 8001410:	200004bc 	.word	0x200004bc
 8001414:	20000540 	.word	0x20000540
 8001418:	20000338 	.word	0x20000338
 800141c:	20000858 	.word	0x20000858
 8001420:	10624dd3 	.word	0x10624dd3
 8001424:	66666667 	.word	0x66666667
 8001428:	20000220 	.word	0x20000220
 800142c:	51eb851f 	.word	0x51eb851f
 8001430:	cccccccd 	.word	0xcccccccd
 8001434:	200007d8 	.word	0x200007d8
 8001438:	200001d0 	.word	0x200001d0
 800143c:	20000168 	.word	0x20000168
 8001440:	200007c4 	.word	0x200007c4
 8001444:	200006a8 	.word	0x200006a8
 8001448:	200006a0 	.word	0x200006a0
 800144c:	20000690 	.word	0x20000690
 8001450:	4bbb      	ldr	r3, [pc, #748]	; (8001740 <main+0x1214>)
 8001452:	701a      	strb	r2, [r3, #0]

								if(success && !b_discannfc){
 8001454:	4bba      	ldr	r3, [pc, #744]	; (8001740 <main+0x1214>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 833f 	beq.w	8001adc <main+0x15b0>
 800145e:	4bb9      	ldr	r3, [pc, #740]	; (8001744 <main+0x1218>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 833a 	bne.w	8001adc <main+0x15b0>

									b_discannfc=1;
 8001468:	4bb6      	ldr	r3, [pc, #728]	; (8001744 <main+0x1218>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]

									s_pn_uidlengthdata[0] = 0x30+(uidLength/100);
 800146e:	4bb6      	ldr	r3, [pc, #728]	; (8001748 <main+0x121c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4ab6      	ldr	r2, [pc, #728]	; (800174c <main+0x1220>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	095b      	lsrs	r3, r3, #5
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3330      	adds	r3, #48	; 0x30
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4bb3      	ldr	r3, [pc, #716]	; (8001750 <main+0x1224>)
 8001482:	701a      	strb	r2, [r3, #0]
									s_pn_uidlengthdata[1] = 0x30+(uidLength/10%10);
 8001484:	4bb0      	ldr	r3, [pc, #704]	; (8001748 <main+0x121c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4ab2      	ldr	r2, [pc, #712]	; (8001754 <main+0x1228>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	08db      	lsrs	r3, r3, #3
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4bb0      	ldr	r3, [pc, #704]	; (8001754 <main+0x1228>)
 8001494:	fba3 1302 	umull	r1, r3, r3, r2
 8001498:	08d9      	lsrs	r1, r3, #3
 800149a:	460b      	mov	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3330      	adds	r3, #48	; 0x30
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4ba9      	ldr	r3, [pc, #676]	; (8001750 <main+0x1224>)
 80014ac:	705a      	strb	r2, [r3, #1]
									s_pn_uidlengthdata[2] = 0x30+(uidLength%10);
 80014ae:	4ba6      	ldr	r3, [pc, #664]	; (8001748 <main+0x121c>)
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	4ba8      	ldr	r3, [pc, #672]	; (8001754 <main+0x1228>)
 80014b4:	fba3 1302 	umull	r1, r3, r3, r2
 80014b8:	08d9      	lsrs	r1, r3, #3
 80014ba:	460b      	mov	r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3330      	adds	r3, #48	; 0x30
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4ba1      	ldr	r3, [pc, #644]	; (8001750 <main+0x1224>)
 80014cc:	709a      	strb	r2, [r3, #2]

									Usart2_SendData(s_pn_foundcard,strlen(s_pn_foundcard));
 80014ce:	48a2      	ldr	r0, [pc, #648]	; (8001758 <main+0x122c>)
 80014d0:	f7fe fe3c 	bl	800014c <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4619      	mov	r1, r3
 80014d8:	489f      	ldr	r0, [pc, #636]	; (8001758 <main+0x122c>)
 80014da:	f004 f8a3 	bl	8005624 <Usart2_SendData>

									Usart2_SendData(s_pn_uidlength,strlen(s_pn_uidlength));
 80014de:	489f      	ldr	r0, [pc, #636]	; (800175c <main+0x1230>)
 80014e0:	f7fe fe34 	bl	800014c <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	489c      	ldr	r0, [pc, #624]	; (800175c <main+0x1230>)
 80014ea:	f004 f89b 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_pn_uidlengthdata,strlen(s_pn_uidlengthdata));
 80014ee:	4898      	ldr	r0, [pc, #608]	; (8001750 <main+0x1224>)
 80014f0:	f7fe fe2c 	bl	800014c <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4895      	ldr	r0, [pc, #596]	; (8001750 <main+0x1224>)
 80014fa:	f004 f893 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 80014fe:	4898      	ldr	r0, [pc, #608]	; (8001760 <main+0x1234>)
 8001500:	f7fe fe24 	bl	800014c <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4895      	ldr	r0, [pc, #596]	; (8001760 <main+0x1234>)
 800150a:	f004 f88b 	bl	8005624 <Usart2_SendData>

									b_hextostr = fourbytes2strhex (&uid[0], &uidhex2pc4b[0]);
 800150e:	4995      	ldr	r1, [pc, #596]	; (8001764 <main+0x1238>)
 8001510:	4895      	ldr	r0, [pc, #596]	; (8001768 <main+0x123c>)
 8001512:	f000 ff79 	bl	8002408 <fourbytes2strhex>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b94      	ldr	r3, [pc, #592]	; (800176c <main+0x1240>)
 800151c:	701a      	strb	r2, [r3, #0]

									Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 800151e:	4894      	ldr	r0, [pc, #592]	; (8001770 <main+0x1244>)
 8001520:	f7fe fe14 	bl	800014c <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	4619      	mov	r1, r3
 8001528:	4891      	ldr	r0, [pc, #580]	; (8001770 <main+0x1244>)
 800152a:	f004 f87b 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(uidhex2pc4b,strlen(uidhex2pc4b));
 800152e:	488d      	ldr	r0, [pc, #564]	; (8001764 <main+0x1238>)
 8001530:	f7fe fe0c 	bl	800014c <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	4619      	mov	r1, r3
 8001538:	488a      	ldr	r0, [pc, #552]	; (8001764 <main+0x1238>)
 800153a:	f004 f873 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 800153e:	4888      	ldr	r0, [pc, #544]	; (8001760 <main+0x1234>)
 8001540:	f7fe fe04 	bl	800014c <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	4619      	mov	r1, r3
 8001548:	4885      	ldr	r0, [pc, #532]	; (8001760 <main+0x1234>)
 800154a:	f004 f86b 	bl	8005624 <Usart2_SendData>

									decuid = UIDResponse(&uid[0], uidLength);
 800154e:	4b7e      	ldr	r3, [pc, #504]	; (8001748 <main+0x121c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	4884      	ldr	r0, [pc, #528]	; (8001768 <main+0x123c>)
 8001556:	f000 ffcb 	bl	80024f0 <UIDResponse>
 800155a:	4603      	mov	r3, r0
 800155c:	4a85      	ldr	r2, [pc, #532]	; (8001774 <main+0x1248>)
 800155e:	6013      	str	r3, [r2, #0]

									s_pn_uiddecdata[0] = 0x30+(decuid/1000000000);
 8001560:	4b84      	ldr	r3, [pc, #528]	; (8001774 <main+0x1248>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0a5b      	lsrs	r3, r3, #9
 8001566:	4a84      	ldr	r2, [pc, #528]	; (8001778 <main+0x124c>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	09db      	lsrs	r3, r3, #7
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3330      	adds	r3, #48	; 0x30
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b81      	ldr	r3, [pc, #516]	; (800177c <main+0x1250>)
 8001576:	701a      	strb	r2, [r3, #0]
									s_pn_uiddecdata[1] = 0x30+(decuid/100000000%10);
 8001578:	4b7e      	ldr	r3, [pc, #504]	; (8001774 <main+0x1248>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a80      	ldr	r2, [pc, #512]	; (8001780 <main+0x1254>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0e59      	lsrs	r1, r3, #25
 8001584:	4b73      	ldr	r3, [pc, #460]	; (8001754 <main+0x1228>)
 8001586:	fba3 2301 	umull	r2, r3, r3, r1
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1aca      	subs	r2, r1, r3
 8001596:	b2d3      	uxtb	r3, r2
 8001598:	3330      	adds	r3, #48	; 0x30
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b77      	ldr	r3, [pc, #476]	; (800177c <main+0x1250>)
 800159e:	705a      	strb	r2, [r3, #1]
									s_pn_uiddecdata[2] = 0x30+(decuid/10000000%10);
 80015a0:	4b74      	ldr	r3, [pc, #464]	; (8001774 <main+0x1248>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a77      	ldr	r2, [pc, #476]	; (8001784 <main+0x1258>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0d99      	lsrs	r1, r3, #22
 80015ac:	4b69      	ldr	r3, [pc, #420]	; (8001754 <main+0x1228>)
 80015ae:	fba3 2301 	umull	r2, r3, r3, r1
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	1aca      	subs	r2, r1, r3
 80015be:	b2d3      	uxtb	r3, r2
 80015c0:	3330      	adds	r3, #48	; 0x30
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b6d      	ldr	r3, [pc, #436]	; (800177c <main+0x1250>)
 80015c6:	709a      	strb	r2, [r3, #2]
									s_pn_uiddecdata[3] = 0x30+(decuid/1000000%10);
 80015c8:	4b6a      	ldr	r3, [pc, #424]	; (8001774 <main+0x1248>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a6e      	ldr	r2, [pc, #440]	; (8001788 <main+0x125c>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c99      	lsrs	r1, r3, #18
 80015d4:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <main+0x1228>)
 80015d6:	fba3 2301 	umull	r2, r3, r3, r1
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	1aca      	subs	r2, r1, r3
 80015e6:	b2d3      	uxtb	r3, r2
 80015e8:	3330      	adds	r3, #48	; 0x30
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <main+0x1250>)
 80015ee:	70da      	strb	r2, [r3, #3]
									s_pn_uiddecdata[4] = 0x30+(decuid/100000%10);
 80015f0:	4b60      	ldr	r3, [pc, #384]	; (8001774 <main+0x1248>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	4a65      	ldr	r2, [pc, #404]	; (800178c <main+0x1260>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	09d9      	lsrs	r1, r3, #7
 80015fe:	4b55      	ldr	r3, [pc, #340]	; (8001754 <main+0x1228>)
 8001600:	fba3 2301 	umull	r2, r3, r3, r1
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	1aca      	subs	r2, r1, r3
 8001610:	b2d3      	uxtb	r3, r2
 8001612:	3330      	adds	r3, #48	; 0x30
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b59      	ldr	r3, [pc, #356]	; (800177c <main+0x1250>)
 8001618:	711a      	strb	r2, [r3, #4]
									s_pn_uiddecdata[5] = 0x30+(decuid/10000%10);
 800161a:	4b56      	ldr	r3, [pc, #344]	; (8001774 <main+0x1248>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a5c      	ldr	r2, [pc, #368]	; (8001790 <main+0x1264>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0b59      	lsrs	r1, r3, #13
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <main+0x1228>)
 8001628:	fba3 2301 	umull	r2, r3, r3, r1
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	1aca      	subs	r2, r1, r3
 8001638:	b2d3      	uxtb	r3, r2
 800163a:	3330      	adds	r3, #48	; 0x30
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b4f      	ldr	r3, [pc, #316]	; (800177c <main+0x1250>)
 8001640:	715a      	strb	r2, [r3, #5]
									s_pn_uiddecdata[6] = 0x30+(decuid/1000%10);
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <main+0x1248>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a53      	ldr	r2, [pc, #332]	; (8001794 <main+0x1268>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	0999      	lsrs	r1, r3, #6
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <main+0x1228>)
 8001650:	fba3 2301 	umull	r2, r3, r3, r1
 8001654:	08da      	lsrs	r2, r3, #3
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	1aca      	subs	r2, r1, r3
 8001660:	b2d3      	uxtb	r3, r2
 8001662:	3330      	adds	r3, #48	; 0x30
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b45      	ldr	r3, [pc, #276]	; (800177c <main+0x1250>)
 8001668:	719a      	strb	r2, [r3, #6]
									s_pn_uiddecdata[7] = 0x30+(decuid/100%10);
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <main+0x1248>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a37      	ldr	r2, [pc, #220]	; (800174c <main+0x1220>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	0959      	lsrs	r1, r3, #5
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <main+0x1228>)
 8001678:	fba3 2301 	umull	r2, r3, r3, r1
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	1aca      	subs	r2, r1, r3
 8001688:	b2d3      	uxtb	r3, r2
 800168a:	3330      	adds	r3, #48	; 0x30
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <main+0x1250>)
 8001690:	71da      	strb	r2, [r3, #7]
									s_pn_uiddecdata[8] = 0x30+(decuid/10%10);
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <main+0x1248>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <main+0x1228>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	08d9      	lsrs	r1, r3, #3
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <main+0x1228>)
 80016a0:	fba3 2301 	umull	r2, r3, r3, r1
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	1aca      	subs	r2, r1, r3
 80016b0:	b2d3      	uxtb	r3, r2
 80016b2:	3330      	adds	r3, #48	; 0x30
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <main+0x1250>)
 80016b8:	721a      	strb	r2, [r3, #8]
									s_pn_uiddecdata[9] = 0x30+(decuid%10);
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <main+0x1248>)
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	4b25      	ldr	r3, [pc, #148]	; (8001754 <main+0x1228>)
 80016c0:	fba3 2301 	umull	r2, r3, r3, r1
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	1aca      	subs	r2, r1, r3
 80016d0:	b2d3      	uxtb	r3, r2
 80016d2:	3330      	adds	r3, #48	; 0x30
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <main+0x1250>)
 80016d8:	725a      	strb	r2, [r3, #9]

									Usart2_SendData(s_pn_uiddecvalue,strlen(s_pn_uiddecvalue));
 80016da:	482f      	ldr	r0, [pc, #188]	; (8001798 <main+0x126c>)
 80016dc:	f7fe fd36 	bl	800014c <strlen>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	482c      	ldr	r0, [pc, #176]	; (8001798 <main+0x126c>)
 80016e6:	f003 ff9d 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_pn_uiddecdata,strlen(s_pn_uiddecdata));
 80016ea:	4824      	ldr	r0, [pc, #144]	; (800177c <main+0x1250>)
 80016ec:	f7fe fd2e 	bl	800014c <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4619      	mov	r1, r3
 80016f4:	4821      	ldr	r0, [pc, #132]	; (800177c <main+0x1250>)
 80016f6:	f003 ff95 	bl	8005624 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <main+0x1234>)
 80016fc:	f7fe fd26 	bl	800014c <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	4619      	mov	r1, r3
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <main+0x1234>)
 8001706:	f003 ff8d 	bl	8005624 <Usart2_SendData>
									//memset(g_sBarCode,0,strlen(g_sBarCode));
									//strlcpy ( g_sBarCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );


									//if(b_firstrddata==DISABLE){
										LCD_SetCursor ( LCD_CURSOR_1STR );
 800170a:	2080      	movs	r0, #128	; 0x80
 800170c:	f001 f900 	bl	8002910 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8001710:	4822      	ldr	r0, [pc, #136]	; (800179c <main+0x1270>)
 8001712:	f001 f9ad 	bl	8002a70 <LCD_WriteString>
										LCD_SetCursor ( LCD_CURSOR_2STR );
 8001716:	20c0      	movs	r0, #192	; 0xc0
 8001718:	f001 f8fa 	bl	8002910 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 800171c:	481f      	ldr	r0, [pc, #124]	; (800179c <main+0x1270>)
 800171e:	f001 f9a7 	bl	8002a70 <LCD_WriteString>
										//b_firstrddata=ENABLE;

									//}

									memset(g_sNfcCode,0,strlen(g_sNfcCode));
 8001722:	481f      	ldr	r0, [pc, #124]	; (80017a0 <main+0x1274>)
 8001724:	f7fe fd12 	bl	800014c <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	2100      	movs	r1, #0
 800172e:	481c      	ldr	r0, [pc, #112]	; (80017a0 <main+0x1274>)
 8001730:	f004 fa24 	bl	8005b7c <memset>

									  strlcpy ( g_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 8001734:	221a      	movs	r2, #26
 8001736:	491b      	ldr	r1, [pc, #108]	; (80017a4 <main+0x1278>)
 8001738:	4819      	ldr	r0, [pc, #100]	; (80017a0 <main+0x1274>)
 800173a:	f004 fa3e 	bl	8005bba <strlcpy>
 800173e:	e033      	b.n	80017a8 <main+0x127c>
 8001740:	2000068e 	.word	0x2000068e
 8001744:	2000068d 	.word	0x2000068d
 8001748:	200006a0 	.word	0x200006a0
 800174c:	51eb851f 	.word	0x51eb851f
 8001750:	200001ac 	.word	0x200001ac
 8001754:	cccccccd 	.word	0xcccccccd
 8001758:	2000016c 	.word	0x2000016c
 800175c:	20000180 	.word	0x20000180
 8001760:	20000168 	.word	0x20000168
 8001764:	2000000c 	.word	0x2000000c
 8001768:	20000690 	.word	0x20000690
 800176c:	2000068f 	.word	0x2000068f
 8001770:	20000198 	.word	0x20000198
 8001774:	200006a4 	.word	0x200006a4
 8001778:	00044b83 	.word	0x00044b83
 800177c:	200001b0 	.word	0x200001b0
 8001780:	55e63b89 	.word	0x55e63b89
 8001784:	6b5fca6b 	.word	0x6b5fca6b
 8001788:	431bde83 	.word	0x431bde83
 800178c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001790:	d1b71759 	.word	0xd1b71759
 8001794:	10624dd3 	.word	0x10624dd3
 8001798:	200001bc 	.word	0x200001bc
 800179c:	200000b4 	.word	0x200000b4
 80017a0:	20000560 	.word	0x20000560
 80017a4:	200000e0 	.word	0x200000e0
									  strcat(g_sNfcCode, s_pn_uiddecdata );
 80017a8:	4920      	ldr	r1, [pc, #128]	; (800182c <main+0x1300>)
 80017aa:	4821      	ldr	r0, [pc, #132]	; (8001830 <main+0x1304>)
 80017ac:	f004 f9ee 	bl	8005b8c <strcat>

									//strlcpy ( g_sNfcCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );

									//LCD_SetCursor ( LCD_CURSOR_1STR );
									//LCD_WriteString ( s_lcd_nfc );
									LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 0 );
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80017b6:	481e      	ldr	r0, [pc, #120]	; (8001830 <main+0x1304>)
 80017b8:	f001 fb22 	bl	8002e00 <LCD_RunStringNFCCode>


								//	PN532_WriteID();
									pn532_rd_stat=PN532_Read_Data(uid,uidLength,1,  rdDataBlock);
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <main+0x1308>)
 80017be:	7819      	ldrb	r1, [r3, #0]
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <main+0x130c>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	481d      	ldr	r0, [pc, #116]	; (800183c <main+0x1310>)
 80017c6:	f002 f8f3 	bl	80039b0 <PN532_Read_Data>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <main+0x1314>)
 80017d0:	701a      	strb	r2, [r3, #0]

									switch(pn532_rd_stat){
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <main+0x1314>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d03a      	beq.n	8001850 <main+0x1324>
 80017da:	2b02      	cmp	r3, #2
 80017dc:	dc49      	bgt.n	8001872 <main+0x1346>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <main+0x12bc>
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d011      	beq.n	800180a <main+0x12de>
 80017e6:	e044      	b.n	8001872 <main+0x1346>
									case 0:
										Usart2_SendData(s_pc_PN532_info1,strlen(s_pc_PN532_info1));
 80017e8:	4816      	ldr	r0, [pc, #88]	; (8001844 <main+0x1318>)
 80017ea:	f7fe fcaf 	bl	800014c <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	4814      	ldr	r0, [pc, #80]	; (8001844 <main+0x1318>)
 80017f4:	f003 ff16 	bl	8005624 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 80017f8:	4813      	ldr	r0, [pc, #76]	; (8001848 <main+0x131c>)
 80017fa:	f7fe fca7 	bl	800014c <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	4619      	mov	r1, r3
 8001802:	4811      	ldr	r0, [pc, #68]	; (8001848 <main+0x131c>)
 8001804:	f003 ff0e 	bl	8005624 <Usart2_SendData>
										break;
 8001808:	e033      	b.n	8001872 <main+0x1346>
									case 1:
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 800180a:	4810      	ldr	r0, [pc, #64]	; (800184c <main+0x1320>)
 800180c:	f7fe fc9e 	bl	800014c <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	4619      	mov	r1, r3
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <main+0x1320>)
 8001816:	f003 ff05 	bl	8005624 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 800181a:	480b      	ldr	r0, [pc, #44]	; (8001848 <main+0x131c>)
 800181c:	f7fe fc96 	bl	800014c <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	4619      	mov	r1, r3
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <main+0x131c>)
 8001826:	f003 fefd 	bl	8005624 <Usart2_SendData>
										break;
 800182a:	e022      	b.n	8001872 <main+0x1346>
 800182c:	200001b0 	.word	0x200001b0
 8001830:	20000560 	.word	0x20000560
 8001834:	200006a0 	.word	0x200006a0
 8001838:	200007c8 	.word	0x200007c8
 800183c:	20000690 	.word	0x20000690
 8001840:	200006bd 	.word	0x200006bd
 8001844:	20000238 	.word	0x20000238
 8001848:	20000168 	.word	0x20000168
 800184c:	20000270 	.word	0x20000270
									case 2:
										Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8001850:	48b3      	ldr	r0, [pc, #716]	; (8001b20 <main+0x15f4>)
 8001852:	f7fe fc7b 	bl	800014c <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	48b1      	ldr	r0, [pc, #708]	; (8001b20 <main+0x15f4>)
 800185c:	f003 fee2 	bl	8005624 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001860:	48b0      	ldr	r0, [pc, #704]	; (8001b24 <main+0x15f8>)
 8001862:	f7fe fc73 	bl	800014c <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	48ae      	ldr	r0, [pc, #696]	; (8001b24 <main+0x15f8>)
 800186c:	f003 feda 	bl	8005624 <Usart2_SendData>
										break;
 8001870:	bf00      	nop
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
										Usart2_SendData(s_newline,strlen(s_newline));
									}
								*/

									Usart2_SendData(s_pn_data_block0,strlen(s_pn_data_block0));
 8001872:	48ad      	ldr	r0, [pc, #692]	; (8001b28 <main+0x15fc>)
 8001874:	f7fe fc6a 	bl	800014c <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	4619      	mov	r1, r3
 800187c:	48aa      	ldr	r0, [pc, #680]	; (8001b28 <main+0x15fc>)
 800187e:	f003 fed1 	bl	8005624 <Usart2_SendData>


									//if(pn532_rd_stat==0){
									BytesHex2Str(rdDataBlock, sizeof(rdDataBlock), DataHex2pc);
 8001882:	4aaa      	ldr	r2, [pc, #680]	; (8001b2c <main+0x1600>)
 8001884:	2110      	movs	r1, #16
 8001886:	48aa      	ldr	r0, [pc, #680]	; (8001b30 <main+0x1604>)
 8001888:	f000 fe64 	bl	8002554 <BytesHex2Str>
										Usart2_SendData(DataHex2pc,sizeof(DataHex2pc));
 800188c:	212f      	movs	r1, #47	; 0x2f
 800188e:	48a7      	ldr	r0, [pc, #668]	; (8001b2c <main+0x1600>)
 8001890:	f003 fec8 	bl	8005624 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001894:	48a3      	ldr	r0, [pc, #652]	; (8001b24 <main+0x15f8>)
 8001896:	f7fe fc59 	bl	800014c <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	4619      	mov	r1, r3
 800189e:	48a1      	ldr	r0, [pc, #644]	; (8001b24 <main+0x15f8>)
 80018a0:	f003 fec0 	bl	8005624 <Usart2_SendData>

									//}
										timer = RTC_GET_COUNTER();
 80018a4:	f002 f958 	bl	8003b58 <RTC_GET_COUNTER>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4aa2      	ldr	r2, [pc, #648]	; (8001b34 <main+0x1608>)
 80018ac:	6013      	str	r3, [r2, #0]
										timer_to_cal(timer, &rtc_time);
 80018ae:	4ba1      	ldr	r3, [pc, #644]	; (8001b34 <main+0x1608>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1d3a      	adds	r2, r7, #4
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 f9a8 	bl	8003c0c <timer_to_cal>
										tim = cal_to_timer(&rtc_time);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fa8e 	bl	8003de0 <cal_to_timer>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a9c      	ldr	r2, [pc, #624]	; (8001b38 <main+0x160c>)
 80018c8:	6013      	str	r3, [r2, #0]

										//*xxx*yyyy-MM-dd HH:mm:ss

										s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a9b      	ldr	r2, [pc, #620]	; (8001b3c <main+0x1610>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1192      	asrs	r2, r2, #6
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad2      	subs	r2, r2, r3
 80018d8:	4b99      	ldr	r3, [pc, #612]	; (8001b40 <main+0x1614>)
 80018da:	fb83 1302 	smull	r1, r3, r3, r2
 80018de:	1099      	asrs	r1, r3, #2
 80018e0:	17d3      	asrs	r3, r2, #31
 80018e2:	1ac9      	subs	r1, r1, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	1ad1      	subs	r1, r2, r3
 80018ee:	b2cb      	uxtb	r3, r1
 80018f0:	3330      	adds	r3, #48	; 0x30
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b93      	ldr	r3, [pc, #588]	; (8001b44 <main+0x1618>)
 80018f6:	701a      	strb	r2, [r3, #0]
										s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a93      	ldr	r2, [pc, #588]	; (8001b48 <main+0x161c>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1152      	asrs	r2, r2, #5
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	4b8e      	ldr	r3, [pc, #568]	; (8001b40 <main+0x1614>)
 8001908:	fb83 1302 	smull	r1, r3, r3, r2
 800190c:	1099      	asrs	r1, r3, #2
 800190e:	17d3      	asrs	r3, r2, #31
 8001910:	1ac9      	subs	r1, r1, r3
 8001912:	460b      	mov	r3, r1
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	1ad1      	subs	r1, r2, r3
 800191c:	b2cb      	uxtb	r3, r1
 800191e:	3330      	adds	r3, #48	; 0x30
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <main+0x1618>)
 8001924:	705a      	strb	r2, [r3, #1]
										s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a85      	ldr	r2, [pc, #532]	; (8001b40 <main+0x1614>)
 800192a:	fb82 1203 	smull	r1, r2, r2, r3
 800192e:	1092      	asrs	r2, r2, #2
 8001930:	17db      	asrs	r3, r3, #31
 8001932:	1ad2      	subs	r2, r2, r3
 8001934:	4b82      	ldr	r3, [pc, #520]	; (8001b40 <main+0x1614>)
 8001936:	fb83 1302 	smull	r1, r3, r3, r2
 800193a:	1099      	asrs	r1, r3, #2
 800193c:	17d3      	asrs	r3, r2, #31
 800193e:	1ac9      	subs	r1, r1, r3
 8001940:	460b      	mov	r3, r1
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	1ad1      	subs	r1, r2, r3
 800194a:	b2cb      	uxtb	r3, r1
 800194c:	3330      	adds	r3, #48	; 0x30
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <main+0x1618>)
 8001952:	709a      	strb	r2, [r3, #2]
										s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4b7a      	ldr	r3, [pc, #488]	; (8001b40 <main+0x1614>)
 8001958:	fb83 1302 	smull	r1, r3, r3, r2
 800195c:	1099      	asrs	r1, r3, #2
 800195e:	17d3      	asrs	r3, r2, #31
 8001960:	1ac9      	subs	r1, r1, r3
 8001962:	460b      	mov	r3, r1
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	1ad1      	subs	r1, r2, r3
 800196c:	b2cb      	uxtb	r3, r1
 800196e:	3330      	adds	r3, #48	; 0x30
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b74      	ldr	r3, [pc, #464]	; (8001b44 <main+0x1618>)
 8001974:	70da      	strb	r2, [r3, #3]

										s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8001976:	7a3b      	ldrb	r3, [r7, #8]
 8001978:	4a74      	ldr	r2, [pc, #464]	; (8001b4c <main+0x1620>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	3330      	adds	r3, #48	; 0x30
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <main+0x1618>)
 8001988:	715a      	strb	r2, [r3, #5]
										s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 800198a:	7a3a      	ldrb	r2, [r7, #8]
 800198c:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <main+0x1620>)
 800198e:	fba3 1302 	umull	r1, r3, r3, r2
 8001992:	08d9      	lsrs	r1, r3, #3
 8001994:	460b      	mov	r3, r1
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	3330      	adds	r3, #48	; 0x30
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <main+0x1618>)
 80019a6:	719a      	strb	r2, [r3, #6]

										s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 80019a8:	7a7b      	ldrb	r3, [r7, #9]
 80019aa:	4a68      	ldr	r2, [pc, #416]	; (8001b4c <main+0x1620>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3330      	adds	r3, #48	; 0x30
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <main+0x1618>)
 80019ba:	721a      	strb	r2, [r3, #8]
										s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 80019bc:	7a7a      	ldrb	r2, [r7, #9]
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <main+0x1620>)
 80019c0:	fba3 1302 	umull	r1, r3, r3, r2
 80019c4:	08d9      	lsrs	r1, r3, #3
 80019c6:	460b      	mov	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3330      	adds	r3, #48	; 0x30
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <main+0x1618>)
 80019d8:	725a      	strb	r2, [r3, #9]

										s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 80019da:	7abb      	ldrb	r3, [r7, #10]
 80019dc:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <main+0x1620>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3330      	adds	r3, #48	; 0x30
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <main+0x1618>)
 80019ec:	72da      	strb	r2, [r3, #11]
										s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 80019ee:	7aba      	ldrb	r2, [r7, #10]
 80019f0:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <main+0x1620>)
 80019f2:	fba3 1302 	umull	r1, r3, r3, r2
 80019f6:	08d9      	lsrs	r1, r3, #3
 80019f8:	460b      	mov	r3, r1
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3330      	adds	r3, #48	; 0x30
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <main+0x1618>)
 8001a0a:	731a      	strb	r2, [r3, #12]

										s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	4a4f      	ldr	r2, [pc, #316]	; (8001b4c <main+0x1620>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3330      	adds	r3, #48	; 0x30
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <main+0x1618>)
 8001a1e:	739a      	strb	r2, [r3, #14]
										s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8001a20:	7afa      	ldrb	r2, [r7, #11]
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <main+0x1620>)
 8001a24:	fba3 1302 	umull	r1, r3, r3, r2
 8001a28:	08d9      	lsrs	r1, r3, #3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <main+0x1618>)
 8001a3c:	73da      	strb	r2, [r3, #15]

										s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8001a3e:	7b3b      	ldrb	r3, [r7, #12]
 8001a40:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <main+0x1620>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	08db      	lsrs	r3, r3, #3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3330      	adds	r3, #48	; 0x30
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <main+0x1618>)
 8001a50:	745a      	strb	r2, [r3, #17]
										s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8001a52:	7b3a      	ldrb	r2, [r7, #12]
 8001a54:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <main+0x1620>)
 8001a56:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5a:	08d9      	lsrs	r1, r3, #3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3330      	adds	r3, #48	; 0x30
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <main+0x1618>)
 8001a6e:	749a      	strb	r2, [r3, #18]

										strncat(s_nfc_tag_date, s_cal_data, 19);
 8001a70:	2213      	movs	r2, #19
 8001a72:	4934      	ldr	r1, [pc, #208]	; (8001b44 <main+0x1618>)
 8001a74:	4836      	ldr	r0, [pc, #216]	; (8001b50 <main+0x1624>)
 8001a76:	f004 f8b5 	bl	8005be4 <strncat>
										strncat(s_nfc_tag_date, s_space, strlen(s_space));
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4935      	ldr	r1, [pc, #212]	; (8001b54 <main+0x1628>)
 8001a80:	4833      	ldr	r0, [pc, #204]	; (8001b50 <main+0x1624>)
 8001a82:	f004 f8af 	bl	8005be4 <strncat>
										strncat(s_nfc_tag_date, g_sNfcCode, strlen(g_sNfcCode));
 8001a86:	4834      	ldr	r0, [pc, #208]	; (8001b58 <main+0x162c>)
 8001a88:	f7fe fb60 	bl	800014c <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4931      	ldr	r1, [pc, #196]	; (8001b58 <main+0x162c>)
 8001a92:	482f      	ldr	r0, [pc, #188]	; (8001b50 <main+0x1624>)
 8001a94:	f004 f8a6 	bl	8005be4 <strncat>
										strncat(s_nfc_tag_date, s_newline, strlen(s_newline));
 8001a98:	4822      	ldr	r0, [pc, #136]	; (8001b24 <main+0x15f8>)
 8001a9a:	f7fe fb57 	bl	800014c <strlen>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4920      	ldr	r1, [pc, #128]	; (8001b24 <main+0x15f8>)
 8001aa4:	482a      	ldr	r0, [pc, #168]	; (8001b50 <main+0x1624>)
 8001aa6:	f004 f89d 	bl	8005be4 <strncat>



									//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
										Usart2_SendData(s_nfc_tag_date,strlen(s_nfc_tag_date));
 8001aaa:	4829      	ldr	r0, [pc, #164]	; (8001b50 <main+0x1624>)
 8001aac:	f7fe fb4e 	bl	800014c <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4826      	ldr	r0, [pc, #152]	; (8001b50 <main+0x1624>)
 8001ab6:	f003 fdb5 	bl	8005624 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001aba:	481a      	ldr	r0, [pc, #104]	; (8001b24 <main+0x15f8>)
 8001abc:	f7fe fb46 	bl	800014c <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4817      	ldr	r0, [pc, #92]	; (8001b24 <main+0x15f8>)
 8001ac6:	f003 fdad 	bl	8005624 <Usart2_SendData>

										memset(s_nfc_tag_date, 0, strlen(s_nfc_tag_date));
 8001aca:	4821      	ldr	r0, [pc, #132]	; (8001b50 <main+0x1624>)
 8001acc:	f7fe fb3e 	bl	800014c <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	481e      	ldr	r0, [pc, #120]	; (8001b50 <main+0x1624>)
 8001ad8:	f004 f850 	bl	8005b7c <memset>

								}
								if(!success)
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <main+0x1630>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <main+0x15be>
								{

									//Usart2_SendData(s_pn_notfoundcard,sizeof(s_pn_notfoundcard));
									b_discannfc=0;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <main+0x1634>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]

								}

								cntlooppn532=0;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <main+0x1638>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
							}//конец if(cntlooppn532==CNT_LOOP_PN532)

							cntlooppn532++;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <main+0x1638>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <main+0x1638>)
 8001af8:	6013      	str	r3, [r2, #0]

							LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 1 );
 8001afa:	2201      	movs	r2, #1
 8001afc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001b00:	4815      	ldr	r0, [pc, #84]	; (8001b58 <main+0x162c>)
 8001b02:	f001 f97d 	bl	8002e00 <LCD_RunStringNFCCode>
 8001b06:	e03d      	b.n	8001b84 <main+0x1658>

		}//конец если не режим записи метки NFC
		else{ //если режим записи метки NFC


			if(!b_1secflg){
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <main+0x163c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d12f      	bne.n	8001b70 <main+0x1644>
				LCD_SetCursor ( LCD_CURSOR_2STR );
 8001b10:	20c0      	movs	r0, #192	; 0xc0
 8001b12:	f000 fefd 	bl	8002910 <LCD_SetCursor>
				LCD_WriteString (uidnfcwrdara );
 8001b16:	4815      	ldr	r0, [pc, #84]	; (8001b6c <main+0x1640>)
 8001b18:	f000 ffaa 	bl	8002a70 <LCD_WriteString>
 8001b1c:	e032      	b.n	8001b84 <main+0x1658>
 8001b1e:	bf00      	nop
 8001b20:	200002d8 	.word	0x200002d8
 8001b24:	20000168 	.word	0x20000168
 8001b28:	20000324 	.word	0x20000324
 8001b2c:	200002f4 	.word	0x200002f4
 8001b30:	200007c8 	.word	0x200007c8
 8001b34:	20000338 	.word	0x20000338
 8001b38:	20000858 	.word	0x20000858
 8001b3c:	10624dd3 	.word	0x10624dd3
 8001b40:	66666667 	.word	0x66666667
 8001b44:	20000220 	.word	0x20000220
 8001b48:	51eb851f 	.word	0x51eb851f
 8001b4c:	cccccccd 	.word	0xcccccccd
 8001b50:	20000818 	.word	0x20000818
 8001b54:	200001d0 	.word	0x200001d0
 8001b58:	20000560 	.word	0x20000560
 8001b5c:	2000068e 	.word	0x2000068e
 8001b60:	2000068d 	.word	0x2000068d
 8001b64:	200006a8 	.word	0x200006a8
 8001b68:	200006ac 	.word	0x200006ac
 8001b6c:	20000020 	.word	0x20000020

			}
			else{
				LCD_SetCursor ( LCD_CURSOR_2STR+u8_cntindex );
 8001b70:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <main+0x17f8>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	3b40      	subs	r3, #64	; 0x40
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fec9 	bl	8002910 <LCD_SetCursor>
				LCD_WriteString (s_space);
 8001b7e:	486a      	ldr	r0, [pc, #424]	; (8001d28 <main+0x17fc>)
 8001b80:	f000 ff76 	bl	8002a70 <LCD_WriteString>

			}
		}


		if(u8_wrnfcstatus!=0 && b_wrstr1==TRUE){
 8001b84:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <main+0x1800>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01a      	beq.n	8001bc2 <main+0x1696>
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <main+0x1804>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d116      	bne.n	8001bc2 <main+0x1696>
			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8001b94:	4867      	ldr	r0, [pc, #412]	; (8001d34 <main+0x1808>)
 8001b96:	f7fe fad9 	bl	800014c <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4864      	ldr	r0, [pc, #400]	; (8001d34 <main+0x1808>)
 8001ba2:	f003 ffeb 	bl	8005b7c <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_wrnfc, USB_STATE_LEN );
 8001ba6:	221a      	movs	r2, #26
 8001ba8:	4963      	ldr	r1, [pc, #396]	; (8001d38 <main+0x180c>)
 8001baa:	4862      	ldr	r0, [pc, #392]	; (8001d34 <main+0x1808>)
 8001bac:	f004 f805 	bl	8005bba <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001bb6:	485f      	ldr	r0, [pc, #380]	; (8001d34 <main+0x1808>)
 8001bb8:	f001 f88e 	bl	8002cd8 <LCD_RunStringBARCode>
			  b_wrstr1=FALSE;
 8001bbc:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <main+0x1804>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
		}

		LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 1 );
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001bc8:	485a      	ldr	r0, [pc, #360]	; (8001d34 <main+0x1808>)
 8001bca:	f001 f885 	bl	8002cd8 <LCD_RunStringBARCode>

		if(u8_wrnfcstatus==9){
 8001bce:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <main+0x1800>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	f47e af3c 	bne.w	8000a50 <main+0x524>
			PN532_WriteTagtoHex();
 8001bd8:	f000 fd20 	bl	800261c <PN532_WriteTagtoHex>

			//b_hextostr = fourbytes2strhex (&outwrdata[0], &uidhex2pc4b[0]);

			Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 8001bdc:	4857      	ldr	r0, [pc, #348]	; (8001d3c <main+0x1810>)
 8001bde:	f7fe fab5 	bl	800014c <strlen>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4855      	ldr	r0, [pc, #340]	; (8001d3c <main+0x1810>)
 8001be8:	f003 fd1c 	bl	8005624 <Usart2_SendData>
			Usart2_SendData(outwrdata,sizeof(outwrdata));
 8001bec:	2104      	movs	r1, #4
 8001bee:	4854      	ldr	r0, [pc, #336]	; (8001d40 <main+0x1814>)
 8001bf0:	f003 fd18 	bl	8005624 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8001bf4:	4853      	ldr	r0, [pc, #332]	; (8001d44 <main+0x1818>)
 8001bf6:	f7fe faa9 	bl	800014c <strlen>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4851      	ldr	r0, [pc, #324]	; (8001d44 <main+0x1818>)
 8001c00:	f003 fd10 	bl	8005624 <Usart2_SendData>

			pn532_wr_stat=PN532_Write_Data(uid,uidLength, 1, outwrdata);
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <main+0x181c>)
 8001c06:	7819      	ldrb	r1, [r3, #0]
 8001c08:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <main+0x1814>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	484f      	ldr	r0, [pc, #316]	; (8001d4c <main+0x1820>)
 8001c0e:	f7fe fbdd 	bl	80003cc <PN532_Write_Data>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <main+0x1824>)
 8001c18:	701a      	strb	r2, [r3, #0]

			switch(pn532_wr_stat){
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <main+0x1824>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d861      	bhi.n	8001ce6 <main+0x17ba>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <main+0x16fc>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001c3d 	.word	0x08001c3d
 8001c2c:	08001c5f 	.word	0x08001c5f
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001ca3 	.word	0x08001ca3
 8001c38:	08001cc5 	.word	0x08001cc5
			case 0:
				Usart2_SendData(s_pc_PN532_info2,strlen(s_pc_PN532_info2));
 8001c3c:	4845      	ldr	r0, [pc, #276]	; (8001d54 <main+0x1828>)
 8001c3e:	f7fe fa85 	bl	800014c <strlen>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4619      	mov	r1, r3
 8001c46:	4843      	ldr	r0, [pc, #268]	; (8001d54 <main+0x1828>)
 8001c48:	f003 fcec 	bl	8005624 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001c4c:	483d      	ldr	r0, [pc, #244]	; (8001d44 <main+0x1818>)
 8001c4e:	f7fe fa7d 	bl	800014c <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4619      	mov	r1, r3
 8001c56:	483b      	ldr	r0, [pc, #236]	; (8001d44 <main+0x1818>)
 8001c58:	f003 fce4 	bl	8005624 <Usart2_SendData>
				break;
 8001c5c:	e043      	b.n	8001ce6 <main+0x17ba>
			case 1:
				Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 8001c5e:	483e      	ldr	r0, [pc, #248]	; (8001d58 <main+0x182c>)
 8001c60:	f7fe fa74 	bl	800014c <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	483b      	ldr	r0, [pc, #236]	; (8001d58 <main+0x182c>)
 8001c6a:	f003 fcdb 	bl	8005624 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001c6e:	4835      	ldr	r0, [pc, #212]	; (8001d44 <main+0x1818>)
 8001c70:	f7fe fa6c 	bl	800014c <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4619      	mov	r1, r3
 8001c78:	4832      	ldr	r0, [pc, #200]	; (8001d44 <main+0x1818>)
 8001c7a:	f003 fcd3 	bl	8005624 <Usart2_SendData>
				break;
 8001c7e:	e032      	b.n	8001ce6 <main+0x17ba>
			case 2:
				Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8001c80:	4836      	ldr	r0, [pc, #216]	; (8001d5c <main+0x1830>)
 8001c82:	f7fe fa63 	bl	800014c <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4834      	ldr	r0, [pc, #208]	; (8001d5c <main+0x1830>)
 8001c8c:	f003 fcca 	bl	8005624 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001c90:	482c      	ldr	r0, [pc, #176]	; (8001d44 <main+0x1818>)
 8001c92:	f7fe fa5b 	bl	800014c <strlen>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	482a      	ldr	r0, [pc, #168]	; (8001d44 <main+0x1818>)
 8001c9c:	f003 fcc2 	bl	8005624 <Usart2_SendData>
				break;
 8001ca0:	e021      	b.n	8001ce6 <main+0x17ba>
			case 3:
				Usart2_SendData(s_pc_PN532_err2,strlen(s_pc_PN532_err2));
 8001ca2:	482f      	ldr	r0, [pc, #188]	; (8001d60 <main+0x1834>)
 8001ca4:	f7fe fa52 	bl	800014c <strlen>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4619      	mov	r1, r3
 8001cac:	482c      	ldr	r0, [pc, #176]	; (8001d60 <main+0x1834>)
 8001cae:	f003 fcb9 	bl	8005624 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001cb2:	4824      	ldr	r0, [pc, #144]	; (8001d44 <main+0x1818>)
 8001cb4:	f7fe fa4a 	bl	800014c <strlen>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4821      	ldr	r0, [pc, #132]	; (8001d44 <main+0x1818>)
 8001cbe:	f003 fcb1 	bl	8005624 <Usart2_SendData>
				break;
 8001cc2:	e010      	b.n	8001ce6 <main+0x17ba>
			case 4:
				Usart2_SendData(s_pc_PN532_err3,strlen(s_pc_PN532_err3));
 8001cc4:	4827      	ldr	r0, [pc, #156]	; (8001d64 <main+0x1838>)
 8001cc6:	f7fe fa41 	bl	800014c <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4825      	ldr	r0, [pc, #148]	; (8001d64 <main+0x1838>)
 8001cd0:	f003 fca8 	bl	8005624 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001cd4:	481b      	ldr	r0, [pc, #108]	; (8001d44 <main+0x1818>)
 8001cd6:	f7fe fa39 	bl	800014c <strlen>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4819      	ldr	r0, [pc, #100]	; (8001d44 <main+0x1818>)
 8001ce0:	f003 fca0 	bl	8005624 <Usart2_SendData>
				break;
 8001ce4:	bf00      	nop

			}

			//PN532_WriteID();

			u8_wrnfcstatus=0;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <main+0x1800>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]

			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8001cec:	4811      	ldr	r0, [pc, #68]	; (8001d34 <main+0x1808>)
 8001cee:	f7fe fa2d 	bl	800014c <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	480e      	ldr	r0, [pc, #56]	; (8001d34 <main+0x1808>)
 8001cfa:	f003 ff3f 	bl	8005b7c <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_scanner_rdy, USB_STATE_LEN );
 8001cfe:	221a      	movs	r2, #26
 8001d00:	4919      	ldr	r1, [pc, #100]	; (8001d68 <main+0x183c>)
 8001d02:	480c      	ldr	r0, [pc, #48]	; (8001d34 <main+0x1808>)
 8001d04:	f003 ff59 	bl	8005bba <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001d0e:	4809      	ldr	r0, [pc, #36]	; (8001d34 <main+0x1808>)
 8001d10:	f000 ffe2 	bl	8002cd8 <LCD_RunStringBARCode>


			//LCD_SetCursor ( LCD_CURSOR_1STR );
		//	LCD_WriteString (s_lcd_scanner_rdy );

			LCD_SetCursor ( LCD_CURSOR_2STR );
 8001d14:	20c0      	movs	r0, #192	; 0xc0
 8001d16:	f000 fdfb 	bl	8002910 <LCD_SetCursor>
			LCD_WriteString (s_lcd_ready );
 8001d1a:	4814      	ldr	r0, [pc, #80]	; (8001d6c <main+0x1840>)
 8001d1c:	f000 fea8 	bl	8002a70 <LCD_WriteString>
	while(1){
 8001d20:	f7fe be96 	b.w	8000a50 <main+0x524>
 8001d24:	20000698 	.word	0x20000698
 8001d28:	200001d0 	.word	0x200001d0
 8001d2c:	200006bb 	.word	0x200006bb
 8001d30:	200006bc 	.word	0x200006bc
 8001d34:	20000544 	.word	0x20000544
 8001d38:	200000c8 	.word	0x200000c8
 8001d3c:	20000198 	.word	0x20000198
 8001d40:	2000069c 	.word	0x2000069c
 8001d44:	20000168 	.word	0x20000168
 8001d48:	200006a0 	.word	0x200006a0
 8001d4c:	20000690 	.word	0x20000690
 8001d50:	200006be 	.word	0x200006be
 8001d54:	20000254 	.word	0x20000254
 8001d58:	20000270 	.word	0x20000270
 8001d5c:	200002d8 	.word	0x200002d8
 8001d60:	20000294 	.word	0x20000294
 8001d64:	200002b0 	.word	0x200002b0
 8001d68:	20000034 	.word	0x20000034
 8001d6c:	20000064 	.word	0x20000064

08001d70 <NVIC_EnableIRQ>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2201      	movs	r2, #1
 8001d82:	fa02 f103 	lsl.w	r1, r2, r3
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <NVIC_EnableIRQ+0x2c>)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <LED_Init>:

NVIC_InitTypeDef        NVIC_InitTmr1Structure;
EXTI_InitTypeDef		EXTI_InitExtiStruct;
NVIC_InitTypeDef		NVIC_InitExtiStruct;

void LED_Init(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0


	/*
	 * EXTI pin configure
	 */
	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );
 8001da6:	2101      	movs	r1, #1
 8001da8:	2004      	movs	r0, #4
 8001daa:	f002 fffb 	bl	8004da4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8001dae:	2302      	movs	r3, #2
 8001db0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8001db2:	2310      	movs	r3, #16
 8001db4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <LED_Init+0x3c>)
 8001dc2:	f002 fc5b 	bl	800467c <GPIO_Init>
//#define LED_GPIO_PORT					GPIOA
//#define LED_PIN							GPIO_Pin_12


	GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <LED_Init+0x3c>)
 8001dce:	f002 fd2a 	bl	8004826 <GPIO_WriteBit>
//	NVIC_InitStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitStruct );
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010800 	.word	0x40010800

08001de0 <BTN_Init>:





void BTN_Init(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	/*
	 * EXTI pin configure
	 */
	BTN_RCC_PERIPH_CLOCK_CMD ( BTN_RCC_GPIO_PORT, ENABLE );
 8001de6:	2101      	movs	r1, #1
 8001de8:	2008      	movs	r0, #8
 8001dea:	f002 ffdb 	bl	8004da4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8001dee:	2302      	movs	r3, #2
 8001df0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8001df2:	2348      	movs	r3, #72	; 0x48
 8001df4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = BTN_PIN;
 8001df6:	2301      	movs	r3, #1
 8001df8:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( BTN_GPIO_PORT, &GPIO_InitStruct );
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <BTN_Init+0x2c>)
 8001e00:	f002 fc3c 	bl	800467c <GPIO_Init>
//	NVIC_InitExtiStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitExtiStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitExtiStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitExtiStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitExtiStruct );
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40010c00 	.word	0x40010c00

08001e10 <BTN_IRQHandler>:



void BTN_IRQHandler ( void ) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus ( BTN_EXTI_LINE ) == SET) {
 8001e14:	2001      	movs	r0, #1
 8001e16:	f002 fc09 	bl	800462c <EXTI_GetFlagStatus>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d134      	bne.n	8001e8a <BTN_IRQHandler+0x7a>
		if(u8_btnstate==BTN_UNPRESSED){
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <BTN_IRQHandler+0x80>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d117      	bne.n	8001e58 <BTN_IRQHandler+0x48>

		  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <BTN_IRQHandler+0x84>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	70da      	strb	r2, [r3, #3]
		  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <BTN_IRQHandler+0x88>)
 8001e30:	2208      	movs	r2, #8
 8001e32:	715a      	strb	r2, [r3, #5]
		  NVIC_Init ( &NVIC_InitExtiStruct );
 8001e34:	4817      	ldr	r0, [pc, #92]	; (8001e94 <BTN_IRQHandler+0x84>)
 8001e36:	f002 fb97 	bl	8004568 <NVIC_Init>
		  cnttimer1=0;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <BTN_IRQHandler+0x8c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	801a      	strh	r2, [r3, #0]
		  u8_btnstate=BTN_PRESSED;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <BTN_IRQHandler+0x80>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
		  EnableTimer1Interrupt();
 8001e46:	f000 f869 	bl	8001f1c <EnableTimer1Interrupt>
		  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 1);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e50:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <BTN_IRQHandler+0x90>)
 8001e52:	f002 fce8 	bl	8004826 <GPIO_WriteBit>
 8001e56:	e015      	b.n	8001e84 <BTN_IRQHandler+0x74>
		}
		else{
			//DisableTimer1Interrupt
			  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <BTN_IRQHandler+0x84>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	70da      	strb	r2, [r3, #3]
			  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <BTN_IRQHandler+0x88>)
 8001e60:	220c      	movs	r2, #12
 8001e62:	715a      	strb	r2, [r3, #5]
			  NVIC_Init ( &NVIC_InitExtiStruct );
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <BTN_IRQHandler+0x84>)
 8001e66:	f002 fb7f 	bl	8004568 <NVIC_Init>
			  timer1data=cnttimer1;
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <BTN_IRQHandler+0x8c>)
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <BTN_IRQHandler+0x94>)
 8001e70:	801a      	strh	r2, [r3, #0]
			  u8_btnstate=BTN_UNPRESSED;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <BTN_IRQHandler+0x80>)
 8001e74:	2202      	movs	r2, #2
 8001e76:	701a      	strb	r2, [r3, #0]
			  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7e:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <BTN_IRQHandler+0x90>)
 8001e80:	f002 fcd1 	bl	8004826 <GPIO_WriteBit>
//		}
//		else{
//			GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
//			b_ledbtnstate=FALSE;
//		}
		EXTI_ClearITPendingBit ( BTN_EXTI_LINE );
 8001e84:	2001      	movs	r0, #1
 8001e86:	f002 fbeb 	bl	8004660 <EXTI_ClearITPendingBit>


	}
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200006b5 	.word	0x200006b5
 8001e94:	20000870 	.word	0x20000870
 8001e98:	20000868 	.word	0x20000868
 8001e9c:	200006b2 	.word	0x200006b2
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	200006b6 	.word	0x200006b6

08001ea8 <Timer1Init>:


void Timer1Init(void)	{		//	(функция инициализации таймера)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
TIM_TimeBaseInitTypeDef		TIMER1_InitStruct;


//	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001eae:	2101      	movs	r1, #1
 8001eb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001eb4:	f002 ff76 	bl	8004da4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );

*/
	TIMER1_InitStruct.TIM_Prescaler=TIMER1_PRESCALER-1;	//предделитель 720-1
 8001eb8:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001ebc:	80bb      	strh	r3, [r7, #4]
	TIMER1_InitStruct.TIM_CounterMode=TIM_CounterMode_Up;	//режим прямого счета
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	80fb      	strh	r3, [r7, #6]
	TIMER1_InitStruct.TIM_Period=TIMER1_RELOAD_PERIOD;		//множитель периодов?
 8001ec2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ec6:	813b      	strh	r3, [r7, #8]
	TIMER1_InitStruct.TIM_ClockDivision=TIM_CKD_DIV1;		//делитель самого таймера(можно не ставить)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	817b      	strh	r3, [r7, #10]
	TIMER1_InitStruct.TIM_RepetitionCounter=0x0000;		//счетчик повторов?
 8001ecc:	2300      	movs	r3, #0
 8001ece:	733b      	strb	r3, [r7, #12]
	TIM_TimeBaseInit(TIM1,&TIMER1_InitStruct);
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480f      	ldr	r0, [pc, #60]	; (8001f14 <Timer1Init+0x6c>)
 8001ed6:	f003 f8b7 	bl	8005048 <TIM_TimeBaseInit>


	//timer1data=1;
    NVIC_InitTmr1Structure.NVIC_IRQChannel = TIM1_UP_IRQn;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <Timer1Init+0x70>)
 8001edc:	2219      	movs	r2, #25
 8001ede:	701a      	strb	r2, [r3, #0]
    NVIC_InitTmr1Structure.NVIC_IRQChannelPreemptionPriority = 0;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <Timer1Init+0x70>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	705a      	strb	r2, [r3, #1]
    NVIC_InitTmr1Structure.NVIC_IRQChannelSubPriority = 1;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <Timer1Init+0x70>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	709a      	strb	r2, [r3, #2]
    NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = DISABLE;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <Timer1Init+0x70>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitTmr1Structure);
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <Timer1Init+0x70>)
 8001ef4:	f002 fb38 	bl	8004568 <NVIC_Init>

	TIM_ITConfig(TIM1, TIM_IT_Update, DISABLE);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2101      	movs	r1, #1
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <Timer1Init+0x6c>)
 8001efe:	f003 f93e 	bl	800517e <TIM_ITConfig>
	TIM_Cmd(TIM1,DISABLE);
 8001f02:	2100      	movs	r1, #0
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <Timer1Init+0x6c>)
 8001f06:	f003 f91b 	bl	8005140 <TIM_Cmd>


	//NVIC_EnableIRQ(TIM1_UP_IRQn);


}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	20000864 	.word	0x20000864

08001f1c <EnableTimer1Interrupt>:



void EnableTimer1Interrupt()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    //NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = ENABLE;
    //NVIC_Init(&NVIC_InitTmr1Structure);
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8001f20:	2201      	movs	r2, #1
 8001f22:	2101      	movs	r1, #1
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <EnableTimer1Interrupt+0x20>)
 8001f26:	f003 f92a 	bl	800517e <TIM_ITConfig>
	TIM_Cmd(TIM1,ENABLE);
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <EnableTimer1Interrupt+0x20>)
 8001f2e:	f003 f907 	bl	8005140 <TIM_Cmd>

    NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f32:	2019      	movs	r0, #25
 8001f34:	f7ff ff1c 	bl	8001d70 <NVIC_EnableIRQ>

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <TIM1_IRQHandler>:




void TIM1_IRQHandler()
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
uint8_t u8_cntindex;
//--------------------------------------------------------------------------------------------

 */

	if(TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET){
 8001f44:	2101      	movs	r1, #1
 8001f46:	4887      	ldr	r0, [pc, #540]	; (8002164 <TIM1_IRQHandler+0x224>)
 8001f48:	f003 f93c 	bl	80051c4 <TIM_GetITStatus>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8105 	beq.w	800215e <TIM1_IRQHandler+0x21e>


		if (GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN ) == Bit_RESET) {//если кнопка нажата
 8001f54:	2101      	movs	r1, #1
 8001f56:	4884      	ldr	r0, [pc, #528]	; (8002168 <TIM1_IRQHandler+0x228>)
 8001f58:	f002 fc4c 	bl	80047f4 <GPIO_ReadInputDataBit>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d12d      	bne.n	8001fbe <TIM1_IRQHandler+0x7e>

			   if (previousState==1){
 8001f62:	4b82      	ldr	r3, [pc, #520]	; (800216c <TIM1_IRQHandler+0x22c>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <TIM1_IRQHandler+0x38>
				   u8_btnstate=0;
 8001f6a:	4b81      	ldr	r3, [pc, #516]	; (8002170 <TIM1_IRQHandler+0x230>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
				   cnttimer1=0;
 8001f70:	4b80      	ldr	r3, [pc, #512]	; (8002174 <TIM1_IRQHandler+0x234>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	e0ea      	b.n	800214e <TIM1_IRQHandler+0x20e>

				}
			   else{
				   cnttimer1++;
 8001f78:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <TIM1_IRQHandler+0x234>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b7c      	ldr	r3, [pc, #496]	; (8002174 <TIM1_IRQHandler+0x234>)
 8001f82:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==60 && u8_wrnfcstatus==0) {
 8001f84:	4b7b      	ldr	r3, [pc, #492]	; (8002174 <TIM1_IRQHandler+0x234>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	2b3c      	cmp	r3, #60	; 0x3c
 8001f8a:	f040 80e0 	bne.w	800214e <TIM1_IRQHandler+0x20e>
 8001f8e:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <TIM1_IRQHandler+0x238>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80db 	bne.w	800214e <TIM1_IRQHandler+0x20e>

					   u8_wrnfcstatus=1; b_wrstr1=TRUE;//флаг выдачи первой строки в режиме записи
 8001f98:	4b77      	ldr	r3, [pc, #476]	; (8002178 <TIM1_IRQHandler+0x238>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	4b77      	ldr	r3, [pc, #476]	; (800217c <TIM1_IRQHandler+0x23c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
					   u8_cntchar=0; u8_cntindex=0;
 8001fa4:	4b76      	ldr	r3, [pc, #472]	; (8002180 <TIM1_IRQHandler+0x240>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	4b76      	ldr	r3, [pc, #472]	; (8002184 <TIM1_IRQHandler+0x244>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
					   b_1secflg=FALSE;
 8001fb0:	4b75      	ldr	r3, [pc, #468]	; (8002188 <TIM1_IRQHandler+0x248>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
					   cnttimer1sec=0;
 8001fb6:	4b75      	ldr	r3, [pc, #468]	; (800218c <TIM1_IRQHandler+0x24c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	e0c7      	b.n	800214e <TIM1_IRQHandler+0x20e>
			   }

		}
		else{//если кнопка не нажата

			 if(previousState==0){
 8001fbe:	4b6b      	ldr	r3, [pc, #428]	; (800216c <TIM1_IRQHandler+0x22c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d131      	bne.n	800202a <TIM1_IRQHandler+0xea>
				 u8_btnstate=1;
 8001fc6:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <TIM1_IRQHandler+0x230>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
				 cnttimer1=0;
 8001fcc:	4b69      	ldr	r3, [pc, #420]	; (8002174 <TIM1_IRQHandler+0x234>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
				 cnttimer30sec=0;
 8001fd2:	4b6f      	ldr	r3, [pc, #444]	; (8002190 <TIM1_IRQHandler+0x250>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	801a      	strh	r2, [r3, #0]
				 switch (u8_wrnfcstatus){
 8001fd8:	4b67      	ldr	r3, [pc, #412]	; (8002178 <TIM1_IRQHandler+0x238>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	2b07      	cmp	r3, #7
 8001fe0:	f200 80b5 	bhi.w	800214e <TIM1_IRQHandler+0x20e>
				 case 4:
				 case 5:
				 case 6:
				 case 7:
				 case 8:
					    u8_cntchar++;
 8001fe4:	4b66      	ldr	r3, [pc, #408]	; (8002180 <TIM1_IRQHandler+0x240>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b64      	ldr	r3, [pc, #400]	; (8002180 <TIM1_IRQHandler+0x240>)
 8001fee:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar>15) u8_cntchar=0;
 8001ff0:	4b63      	ldr	r3, [pc, #396]	; (8002180 <TIM1_IRQHandler+0x240>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d902      	bls.n	8001ffe <TIM1_IRQHandler+0xbe>
 8001ff8:	4b61      	ldr	r3, [pc, #388]	; (8002180 <TIM1_IRQHandler+0x240>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar<10){
 8001ffe:	4b60      	ldr	r3, [pc, #384]	; (8002180 <TIM1_IRQHandler+0x240>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b09      	cmp	r3, #9
 8002004:	d808      	bhi.n	8002018 <TIM1_IRQHandler+0xd8>
					       uidnfcwrdara[u8_cntindex]= 48 + u8_cntchar;
 8002006:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <TIM1_IRQHandler+0x240>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <TIM1_IRQHandler+0x244>)
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	3330      	adds	r3, #48	; 0x30
 8002010:	b2d9      	uxtb	r1, r3
 8002012:	4b60      	ldr	r3, [pc, #384]	; (8002194 <TIM1_IRQHandler+0x254>)
 8002014:	5499      	strb	r1, [r3, r2]
					    }
					    else{
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
					    }
					 break;
 8002016:	e09a      	b.n	800214e <TIM1_IRQHandler+0x20e>
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <TIM1_IRQHandler+0x240>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4a59      	ldr	r2, [pc, #356]	; (8002184 <TIM1_IRQHandler+0x244>)
 800201e:	7812      	ldrb	r2, [r2, #0]
 8002020:	3337      	adds	r3, #55	; 0x37
 8002022:	b2d9      	uxtb	r1, r3
 8002024:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <TIM1_IRQHandler+0x254>)
 8002026:	5499      	strb	r1, [r3, r2]
					 break;
 8002028:	e091      	b.n	800214e <TIM1_IRQHandler+0x20e>
				 }

				}

			   else{
				   cnttimer30sec++;
 800202a:	4b59      	ldr	r3, [pc, #356]	; (8002190 <TIM1_IRQHandler+0x250>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	4b57      	ldr	r3, [pc, #348]	; (8002190 <TIM1_IRQHandler+0x250>)
 8002034:	801a      	strh	r2, [r3, #0]
				   if(cnttimer30sec==600){
 8002036:	4b56      	ldr	r3, [pc, #344]	; (8002190 <TIM1_IRQHandler+0x250>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800203e:	d105      	bne.n	800204c <TIM1_IRQHandler+0x10c>
					   u8_wrnfcstatus=0;
 8002040:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <TIM1_IRQHandler+0x238>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
					   cnttimer30sec=0;
 8002046:	4b52      	ldr	r3, [pc, #328]	; (8002190 <TIM1_IRQHandler+0x250>)
 8002048:	2200      	movs	r2, #0
 800204a:	801a      	strh	r2, [r3, #0]
				   }


				   cnttimer1sec++;
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <TIM1_IRQHandler+0x24c>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b4d      	ldr	r3, [pc, #308]	; (800218c <TIM1_IRQHandler+0x24c>)
 8002056:	801a      	strh	r2, [r3, #0]
				   if(cnttimer1sec==10){
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <TIM1_IRQHandler+0x24c>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	2b0a      	cmp	r3, #10
 800205e:	d108      	bne.n	8002072 <TIM1_IRQHandler+0x132>
					   cnttimer1sec=0;
 8002060:	4b4a      	ldr	r3, [pc, #296]	; (800218c <TIM1_IRQHandler+0x24c>)
 8002062:	2200      	movs	r2, #0
 8002064:	801a      	strh	r2, [r3, #0]
					   b_1secflg=~b_1secflg;
 8002066:	4b48      	ldr	r3, [pc, #288]	; (8002188 <TIM1_IRQHandler+0x248>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	43db      	mvns	r3, r3
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <TIM1_IRQHandler+0x248>)
 8002070:	701a      	strb	r2, [r3, #0]
				   }

				   cnttimer1++;
 8002072:	4b40      	ldr	r3, [pc, #256]	; (8002174 <TIM1_IRQHandler+0x234>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <TIM1_IRQHandler+0x234>)
 800207c:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==100 ) {
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <TIM1_IRQHandler+0x234>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d162      	bne.n	800214c <TIM1_IRQHandler+0x20c>
					   switch (u8_wrnfcstatus){
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <TIM1_IRQHandler+0x238>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	2b07      	cmp	r3, #7
 800208e:	d85e      	bhi.n	800214e <TIM1_IRQHandler+0x20e>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <TIM1_IRQHandler+0x158>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020b9 	.word	0x080020b9
 800209c:	080020cd 	.word	0x080020cd
 80020a0:	080020e1 	.word	0x080020e1
 80020a4:	080020f5 	.word	0x080020f5
 80020a8:	08002109 	.word	0x08002109
 80020ac:	0800211d 	.word	0x0800211d
 80020b0:	08002131 	.word	0x08002131
 80020b4:	08002145 	.word	0x08002145
					   case 1:
						   u8_wrnfcstatus=2;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <TIM1_IRQHandler+0x238>)
 80020ba:	2202      	movs	r2, #2
 80020bc:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=1;
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <TIM1_IRQHandler+0x240>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <TIM1_IRQHandler+0x244>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
						   break;
 80020ca:	e040      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   case 2:
						   u8_wrnfcstatus=3;
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <TIM1_IRQHandler+0x238>)
 80020ce:	2203      	movs	r2, #3
 80020d0:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=2;
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <TIM1_IRQHandler+0x240>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <TIM1_IRQHandler+0x244>)
 80020da:	2202      	movs	r2, #2
 80020dc:	701a      	strb	r2, [r3, #0]
						   break;
 80020de:	e036      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   case 3:
						   u8_wrnfcstatus=4;
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <TIM1_IRQHandler+0x238>)
 80020e2:	2204      	movs	r2, #4
 80020e4:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=3;
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <TIM1_IRQHandler+0x240>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <TIM1_IRQHandler+0x244>)
 80020ee:	2203      	movs	r2, #3
 80020f0:	701a      	strb	r2, [r3, #0]
						   break;
 80020f2:	e02c      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   case 4:
						   u8_wrnfcstatus=5;
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <TIM1_IRQHandler+0x238>)
 80020f6:	2205      	movs	r2, #5
 80020f8:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=4;
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <TIM1_IRQHandler+0x240>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <TIM1_IRQHandler+0x244>)
 8002102:	2204      	movs	r2, #4
 8002104:	701a      	strb	r2, [r3, #0]
						   break;
 8002106:	e022      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   case 5:
						   u8_wrnfcstatus=6;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <TIM1_IRQHandler+0x238>)
 800210a:	2206      	movs	r2, #6
 800210c:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=5;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <TIM1_IRQHandler+0x240>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <TIM1_IRQHandler+0x244>)
 8002116:	2205      	movs	r2, #5
 8002118:	701a      	strb	r2, [r3, #0]
						   break;
 800211a:	e018      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   case 6:
						   u8_wrnfcstatus=7;
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <TIM1_IRQHandler+0x238>)
 800211e:	2207      	movs	r2, #7
 8002120:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=6;
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <TIM1_IRQHandler+0x240>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <TIM1_IRQHandler+0x244>)
 800212a:	2206      	movs	r2, #6
 800212c:	701a      	strb	r2, [r3, #0]
						   break;
 800212e:	e00e      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   case 7:
						   u8_wrnfcstatus=8;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <TIM1_IRQHandler+0x238>)
 8002132:	2208      	movs	r2, #8
 8002134:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=7;
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <TIM1_IRQHandler+0x240>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <TIM1_IRQHandler+0x244>)
 800213e:	2207      	movs	r2, #7
 8002140:	701a      	strb	r2, [r3, #0]
						   break;
 8002142:	e004      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   case 8:
					   		u8_wrnfcstatus=9;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <TIM1_IRQHandler+0x238>)
 8002146:	2209      	movs	r2, #9
 8002148:	701a      	strb	r2, [r3, #0]

					   		break;
 800214a:	e000      	b.n	800214e <TIM1_IRQHandler+0x20e>
					   }

				   }
 800214c:	bf00      	nop
			   }

		}

		previousState=u8_btnstate;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <TIM1_IRQHandler+0x230>)
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <TIM1_IRQHandler+0x22c>)
 8002154:	701a      	strb	r2, [r3, #0]
//	}
//



    TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
 8002156:	2101      	movs	r1, #1
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <TIM1_IRQHandler+0x224>)
 800215a:	f003 f85c 	bl	8005216 <TIM_ClearITPendingBit>

	}
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40010c00 	.word	0x40010c00
 800216c:	200006b4 	.word	0x200006b4
 8002170:	200006b5 	.word	0x200006b5
 8002174:	200006b2 	.word	0x200006b2
 8002178:	200006bb 	.word	0x200006bb
 800217c:	200006bc 	.word	0x200006bc
 8002180:	20000697 	.word	0x20000697
 8002184:	20000698 	.word	0x20000698
 8002188:	200006ac 	.word	0x200006ac
 800218c:	200006b0 	.word	0x200006b0
 8002190:	200006ae 	.word	0x200006ae
 8002194:	20000020 	.word	0x20000020

08002198 <GetTickCount>:

uint32_t GetTickCount() {
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return tick;
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <GetTickCount+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	20000874 	.word	0x20000874

080021ac <PN532_FirmWareVersion2String>:


void PN532_FirmWareVersion2String(uint32_t version){
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

		 pn_chip=version>>24;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0e1b      	lsrs	r3, r3, #24
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <PN532_FirmWareVersion2String+0x13c>)
 80021bc:	701a      	strb	r2, [r3, #0]
		 pn_fw1chip=version>>16;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b49      	ldr	r3, [pc, #292]	; (80022ec <PN532_FirmWareVersion2String+0x140>)
 80021c6:	701a      	strb	r2, [r3, #0]
		 pn_fw2chip=version>>8;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <PN532_FirmWareVersion2String+0x144>)
 80021d0:	701a      	strb	r2, [r3, #0]
		 pn_suppchip=version&0xFF;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <PN532_FirmWareVersion2String+0x148>)
 80021d8:	701a      	strb	r2, [r3, #0]

		 s_pn_nchip[0] = 0x30 + (pn_chip >> 4);
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <PN532_FirmWareVersion2String+0x13c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3330      	adds	r3, #48	; 0x30
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <PN532_FirmWareVersion2String+0x14c>)
 80021e8:	701a      	strb	r2, [r3, #0]
		 s_pn_nchip[1] = 0x30 + (pn_chip & 0x0F);
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <PN532_FirmWareVersion2String+0x13c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3330      	adds	r3, #48	; 0x30
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <PN532_FirmWareVersion2String+0x14c>)
 80021fa:	705a      	strb	r2, [r3, #1]

		 s_pn_fw1nchip[0] = 0x30+(pn_fw1chip/100);
 80021fc:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <PN532_FirmWareVersion2String+0x140>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <PN532_FirmWareVersion2String+0x150>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3330      	adds	r3, #48	; 0x30
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <PN532_FirmWareVersion2String+0x154>)
 8002210:	701a      	strb	r2, [r3, #0]
		 s_pn_fw1nchip[1] = 0x30+(pn_fw1chip/10%10);
 8002212:	4b36      	ldr	r3, [pc, #216]	; (80022ec <PN532_FirmWareVersion2String+0x140>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <PN532_FirmWareVersion2String+0x158>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b38      	ldr	r3, [pc, #224]	; (8002304 <PN532_FirmWareVersion2String+0x158>)
 8002222:	fba3 1302 	umull	r1, r3, r3, r2
 8002226:	08d9      	lsrs	r1, r3, #3
 8002228:	460b      	mov	r3, r1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3330      	adds	r3, #48	; 0x30
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b31      	ldr	r3, [pc, #196]	; (8002300 <PN532_FirmWareVersion2String+0x154>)
 800223a:	705a      	strb	r2, [r3, #1]
		 s_pn_fw1nchip[2] = 0x30+(pn_fw1chip%10);
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <PN532_FirmWareVersion2String+0x140>)
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <PN532_FirmWareVersion2String+0x158>)
 8002242:	fba3 1302 	umull	r1, r3, r3, r2
 8002246:	08d9      	lsrs	r1, r3, #3
 8002248:	460b      	mov	r3, r1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3330      	adds	r3, #48	; 0x30
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b29      	ldr	r3, [pc, #164]	; (8002300 <PN532_FirmWareVersion2String+0x154>)
 800225a:	709a      	strb	r2, [r3, #2]

		 s_pn_fw2nchip[0] = 0x30+(pn_fw2chip/100);
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <PN532_FirmWareVersion2String+0x144>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <PN532_FirmWareVersion2String+0x150>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3330      	adds	r3, #48	; 0x30
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <PN532_FirmWareVersion2String+0x15c>)
 8002270:	701a      	strb	r2, [r3, #0]
		 s_pn_fw2nchip[1] = 0x30+(pn_fw2chip/10%10);
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <PN532_FirmWareVersion2String+0x144>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4a23      	ldr	r2, [pc, #140]	; (8002304 <PN532_FirmWareVersion2String+0x158>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <PN532_FirmWareVersion2String+0x158>)
 8002282:	fba3 1302 	umull	r1, r3, r3, r2
 8002286:	08d9      	lsrs	r1, r3, #3
 8002288:	460b      	mov	r3, r1
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3330      	adds	r3, #48	; 0x30
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <PN532_FirmWareVersion2String+0x15c>)
 800229a:	705a      	strb	r2, [r3, #1]
		 s_pn_fw2nchip[2] = 0x30+(pn_fw2chip%10);
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <PN532_FirmWareVersion2String+0x144>)
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <PN532_FirmWareVersion2String+0x158>)
 80022a2:	fba3 1302 	umull	r1, r3, r3, r2
 80022a6:	08d9      	lsrs	r1, r3, #3
 80022a8:	460b      	mov	r3, r1
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3330      	adds	r3, #48	; 0x30
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <PN532_FirmWareVersion2String+0x15c>)
 80022ba:	709a      	strb	r2, [r3, #2]

		 s_pn_suchip[0] = 0x30 + (pn_suppchip >> 4);
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <PN532_FirmWareVersion2String+0x148>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3330      	adds	r3, #48	; 0x30
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <PN532_FirmWareVersion2String+0x160>)
 80022ca:	701a      	strb	r2, [r3, #0]
		 s_pn_suchip[1] = 0x30 + (pn_suppchip & 0x0F);
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <PN532_FirmWareVersion2String+0x148>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3330      	adds	r3, #48	; 0x30
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <PN532_FirmWareVersion2String+0x160>)
 80022dc:	705a      	strb	r2, [r3, #1]

}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	200006bf 	.word	0x200006bf
 80022ec:	200006c0 	.word	0x200006c0
 80022f0:	200006c1 	.word	0x200006c1
 80022f4:	200006c2 	.word	0x200006c2
 80022f8:	200001dc 	.word	0x200001dc
 80022fc:	51eb851f 	.word	0x51eb851f
 8002300:	200001e0 	.word	0x200001e0
 8002304:	cccccccd 	.word	0xcccccccd
 8002308:	200001e4 	.word	0x200001e4
 800230c:	200001e8 	.word	0x200001e8

08002310 <ValueInterrupToStr>:



void ValueInterrupToStr(){
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	b_bounce_value[0] = 0x30+(testtimer1/10000%10);
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <ValueInterrupToStr+0xe0>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	4a36      	ldr	r2, [pc, #216]	; (80023f4 <ValueInterrupToStr+0xe4>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0b5b      	lsrs	r3, r3, #13
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <ValueInterrupToStr+0xe8>)
 8002324:	fba3 1302 	umull	r1, r3, r3, r2
 8002328:	08d9      	lsrs	r1, r3, #3
 800232a:	460b      	mov	r3, r1
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	b29b      	uxth	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3330      	adds	r3, #48	; 0x30
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <ValueInterrupToStr+0xec>)
 800233e:	701a      	strb	r2, [r3, #0]
	b_bounce_value[1] = 0x30+(testtimer1/1000%10);
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <ValueInterrupToStr+0xe0>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	4a2e      	ldr	r2, [pc, #184]	; (8002400 <ValueInterrupToStr+0xf0>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <ValueInterrupToStr+0xe8>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	08d9      	lsrs	r1, r3, #3
 8002356:	460b      	mov	r3, r1
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b29b      	uxth	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3330      	adds	r3, #48	; 0x30
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <ValueInterrupToStr+0xec>)
 800236a:	705a      	strb	r2, [r3, #1]
	b_bounce_value[2] = 0x30+(testtimer1/100%10);
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <ValueInterrupToStr+0xe0>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	4a24      	ldr	r2, [pc, #144]	; (8002404 <ValueInterrupToStr+0xf4>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <ValueInterrupToStr+0xe8>)
 800237c:	fba3 1302 	umull	r1, r3, r3, r2
 8002380:	08d9      	lsrs	r1, r3, #3
 8002382:	460b      	mov	r3, r1
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	b29b      	uxth	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3330      	adds	r3, #48	; 0x30
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <ValueInterrupToStr+0xec>)
 8002396:	709a      	strb	r2, [r3, #2]
	b_bounce_value[3] = 0x30+(testtimer1/10%10);
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <ValueInterrupToStr+0xe0>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <ValueInterrupToStr+0xe8>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	08db      	lsrs	r3, r3, #3
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <ValueInterrupToStr+0xe8>)
 80023a8:	fba3 1302 	umull	r1, r3, r3, r2
 80023ac:	08d9      	lsrs	r1, r3, #3
 80023ae:	460b      	mov	r3, r1
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3330      	adds	r3, #48	; 0x30
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <ValueInterrupToStr+0xec>)
 80023c2:	70da      	strb	r2, [r3, #3]
	b_bounce_value[4] = 0x30+(testtimer1%10);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <ValueInterrupToStr+0xe0>)
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <ValueInterrupToStr+0xe8>)
 80023ca:	fba3 1302 	umull	r1, r3, r3, r2
 80023ce:	08d9      	lsrs	r1, r3, #3
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b29b      	uxth	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3330      	adds	r3, #48	; 0x30
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <ValueInterrupToStr+0xec>)
 80023e4:	711a      	strb	r2, [r3, #4]

}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	200006b8 	.word	0x200006b8
 80023f4:	d1b71759 	.word	0xd1b71759
 80023f8:	cccccccd 	.word	0xcccccccd
 80023fc:	20000218 	.word	0x20000218
 8002400:	10624dd3 	.word	0x10624dd3
 8002404:	51eb851f 	.word	0x51eb851f

08002408 <fourbytes2strhex>:



bool fourbytes2strhex(uint8_t *indatarray, uint8_t *outstrhex){
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
	uint8_t b=0;
 8002416:	2300      	movs	r3, #0
 8002418:	73bb      	strb	r3, [r7, #14]
	uint8_t th=0;
 800241a:	2300      	movs	r3, #0
 800241c:	737b      	strb	r3, [r7, #13]
	uint8_t tl=0;
 800241e:	2300      	movs	r3, #0
 8002420:	733b      	strb	r3, [r7, #12]

		for ( b=0; b<4; b++){
 8002422:	2300      	movs	r3, #0
 8002424:	73bb      	strb	r3, [r7, #14]
 8002426:	e05a      	b.n	80024de <fourbytes2strhex+0xd6>


			th = indatarray[b] >> 4;
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	737b      	strb	r3, [r7, #13]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 8002434:	7b7b      	ldrb	r3, [r7, #13]
 8002436:	2b09      	cmp	r3, #9
 8002438:	d803      	bhi.n	8002442 <fourbytes2strhex+0x3a>
 800243a:	7b7b      	ldrb	r3, [r7, #13]
 800243c:	3330      	adds	r3, #48	; 0x30
 800243e:	737b      	strb	r3, [r7, #13]
 8002440:	e008      	b.n	8002454 <fourbytes2strhex+0x4c>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d905      	bls.n	8002454 <fourbytes2strhex+0x4c>
 8002448:	7b7b      	ldrb	r3, [r7, #13]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	d802      	bhi.n	8002454 <fourbytes2strhex+0x4c>
 800244e:	7b7b      	ldrb	r3, [r7, #13]
 8002450:	3337      	adds	r3, #55	; 0x37
 8002452:	737b      	strb	r3, [r7, #13]
			}

			tl = indatarray[b]& 0x0F;
 8002454:	7bbb      	ldrb	r3, [r7, #14]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	733b      	strb	r3, [r7, #12]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 8002462:	7b3b      	ldrb	r3, [r7, #12]
 8002464:	2b09      	cmp	r3, #9
 8002466:	d803      	bhi.n	8002470 <fourbytes2strhex+0x68>
 8002468:	7b3b      	ldrb	r3, [r7, #12]
 800246a:	3330      	adds	r3, #48	; 0x30
 800246c:	733b      	strb	r3, [r7, #12]
 800246e:	e008      	b.n	8002482 <fourbytes2strhex+0x7a>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 8002470:	7b3b      	ldrb	r3, [r7, #12]
 8002472:	2b09      	cmp	r3, #9
 8002474:	d905      	bls.n	8002482 <fourbytes2strhex+0x7a>
 8002476:	7b3b      	ldrb	r3, [r7, #12]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d802      	bhi.n	8002482 <fourbytes2strhex+0x7a>
 800247c:	7b3b      	ldrb	r3, [r7, #12]
 800247e:	3337      	adds	r3, #55	; 0x37
 8002480:	733b      	strb	r3, [r7, #12]

			}

			outstrhex[i] = '0';	i++;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	4413      	add	r3, r2
 8002488:	2230      	movs	r2, #48	; 0x30
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = 'x';	i++;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	2278      	movs	r2, #120	; 0x78
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3301      	adds	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = th;  i++;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	7b7a      	ldrb	r2, [r7, #13]
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	3301      	adds	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = tl;	i++;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	7b3a      	ldrb	r2, [r7, #12]
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	3301      	adds	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
			//outstrhex[i] = ' '; i++;
			if(i<18){ outstrhex[i] = ' '; i++; }
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b11      	cmp	r3, #17
 80024c6:	d807      	bhi.n	80024d8 <fourbytes2strhex+0xd0>
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	2220      	movs	r2, #32
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
		for ( b=0; b<4; b++){
 80024d8:	7bbb      	ldrb	r3, [r7, #14]
 80024da:	3301      	adds	r3, #1
 80024dc:	73bb      	strb	r3, [r7, #14]
 80024de:	7bbb      	ldrb	r3, [r7, #14]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d9a1      	bls.n	8002428 <fourbytes2strhex+0x20>


		}
		return 1;
 80024e4:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <UIDResponse>:



uint32_t UIDResponse(uint8_t *uid,  uint8_t uidLength){
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
	uint32_t result;
	result=0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]

	if(uidLength==4){
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d120      	bne.n	8002548 <UIDResponse+0x58>

		result = uid[0];
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	60fb      	str	r3, [r7, #12]
		result |= uid[1];
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3301      	adds	r3, #1
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	60fb      	str	r3, [r7, #12]
		result |= uid[2];
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3302      	adds	r3, #2
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	60fb      	str	r3, [r7, #12]
		result |= uid[3];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3303      	adds	r3, #3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
	}
return result;
 8002548:	68fb      	ldr	r3, [r7, #12]

}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <BytesHex2Str>:


bool BytesHex2Str(uint8_t *indatarray, uint8_t size_array, uint8_t *outstrhex){
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	460b      	mov	r3, r1
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	72fb      	strb	r3, [r7, #11]

	uint8_t i=0;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
	uint8_t b=0;
 8002566:	2300      	movs	r3, #0
 8002568:	75bb      	strb	r3, [r7, #22]
	uint8_t th=0;
 800256a:	2300      	movs	r3, #0
 800256c:	757b      	strb	r3, [r7, #21]
	uint8_t tl=0;
 800256e:	2300      	movs	r3, #0
 8002570:	753b      	strb	r3, [r7, #20]

		for ( b=0; b<size_array; b++){
 8002572:	2300      	movs	r3, #0
 8002574:	75bb      	strb	r3, [r7, #22]
 8002576:	e047      	b.n	8002608 <BytesHex2Str+0xb4>


			th = indatarray[b] >> 4;
 8002578:	7dbb      	ldrb	r3, [r7, #22]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	757b      	strb	r3, [r7, #21]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 8002584:	7d7b      	ldrb	r3, [r7, #21]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d803      	bhi.n	8002592 <BytesHex2Str+0x3e>
 800258a:	7d7b      	ldrb	r3, [r7, #21]
 800258c:	3330      	adds	r3, #48	; 0x30
 800258e:	757b      	strb	r3, [r7, #21]
 8002590:	e008      	b.n	80025a4 <BytesHex2Str+0x50>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 8002592:	7d7b      	ldrb	r3, [r7, #21]
 8002594:	2b09      	cmp	r3, #9
 8002596:	d905      	bls.n	80025a4 <BytesHex2Str+0x50>
 8002598:	7d7b      	ldrb	r3, [r7, #21]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	d802      	bhi.n	80025a4 <BytesHex2Str+0x50>
 800259e:	7d7b      	ldrb	r3, [r7, #21]
 80025a0:	3337      	adds	r3, #55	; 0x37
 80025a2:	757b      	strb	r3, [r7, #21]
			}

			tl = indatarray[b]& 0x0F;
 80025a4:	7dbb      	ldrb	r3, [r7, #22]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	753b      	strb	r3, [r7, #20]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 80025b2:	7d3b      	ldrb	r3, [r7, #20]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d803      	bhi.n	80025c0 <BytesHex2Str+0x6c>
 80025b8:	7d3b      	ldrb	r3, [r7, #20]
 80025ba:	3330      	adds	r3, #48	; 0x30
 80025bc:	753b      	strb	r3, [r7, #20]
 80025be:	e008      	b.n	80025d2 <BytesHex2Str+0x7e>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 80025c0:	7d3b      	ldrb	r3, [r7, #20]
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d905      	bls.n	80025d2 <BytesHex2Str+0x7e>
 80025c6:	7d3b      	ldrb	r3, [r7, #20]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d802      	bhi.n	80025d2 <BytesHex2Str+0x7e>
 80025cc:	7d3b      	ldrb	r3, [r7, #20]
 80025ce:	3337      	adds	r3, #55	; 0x37
 80025d0:	753b      	strb	r3, [r7, #20]

			}

		//	outstrhex[i] = '0';	i++;
		//	outstrhex[i] = 'x';	i++;
			outstrhex[i] = th;  i++;
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	7d7a      	ldrb	r2, [r7, #21]
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	3301      	adds	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
			outstrhex[i] = tl;	i++;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	7d3a      	ldrb	r2, [r7, #20]
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	3301      	adds	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
			//outstrhex[i] = ' '; i++;

			 outstrhex[i] = ' '; i++;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	2220      	movs	r2, #32
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	3301      	adds	r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
		for ( b=0; b<size_array; b++){
 8002602:	7dbb      	ldrb	r3, [r7, #22]
 8002604:	3301      	adds	r3, #1
 8002606:	75bb      	strb	r3, [r7, #22]
 8002608:	7dba      	ldrb	r2, [r7, #22]
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	429a      	cmp	r2, r3
 800260e:	d3b3      	bcc.n	8002578 <BytesHex2Str+0x24>




		}
		return 1;
 8002610:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 8002612:	4618      	mov	r0, r3
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <PN532_WriteTagtoHex>:

void PN532_WriteTagtoHex(){
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
	uint8_t u8_cntindex;
	//--------------------------------------------------------------------------------------------

	 */

	uint8_t k=0;
 8002622:	2300      	movs	r3, #0
 8002624:	71fb      	strb	r3, [r7, #7]
	uint8_t tx=0;
 8002626:	2300      	movs	r3, #0
 8002628:	71bb      	strb	r3, [r7, #6]
	uint8_t x=0;
 800262a:	2300      	movs	r3, #0
 800262c:	717b      	strb	r3, [r7, #5]

	for ( x=0; x<4 ; x++){
 800262e:	2300      	movs	r3, #0
 8002630:	717b      	strb	r3, [r7, #5]
 8002632:	e055      	b.n	80026e0 <PN532_WriteTagtoHex+0xc4>


				//tx = uidnfcwrdara[k];

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	2b2f      	cmp	r3, #47	; 0x2f
 800263c:	d90a      	bls.n	8002654 <PN532_WriteTagtoHex+0x38>
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4a2c      	ldr	r2, [pc, #176]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	2b39      	cmp	r3, #57	; 0x39
 8002646:	d805      	bhi.n	8002654 <PN532_WriteTagtoHex+0x38>
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	3b30      	subs	r3, #48	; 0x30
 8002650:	71bb      	strb	r3, [r7, #6]
 8002652:	e00e      	b.n	8002672 <PN532_WriteTagtoHex+0x56>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d909      	bls.n	8002672 <PN532_WriteTagtoHex+0x56>
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	2b46      	cmp	r3, #70	; 0x46
 8002666:	d804      	bhi.n	8002672 <PN532_WriteTagtoHex+0x56>
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	3b37      	subs	r3, #55	; 0x37
 8002670:	71bb      	strb	r3, [r7, #6]
				}

				outwrdata[x]=tx<<4;
 8002672:	797b      	ldrb	r3, [r7, #5]
 8002674:	79ba      	ldrb	r2, [r7, #6]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d1      	uxtb	r1, r2
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <PN532_WriteTagtoHex+0xdc>)
 800267c:	54d1      	strb	r1, [r2, r3]
				k++;
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	3301      	adds	r3, #1
 8002682:	71fb      	strb	r3, [r7, #7]

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	2b2f      	cmp	r3, #47	; 0x2f
 800268c:	d90a      	bls.n	80026a4 <PN532_WriteTagtoHex+0x88>
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	2b39      	cmp	r3, #57	; 0x39
 8002696:	d805      	bhi.n	80026a4 <PN532_WriteTagtoHex+0x88>
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	3b30      	subs	r3, #48	; 0x30
 80026a0:	71bb      	strb	r3, [r7, #6]
 80026a2:	e00e      	b.n	80026c2 <PN532_WriteTagtoHex+0xa6>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d909      	bls.n	80026c2 <PN532_WriteTagtoHex+0xa6>
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	2b46      	cmp	r3, #70	; 0x46
 80026b6:	d804      	bhi.n	80026c2 <PN532_WriteTagtoHex+0xa6>
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <PN532_WriteTagtoHex+0xd8>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	3b37      	subs	r3, #55	; 0x37
 80026c0:	71bb      	strb	r3, [r7, #6]
				}
				outwrdata[x]|=tx;
 80026c2:	797b      	ldrb	r3, [r7, #5]
 80026c4:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <PN532_WriteTagtoHex+0xdc>)
 80026c6:	5cd1      	ldrb	r1, [r2, r3]
 80026c8:	797b      	ldrb	r3, [r7, #5]
 80026ca:	79ba      	ldrb	r2, [r7, #6]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	b2d1      	uxtb	r1, r2
 80026d0:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <PN532_WriteTagtoHex+0xdc>)
 80026d2:	54d1      	strb	r1, [r2, r3]
				k++;
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	3301      	adds	r3, #1
 80026d8:	71fb      	strb	r3, [r7, #7]
	for ( x=0; x<4 ; x++){
 80026da:	797b      	ldrb	r3, [r7, #5]
 80026dc:	3301      	adds	r3, #1
 80026de:	717b      	strb	r3, [r7, #5]
 80026e0:	797b      	ldrb	r3, [r7, #5]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d9a6      	bls.n	8002634 <PN532_WriteTagtoHex+0x18>

			}


}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000020 	.word	0x20000020
 80026f8:	2000069c 	.word	0x2000069c

080026fc <spi_gpio_init>:



void spi_gpio_init(void){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  		GPIO_InitStruct;

	SPI_RCC_PORT_CLOCK_CMD ( SPI_RCC_PORT, ENABLE);
 8002702:	2101      	movs	r1, #1
 8002704:	2008      	movs	r0, #8
 8002706:	f002 fb4d 	bl	8004da4 <RCC_APB2PeriphClockCmd>
	SPI_RCC_PERIPH_CLOCK_CMD ( SPI_RCC_APBPORT, ENABLE );
 800270a:	2101      	movs	r1, #1
 800270c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002710:	f002 fb66 	bl	8004de0 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 8002714:	2303      	movs	r3, #3
 8002716:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode =  GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 8002718:	2318      	movs	r3, #24
 800271a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MOSI_PIN | SPI_SCK_PIN;
 800271c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002720:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	4619      	mov	r1, r3
 8002726:	480e      	ldr	r0, [pc, #56]	; (8002760 <spi_gpio_init+0x64>)
 8002728:	f001 ffa8 	bl	800467c <GPIO_Init>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 800272c:	2303      	movs	r3, #3
 800272e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;//GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 8002730:	2310      	movs	r3, #16
 8002732:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_NSS_PIN | SPI_FLASH_NSS;
 8002734:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002738:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4808      	ldr	r0, [pc, #32]	; (8002760 <spi_gpio_init+0x64>)
 8002740:	f001 ff9c 	bl	800467c <GPIO_Init>


	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;//GPIO_Mode_AF_PP;//GPIO_Mode_IN_FLOATING;//GPIO_Mode_IPU;
 8002744:	2348      	movs	r3, #72	; 0x48
 8002746:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MISO_PIN;
 8002748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4803      	ldr	r0, [pc, #12]	; (8002760 <spi_gpio_init+0x64>)
 8002754:	f001 ff92 	bl	800467c <GPIO_Init>





}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40010c00 	.word	0x40010c00

08002764 <TimingDelay_Decrement>:
/**
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement ( void ) {
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00) {
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <TimingDelay_Decrement+0x28>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <TimingDelay_Decrement+0x16>
		TimingDelay--;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <TimingDelay_Decrement+0x28>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3b01      	subs	r3, #1
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <TimingDelay_Decrement+0x28>)
 8002778:	6013      	str	r3, [r2, #0]
	}
	tick++;
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <TimingDelay_Decrement+0x2c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <TimingDelay_Decrement+0x2c>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	200004a4 	.word	0x200004a4
 8002790:	20000874 	.word	0x20000874

08002794 <Delay>:
/**
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in milliseconds
 * @retval None
 */
void Delay ( uint32_t nTime ) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <Delay+0x24>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
	while (TimingDelay != 0);
 80027a2:	bf00      	nop
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <Delay+0x24>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1fb      	bne.n	80027a4 <Delay+0x10>
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	200004a4 	.word	0x200004a4

080027bc <LCD_CtrlLinesConfig>:
}




void LCD_CtrlLinesConfig(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
	I2C_InitTypeDef			I2C_InitStruct;

	/*
	 * I2C pins configure
	 */
	LCD_I2C_SCL_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SCL_RCC_PORT, ENABLE );
 80027c2:	2101      	movs	r1, #1
 80027c4:	2008      	movs	r0, #8
 80027c6:	f002 faed 	bl	8004da4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80027ca:	2302      	movs	r3, #2
 80027cc:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80027ce:	2318      	movs	r3, #24
 80027d0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SCL_PIN;
 80027d2:	2340      	movs	r3, #64	; 0x40
 80027d4:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SCL_GPIO_PORT, &GPIO_InitStruct );
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	481a      	ldr	r0, [pc, #104]	; (8002848 <LCD_CtrlLinesConfig+0x8c>)
 80027de:	f001 ff4d 	bl	800467c <GPIO_Init>

	LCD_I2C_SDA_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SDA_RCC_PORT, ENABLE );
 80027e2:	2101      	movs	r1, #1
 80027e4:	2008      	movs	r0, #8
 80027e6:	f002 fadd 	bl	8004da4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80027ea:	2302      	movs	r3, #2
 80027ec:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_OD;
 80027ee:	231c      	movs	r3, #28
 80027f0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SDA_PIN;
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SDA_GPIO_PORT, &GPIO_InitStruct );
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4812      	ldr	r0, [pc, #72]	; (8002848 <LCD_CtrlLinesConfig+0x8c>)
 80027fe:	f001 ff3d 	bl	800467c <GPIO_Init>

	LCD_I2C_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_RCC_APBPORT, ENABLE );
 8002802:	2101      	movs	r1, #1
 8002804:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002808:	f002 faea 	bl	8004de0 <RCC_APB1PeriphClockCmd>

	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 800280c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002810:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002816:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_ClockSpeed = 50000;
 8002818:	f24c 3350 	movw	r3, #50000	; 0xc350
 800281c:	607b      	str	r3, [r7, #4]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 800281e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002822:	817b      	strh	r3, [r7, #10]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8002824:	2300      	movs	r3, #0
 8002826:	813b      	strh	r3, [r7, #8]
	I2C_InitStruct.I2C_OwnAddress1 = 1;
 8002828:	2301      	movs	r3, #1
 800282a:	81bb      	strh	r3, [r7, #12]
	I2C_Init ( LCD_I2C_NUM, &I2C_InitStruct );
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	4619      	mov	r1, r3
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <LCD_CtrlLinesConfig+0x90>)
 8002832:	f002 f80f 	bl	8004854 <I2C_Init>

	I2C_Cmd ( LCD_I2C_NUM, ENABLE );
 8002836:	2101      	movs	r1, #1
 8002838:	4804      	ldr	r0, [pc, #16]	; (800284c <LCD_CtrlLinesConfig+0x90>)
 800283a:	f002 f8cd 	bl	80049d8 <I2C_Cmd>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40010c00 	.word	0x40010c00
 800284c:	40005400 	.word	0x40005400

08002850 <I2C_SingleRandomWrite>:
  * @param  Addr: register address
  * @param  Data: data to be written to the specific register
  * @retval 0x00 if write operation is OK
  *         0xFF if timeout condition occured (device not connected or bus error).
  */
uint8_t I2C_SingleRandomWrite ( I2C_TypeDef* I2Cx, uint8_t Device, uint8_t Data ) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
 800285c:	4613      	mov	r3, r2
 800285e:	70bb      	strb	r3, [r7, #2]
	uint32_t timeout = TIMEOUT_MAX;
 8002860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002864:	60fb      	str	r3, [r7, #12]

	/* Generate the Start Condition */
	I2C_GenerateSTART ( I2Cx, ENABLE );
 8002866:	2101      	movs	r1, #1
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f002 f8d4 	bl	8004a16 <I2C_GenerateSTART>

	/* Test on I2Cx EV5 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 800286e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002872:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 8002874:	e006      	b.n	8002884 <I2C_SingleRandomWrite+0x34>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	60fa      	str	r2, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <I2C_SingleRandomWrite+0x34>
			return 0xFF;
 8002880:	23ff      	movs	r3, #255	; 0xff
 8002882:	e03a      	b.n	80028fa <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 8002884:	491f      	ldr	r1, [pc, #124]	; (8002904 <I2C_SingleRandomWrite+0xb4>)
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f002 f92f 	bl	8004aea <I2C_CheckEvent>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f1      	beq.n	8002876 <I2C_SingleRandomWrite+0x26>
	}

	/* Send TS selected device slave Address for write */
	I2C_Send7bitAddress ( I2Cx, Device, I2C_Direction_Transmitter );
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f002 f909 	bl	8004ab0 <I2C_Send7bitAddress>

	/* Test on I2Cx EV6 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 800289e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a2:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 80028a4:	e006      	b.n	80028b4 <I2C_SingleRandomWrite+0x64>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	60fa      	str	r2, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <I2C_SingleRandomWrite+0x64>
			return 0xFF;
 80028b0:	23ff      	movs	r3, #255	; 0xff
 80028b2:	e022      	b.n	80028fa <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 80028b4:	4914      	ldr	r1, [pc, #80]	; (8002908 <I2C_SingleRandomWrite+0xb8>)
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f002 f917 	bl	8004aea <I2C_CheckEvent>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f1      	beq.n	80028a6 <I2C_SingleRandomWrite+0x56>
	}

	/* Send Data */
	I2C_SendData ( I2Cx, Data );
 80028c2:	78bb      	ldrb	r3, [r7, #2]
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f002 f8e3 	bl	8004a92 <I2C_SendData>

	/* Test on I2Cx EV8 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 80028cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d0:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80028d2:	e006      	b.n	80028e2 <I2C_SingleRandomWrite+0x92>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	60fa      	str	r2, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <I2C_SingleRandomWrite+0x92>
			return 0xFF;
 80028de:	23ff      	movs	r3, #255	; 0xff
 80028e0:	e00b      	b.n	80028fa <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80028e2:	490a      	ldr	r1, [pc, #40]	; (800290c <I2C_SingleRandomWrite+0xbc>)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f002 f900 	bl	8004aea <I2C_CheckEvent>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f1      	beq.n	80028d4 <I2C_SingleRandomWrite+0x84>
	}

	/* Send I2Cx STOP Condition */
	I2C_GenerateSTOP ( I2Cx, ENABLE );
 80028f0:	2101      	movs	r1, #1
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f002 f8ae 	bl	8004a54 <I2C_GenerateSTOP>

	/* If operation is OK, return 0 */
	return 0;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	00030001 	.word	0x00030001
 8002908:	00070080 	.word	0x00070080
 800290c:	00070084 	.word	0x00070084

08002910 <LCD_SetCursor>:
//******************************************************************
void LCD_SetCursor ( uint8_t index ) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t index_hi = index & 0xF0;
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f023 030f 	bic.w	r3, r3, #15
 8002920:	73fb      	strb	r3, [r7, #15]
	uint8_t index_lo = (index & 0x0F) << 4;
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	f023 0307 	bic.w	r3, r3, #7
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	214e      	movs	r1, #78	; 0x4e
 8002934:	481c      	ldr	r0, [pc, #112]	; (80029a8 <LCD_SetCursor+0x98>)
 8002936:	f7ff ff8b 	bl	8002850 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_hi | LCD_E) & ~LCD_RS & ~LCD_RW );
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002942:	f023 0305 	bic.w	r3, r3, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	214e      	movs	r1, #78	; 0x4e
 800294c:	4816      	ldr	r0, [pc, #88]	; (80029a8 <LCD_SetCursor+0x98>)
 800294e:	f7ff ff7f 	bl	8002850 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	f023 0307 	bic.w	r3, r3, #7
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	214e      	movs	r1, #78	; 0x4e
 800295e:	4812      	ldr	r0, [pc, #72]	; (80029a8 <LCD_SetCursor+0x98>)
 8002960:	f7ff ff76 	bl	8002850 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	f023 0307 	bic.w	r3, r3, #7
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	214e      	movs	r1, #78	; 0x4e
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LCD_SetCursor+0x98>)
 8002972:	f7ff ff6d 	bl	8002850 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_lo | LCD_E) & ~LCD_RS & ~LCD_RW );
 8002976:	7bbb      	ldrb	r3, [r7, #14]
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800297e:	f023 0305 	bic.w	r3, r3, #5
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	214e      	movs	r1, #78	; 0x4e
 8002988:	4807      	ldr	r0, [pc, #28]	; (80029a8 <LCD_SetCursor+0x98>)
 800298a:	f7ff ff61 	bl	8002850 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800298e:	7bbb      	ldrb	r3, [r7, #14]
 8002990:	f023 0307 	bic.w	r3, r3, #7
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	214e      	movs	r1, #78	; 0x4e
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <LCD_SetCursor+0x98>)
 800299c:	f7ff ff58 	bl	8002850 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40005400 	.word	0x40005400

080029ac <LCD_WriteData>:
//******************************************************************
void LCD_WriteData ( uint8_t data ) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_hi = data & 0xF0;
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	f023 030f 	bic.w	r3, r3, #15
 80029bc:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lo = (data & 0x0F) << 4;
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 80029c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c8:	f023 0307 	bic.w	r3, r3, #7
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	214e      	movs	r1, #78	; 0x4e
 80029da:	4824      	ldr	r0, [pc, #144]	; (8002a6c <LCD_WriteData+0xc0>)
 80029dc:	f7ff ff38 	bl	8002850 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi | LCD_E) | LCD_RS) & ~LCD_RW );
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	f043 0306 	orr.w	r3, r3, #6
 80029e6:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	214e      	movs	r1, #78	; 0x4e
 80029f2:	481e      	ldr	r0, [pc, #120]	; (8002a6c <LCD_WriteData+0xc0>)
 80029f4:	f7ff ff2c 	bl	8002850 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 80029f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fc:	f023 0307 	bic.w	r3, r3, #7
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	214e      	movs	r1, #78	; 0x4e
 8002a0e:	4817      	ldr	r0, [pc, #92]	; (8002a6c <LCD_WriteData+0xc0>)
 8002a10:	f7ff ff1e 	bl	8002850 <I2C_SingleRandomWrite>

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8002a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a18:	f023 0307 	bic.w	r3, r3, #7
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	214e      	movs	r1, #78	; 0x4e
 8002a2a:	4810      	ldr	r0, [pc, #64]	; (8002a6c <LCD_WriteData+0xc0>)
 8002a2c:	f7ff ff10 	bl	8002850 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo | LCD_E)  | LCD_RS) & ~LCD_RW );
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	f043 0306 	orr.w	r3, r3, #6
 8002a36:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	214e      	movs	r1, #78	; 0x4e
 8002a42:	480a      	ldr	r0, [pc, #40]	; (8002a6c <LCD_WriteData+0xc0>)
 8002a44:	f7ff ff04 	bl	8002850 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8002a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a4c:	f023 0307 	bic.w	r3, r3, #7
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	214e      	movs	r1, #78	; 0x4e
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <LCD_WriteData+0xc0>)
 8002a60:	f7ff fef6 	bl	8002850 <I2C_SingleRandomWrite>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40005400 	.word	0x40005400

08002a70 <LCD_WriteString>:
//******************************************************************
void LCD_WriteString ( char * str ) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < strlen(str); i++) {
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	e009      	b.n	8002a92 <LCD_WriteString+0x22>
		LCD_WriteData ( str[i] );
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff90 	bl	80029ac <LCD_WriteData>
	for (i = 0; i < strlen(str); i++) {
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	7bfc      	ldrb	r4, [r7, #15]
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fd fb59 	bl	800014c <strlen>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	429c      	cmp	r4, r3
 8002a9e:	d3ee      	bcc.n	8002a7e <LCD_WriteString+0xe>
	}

}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
	...

08002aac <LCD_RunStringDevInfo>:
//******************************************************************
//******************************************************************
void LCD_RunStringDevInfo ( char * str1line,char * str2line, uint32_t delay) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
	char str1Frame[LCD_STR_LEN + 1];
	char str2Frame[LCD_STR_LEN + 1];
	uint8_t i;
	uint8_t cnt;

		tick = GetTickCount();
 8002ab8:	f7ff fb6e 	bl	8002198 <GetTickCount>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a7f      	ldr	r2, [pc, #508]	; (8002cbc <LCD_RunStringDevInfo+0x210>)
 8002ac0:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <LCD_RunStringDevInfo+0x214>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr1 = '\0';
 8002ace:	4b7d      	ldr	r3, [pc, #500]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
		*runStr2 = '\0';
 8002ad4:	4b7c      	ldr	r3, [pc, #496]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ae0:	e01c      	b.n	8002b1c <LCD_RunStringDevInfo+0x70>
			strcat ( runStr1, " " );
 8002ae2:	4878      	ldr	r0, [pc, #480]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002ae4:	f7fd fb32 	bl	800014c <strlen>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b75      	ldr	r3, [pc, #468]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002aee:	4413      	add	r3, r2
 8002af0:	4976      	ldr	r1, [pc, #472]	; (8002ccc <LCD_RunStringDevInfo+0x220>)
 8002af2:	461a      	mov	r2, r3
 8002af4:	460b      	mov	r3, r1
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8002afa:	4873      	ldr	r0, [pc, #460]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002afc:	f7fd fb26 	bl	800014c <strlen>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b70      	ldr	r3, [pc, #448]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002b06:	4413      	add	r3, r2
 8002b08:	4970      	ldr	r1, [pc, #448]	; (8002ccc <LCD_RunStringDevInfo+0x220>)
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b16:	3301      	adds	r3, #1
 8002b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d9de      	bls.n	8002ae2 <LCD_RunStringDevInfo+0x36>
		}
		strcat ( runStr1, str1line );
 8002b24:	68f9      	ldr	r1, [r7, #12]
 8002b26:	4867      	ldr	r0, [pc, #412]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002b28:	f003 f830 	bl	8005b8c <strcat>
		strcat ( runStr2, str2line );
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	4866      	ldr	r0, [pc, #408]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002b30:	f003 f82c 	bl	8005b8c <strcat>

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b3a:	e01c      	b.n	8002b76 <LCD_RunStringDevInfo+0xca>
			strcat ( runStr1, " " );
 8002b3c:	4861      	ldr	r0, [pc, #388]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002b3e:	f7fd fb05 	bl	800014c <strlen>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	4960      	ldr	r1, [pc, #384]	; (8002ccc <LCD_RunStringDevInfo+0x220>)
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	460b      	mov	r3, r1
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8002b54:	485c      	ldr	r0, [pc, #368]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002b56:	f7fd faf9 	bl	800014c <strlen>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b5a      	ldr	r3, [pc, #360]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002b60:	4413      	add	r3, r2
 8002b62:	495a      	ldr	r1, [pc, #360]	; (8002ccc <LCD_RunStringDevInfo+0x220>)
 8002b64:	461a      	mov	r2, r3
 8002b66:	460b      	mov	r3, r1
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b70:	3301      	adds	r3, #1
 8002b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d9de      	bls.n	8002b3c <LCD_RunStringDevInfo+0x90>
		}

		runStr1Len = strlen ( runStr1 );
 8002b7e:	4851      	ldr	r0, [pc, #324]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002b80:	f7fd fae4 	bl	800014c <strlen>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <LCD_RunStringDevInfo+0x224>)
 8002b8a:	701a      	strb	r2, [r3, #0]
		runStr2Len = strlen ( runStr2 );
 8002b8c:	484e      	ldr	r0, [pc, #312]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002b8e:	f7fd fadd 	bl	800014c <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <LCD_RunStringDevInfo+0x228>)
 8002b98:	701a      	strb	r2, [r3, #0]

	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 8002b9a:	e07a      	b.n	8002c92 <LCD_RunStringDevInfo+0x1e6>
		if (GetTickCount() - tick > delay) {
 8002b9c:	f7ff fafc 	bl	8002198 <GetTickCount>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <LCD_RunStringDevInfo+0x210>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d271      	bcs.n	8002c92 <LCD_RunStringDevInfo+0x1e6>
			tick = GetTickCount();
 8002bae:	f7ff faf3 	bl	8002198 <GetTickCount>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a41      	ldr	r2, [pc, #260]	; (8002cbc <LCD_RunStringDevInfo+0x210>)
 8002bb6:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <LCD_RunStringDevInfo+0x214>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <LCD_RunStringDevInfo+0x214>)
 8002bc2:	701a      	strb	r2, [r3, #0]

			if (cnt<(runStr1Len-1)) {
 8002bc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002bc8:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <LCD_RunStringDevInfo+0x224>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	da29      	bge.n	8002c26 <LCD_RunStringDevInfo+0x17a>
			for (i = 0; i < LCD_STR_LEN; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bd8:	e019      	b.n	8002c0e <LCD_RunStringDevInfo+0x162>
				str1Frame[i] = runStr1[(strFrameIndex + i) % runStr1Len];
 8002bda:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <LCD_RunStringDevInfo+0x214>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be4:	4413      	add	r3, r2
 8002be6:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <LCD_RunStringDevInfo+0x224>)
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	fb93 f1f2 	sdiv	r1, r3, r2
 8002bee:	fb01 f202 	mul.w	r2, r1, r2
 8002bf2:	1a9a      	subs	r2, r3, r2
 8002bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf8:	4932      	ldr	r1, [pc, #200]	; (8002cc4 <LCD_RunStringDevInfo+0x218>)
 8002bfa:	5c8a      	ldrb	r2, [r1, r2]
 8002bfc:	3328      	adds	r3, #40	; 0x28
 8002bfe:	443b      	add	r3, r7
 8002c00:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++)
 8002c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d9e1      	bls.n	8002bda <LCD_RunStringDevInfo+0x12e>

			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку строку
 8002c16:	2080      	movs	r0, #128	; 0x80
 8002c18:	f7ff fe7a 	bl	8002910 <LCD_SetCursor>
			LCD_WriteString ( str1Frame );
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff25 	bl	8002a70 <LCD_WriteString>
			}

			if (cnt<(runStr2Len-1)){
 8002c26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <LCD_RunStringDevInfo+0x228>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	429a      	cmp	r2, r3
 8002c32:	da29      	bge.n	8002c88 <LCD_RunStringDevInfo+0x1dc>
			for (i = 0; i < LCD_STR_LEN; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c3a:	e019      	b.n	8002c70 <LCD_RunStringDevInfo+0x1c4>
				str2Frame[i] = runStr2[(strFrameIndex + i) % runStr2Len];
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <LCD_RunStringDevInfo+0x214>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c46:	4413      	add	r3, r2
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <LCD_RunStringDevInfo+0x228>)
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c50:	fb01 f202 	mul.w	r2, r1, r2
 8002c54:	1a9a      	subs	r2, r3, r2
 8002c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5a:	491b      	ldr	r1, [pc, #108]	; (8002cc8 <LCD_RunStringDevInfo+0x21c>)
 8002c5c:	5c8a      	ldrb	r2, [r1, r2]
 8002c5e:	3328      	adds	r3, #40	; 0x28
 8002c60:	443b      	add	r3, r7
 8002c62:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < LCD_STR_LEN; i++)
 8002c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c74:	2b07      	cmp	r3, #7
 8002c76:	d9e1      	bls.n	8002c3c <LCD_RunStringDevInfo+0x190>

			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8002c78:	20c0      	movs	r0, #192	; 0xc0
 8002c7a:	f7ff fe49 	bl	8002910 <LCD_SetCursor>
			LCD_WriteString ( str2Frame );
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fef4 	bl	8002a70 <LCD_WriteString>
			}

			cnt++;
 8002c88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 8002c92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <LCD_RunStringDevInfo+0x224>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f6ff af7d 	blt.w	8002b9c <LCD_RunStringDevInfo+0xf0>
 8002ca2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <LCD_RunStringDevInfo+0x228>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	429a      	cmp	r2, r3
 8002cae:	f6ff af75 	blt.w	8002b9c <LCD_RunStringDevInfo+0xf0>
		}

}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000878 	.word	0x20000878
 8002cc0:	2000087c 	.word	0x2000087c
 8002cc4:	20000880 	.word	0x20000880
 8002cc8:	200008f8 	.word	0x200008f8
 8002ccc:	08006e58 	.word	0x08006e58
 8002cd0:	2000096d 	.word	0x2000096d
 8002cd4:	2000096e 	.word	0x2000096e

08002cd8 <LCD_RunStringBARCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера штрих-кодов бегущей строкой в первой строчке LCD
void LCD_RunStringBARCode ( char * str, uint32_t delay, uint8_t start ) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d13f      	bne.n	8002d6c <LCD_RunStringBARCode+0x94>
		tick = GetTickCount();
 8002cec:	f7ff fa54 	bl	8002198 <GetTickCount>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4a3e      	ldr	r2, [pc, #248]	; (8002dec <LCD_RunStringBARCode+0x114>)
 8002cf4:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8002cf6:	4b3e      	ldr	r3, [pc, #248]	; (8002df0 <LCD_RunStringBARCode+0x118>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 8002cfc:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002d02:	2300      	movs	r3, #0
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e00e      	b.n	8002d26 <LCD_RunStringBARCode+0x4e>
			strcat ( runStr, " " );
 8002d08:	483a      	ldr	r0, [pc, #232]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002d0a:	f7fd fa1f 	bl	800014c <strlen>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002d14:	4413      	add	r3, r2
 8002d16:	4938      	ldr	r1, [pc, #224]	; (8002df8 <LCD_RunStringBARCode+0x120>)
 8002d18:	461a      	mov	r2, r3
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	3301      	adds	r3, #1
 8002d24:	77fb      	strb	r3, [r7, #31]
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d9ed      	bls.n	8002d08 <LCD_RunStringBARCode+0x30>
		}
		strcat ( runStr, str );
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	4831      	ldr	r0, [pc, #196]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002d30:	f002 ff2c 	bl	8005b8c <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e00e      	b.n	8002d58 <LCD_RunStringBARCode+0x80>
			strcat ( runStr, " " );
 8002d3a:	482e      	ldr	r0, [pc, #184]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002d3c:	f7fd fa06 	bl	800014c <strlen>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002d46:	4413      	add	r3, r2
 8002d48:	492b      	ldr	r1, [pc, #172]	; (8002df8 <LCD_RunStringBARCode+0x120>)
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
 8002d54:	3301      	adds	r3, #1
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	7ffb      	ldrb	r3, [r7, #31]
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d9ed      	bls.n	8002d3a <LCD_RunStringBARCode+0x62>
		}
		runStrLen = strlen ( runStr );
 8002d5e:	4825      	ldr	r0, [pc, #148]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002d60:	f7fd f9f4 	bl	800014c <strlen>
 8002d64:	4603      	mov	r3, r0
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <LCD_RunStringBARCode+0x124>)
 8002d6a:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d037      	beq.n	8002de4 <LCD_RunStringBARCode+0x10c>
		if (GetTickCount() - tick > delay) {
 8002d74:	f7ff fa10 	bl	8002198 <GetTickCount>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <LCD_RunStringBARCode+0x114>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d22e      	bcs.n	8002de4 <LCD_RunStringBARCode+0x10c>
			tick = GetTickCount();
 8002d86:	f7ff fa07 	bl	8002198 <GetTickCount>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a17      	ldr	r2, [pc, #92]	; (8002dec <LCD_RunStringBARCode+0x114>)
 8002d8e:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <LCD_RunStringBARCode+0x118>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <LCD_RunStringBARCode+0x118>)
 8002d9a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e015      	b.n	8002dce <LCD_RunStringBARCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <LCD_RunStringBARCode+0x118>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <LCD_RunStringBARCode+0x124>)
 8002dae:	7812      	ldrb	r2, [r2, #0]
 8002db0:	fb93 f1f2 	sdiv	r1, r3, r2
 8002db4:	fb01 f202 	mul.w	r2, r1, r2
 8002db8:	1a9a      	subs	r2, r3, r2
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	490d      	ldr	r1, [pc, #52]	; (8002df4 <LCD_RunStringBARCode+0x11c>)
 8002dbe:	5c8a      	ldrb	r2, [r1, r2]
 8002dc0:	3320      	adds	r3, #32
 8002dc2:	443b      	add	r3, r7
 8002dc4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8002dc8:	7ffb      	ldrb	r3, [r7, #31]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	d9e6      	bls.n	8002da2 <LCD_RunStringBARCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку
 8002dd4:	2080      	movs	r0, #128	; 0x80
 8002dd6:	f7ff fd9b 	bl	8002910 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fe46 	bl	8002a70 <LCD_WriteString>
		}
	}
}
 8002de4:	bf00      	nop
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000970 	.word	0x20000970
 8002df0:	20000974 	.word	0x20000974
 8002df4:	20000978 	.word	0x20000978
 8002df8:	08006e58 	.word	0x08006e58
 8002dfc:	200009a3 	.word	0x200009a3

08002e00 <LCD_RunStringNFCCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера NFC бегущей строкой во второй строчке LCD
void LCD_RunStringNFCCode ( char * str, uint32_t delay, uint8_t start ) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13f      	bne.n	8002e94 <LCD_RunStringNFCCode+0x94>
		tick = GetTickCount();
 8002e14:	f7ff f9c0 	bl	8002198 <GetTickCount>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4a3e      	ldr	r2, [pc, #248]	; (8002f14 <LCD_RunStringNFCCode+0x114>)
 8002e1c:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <LCD_RunStringNFCCode+0x118>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 8002e24:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e00e      	b.n	8002e4e <LCD_RunStringNFCCode+0x4e>
			strcat ( runStr, " " );
 8002e30:	483a      	ldr	r0, [pc, #232]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002e32:	f7fd f98b 	bl	800014c <strlen>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4938      	ldr	r1, [pc, #224]	; (8002f20 <LCD_RunStringNFCCode+0x120>)
 8002e40:	461a      	mov	r2, r3
 8002e42:	460b      	mov	r3, r1
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d9ed      	bls.n	8002e30 <LCD_RunStringNFCCode+0x30>
		}
		strcat ( runStr, str );
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	4831      	ldr	r0, [pc, #196]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002e58:	f002 fe98 	bl	8005b8c <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e00e      	b.n	8002e80 <LCD_RunStringNFCCode+0x80>
			strcat ( runStr, " " );
 8002e62:	482e      	ldr	r0, [pc, #184]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002e64:	f7fd f972 	bl	800014c <strlen>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002e6e:	4413      	add	r3, r2
 8002e70:	492b      	ldr	r1, [pc, #172]	; (8002f20 <LCD_RunStringNFCCode+0x120>)
 8002e72:	461a      	mov	r2, r3
 8002e74:	460b      	mov	r3, r1
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002e7a:	7ffb      	ldrb	r3, [r7, #31]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	7ffb      	ldrb	r3, [r7, #31]
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d9ed      	bls.n	8002e62 <LCD_RunStringNFCCode+0x62>
		}
		runStrLen = strlen ( runStr );
 8002e86:	4825      	ldr	r0, [pc, #148]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002e88:	f7fd f960 	bl	800014c <strlen>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <LCD_RunStringNFCCode+0x124>)
 8002e92:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d037      	beq.n	8002f0c <LCD_RunStringNFCCode+0x10c>
		if (GetTickCount() - tick > delay) {
 8002e9c:	f7ff f97c 	bl	8002198 <GetTickCount>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <LCD_RunStringNFCCode+0x114>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d22e      	bcs.n	8002f0c <LCD_RunStringNFCCode+0x10c>
			tick = GetTickCount();
 8002eae:	f7ff f973 	bl	8002198 <GetTickCount>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <LCD_RunStringNFCCode+0x114>)
 8002eb6:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <LCD_RunStringNFCCode+0x118>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <LCD_RunStringNFCCode+0x118>)
 8002ec2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e015      	b.n	8002ef6 <LCD_RunStringNFCCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <LCD_RunStringNFCCode+0x118>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	7ffb      	ldrb	r3, [r7, #31]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <LCD_RunStringNFCCode+0x124>)
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	fb93 f1f2 	sdiv	r1, r3, r2
 8002edc:	fb01 f202 	mul.w	r2, r1, r2
 8002ee0:	1a9a      	subs	r2, r3, r2
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	490d      	ldr	r1, [pc, #52]	; (8002f1c <LCD_RunStringNFCCode+0x11c>)
 8002ee6:	5c8a      	ldrb	r2, [r1, r2]
 8002ee8:	3320      	adds	r3, #32
 8002eea:	443b      	add	r3, r7
 8002eec:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	7ffb      	ldrb	r3, [r7, #31]
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	d9e6      	bls.n	8002eca <LCD_RunStringNFCCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8002efc:	20c0      	movs	r0, #192	; 0xc0
 8002efe:	f7ff fd07 	bl	8002910 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fdb2 	bl	8002a70 <LCD_WriteString>
		}
	}
}
 8002f0c:	bf00      	nop
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200009a4 	.word	0x200009a4
 8002f18:	200009a8 	.word	0x200009a8
 8002f1c:	200009ac 	.word	0x200009ac
 8002f20:	08006e58 	.word	0x08006e58
 8002f24:	200009d7 	.word	0x200009d7

08002f28 <LCD_Init>:
//******************************************************************

void LCD_Init(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	uint8_t i;

	LCD_CtrlLinesConfig();
 8002f2e:	f7ff fc45 	bl	80027bc <LCD_CtrlLinesConfig>

	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 8002f32:	2300      	movs	r3, #0
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	e02d      	b.n	8002f94 <LCD_Init+0x6c>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <LCD_Init+0x94>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	214e      	movs	r1, #78	; 0x4e
 8002f46:	481e      	ldr	r0, [pc, #120]	; (8002fc0 <LCD_Init+0x98>)
 8002f48:	f7ff fc82 	bl	8002850 <I2C_SingleRandomWrite>
		Delay(10);
 8002f4c:	200a      	movs	r0, #10
 8002f4e:	f7ff fc21 	bl	8002794 <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) | LCD_E) & ~LCD_RS & ~LCD_RW );
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <LCD_Init+0x94>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	b25b      	sxtb	r3, r3
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	214e      	movs	r1, #78	; 0x4e
 8002f68:	4815      	ldr	r0, [pc, #84]	; (8002fc0 <LCD_Init+0x98>)
 8002f6a:	f7ff fc71 	bl	8002850 <I2C_SingleRandomWrite>
		Delay(10);
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f7ff fc10 	bl	8002794 <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <LCD_Init+0x94>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	214e      	movs	r1, #78	; 0x4e
 8002f82:	480f      	ldr	r0, [pc, #60]	; (8002fc0 <LCD_Init+0x98>)
 8002f84:	f7ff fc64 	bl	8002850 <I2C_SingleRandomWrite>
		Delay(10);
 8002f88:	200a      	movs	r0, #10
 8002f8a:	f7ff fc03 	bl	8002794 <Delay>
	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	3301      	adds	r3, #1
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b0b      	cmp	r3, #11
 8002f98:	d9ce      	bls.n	8002f38 <LCD_Init+0x10>
	}
	/*
	 * Очистка дисплея
	 */
	LCD_SetCursor ( LCD_CURSOR_1STR );
 8002f9a:	2080      	movs	r0, #128	; 0x80
 8002f9c:	f7ff fcb8 	bl	8002910 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8002fa0:	4808      	ldr	r0, [pc, #32]	; (8002fc4 <LCD_Init+0x9c>)
 8002fa2:	f7ff fd65 	bl	8002a70 <LCD_WriteString>
	LCD_SetCursor ( LCD_CURSOR_2STR );
 8002fa6:	20c0      	movs	r0, #192	; 0xc0
 8002fa8:	f7ff fcb2 	bl	8002910 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <LCD_Init+0x9c>)
 8002fae:	f7ff fd5f 	bl	8002a70 <LCD_WriteString>
	//LCD_WriteString ( "SUM:               " );
	/*
	 * Отображение на дисплее текущей суммы
	 */
	//LCD_DisplaySum();
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200003f8 	.word	0x200003f8
 8002fc0:	40005400 	.word	0x40005400
 8002fc4:	08006e5c 	.word	0x08006e5c

08002fc8 <PN532_Delay>:
int8_t _uid[7];      // ISO14443A uid
int8_t _uidLen;      // uid len
int8_t _key[6];      // Mifare Classic key
int8_t _inListedTag; // Tg number of inlisted tag.

void PN532_Delay(uint32_t cntdelay){
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	while(cntdelay--){};
 8002fd0:	bf00      	nop
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1fa      	bne.n	8002fd2 <PN532_Delay+0xa>
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <PN532_WakeUp>:
//******************************************************************************
bool PN532_WakeUp(void){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0

/*
    uint8_t packet[21];
    uint8_t *p = packet;
*/
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8002fec:	2200      	movs	r2, #0
 8002fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ff2:	4807      	ldr	r0, [pc, #28]	; (8003010 <PN532_WakeUp+0x28>)
 8002ff4:	f001 fc17 	bl	8004826 <GPIO_WriteBit>
	 Delay(10);
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f7ff fbcb 	bl	8002794 <Delay>
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8002ffe:	2201      	movs	r2, #1
 8003000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <PN532_WakeUp+0x28>)
 8003006:	f001 fc0e 	bl	8004826 <GPIO_WriteBit>
    ///-----------------------------------------------------------------------------


	 PN532_write( packet,21);
*/
	  return TRUE;
 800300a:	2301      	movs	r3, #1

}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40010c00 	.word	0x40010c00

08003014 <PN532_setPassiveActivationRetries>:
                          after mxRetries

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_setPassiveActivationRetries(uint8_t maxRetries) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  pn532_packetbuffer[0] = PN532_COMMAND_RFCONFIGURATION;
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <PN532_setPassiveActivationRetries+0x48>)
 8003020:	2232      	movs	r2, #50	; 0x32
 8003022:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 5;    // Config item 5 (MaxRetries)
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <PN532_setPassiveActivationRetries+0x48>)
 8003026:	2205      	movs	r2, #5
 8003028:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = 0xFF; // MxRtyATR (default = 0xFF)
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <PN532_setPassiveActivationRetries+0x48>)
 800302c:	22ff      	movs	r2, #255	; 0xff
 800302e:	709a      	strb	r2, [r3, #2]
  pn532_packetbuffer[3] = 0x01; // MxRtyPSL (default = 0x01)
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <PN532_setPassiveActivationRetries+0x48>)
 8003032:	2201      	movs	r2, #1
 8003034:	70da      	strb	r2, [r3, #3]
  pn532_packetbuffer[4] = maxRetries;
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <PN532_setPassiveActivationRetries+0x48>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	7113      	strb	r3, [r2, #4]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 5,1000))
 800303c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003040:	2105      	movs	r1, #5
 8003042:	4806      	ldr	r0, [pc, #24]	; (800305c <PN532_setPassiveActivationRetries+0x48>)
 8003044:	f000 f900 	bl	8003248 <PN532_sendCommandCheckAck>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <PN532_setPassiveActivationRetries+0x3e>
  { return 0x0;} // no ACK
 800304e:	2300      	movs	r3, #0
 8003050:	e000      	b.n	8003054 <PN532_setPassiveActivationRetries+0x40>

  return 1;
 8003052:	2301      	movs	r3, #1
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	200009f0 	.word	0x200009f0

08003060 <PN532_readPassiveTargetID>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readPassiveTargetID(uint8_t cardbaudrate, uint8_t *uid,
                                         uint8_t *uidLength, uint16_t timeout) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	461a      	mov	r2, r3
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	4613      	mov	r3, r2
 8003072:	81bb      	strh	r3, [r7, #12]
  pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <PN532_readPassiveTargetID+0x54>)
 8003076:	224a      	movs	r2, #74	; 0x4a
 8003078:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 1; // max 1 cards at once (we can set this to 2 later)
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <PN532_readPassiveTargetID+0x54>)
 800307c:	2201      	movs	r2, #1
 800307e:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = cardbaudrate;
 8003080:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <PN532_readPassiveTargetID+0x54>)
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	7093      	strb	r3, [r2, #2]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)) {
 8003086:	89bb      	ldrh	r3, [r7, #12]
 8003088:	461a      	mov	r2, r3
 800308a:	2103      	movs	r1, #3
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <PN532_readPassiveTargetID+0x54>)
 800308e:	f000 f8db 	bl	8003248 <PN532_sendCommandCheckAck>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <PN532_readPassiveTargetID+0x3c>
    return 0x0; // no cards read
 8003098:	2300      	movs	r3, #0
 800309a:	e007      	b.n	80030ac <PN532_readPassiveTargetID+0x4c>
  }
  //Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
 //Задержка внутри PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)
 //Для чтения ID карты задежка не менее 10 мс обязательна!
     Delay(20);
 800309c:	2014      	movs	r0, #20
 800309e:	f7ff fb79 	bl	8002794 <Delay>
/*
  // wait for a card to enter the field (only possible with I2C)
  if (!waitready(timeout)) {
    return 0x0;   }
*/
  return PN532_readDetectedPassiveTargetID(uid, uidLength);
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	68b8      	ldr	r0, [r7, #8]
 80030a6:	f000 f807 	bl	80030b8 <PN532_readDetectedPassiveTargetID>
 80030aa:	4603      	mov	r3, r0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	200009f0 	.word	0x200009f0

080030b8 <PN532_readDetectedPassiveTargetID>:
                          length of the card's UID.

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readDetectedPassiveTargetID(uint8_t *uid, uint8_t *uidLength) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  // read data packet
  PN532_readdata(pn532_readbuffer, 19, 0x00);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2113      	movs	r1, #19
 80030c6:	4819      	ldr	r0, [pc, #100]	; (800312c <PN532_readDetectedPassiveTargetID+0x74>)
 80030c8:	f000 f9c6 	bl	8003458 <PN532_readdata>
  PN532DEBUGPRINT.print(F("Found "));
  PN532DEBUGPRINT.print(pn532_packetbuffer[7], DEC);
  PN532DEBUGPRINT.println(F(" tags"));
#endif
*/
  if (pn532_readbuffer[7] != 1)
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <PN532_readDetectedPassiveTargetID+0x74>)
 80030ce:	79db      	ldrb	r3, [r3, #7]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <PN532_readDetectedPassiveTargetID+0x20>
    return FALSE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e024      	b.n	8003122 <PN532_readDetectedPassiveTargetID+0x6a>

  uint16_t sens_res = pn532_readbuffer[9];
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <PN532_readDetectedPassiveTargetID+0x74>)
 80030da:	7a5b      	ldrb	r3, [r3, #9]
 80030dc:	81bb      	strh	r3, [r7, #12]
  sens_res <<= 8;
 80030de:	89bb      	ldrh	r3, [r7, #12]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	81bb      	strh	r3, [r7, #12]
  sens_res |= pn532_readbuffer[10];
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <PN532_readDetectedPassiveTargetID+0x74>)
 80030e6:	7a9b      	ldrb	r3, [r3, #10]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	89bb      	ldrh	r3, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	81bb      	strh	r3, [r7, #12]
  PN532DEBUGPRINT.print(F("SAK: 0x"));
  PN532DEBUGPRINT.println(pn532_packetbuffer[11], HEX);
#endif
*/
  /* Card appears to be Mifare Classic */
  *uidLength = pn532_readbuffer[12];
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <PN532_readDetectedPassiveTargetID+0x74>)
 80030f2:	7b1a      	ldrb	r2, [r3, #12]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	701a      	strb	r2, [r3, #0]
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.print(F("UID:"));
#endif
*/
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e00b      	b.n	8003116 <PN532_readDetectedPassiveTargetID+0x5e>
    uid[i] = pn532_readbuffer[13 + i];
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	f103 020d 	add.w	r2, r3, #13
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	440b      	add	r3, r1
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <PN532_readDetectedPassiveTargetID+0x74>)
 800310c:	5c8a      	ldrb	r2, [r1, r2]
 800310e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	3301      	adds	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <PN532_readDetectedPassiveTargetID+0x74>)
 8003118:	7b1b      	ldrb	r3, [r3, #12]
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	429a      	cmp	r2, r3
 800311e:	d3ee      	bcc.n	80030fe <PN532_readDetectedPassiveTargetID+0x46>
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.println();
#endif
*/
  return TRUE;
 8003120:	2301      	movs	r3, #1
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000a30 	.word	0x20000a30

08003130 <PN532_SAMConfig>:

//******************************************************************************
bool PN532_SAMConfig(void){
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0

            return this.ExecuteCmd(cmd);
        }
 *
 */
	 pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <PN532_SAMConfig+0x50>)
 8003136:	2214      	movs	r2, #20
 8003138:	701a      	strb	r2, [r3, #0]
	 pn532_packetbuffer[1] = 0x01;//0x01;
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <PN532_SAMConfig+0x50>)
 800313c:	2201      	movs	r2, #1
 800313e:	705a      	strb	r2, [r3, #1]
	 pn532_packetbuffer[2] = 0x14;
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <PN532_SAMConfig+0x50>)
 8003142:	2214      	movs	r2, #20
 8003144:	709a      	strb	r2, [r3, #2]
	 pn532_packetbuffer[3] = 0x00;//не использоать прерывания
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <PN532_SAMConfig+0x50>)
 8003148:	2200      	movs	r2, #0
 800314a:	70da      	strb	r2, [r3, #3]

	  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,500)) {
 800314c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003150:	2104      	movs	r1, #4
 8003152:	480b      	ldr	r0, [pc, #44]	; (8003180 <PN532_SAMConfig+0x50>)
 8003154:	f000 f878 	bl	8003248 <PN532_sendCommandCheckAck>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <PN532_SAMConfig+0x32>
	    return 0;
 800315e:	2300      	movs	r3, #0
 8003160:	e00b      	b.n	800317a <PN532_SAMConfig+0x4a>

//Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);
// read data packet
	  PN532_readdata(pn532_readbuffer, 9, 0xFF);
 8003162:	22ff      	movs	r2, #255	; 0xff
 8003164:	2109      	movs	r1, #9
 8003166:	4807      	ldr	r0, [pc, #28]	; (8003184 <PN532_SAMConfig+0x54>)
 8003168:	f000 f976 	bl	8003458 <PN532_readdata>
	  	    }
*/
	    //int offset = 6;
	    //pn532_packetbuffer[offset] == 0x15

return (pn532_readbuffer[6] == 0x15);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <PN532_SAMConfig+0x54>)
 800316e:	799b      	ldrb	r3, [r3, #6]
 8003170:	2b15      	cmp	r3, #21
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
}
 800317a:	4618      	mov	r0, r3
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200009f0 	.word	0x200009f0
 8003184:	20000a30 	.word	0x20000a30

08003188 <PN532_getFirmwareVersion>:
    Checks the firmware version of the PN5xx chip

    @returns  The chip's firmware version and ID
*/
/******************************************************************************/
 uint32_t PN532_getFirmwareVersion(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 uint32_t response;
 const uint8_t pn532response_firmwarevers[] = {0x00, 0x00, 0xFF, 0x06, 0xFA, 0xD5};
 800318e:	4a2b      	ldr	r2, [pc, #172]	; (800323c <PN532_getFirmwareVersion+0xb4>)
 8003190:	463b      	mov	r3, r7
 8003192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003196:	6018      	str	r0, [r3, #0]
 8003198:	3304      	adds	r3, #4
 800319a:	8019      	strh	r1, [r3, #0]

  pn532_packetbuffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <PN532_getFirmwareVersion+0xb8>)
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 1,500)) {
 80031a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80031a6:	2101      	movs	r1, #1
 80031a8:	4825      	ldr	r0, [pc, #148]	; (8003240 <PN532_getFirmwareVersion+0xb8>)
 80031aa:	f000 f84d 	bl	8003248 <PN532_sendCommandCheckAck>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <PN532_getFirmwareVersion+0x30>
    return 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e03c      	b.n	8003232 <PN532_getFirmwareVersion+0xaa>

//Нужна задержка после выполнения подтверждения готовности!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);

   PN532_readdata(pn532_readbuffer, 13, 0xFF);
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	210d      	movs	r1, #13
 80031bc:	4821      	ldr	r0, [pc, #132]	; (8003244 <PN532_getFirmwareVersion+0xbc>)
 80031be:	f000 f94b 	bl	8003458 <PN532_readdata>
	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	    }
*/
   //сравнение полученных первых шести байт с массивом правильных данных
   //если сдержимое не одинаковое, от выход с ошибкой;
	if (0 != memcmp((char *)pn532_readbuffer, (char *)pn532response_firmwarevers, 6))
 80031c2:	463b      	mov	r3, r7
 80031c4:	2206      	movs	r2, #6
 80031c6:	4619      	mov	r1, r3
 80031c8:	481e      	ldr	r0, [pc, #120]	; (8003244 <PN532_getFirmwareVersion+0xbc>)
 80031ca:	f002 fc9f 	bl	8005b0c <memcmp>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <PN532_getFirmwareVersion+0x50>
	   { return 0; }
 80031d4:	2300      	movs	r3, #0
 80031d6:	e02c      	b.n	8003232 <PN532_getFirmwareVersion+0xaa>

  int offset = 7;
 80031d8:	2307      	movs	r3, #7
 80031da:	60fb      	str	r3, [r7, #12]

  response = pn532_readbuffer[offset++];
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	60fa      	str	r2, [r7, #12]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <PN532_getFirmwareVersion+0xbc>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <PN532_getFirmwareVersion+0xbc>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	60fa      	str	r2, [r7, #12]
 800320c:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <PN532_getFirmwareVersion+0xbc>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	60fa      	str	r2, [r7, #12]
 8003224:	4a07      	ldr	r2, [pc, #28]	; (8003244 <PN532_getFirmwareVersion+0xbc>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]

  return response;
 8003230:	68bb      	ldr	r3, [r7, #8]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	08006e70 	.word	0x08006e70
 8003240:	200009f0 	.word	0x200009f0
 8003244:	20000a30 	.word	0x20000a30

08003248 <PN532_sendCommandCheckAck>:
     @returns  1 if everything is OK, 0 if timeout occured before an
               ACK was recieved
 */
 /**************************************************************************/

 bool PN532_sendCommandCheckAck(uint8_t *cmd, uint8_t cmdlen, uint16_t timeout) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
 8003254:	4613      	mov	r3, r2
 8003256:	803b      	strh	r3, [r7, #0]

	 PN532_writecommand(cmd, cmdlen);
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f81b 	bl	8003298 <PN532_writecommand>

#endif
//------------------------------------------------------------------------------
*/
//Ожидание и чтение байта готовности (0x01)
   if (!PN532_waitready(timeout)) {
 8003262:	883b      	ldrh	r3, [r7, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fa91 	bl	800378c <PN532_waitready>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <PN532_sendCommandCheckAck+0x2c>
	  return FALSE; }
 8003270:	2300      	movs	r3, #0
 8003272:	e00d      	b.n	8003290 <PN532_sendCommandCheckAck+0x48>

//Нужна задержка после выполнения подтверждения готовности!!!!!
   PN532_Delay(100);
 8003274:	2064      	movs	r0, #100	; 0x64
 8003276:	f7ff fea7 	bl	8002fc8 <PN532_Delay>
  	}
  #endif
//------------------------------------------------------------------------------
*/
// чтение подтверждения
  if (!PN532_readack()) {  return FALSE;  }
 800327a:	f000 f95f 	bl	800353c <PN532_readack>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <PN532_sendCommandCheckAck+0x40>
 8003284:	2300      	movs	r3, #0
 8003286:	e003      	b.n	8003290 <PN532_sendCommandCheckAck+0x48>

   // For SPI only wait for the chip to be ready again.
   // This is unnecessary with I2C.
  PN532_Delay(100);
 8003288:	2064      	movs	r0, #100	; 0x64
 800328a:	f7ff fe9d 	bl	8002fc8 <PN532_Delay>

//Delay(2);
 //  if (!PN532_waitready(timeout)) {  return FALSE;}
//Delay(1);

   return TRUE; // ack'd command
 800328e:	2301      	movs	r3, #1

 }
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <PN532_writecommand>:

     @param  cmd       Pointer to the command buffer
     @param  cmdlen    Command length in bytes
 */
 /**************************************************************************/
 void PN532_writecommand(uint8_t *cmd, uint8_t cmdlen) {
 8003298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800329c:	b089      	sub	sp, #36	; 0x24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
 80032a6:	466b      	mov	r3, sp
 80032a8:	461e      	mov	r6, r3

     uint8_t checksum;
     uint8_t packet[8 + cmdlen];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f103 0108 	add.w	r1, r3, #8
 80032b0:	1e4b      	subs	r3, r1, #1
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	460a      	mov	r2, r1
 80032b6:	2300      	movs	r3, #0
 80032b8:	4690      	mov	r8, r2
 80032ba:	4699      	mov	r9, r3
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d0:	460a      	mov	r2, r1
 80032d2:	2300      	movs	r3, #0
 80032d4:	4614      	mov	r4, r2
 80032d6:	461d      	mov	r5, r3
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	00eb      	lsls	r3, r5, #3
 80032e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032e6:	00e2      	lsls	r2, r4, #3
 80032e8:	460b      	mov	r3, r1
 80032ea:	3307      	adds	r3, #7
 80032ec:	08db      	lsrs	r3, r3, #3
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	ebad 0d03 	sub.w	sp, sp, r3
 80032f4:	466b      	mov	r3, sp
 80032f6:	3300      	adds	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
     uint8_t *p = packet;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	61bb      	str	r3, [r7, #24]
     cmdlen++;
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	3301      	adds	r3, #1
 8003302:	70fb      	strb	r3, [r7, #3]

     p[0] = PN532_SPI_DATAWRITE;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
     p++;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3301      	adds	r3, #1
 800330e:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_PREAMBLE;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
     p++;
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	3301      	adds	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE1;
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
     p++;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	3301      	adds	r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE2;
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	22ff      	movs	r2, #255	; 0xff
 800332c:	701a      	strb	r2, [r3, #0]
     p++;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3301      	adds	r3, #1
 8003332:	61bb      	str	r3, [r7, #24]
     checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
 8003334:	23ff      	movs	r3, #255	; 0xff
 8003336:	75fb      	strb	r3, [r7, #23]

     p[0] = cmdlen;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	701a      	strb	r2, [r3, #0]
     p++;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	3301      	adds	r3, #1
 8003342:	61bb      	str	r3, [r7, #24]
     p[0] = ~cmdlen + 1;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	425b      	negs	r3, r3
 8003348:	b2da      	uxtb	r2, r3
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	701a      	strb	r2, [r3, #0]
     p++;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	3301      	adds	r3, #1
 8003352:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_HOSTTOPN532;
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	22d4      	movs	r2, #212	; 0xd4
 8003358:	701a      	strb	r2, [r3, #0]
     p++;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	3301      	adds	r3, #1
 800335e:	61bb      	str	r3, [r7, #24]
     checksum += PN532_HOSTTOPN532;
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	3b2c      	subs	r3, #44	; 0x2c
 8003364:	75fb      	strb	r3, [r7, #23]

     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 8003366:	2300      	movs	r3, #0
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e012      	b.n	8003392 <PN532_writecommand+0xfa>
       p[0] = cmd[i];
 800336c:	7ffb      	ldrb	r3, [r7, #31]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	701a      	strb	r2, [r3, #0]
       p++;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	3301      	adds	r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
       checksum += cmd[i];
 800337e:	7ffb      	ldrb	r3, [r7, #31]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	4413      	add	r3, r2
 800338a:	75fb      	strb	r3, [r7, #23]
     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 800338c:	7ffb      	ldrb	r3, [r7, #31]
 800338e:	3301      	adds	r3, #1
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	7ffa      	ldrb	r2, [r7, #31]
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	3b01      	subs	r3, #1
 8003398:	429a      	cmp	r2, r3
 800339a:	dbe7      	blt.n	800336c <PN532_writecommand+0xd4>
     }

     p[0] = ~checksum;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	43db      	mvns	r3, r3
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	701a      	strb	r2, [r3, #0]
     p++;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_POSTAMBLE;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
     p++;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
//		USART_SendData(USART2_NUM,0x0D);
//		while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
#endif
//-----------------------------------------------------------------------------

     PN532_write( packet, 8 + cmdlen);
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	3308      	adds	r3, #8
 80033bc:	4619      	mov	r1, r3
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f806 	bl	80033d0 <PN532_write>
 80033c4:	46b5      	mov	sp, r6

 }
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080033d0 <PN532_write>:
/******************************************************************************/
 void PN532_write( uint8_t *buffer, size_t len) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу
    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 80033da:	bf00      	nop
 80033dc:	2102      	movs	r1, #2
 80033de:	481c      	ldr	r0, [pc, #112]	; (8003450 <PN532_write+0x80>)
 80033e0:	f001 fe16 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f8      	beq.n	80033dc <PN532_write+0xc>

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033f0:	4818      	ldr	r0, [pc, #96]	; (8003454 <PN532_write+0x84>)
 80033f2:	f001 fa18 	bl	8004826 <GPIO_WriteBit>

	  //PN532_Delay(100);
	  Delay(2);
 80033f6:	2002      	movs	r0, #2
 80033f8:	f7ff f9cc 	bl	8002794 <Delay>
	for (size_t i = 0; i < len; i++) {
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e017      	b.n	8003432 <PN532_write+0x62>

		SPI_I2S_SendData(SPI2,buffer[i]);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	4810      	ldr	r0, [pc, #64]	; (8003450 <PN532_write+0x80>)
 8003410:	f001 fda6 	bl	8004f60 <SPI_I2S_SendData>

	    PN532_Delay(400);
 8003414:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003418:	f7ff fdd6 	bl	8002fc8 <PN532_Delay>

	    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET){};  // ждём пока данные уйдут
 800341c:	bf00      	nop
 800341e:	2102      	movs	r1, #2
 8003420:	480b      	ldr	r0, [pc, #44]	; (8003450 <PN532_write+0x80>)
 8003422:	f001 fdf5 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f8      	beq.n	800341e <PN532_write+0x4e>
	for (size_t i = 0; i < len; i++) {
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d3e3      	bcc.n	8003402 <PN532_write+0x32>

     }

//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800343a:	2201      	movs	r2, #1
 800343c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003440:	4804      	ldr	r0, [pc, #16]	; (8003454 <PN532_write+0x84>)
 8003442:	f001 f9f0 	bl	8004826 <GPIO_WriteBit>


 }
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40003800 	.word	0x40003800
 8003454:	40010c00 	.word	0x40010c00

08003458 <PN532_readdata>:

     @param  rd_buff      Pointer to the buffer where data will be written
     @param  len_rd_buff         Number of bytes to be read
 */
 /**************************************************************************/
 void PN532_readdata(uint8_t *rd_buff, uint8_t len_rd_buff,uint16_t sendvalue) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
 8003464:	4613      	mov	r3, r2
 8003466:	803b      	strh	r3, [r7, #0]
      //uint8_t cmd = PN532_SPI_DATAREAD;
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346e:	4831      	ldr	r0, [pc, #196]	; (8003534 <PN532_readdata+0xdc>)
 8003470:	f001 f9d9 	bl	8004826 <GPIO_WriteBit>

    // PN532_Delay(100);
     Delay(2);
 8003474:	2002      	movs	r0, #2
 8003476:	f7ff f98d 	bl	8002794 <Delay>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800347a:	bf00      	nop
 800347c:	2102      	movs	r1, #2
 800347e:	482e      	ldr	r0, [pc, #184]	; (8003538 <PN532_readdata+0xe0>)
 8003480:	f001 fdc6 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f8      	beq.n	800347c <PN532_readdata+0x24>
	   SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 800348a:	2103      	movs	r1, #3
 800348c:	482a      	ldr	r0, [pc, #168]	; (8003538 <PN532_readdata+0xe0>)
 800348e:	f001 fd67 	bl	8004f60 <SPI_I2S_SendData>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8003492:	bf00      	nop
 8003494:	2102      	movs	r1, #2
 8003496:	4828      	ldr	r0, [pc, #160]	; (8003538 <PN532_readdata+0xe0>)
 8003498:	f001 fdba 	bl	8005010 <SPI_I2S_GetFlagStatus>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f8      	beq.n	8003494 <PN532_readdata+0x3c>
	   while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80034a2:	bf00      	nop
 80034a4:	2101      	movs	r1, #1
 80034a6:	4824      	ldr	r0, [pc, #144]	; (8003538 <PN532_readdata+0xe0>)
 80034a8:	f001 fdb2 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f8      	beq.n	80034a4 <PN532_readdata+0x4c>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 80034b2:	4821      	ldr	r0, [pc, #132]	; (8003538 <PN532_readdata+0xe0>)
 80034b4:	f001 fd62 	bl	8004f7c <SPI_I2S_ReceiveData>
 80034b8:	4603      	mov	r3, r0
 80034ba:	73bb      	strb	r3, [r7, #14]

	   // чтение
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e029      	b.n	8003516 <PN532_readdata+0xbe>
	         PN532_Delay(400);
 80034c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80034c6:	f7ff fd7f 	bl	8002fc8 <PN532_Delay>

	    	 SPI_I2S_SendData(SPI2, sendvalue);
 80034ca:	883b      	ldrh	r3, [r7, #0]
 80034cc:	4619      	mov	r1, r3
 80034ce:	481a      	ldr	r0, [pc, #104]	; (8003538 <PN532_readdata+0xe0>)
 80034d0:	f001 fd46 	bl	8004f60 <SPI_I2S_SendData>

	         PN532_Delay(400);
 80034d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80034d8:	f7ff fd76 	bl	8002fc8 <PN532_Delay>

			 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80034dc:	bf00      	nop
 80034de:	2102      	movs	r1, #2
 80034e0:	4815      	ldr	r0, [pc, #84]	; (8003538 <PN532_readdata+0xe0>)
 80034e2:	f001 fd95 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f8      	beq.n	80034de <PN532_readdata+0x86>

	    	 while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появтся
 80034ec:	bf00      	nop
 80034ee:	2101      	movs	r1, #1
 80034f0:	4811      	ldr	r0, [pc, #68]	; (8003538 <PN532_readdata+0xe0>)
 80034f2:	f001 fd8d 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f8      	beq.n	80034ee <PN532_readdata+0x96>

	    	 rd_buff[i] =SPI_I2S_ReceiveData(SPI2);
 80034fc:	480e      	ldr	r0, [pc, #56]	; (8003538 <PN532_readdata+0xe0>)
 80034fe:	f001 fd3d 	bl	8004f7c <SPI_I2S_ReceiveData>
 8003502:	4603      	mov	r3, r0
 8003504:	4619      	mov	r1, r3
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	b2ca      	uxtb	r2, r1
 800350e:	701a      	strb	r2, [r3, #0]
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	3301      	adds	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	429a      	cmp	r2, r3
 800351c:	d3d1      	bcc.n	80034c2 <PN532_readdata+0x6a>


//	 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу


	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN, 1);
 800351e:	2201      	movs	r2, #1
 8003520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003524:	4803      	ldr	r0, [pc, #12]	; (8003534 <PN532_readdata+0xdc>)
 8003526:	f001 f97e 	bl	8004826 <GPIO_WriteBit>
	    	USART_SendData(USART2_NUM,rd_buff[i]);
	    }
#endif
//------------------------------------------------------------------------------

}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40010c00 	.word	0x40010c00
 8003538:	40003800 	.word	0x40003800

0800353c <PN532_readack>:
 /**************************************************************************/
 /*!
     @brief  Tries to read the SPI or I2C ACK signal
 */
 /**************************************************************************/
 bool PN532_readack() {
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0

	 const uint8_t pn532ack[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00};
 8003542:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <PN532_readack+0x104>)
 8003544:	f107 0308 	add.w	r3, r7, #8
 8003548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800354c:	6018      	str	r0, [r3, #0]
 800354e:	3304      	adds	r3, #4
 8003550:	8019      	strh	r1, [r3, #0]
	 uint8_t ackbuff[6];
	 //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 0
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003552:	2200      	movs	r2, #0
 8003554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003558:	483a      	ldr	r0, [pc, #232]	; (8003644 <PN532_readack+0x108>)
 800355a:	f001 f964 	bl	8004826 <GPIO_WriteBit>

	 //PN532_Delay(100);
	 Delay(2);
 800355e:	2002      	movs	r0, #2
 8003560:	f7ff f918 	bl	8002794 <Delay>
//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8003564:	bf00      	nop
 8003566:	2102      	movs	r1, #2
 8003568:	4837      	ldr	r0, [pc, #220]	; (8003648 <PN532_readack+0x10c>)
 800356a:	f001 fd51 	bl	8005010 <SPI_I2S_GetFlagStatus>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f8      	beq.n	8003566 <PN532_readack+0x2a>

	  SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 8003574:	2103      	movs	r1, #3
 8003576:	4834      	ldr	r0, [pc, #208]	; (8003648 <PN532_readack+0x10c>)
 8003578:	f001 fcf2 	bl	8004f60 <SPI_I2S_SendData>
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800357c:	bf00      	nop
 800357e:	2102      	movs	r1, #2
 8003580:	4831      	ldr	r0, [pc, #196]	; (8003648 <PN532_readack+0x10c>)
 8003582:	f001 fd45 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f8      	beq.n	800357e <PN532_readack+0x42>

//Читаем данные, чтобы очистить приемный буфер иначе там данные от байта готовности!!????(непонятно!)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 800358c:	bf00      	nop
 800358e:	2101      	movs	r1, #1
 8003590:	482d      	ldr	r0, [pc, #180]	; (8003648 <PN532_readack+0x10c>)
 8003592:	f001 fd3d 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f8      	beq.n	800358e <PN532_readack+0x52>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 800359c:	482a      	ldr	r0, [pc, #168]	; (8003648 <PN532_readack+0x10c>)
 800359e:	f001 fced 	bl	8004f7c <SPI_I2S_ReceiveData>
 80035a2:	4603      	mov	r3, r0
 80035a4:	73bb      	strb	r3, [r7, #14]

//Читаем 6 байт пакета подтверждения
	  for (uint8_t i = 0; i < 6; i++) {
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e02f      	b.n	800360c <PN532_readack+0xd0>

		  PN532_Delay(100);
 80035ac:	2064      	movs	r0, #100	; 0x64
 80035ae:	f7ff fd0b 	bl	8002fc8 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80035b2:	bf00      	nop
 80035b4:	2102      	movs	r1, #2
 80035b6:	4824      	ldr	r0, [pc, #144]	; (8003648 <PN532_readack+0x10c>)
 80035b8:	f001 fd2a 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f8      	beq.n	80035b4 <PN532_readack+0x78>
	      SPI_I2S_SendData(SPI2, 0x00);
 80035c2:	2100      	movs	r1, #0
 80035c4:	4820      	ldr	r0, [pc, #128]	; (8003648 <PN532_readack+0x10c>)
 80035c6:	f001 fccb 	bl	8004f60 <SPI_I2S_SendData>

	      PN532_Delay(100);
 80035ca:	2064      	movs	r0, #100	; 0x64
 80035cc:	f7ff fcfc 	bl	8002fc8 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80035d0:	bf00      	nop
 80035d2:	2102      	movs	r1, #2
 80035d4:	481c      	ldr	r0, [pc, #112]	; (8003648 <PN532_readack+0x10c>)
 80035d6:	f001 fd1b 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f8      	beq.n	80035d2 <PN532_readack+0x96>
    	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80035e0:	bf00      	nop
 80035e2:	2101      	movs	r1, #1
 80035e4:	4818      	ldr	r0, [pc, #96]	; (8003648 <PN532_readack+0x10c>)
 80035e6:	f001 fd13 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f8      	beq.n	80035e2 <PN532_readack+0xa6>
	      ackbuff[i] =SPI_I2S_ReceiveData(SPI2);
 80035f0:	4815      	ldr	r0, [pc, #84]	; (8003648 <PN532_readack+0x10c>)
 80035f2:	f001 fcc3 	bl	8004f7c <SPI_I2S_ReceiveData>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	3310      	adds	r3, #16
 8003600:	443b      	add	r3, r7
 8003602:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for (uint8_t i = 0; i < 6; i++) {
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3301      	adds	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b05      	cmp	r3, #5
 8003610:	d9cc      	bls.n	80035ac <PN532_readack+0x70>

	     }

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	    GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8003612:	2201      	movs	r2, #1
 8003614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003618:	480a      	ldr	r0, [pc, #40]	; (8003644 <PN532_readack+0x108>)
 800361a:	f001 f904 	bl	8004826 <GPIO_WriteBit>
//------------------------------------------------------------------------------

//сравнение полученных  шести байт с массивом правильных данных
//если сдержимое не одинаковое, от выход с ошибкой;
//проверка подтверждения (ack)
   return (0 == memcmp((char *)ackbuff, (char *)pn532ack, sizeof(pn532ack)));
 800361e:	f107 0108 	add.w	r1, r7, #8
 8003622:	463b      	mov	r3, r7
 8003624:	2206      	movs	r2, #6
 8003626:	4618      	mov	r0, r3
 8003628:	f002 fa70 	bl	8005b0c <memcmp>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3

}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	08006e78 	.word	0x08006e78
 8003644:	40010c00 	.word	0x40010c00
 8003648:	40003800 	.word	0x40003800

0800364c <PN532_isready>:
 /**************************************************************************/
 /*!
     @brief  Return true if the PN532 is ready with a response.
 */
 /**************************************************************************/
 bool PN532_isready() {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
     uint8_t reply;
// 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8003652:	bf00      	nop
 8003654:	2102      	movs	r1, #2
 8003656:	4849      	ldr	r0, [pc, #292]	; (800377c <PN532_isready+0x130>)
 8003658:	f001 fcda 	bl	8005010 <SPI_I2S_GetFlagStatus>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f8      	beq.n	8003654 <PN532_isready+0x8>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить принимающий регистр (не понятно зачем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8003662:	bf00      	nop
 8003664:	2101      	movs	r1, #1
 8003666:	4845      	ldr	r0, [pc, #276]	; (800377c <PN532_isready+0x130>)
 8003668:	f001 fcd2 	bl	8005010 <SPI_I2S_GetFlagStatus>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f8      	beq.n	8003664 <PN532_isready+0x18>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 8003672:	4842      	ldr	r0, [pc, #264]	; (800377c <PN532_isready+0x130>)
 8003674:	f001 fc82 	bl	8004f7c <SPI_I2S_ReceiveData>
 8003678:	4603      	mov	r3, r0
 800367a:	4619      	mov	r1, r3
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <PN532_isready+0x134>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	b2c9      	uxtb	r1, r1
 8003684:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <PN532_isready+0x138>)
 8003686:	5499      	strb	r1, [r3, r2]
	  rl++;
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <PN532_isready+0x134>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <PN532_isready+0x134>)
 8003692:	701a      	strb	r2, [r3, #0]
//NSS устанавливаем в 0
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003694:	2200      	movs	r2, #0
 8003696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800369a:	483b      	ldr	r0, [pc, #236]	; (8003788 <PN532_isready+0x13c>)
 800369c:	f001 f8c3 	bl	8004826 <GPIO_WriteBit>

	    //PN532_Delay(100);
	    Delay(2);
 80036a0:	2002      	movs	r0, #2
 80036a2:	f7ff f877 	bl	8002794 <Delay>
	  SPI_I2S_SendData(SPI2, PN532_SPI_STATREAD);//посылка команды чтения байта состояния
 80036a6:	2102      	movs	r1, #2
 80036a8:	4834      	ldr	r0, [pc, #208]	; (800377c <PN532_isready+0x130>)
 80036aa:	f001 fc59 	bl	8004f60 <SPI_I2S_SendData>

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80036ae:	bf00      	nop
 80036b0:	2102      	movs	r1, #2
 80036b2:	4832      	ldr	r0, [pc, #200]	; (800377c <PN532_isready+0x130>)
 80036b4:	f001 fcac 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f8      	beq.n	80036b0 <PN532_isready+0x64>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить примнающий регистр (не понятно зачем)
//Получается, что нужно прочитать 2 раза приемный буфер, что бы потом получить корретные данные
//при посылке байта и чтении данных после его передачи (странно!!! установленно опытным путем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80036be:	bf00      	nop
 80036c0:	2101      	movs	r1, #1
 80036c2:	482e      	ldr	r0, [pc, #184]	; (800377c <PN532_isready+0x130>)
 80036c4:	f001 fca4 	bl	8005010 <SPI_I2S_GetFlagStatus>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f8      	beq.n	80036c0 <PN532_isready+0x74>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 80036ce:	482b      	ldr	r0, [pc, #172]	; (800377c <PN532_isready+0x130>)
 80036d0:	f001 fc54 	bl	8004f7c <SPI_I2S_ReceiveData>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4619      	mov	r1, r3
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <PN532_isready+0x134>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	b2c9      	uxtb	r1, r1
 80036e0:	4b28      	ldr	r3, [pc, #160]	; (8003784 <PN532_isready+0x138>)
 80036e2:	5499      	strb	r1, [r3, r2]
	  rl++;
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <PN532_isready+0x134>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <PN532_isready+0x134>)
 80036ee:	701a      	strb	r2, [r3, #0]

	     PN532_Delay(400);
 80036f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80036f4:	f7ff fc68 	bl	8002fc8 <PN532_Delay>

      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 80036f8:	bf00      	nop
 80036fa:	2102      	movs	r1, #2
 80036fc:	481f      	ldr	r0, [pc, #124]	; (800377c <PN532_isready+0x130>)
 80036fe:	f001 fc87 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f8      	beq.n	80036fa <PN532_isready+0xae>

	  SPI_I2S_SendData(SPI2, 0XFF);//посылка "пустышки", чтобы забрать байт состояния
 8003708:	21ff      	movs	r1, #255	; 0xff
 800370a:	481c      	ldr	r0, [pc, #112]	; (800377c <PN532_isready+0x130>)
 800370c:	f001 fc28 	bl	8004f60 <SPI_I2S_SendData>

	     PN532_Delay(400);
 8003710:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003714:	f7ff fc58 	bl	8002fc8 <PN532_Delay>

   	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8003718:	bf00      	nop
 800371a:	2102      	movs	r1, #2
 800371c:	4817      	ldr	r0, [pc, #92]	; (800377c <PN532_isready+0x130>)
 800371e:	f001 fc77 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f8      	beq.n	800371a <PN532_isready+0xce>

	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {};  // ждём пока данные появятся
 8003728:	bf00      	nop
 800372a:	2101      	movs	r1, #1
 800372c:	4813      	ldr	r0, [pc, #76]	; (800377c <PN532_isready+0x130>)
 800372e:	f001 fc6f 	bl	8005010 <SPI_I2S_GetFlagStatus>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f8      	beq.n	800372a <PN532_isready+0xde>

	  reply = SPI_I2S_ReceiveData(SPI2);
 8003738:	4810      	ldr	r0, [pc, #64]	; (800377c <PN532_isready+0x130>)
 800373a:	f001 fc1f 	bl	8004f7c <SPI_I2S_ReceiveData>
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 1
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003748:	480f      	ldr	r0, [pc, #60]	; (8003788 <PN532_isready+0x13c>)
 800374a:	f001 f86c 	bl	8004826 <GPIO_WriteBit>

	   replybuff[rl]=reply;
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <PN532_isready+0x134>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <PN532_isready+0x138>)
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	5453      	strb	r3, [r2, r1]
       rl++;
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <PN532_isready+0x134>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <PN532_isready+0x134>)
 8003764:	701a      	strb	r2, [r3, #0]

       //USART_SendData(USART2_NUM,reply);

// Проверка ответа с байтом готовности (0x01);
     return reply == PN532_SPI_READY;
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	2b01      	cmp	r3, #1
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3


 }
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40003800 	.word	0x40003800
 8003780:	200009ec 	.word	0x200009ec
 8003784:	200009d8 	.word	0x200009d8
 8003788:	40010c00 	.word	0x40010c00

0800378c <PN532_waitready>:
     @brief  Waits until the PN532 is ready.

     @param  timeout   Timeout before giving up
 */
 /**************************************************************************/
 bool PN532_waitready(uint16_t timeout) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
   uint16_t timer = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	81fb      	strh	r3, [r7, #14]

   Delay(5);
 800379a:	2005      	movs	r0, #5
 800379c:	f7fe fffa 	bl	8002794 <Delay>
   timer += 5;
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	3305      	adds	r3, #5
 80037a4:	81fb      	strh	r3, [r7, #14]
   //USART_SendData(USART2_NUM,0xFF);

   while (!PN532_isready()) {
 80037a6:	e00e      	b.n	80037c6 <PN532_waitready+0x3a>
     if (timeout != 0) {
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <PN532_waitready+0x34>
       timer += 5;
 80037ae:	89fb      	ldrh	r3, [r7, #14]
 80037b0:	3305      	adds	r3, #5
 80037b2:	81fb      	strh	r3, [r7, #14]
       if (timer > timeout) {
 80037b4:	89fa      	ldrh	r2, [r7, #14]
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d901      	bls.n	80037c0 <PN532_waitready+0x34>
         return FALSE;
 80037bc:	2300      	movs	r3, #0
 80037be:	e008      	b.n	80037d2 <PN532_waitready+0x46>
       }
     }
     Delay(5);
 80037c0:	2005      	movs	r0, #5
 80037c2:	f7fe ffe7 	bl	8002794 <Delay>
   while (!PN532_isready()) {
 80037c6:	f7ff ff41 	bl	800364c <PN532_isready>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0eb      	beq.n	80037a8 <PN532_waitready+0x1c>
   }
   return TRUE;
 80037d0:	2301      	movs	r3, #1
 }
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <PN532_mifareclassic_AuthenticateBlock>:
 /**************************************************************************/
 uint8_t PN532_mifareclassic_AuthenticateBlock(uint8_t *uid,
                                                         uint8_t uidLen,
                                                         uint32_t blockNumber,
                                                         uint8_t keyNumber,
                                                         uint8_t *keyData) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	461a      	mov	r2, r3
 80037e8:	460b      	mov	r3, r1
 80037ea:	72fb      	strb	r3, [r7, #11]
 80037ec:	4613      	mov	r3, r2
 80037ee:	72bb      	strb	r3, [r7, #10]
   // uint8_t len;
   uint8_t i;

   // Hang on to the key and uid data
   memcpy(_key, keyData, 6);
 80037f0:	4b2f      	ldr	r3, [pc, #188]	; (80038b0 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	6810      	ldr	r0, [r2, #0]
 80037f6:	6018      	str	r0, [r3, #0]
 80037f8:	8892      	ldrh	r2, [r2, #4]
 80037fa:	809a      	strh	r2, [r3, #4]
   memcpy(_uid, uid, uidLen);
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	461a      	mov	r2, r3
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	482c      	ldr	r0, [pc, #176]	; (80038b4 <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 8003804:	f002 f992 	bl	8005b2c <memcpy>
   _uidLen = uidLen;
 8003808:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 800380e:	701a      	strb	r2, [r3, #0]
   PN532DEBUGPRINT.print(F(": "));
   Adafruit_PN532::PrintHex(_key, 6);
 #endif
*/
   // Prepare the authentication command //
   pn532_packetbuffer[0] =
 8003810:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003812:	2240      	movs	r2, #64	; 0x40
 8003814:	701a      	strb	r2, [r3, #0]
       PN532_COMMAND_INDATAEXCHANGE; /* Data Exchange Header */
   pn532_packetbuffer[1] = 1;        /* Max card numbers */
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003818:	2201      	movs	r2, #1
 800381a:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
 800381c:	7abb      	ldrb	r3, [r7, #10]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <PN532_mifareclassic_AuthenticateBlock+0x4a>
 8003822:	2261      	movs	r2, #97	; 0x61
 8003824:	e000      	b.n	8003828 <PN532_mifareclassic_AuthenticateBlock+0x4c>
 8003826:	2260      	movs	r2, #96	; 0x60
 8003828:	4b24      	ldr	r3, [pc, #144]	; (80038bc <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800382a:	709a      	strb	r2, [r3, #2]
   //pn532_packetbuffer[2] = 0x61;
   pn532_packetbuffer[3] =
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b22      	ldr	r3, [pc, #136]	; (80038bc <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003832:	70da      	strb	r2, [r3, #3]
       blockNumber; /* Block Number (1K = 0..63, 4K = 0..255 */
   memcpy(pn532_packetbuffer + 4, _key, 6);
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <PN532_mifareclassic_AuthenticateBlock+0xe4>)
 8003836:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 8003838:	6810      	ldr	r0, [r2, #0]
 800383a:	6018      	str	r0, [r3, #0]
 800383c:	8892      	ldrh	r2, [r2, #4]
 800383e:	809a      	strh	r2, [r3, #4]
   for (i = 0; i < _uidLen; i++) {
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
 8003844:	e00a      	b.n	800385c <PN532_mifareclassic_AuthenticateBlock+0x80>
     pn532_packetbuffer[10 + i] = _uid[i]; /* 4 byte card ID */
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 800384a:	56d2      	ldrsb	r2, [r2, r3]
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	330a      	adds	r3, #10
 8003850:	b2d1      	uxtb	r1, r2
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003854:	54d1      	strb	r1, [r2, r3]
   for (i = 0; i < _uidLen; i++) {
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	3301      	adds	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8003860:	f992 2000 	ldrsb.w	r2, [r2]
 8003864:	4293      	cmp	r3, r2
 8003866:	dbee      	blt.n	8003846 <PN532_mifareclassic_AuthenticateBlock+0x6a>
  	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
  	    	USART_SendData(USART2_NUM,pn532_packetbuffer[i]);
  	    }
*/

   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 10 + _uidLen,100))
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 800386a:	f993 3000 	ldrsb.w	r3, [r3]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	330a      	adds	r3, #10
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2264      	movs	r2, #100	; 0x64
 8003876:	4619      	mov	r1, r3
 8003878:	4810      	ldr	r0, [pc, #64]	; (80038bc <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800387a:	f7ff fce5 	bl	8003248 <PN532_sendCommandCheckAck>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <PN532_mifareclassic_AuthenticateBlock+0xac>
     return 0;
 8003884:	2300      	movs	r3, #0
 8003886:	e00e      	b.n	80038a6 <PN532_mifareclassic_AuthenticateBlock+0xca>
   Delay(10);
 8003888:	200a      	movs	r0, #10
 800388a:	f7fe ff83 	bl	8002794 <Delay>
   // Read the response packet
   PN532_readdata(pn532_readbuffer, 12,0xFF);
 800388e:	22ff      	movs	r2, #255	; 0xff
 8003890:	210c      	movs	r1, #12
 8003892:	480c      	ldr	r0, [pc, #48]	; (80038c4 <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 8003894:	f7ff fde0 	bl	8003458 <PN532_readdata>
*/
   // check if the response is valid and we are authenticated???
   // for an auth success it should be bytes 5-7: 0xD5 0x41 0x00
   // Mifare auth error is technically byte 7: 0x14 but anything other and 0x00
   // is not good
   if (pn532_readbuffer[7] != 0x00) {
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 800389a:	79db      	ldrb	r3, [r3, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <PN532_mifareclassic_AuthenticateBlock+0xc8>
	   for (uint8_t i = 0; i < 12; i++) {
	 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
	 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	 	    }
 #endif
     return 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <PN532_mifareclassic_AuthenticateBlock+0xca>
   }

   return 1;
 80038a4:	2301      	movs	r3, #1
 }
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000a78 	.word	0x20000a78
 80038b4:	20000a70 	.word	0x20000a70
 80038b8:	20000a77 	.word	0x20000a77
 80038bc:	200009f0 	.word	0x200009f0
 80038c0:	200009f4 	.word	0x200009f4
 80038c4:	20000a30 	.word	0x20000a30

080038c8 <PN532_mifareclassic_ReadDataBlock>:
                           retrieved data (if any)
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_ReadDataBlock(uint8_t blockNumber,
                                                     uint8_t *data) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	71fb      	strb	r3, [r7, #7]
 //  PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));
   //PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 80038d4:	4b17      	ldr	r3, [pc, #92]	; (8003934 <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;               /* Card number */
 80038da:	4b16      	ldr	r3, [pc, #88]	; (8003934 <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80038dc:	2201      	movs	r2, #1
 80038de:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_READ; /* Mifare Read command = 0x30 */
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80038e2:	2230      	movs	r2, #48	; 0x30
 80038e4:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] = blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
 80038e6:	4a13      	ldr	r2, [pc, #76]	; (8003934 <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	70d3      	strb	r3, [r2, #3]

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,100)) {
 80038ec:	2264      	movs	r2, #100	; 0x64
 80038ee:	2104      	movs	r1, #4
 80038f0:	4810      	ldr	r0, [pc, #64]	; (8003934 <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80038f2:	f7ff fca9 	bl	8003248 <PN532_sendCommandCheckAck>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <PN532_mifareclassic_ReadDataBlock+0x38>
 #ifdef MIFAREDEBUG
   //  PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
 #endif
     return 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e014      	b.n	800392a <PN532_mifareclassic_ReadDataBlock+0x62>
   }
Delay(10);
 8003900:	200a      	movs	r0, #10
 8003902:	f7fe ff47 	bl	8002794 <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 8003906:	22ff      	movs	r2, #255	; 0xff
 8003908:	211a      	movs	r1, #26
 800390a:	480b      	ldr	r0, [pc, #44]	; (8003938 <PN532_mifareclassic_ReadDataBlock+0x70>)
 800390c:	f7ff fda4 	bl	8003458 <PN532_readdata>

   /* If byte 8 isn't 0x00 we probably have an error */
   if (pn532_readbuffer[7] != 0x00) {
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <PN532_mifareclassic_ReadDataBlock+0x70>)
 8003912:	79db      	ldrb	r3, [r3, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <PN532_mifareclassic_ReadDataBlock+0x54>
 #ifdef MIFAREDEBUG
  //   PN532DEBUGPRINT.println(F("Unexpected response"));
    // Adafruit_PN532::PrintHexChar(pn532_packetbuffer, 26);
 #endif
     return 0;
 8003918:	2300      	movs	r3, #0
 800391a:	e006      	b.n	800392a <PN532_mifareclassic_ReadDataBlock+0x62>
   }

   /* Copy the 16 data bytes to the output buffer        */
   /* Block content starts at byte 9 of a valid response */
   memcpy(data, pn532_readbuffer + 8, 16);
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <PN532_mifareclassic_ReadDataBlock+0x74>)
 800391e:	2210      	movs	r2, #16
 8003920:	4619      	mov	r1, r3
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	f002 f902 	bl	8005b2c <memcpy>
  // PN532DEBUGPRINT.print(F("Block "));
  // PN532DEBUGPRINT.println(blockNumber);
  // Adafruit_PN532::PrintHexChar(data, 16);
 #endif

   return 1;
 8003928:	2301      	movs	r3, #1
 }
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200009f0 	.word	0x200009f0
 8003938:	20000a30 	.word	0x20000a30
 800393c:	20000a38 	.word	0x20000a38

08003940 <PN532_mifareclassic_WriteDataBlock>:
     @param  data          The byte array that contains the data to write.
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_WriteDataBlock(uint8_t blockNumber,
                                                      uint8_t *data) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
  // PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));
  // PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the first command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 800394c:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <PN532_mifareclassic_WriteDataBlock+0x64>)
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;                /* Card number */
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003954:	2201      	movs	r2, #1
 8003956:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_WRITE; /* Mifare Write command = 0xA0 */
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <PN532_mifareclassic_WriteDataBlock+0x64>)
 800395a:	22a0      	movs	r2, #160	; 0xa0
 800395c:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] =
 800395e:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	70d3      	strb	r3, [r2, #3]
       blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
   memcpy(pn532_packetbuffer + 4, data, 16); /* Data Payload */
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <PN532_mifareclassic_WriteDataBlock+0x68>)
 8003966:	2210      	movs	r2, #16
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f002 f8de 	bl	8005b2c <memcpy>

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 20,100)) {
 8003970:	2264      	movs	r2, #100	; 0x64
 8003972:	2114      	movs	r1, #20
 8003974:	480b      	ldr	r0, [pc, #44]	; (80039a4 <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003976:	f7ff fc67 	bl	8003248 <PN532_sendCommandCheckAck>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <PN532_mifareclassic_WriteDataBlock+0x44>
 #ifdef MIFAREDEBUG
 //    PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
 #endif
     return 0;
 8003980:	2300      	movs	r3, #0
 8003982:	e00b      	b.n	800399c <PN532_mifareclassic_WriteDataBlock+0x5c>
   }
   Delay(10);
 8003984:	200a      	movs	r0, #10
 8003986:	f7fe ff05 	bl	8002794 <Delay>
   Delay(10);
 800398a:	200a      	movs	r0, #10
 800398c:	f7fe ff02 	bl	8002794 <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	211a      	movs	r1, #26
 8003994:	4805      	ldr	r0, [pc, #20]	; (80039ac <PN532_mifareclassic_WriteDataBlock+0x6c>)
 8003996:	f7ff fd5f 	bl	8003458 <PN532_readdata>
   for (uint8_t i = 0; i < 26; i++) {
 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
 	    }
*/
   return 1;
 800399a:	2301      	movs	r3, #1
 }
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200009f0 	.word	0x200009f0
 80039a8:	200009f4 	.word	0x200009f4
 80039ac:	20000a30 	.word	0x20000a30

080039b0 <PN532_Read_Data>:

 /**************************************************************************/
 uint8_t PN532_Read_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data)
 {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	72fb      	strb	r3, [r7, #11]
 80039be:	4613      	mov	r3, r2
 80039c0:	72bb      	strb	r3, [r7, #10]
 	uint8_t success=0;	// Flag to check if there was an error with the PN532
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <PN532_Read_Data+0x9c>)
 80039ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039d2:	6018      	str	r0, [r3, #0]
 80039d4:	3304      	adds	r3, #4
 80039d6:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

 	bool authenticated = FALSE;
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 	uint8_t blockBuffer[16];                  // Buffer to store block contents
 	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 80039de:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <PN532_Read_Data+0xa0>)
 80039e0:	f107 0310 	add.w	r3, r7, #16
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	4611      	mov	r1, r2
 80039e8:	8019      	strh	r1, [r3, #0]
 80039ea:	3302      	adds	r3, #2
 80039ec:	0c12      	lsrs	r2, r2, #16
 80039ee:	701a      	strb	r2, [r3, #0]
 static char s_pc_PN532_err1[]="Authentication failed for sector";
 static char s_pc_PN532_err4[]="Unable to read data block";


 //success = PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB);
 	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 80039f0:	7af9      	ldrb	r1, [r7, #11]
 80039f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2301      	movs	r3, #1
 80039fa:	2200      	movs	r2, #0
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff feed 	bl	80037dc <PN532_mifareclassic_AuthenticateBlock>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <PN532_Read_Data+0x64>
 	        {
 	          return res_excep=1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003a0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a12:	e016      	b.n	8003a42 <PN532_Read_Data+0x92>
 	        }

 	       if(!(res_excep=PN532_mifareclassic_ReadDataBlock(blockNumber, data)))
 8003a14:	7abb      	ldrb	r3, [r7, #10]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff55 	bl	80038c8 <PN532_mifareclassic_ReadDataBlock>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003a24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <PN532_Read_Data+0x88>
 	       {
 	          return res_excep=2;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003a32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a36:	e004      	b.n	8003a42 <PN532_Read_Data+0x92>
 	       }else return res_excep=0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003a3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 }
 8003a42:	4618      	mov	r0, r3
 8003a44:	3730      	adds	r7, #48	; 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08006eb4 	.word	0x08006eb4
 8003a50:	08006ebc 	.word	0x08006ebc

08003a54 <RTC_INIT>:
#include "rtc.h"



void RTC_INIT(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
	if((RCC->BDCR & RCC_BDCR_RTCEN) != RCC_BDCR_RTCEN){		// проверка работы часов, если не включены, то инициализировать
 8003a58:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <RTC_INIT+0xf4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a64:	d06c      	beq.n	8003b40 <RTC_INIT+0xec>
		RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <RTC_INIT+0xf4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a37      	ldr	r2, [pc, #220]	; (8003b48 <RTC_INIT+0xf4>)
 8003a6c:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8003a70:	61d3      	str	r3, [r2, #28]
		PWR->CR |= PWR_CR_DBP;		// разрешение доступа к Backup области
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <RTC_INIT+0xf8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a35      	ldr	r2, [pc, #212]	; (8003b4c <RTC_INIT+0xf8>)
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]
		RCC->BDCR |= RCC_BDCR_BDRST;	// сброс Backup области
 8003a7e:	4b32      	ldr	r3, [pc, #200]	; (8003b48 <RTC_INIT+0xf4>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a31      	ldr	r2, [pc, #196]	; (8003b48 <RTC_INIT+0xf4>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6213      	str	r3, [r2, #32]
		RCC->BDCR &= ~RCC_BDCR_BDRST;
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <RTC_INIT+0xf4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a2e      	ldr	r2, [pc, #184]	; (8003b48 <RTC_INIT+0xf4>)
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a94:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_LSE;	// выбор LSE источника (кварц 32768) и подача тактирования
 8003a96:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <RTC_INIT+0xf4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <RTC_INIT+0xf4>)
 8003a9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003aa0:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_LSEON;
 8003aa2:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <RTC_INIT+0xf4>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a28      	ldr	r2, [pc, #160]	; (8003b48 <RTC_INIT+0xf4>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6213      	str	r3, [r2, #32]
		while((RCC->BDCR&RCC_BDCR_LSEON) != RCC_BDCR_LSEON){}	// ожидание включения
 8003aae:	bf00      	nop
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <RTC_INIT+0xf4>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d1f9      	bne.n	8003ab0 <RTC_INIT+0x5c>
		BKP->RTCCR |= 3;	// калибровка RTC
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <RTC_INIT+0xfc>)
 8003abe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <RTC_INIT+0xfc>)
 8003ac4:	f043 0303 	orr.w	r3, r3, #3
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	8593      	strh	r3, [r2, #44]	; 0x2c
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// проверка на конец изменений регистров RTC
 8003acc:	bf00      	nop
 8003ace:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <RTC_INIT+0x100>)
 8003ad0:	889b      	ldrh	r3, [r3, #4]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f8      	beq.n	8003ace <RTC_INIT+0x7a>
		RTC->CRL |= RTC_CRL_CNF;		// разрешение записи в регистры RTC
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <RTC_INIT+0x100>)
 8003ade:	889b      	ldrh	r3, [r3, #4]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <RTC_INIT+0x100>)
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	8093      	strh	r3, [r2, #4]
		RTC->PRLL = 0x7FFF;		// настройка делителя на 32768
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <RTC_INIT+0x100>)
 8003aee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003af2:	819a      	strh	r2, [r3, #12]
		RTC->CRL &= ~RTC_CRL_CNF;	// запрет записи в регистры RTC
 8003af4:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <RTC_INIT+0x100>)
 8003af6:	889b      	ldrh	r3, [r3, #4]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <RTC_INIT+0x100>)
 8003afc:	f023 0310 	bic.w	r3, r3, #16
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8093      	strh	r3, [r2, #4]
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// ожидание конца записи
 8003b04:	bf00      	nop
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <RTC_INIT+0x100>)
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f8      	beq.n	8003b06 <RTC_INIT+0xb2>
		RTC->CRL &= (uint16_t)~RTC_CRL_CNF;		//синхронизация RTC
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <RTC_INIT+0x100>)
 8003b16:	889b      	ldrh	r3, [r3, #4]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <RTC_INIT+0x100>)
 8003b1c:	f023 0310 	bic.w	r3, r3, #16
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8093      	strh	r3, [r2, #4]
		while((RTC->CRL&RTC_CRL_RSF) != RTC_CRL_RSF){}	// ожидание синхронизации
 8003b24:	bf00      	nop
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <RTC_INIT+0x100>)
 8003b28:	889b      	ldrh	r3, [r3, #4]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d1f8      	bne.n	8003b26 <RTC_INIT+0xd2>
		PWR->CR &= ~(PWR_CR_DBP);	// запрет доступа к Backup области
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <RTC_INIT+0xf8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <RTC_INIT+0xf8>)
 8003b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3e:	6013      	str	r3, [r2, #0]

	}
}
 8003b40:	bf00      	nop
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	40006c00 	.word	0x40006c00
 8003b54:	40002800 	.word	0x40002800

08003b58 <RTC_GET_COUNTER>:


uint32_t RTC_GET_COUNTER(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
	return (uint32_t)((RTC->CNTH << 16) | RTC->CNTL);	// получение значения счетчика
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <RTC_GET_COUNTER+0x1c>)
 8003b5e:	8b1b      	ldrh	r3, [r3, #24]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	4a03      	ldr	r2, [pc, #12]	; (8003b74 <RTC_GET_COUNTER+0x1c>)
 8003b66:	8b92      	ldrh	r2, [r2, #28]
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	4313      	orrs	r3, r2
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40002800 	.word	0x40002800

08003b78 <RTC_SET_COUNTER>:

void RTC_SET_COUNTER(uint32_t count)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <RTC_SET_COUNTER+0x88>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <RTC_SET_COUNTER+0x88>)
 8003b86:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8003b8a:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;	// разрешение доступа к Backup области
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <RTC_SET_COUNTER+0x8c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <RTC_SET_COUNTER+0x8c>)
 8003b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b96:	6013      	str	r3, [r2, #0]
	while(!(RTC->CRL & RTC_CRL_RTOFF)); // проверка конца изменения регистров RTC
 8003b98:	bf00      	nop
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003b9c:	889b      	ldrh	r3, [r3, #4]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f8      	beq.n	8003b9a <RTC_SET_COUNTER+0x22>
	RTC->CRL |= RTC_CRL_CNF;	// разрешение записи в регистры RTC
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003baa:	889b      	ldrh	r3, [r3, #4]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003bb0:	f043 0310 	orr.w	r3, r3, #16
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	8093      	strh	r3, [r2, #4]
	RTC->CNTH = count >> 16;	// запись нового значения счетного регистра
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0c1a      	lsrs	r2, r3, #16
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003bbe:	b292      	uxth	r2, r2
 8003bc0:	831a      	strh	r2, [r3, #24]
	RTC->CNTL = count;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	839a      	strh	r2, [r3, #28]
	RTC->CRL &= ~RTC_CRL_CNF;		// запрет записи в регистры RTC
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003bcc:	889b      	ldrh	r3, [r3, #4]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4a0d      	ldr	r2, [pc, #52]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	8093      	strh	r3, [r2, #4]
	while(!(RTC->CRL & RTC_CRL_RTOFF));	// ожидание конца записи
 8003bda:	bf00      	nop
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <RTC_SET_COUNTER+0x90>)
 8003bde:	889b      	ldrh	r3, [r3, #4]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f8      	beq.n	8003bdc <RTC_SET_COUNTER+0x64>
	PWR->CR &= ~PWR_CR_DBP;		// запрет доступа к Backup области
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <RTC_SET_COUNTER+0x8c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <RTC_SET_COUNTER+0x8c>)
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
 8003c08:	40002800 	.word	0x40002800

08003c0c <timer_to_cal>:
#include "rtc_time.h"

void timer_to_cal (unsigned long timer, rtc_cal * rtc_time)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
	char b;
	char c;
	char d;
	unsigned long time;

	time = timer%SEC_A_DAY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a65      	ldr	r2, [pc, #404]	; (8003db0 <timer_to_cal+0x1a4>)
 8003c1a:	fba2 1203 	umull	r1, r2, r2, r3
 8003c1e:	0c12      	lsrs	r2, r2, #16
 8003c20:	4964      	ldr	r1, [pc, #400]	; (8003db4 <timer_to_cal+0x1a8>)
 8003c22:	fb01 f202 	mul.w	r2, r1, r2
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
	a = ((timer+43200)/(86400>>1)) + (2440587<<1) + 1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8003c30:	33c0      	adds	r3, #192	; 0xc0
 8003c32:	4a5f      	ldr	r2, [pc, #380]	; (8003db0 <timer_to_cal+0x1a4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	0bda      	lsrs	r2, r3, #15
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <timer_to_cal+0x1ac>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
	a>>=1;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	613b      	str	r3, [r7, #16]
	rtc_time->wday = a%7;
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <timer_to_cal+0x1b0>)
 8003c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4e:	1ad1      	subs	r1, r2, r3
 8003c50:	0849      	lsrs	r1, r1, #1
 8003c52:	440b      	add	r3, r1
 8003c54:	0899      	lsrs	r1, r3, #2
 8003c56:	460b      	mov	r3, r1
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	1a5b      	subs	r3, r3, r1
 8003c5c:	1ad1      	subs	r1, r2, r3
 8003c5e:	b2ca      	uxtb	r2, r1
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	725a      	strb	r2, [r3, #9]
	a+=32044;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8003c6a:	332c      	adds	r3, #44	; 0x2c
 8003c6c:	613b      	str	r3, [r7, #16]
	b=(4*a+3)/146097;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	3303      	adds	r3, #3
 8003c74:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <timer_to_cal+0x1b4>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0bdb      	lsrs	r3, r3, #15
 8003c7c:	73fb      	strb	r3, [r7, #15]
	a=a-(146097*b)/4;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	4a50      	ldr	r2, [pc, #320]	; (8003dc4 <timer_to_cal+0x1b8>)
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da00      	bge.n	8003c8c <timer_to_cal+0x80>
 8003c8a:	3303      	adds	r3, #3
 8003c8c:	109b      	asrs	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
	c=(4*a+3)/1461;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	4a4a      	ldr	r2, [pc, #296]	; (8003dc8 <timer_to_cal+0x1bc>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	09db      	lsrs	r3, r3, #7
 8003ca4:	73bb      	strb	r3, [r7, #14]
	a=a-(1461*c)/4;
 8003ca6:	7bbb      	ldrb	r3, [r7, #14]
 8003ca8:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da00      	bge.n	8003cb6 <timer_to_cal+0xaa>
 8003cb4:	3303      	adds	r3, #3
 8003cb6:	109b      	asrs	r3, r3, #2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
	d=(5*a+2)/153;
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <timer_to_cal+0x1c0>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	09db      	lsrs	r3, r3, #7
 8003cd2:	737b      	strb	r3, [r7, #13]
	rtc_time->mday=a-(153*d+2)/5+1;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	b2d9      	uxtb	r1, r3
 8003cd8:	7b7a      	ldrb	r2, [r7, #13]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	011a      	lsls	r2, r3, #4
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <timer_to_cal+0x1c4>)
 8003ce8:	fb82 0203 	smull	r0, r2, r2, r3
 8003cec:	1052      	asrs	r2, r2, #1
 8003cee:	17db      	asrs	r3, r3, #31
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	1acb      	subs	r3, r1, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	715a      	strb	r2, [r3, #5]
	rtc_time->mon=d+3-12*(d/10);
 8003d00:	7b7b      	ldrb	r3, [r7, #13]
 8003d02:	4a34      	ldr	r2, [pc, #208]	; (8003dd4 <timer_to_cal+0x1c8>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	08db      	lsrs	r3, r3, #3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	7b7b      	ldrb	r3, [r7, #13]
 8003d18:	4413      	add	r3, r2
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3303      	adds	r3, #3
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	711a      	strb	r2, [r3, #4]
	rtc_time->year=100*b+c-4800+(d/10);
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2264      	movs	r2, #100	; 0x64
 8003d28:	fb03 f202 	mul.w	r2, r3, r2
 8003d2c:	7bbb      	ldrb	r3, [r7, #14]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8003d34:	7b7a      	ldrb	r2, [r7, #13]
 8003d36:	4927      	ldr	r1, [pc, #156]	; (8003dd4 <timer_to_cal+0x1c8>)
 8003d38:	fba1 1202 	umull	r1, r2, r1, r2
 8003d3c:	08d2      	lsrs	r2, r2, #3
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	441a      	add	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	601a      	str	r2, [r3, #0]
	rtc_time->hour=time/3600;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <timer_to_cal+0x1cc>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0adb      	lsrs	r3, r3, #11
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	719a      	strb	r2, [r3, #6]
	rtc_time->min=(time%3600)/60;
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <timer_to_cal+0x1cc>)
 8003d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5e:	0adb      	lsrs	r3, r3, #11
 8003d60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <timer_to_cal+0x1d0>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	71da      	strb	r2, [r3, #7]
	rtc_time->sec=(time%3600)%60;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <timer_to_cal+0x1cc>)
 8003d7c:	fba2 1203 	umull	r1, r2, r2, r3
 8003d80:	0ad2      	lsrs	r2, r2, #11
 8003d82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003d86:	fb01 f202 	mul.w	r2, r1, r2
 8003d8a:	1a9a      	subs	r2, r3, r2
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <timer_to_cal+0x1d0>)
 8003d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d92:	0959      	lsrs	r1, r3, #5
 8003d94:	460b      	mov	r3, r1
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a5b      	subs	r3, r3, r1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	1ad1      	subs	r1, r2, r3
 8003d9e:	b2ca      	uxtb	r2, r1
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	721a      	strb	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	c22e4507 	.word	0xc22e4507
 8003db4:	00015180 	.word	0x00015180
 8003db8:	004a7b17 	.word	0x004a7b17
 8003dbc:	24924925 	.word	0x24924925
 8003dc0:	396b06bd 	.word	0x396b06bd
 8003dc4:	00023ab1 	.word	0x00023ab1
 8003dc8:	166db073 	.word	0x166db073
 8003dcc:	d62b80d7 	.word	0xd62b80d7
 8003dd0:	66666667 	.word	0x66666667
 8003dd4:	cccccccd 	.word	0xcccccccd
 8003dd8:	91a2b3c5 	.word	0x91a2b3c5
 8003ddc:	88888889 	.word	0x88888889

08003de0 <cal_to_timer>:

unsigned long cal_to_timer (rtc_cal * rtc_time)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	int y;
	char m;
	unsigned long Uday;
	unsigned long time;

	a=((14-rtc_time->mon)/12);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	791b      	ldrb	r3, [r3, #4]
 8003dec:	f1c3 030e 	rsb	r3, r3, #14
 8003df0:	4a35      	ldr	r2, [pc, #212]	; (8003ec8 <cal_to_timer+0xe8>)
 8003df2:	fb82 1203 	smull	r1, r2, r2, r3
 8003df6:	1052      	asrs	r2, r2, #1
 8003df8:	17db      	asrs	r3, r3, #31
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	77fb      	strb	r3, [r7, #31]
	y=rtc_time->year+4800-a;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	61bb      	str	r3, [r7, #24]
	m=rtc_time->mon+(12*a)-3;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	791a      	ldrb	r2, [r3, #4]
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	4619      	mov	r1, r3
 8003e14:	0049      	lsls	r1, r1, #1
 8003e16:	440b      	add	r3, r1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3b03      	subs	r3, #3
 8003e22:	75fb      	strb	r3, [r7, #23]
	Uday=(rtc_time->mday+((153*m+2)/5)+365*y+(y/4)-(y/100)+(y/400)-32045)-2440588;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	795b      	ldrb	r3, [r3, #5]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	7dfa      	ldrb	r2, [r7, #23]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	011a      	lsls	r2, r3, #4
 8003e34:	4413      	add	r3, r2
 8003e36:	3302      	adds	r3, #2
 8003e38:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <cal_to_timer+0xec>)
 8003e3a:	fb82 0203 	smull	r0, r2, r2, r3
 8003e3e:	1052      	asrs	r2, r2, #1
 8003e40:	17db      	asrs	r3, r3, #31
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	18ca      	adds	r2, r1, r3
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f240 116d 	movw	r1, #365	; 0x16d
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	441a      	add	r2, r3
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	da00      	bge.n	8003e5a <cal_to_timer+0x7a>
 8003e58:	3303      	adds	r3, #3
 8003e5a:	109b      	asrs	r3, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	491b      	ldr	r1, [pc, #108]	; (8003ed0 <cal_to_timer+0xf0>)
 8003e62:	fb81 0103 	smull	r0, r1, r1, r3
 8003e66:	1149      	asrs	r1, r1, #5
 8003e68:	17db      	asrs	r3, r3, #31
 8003e6a:	1a5b      	subs	r3, r3, r1
 8003e6c:	441a      	add	r2, r3
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	4917      	ldr	r1, [pc, #92]	; (8003ed0 <cal_to_timer+0xf0>)
 8003e72:	fb81 0103 	smull	r0, r1, r1, r3
 8003e76:	11c9      	asrs	r1, r1, #7
 8003e78:	17db      	asrs	r3, r3, #31
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	441a      	add	r2, r3
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <cal_to_timer+0xf4>)
 8003e80:	4413      	add	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
	time=Uday*86400;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <cal_to_timer+0xf8>)
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	60fb      	str	r3, [r7, #12]
	time+=rtc_time->sec+rtc_time->min*60+rtc_time->hour*3600;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	7a1b      	ldrb	r3, [r3, #8]
 8003e92:	4619      	mov	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	79db      	ldrb	r3, [r3, #7]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	18ca      	adds	r2, r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	799b      	ldrb	r3, [r3, #6]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
	return time;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3724      	adds	r7, #36	; 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	2aaaaaab 	.word	0x2aaaaaab
 8003ecc:	66666667 	.word	0x66666667
 8003ed0:	51eb851f 	.word	0x51eb851f
 8003ed4:	ffda4547 	.word	0xffda4547
 8003ed8:	00015180 	.word	0x00015180

08003edc <convert_time_from_android>:

uint8_t convert_time_from_android(rtc_cal *rtc_time, char *date){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b096      	sub	sp, #88	; 0x58
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]

	//*xxx*yyyy-MM-dd HH:mm:ss

	uint8_t res_date = DATE_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int s;
	char buf[64];

	char *p_rtc = date;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	653b      	str	r3, [r7, #80]	; 0x50

	*p_rtc++;
 8003ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	3301      	adds	r3, #1
 8003efa:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8003efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efe:	3301      	adds	r3, #1
 8003f00:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8003f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f04:	3301      	adds	r3, #1
 8003f06:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8003f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	653b      	str	r3, [r7, #80]	; 0x50

	for(s = 0; s < 4; s++){
 8003f0e:	2300      	movs	r3, #0
 8003f10:	657b      	str	r3, [r7, #84]	; 0x54
 8003f12:	e00c      	b.n	8003f2e <convert_time_from_android+0x52>
		buf[s] = *p_rtc++;
 8003f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	653a      	str	r2, [r7, #80]	; 0x50
 8003f1a:	7819      	ldrb	r1, [r3, #0]
 8003f1c:	f107 020c 	add.w	r2, r7, #12
 8003f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f22:	4413      	add	r3, r2
 8003f24:	460a      	mov	r2, r1
 8003f26:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 4; s++){
 8003f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	ddef      	ble.n	8003f14 <convert_time_from_android+0x38>
	}
	rtc_time->year=atoi(buf);
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fdb9 	bl	8005ab0 <atoi>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	601a      	str	r2, [r3, #0]
			if(rtc_time->year == 0 || rtc_time->year < 1980)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <convert_time_from_android+0x7c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8003f54:	4293      	cmp	r3, r2
 8003f56:	dc05      	bgt.n	8003f64 <convert_time_from_android+0x88>
				return res_date = INCORRECT_YEAR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003f5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f62:	e0f4      	b.n	800414e <convert_time_from_android+0x272>
	*p_rtc++;
 8003f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f66:	3301      	adds	r3, #1
 8003f68:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc f8ec 	bl	800014c <strlen>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fdfd 	bl	8005b7c <memset>
	for(s = 0; s < 2; s++){
 8003f82:	2300      	movs	r3, #0
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
 8003f86:	e00c      	b.n	8003fa2 <convert_time_from_android+0xc6>
		buf[s] = *p_rtc++;
 8003f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	653a      	str	r2, [r7, #80]	; 0x50
 8003f8e:	7819      	ldrb	r1, [r3, #0]
 8003f90:	f107 020c 	add.w	r2, r7, #12
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	4413      	add	r3, r2
 8003f98:	460a      	mov	r2, r1
 8003f9a:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	ddef      	ble.n	8003f88 <convert_time_from_android+0xac>
	}
	rtc_time->mon=(char)atoi(buf);
 8003fa8:	f107 030c 	add.w	r3, r7, #12
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fd7f 	bl	8005ab0 <atoi>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	711a      	strb	r2, [r3, #4]
			if(rtc_time->mon == 0 || rtc_time->mon > 12)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	791b      	ldrb	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <convert_time_from_android+0xee>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	791b      	ldrb	r3, [r3, #4]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d905      	bls.n	8003fd6 <convert_time_from_android+0xfa>
					return res_date = INCORRECT_MONTH;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003fd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fd4:	e0bb      	b.n	800414e <convert_time_from_android+0x272>
	*p_rtc++;
 8003fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd8:	3301      	adds	r3, #1
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc f8b3 	bl	800014c <strlen>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fdc4 	bl	8005b7c <memset>
	for(s = 0; s < 2; s++){
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ff8:	e00c      	b.n	8004014 <convert_time_from_android+0x138>
		buf[s] = *p_rtc++;
 8003ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	653a      	str	r2, [r7, #80]	; 0x50
 8004000:	7819      	ldrb	r1, [r3, #0]
 8004002:	f107 020c 	add.w	r2, r7, #12
 8004006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004008:	4413      	add	r3, r2
 800400a:	460a      	mov	r2, r1
 800400c:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 800400e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004010:	3301      	adds	r3, #1
 8004012:	657b      	str	r3, [r7, #84]	; 0x54
 8004014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004016:	2b01      	cmp	r3, #1
 8004018:	ddef      	ble.n	8003ffa <convert_time_from_android+0x11e>
	}
	rtc_time->mday=(char)atoi(buf);
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fd46 	bl	8005ab0 <atoi>
 8004024:	4603      	mov	r3, r0
 8004026:	b2da      	uxtb	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	715a      	strb	r2, [r3, #5]
			if(rtc_time->mday == 0 || rtc_time->mday > 31)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	795b      	ldrb	r3, [r3, #5]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <convert_time_from_android+0x160>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	795b      	ldrb	r3, [r3, #5]
 8004038:	2b1f      	cmp	r3, #31
 800403a:	d905      	bls.n	8004048 <convert_time_from_android+0x16c>
					return res_date = INCORRECT_DAY;
 800403c:	2303      	movs	r3, #3
 800403e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004042:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004046:	e082      	b.n	800414e <convert_time_from_android+0x272>
	*p_rtc++;
 8004048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404a:	3301      	adds	r3, #1
 800404c:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc f87a 	bl	800014c <strlen>
 8004058:	4602      	mov	r2, r0
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	2100      	movs	r1, #0
 8004060:	4618      	mov	r0, r3
 8004062:	f001 fd8b 	bl	8005b7c <memset>
	for(s = 0; s < 2; s++){
 8004066:	2300      	movs	r3, #0
 8004068:	657b      	str	r3, [r7, #84]	; 0x54
 800406a:	e00c      	b.n	8004086 <convert_time_from_android+0x1aa>
		buf[s] = *p_rtc++;
 800406c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	653a      	str	r2, [r7, #80]	; 0x50
 8004072:	7819      	ldrb	r1, [r3, #0]
 8004074:	f107 020c 	add.w	r2, r7, #12
 8004078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407a:	4413      	add	r3, r2
 800407c:	460a      	mov	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	3301      	adds	r3, #1
 8004084:	657b      	str	r3, [r7, #84]	; 0x54
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	2b01      	cmp	r3, #1
 800408a:	ddef      	ble.n	800406c <convert_time_from_android+0x190>
	}
	rtc_time->hour=(char)atoi(buf);
 800408c:	f107 030c 	add.w	r3, r7, #12
 8004090:	4618      	mov	r0, r3
 8004092:	f001 fd0d 	bl	8005ab0 <atoi>
 8004096:	4603      	mov	r3, r0
 8004098:	b2da      	uxtb	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	719a      	strb	r2, [r3, #6]
	*p_rtc++;
 800409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a0:	3301      	adds	r3, #1
 80040a2:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fc f84f 	bl	800014c <strlen>
 80040ae:	4602      	mov	r2, r0
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fd60 	bl	8005b7c <memset>
	for(s = 0; s < 2; s++){
 80040bc:	2300      	movs	r3, #0
 80040be:	657b      	str	r3, [r7, #84]	; 0x54
 80040c0:	e00c      	b.n	80040dc <convert_time_from_android+0x200>
		buf[s] = *p_rtc++;
 80040c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	653a      	str	r2, [r7, #80]	; 0x50
 80040c8:	7819      	ldrb	r1, [r3, #0]
 80040ca:	f107 020c 	add.w	r2, r7, #12
 80040ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d0:	4413      	add	r3, r2
 80040d2:	460a      	mov	r2, r1
 80040d4:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 80040d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d8:	3301      	adds	r3, #1
 80040da:	657b      	str	r3, [r7, #84]	; 0x54
 80040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040de:	2b01      	cmp	r3, #1
 80040e0:	ddef      	ble.n	80040c2 <convert_time_from_android+0x1e6>
	}
	rtc_time->min=(char)atoi(buf);
 80040e2:	f107 030c 	add.w	r3, r7, #12
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fce2 	bl	8005ab0 <atoi>
 80040ec:	4603      	mov	r3, r0
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	71da      	strb	r2, [r3, #7]
	*p_rtc++;
 80040f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f6:	3301      	adds	r3, #1
 80040f8:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 80040fa:	f107 030c 	add.w	r3, r7, #12
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc f824 	bl	800014c <strlen>
 8004104:	4602      	mov	r2, r0
 8004106:	f107 030c 	add.w	r3, r7, #12
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fd35 	bl	8005b7c <memset>
	for(s = 0; s < 2; s++){
 8004112:	2300      	movs	r3, #0
 8004114:	657b      	str	r3, [r7, #84]	; 0x54
 8004116:	e00c      	b.n	8004132 <convert_time_from_android+0x256>
		buf[s] = *p_rtc++;
 8004118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	653a      	str	r2, [r7, #80]	; 0x50
 800411e:	7819      	ldrb	r1, [r3, #0]
 8004120:	f107 020c 	add.w	r2, r7, #12
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	4413      	add	r3, r2
 8004128:	460a      	mov	r2, r1
 800412a:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 800412c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800412e:	3301      	adds	r3, #1
 8004130:	657b      	str	r3, [r7, #84]	; 0x54
 8004132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004134:	2b01      	cmp	r3, #1
 8004136:	ddef      	ble.n	8004118 <convert_time_from_android+0x23c>
	}
	rtc_time->sec=(char)atoi(buf);
 8004138:	f107 030c 	add.w	r3, r7, #12
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fcb7 	bl	8005ab0 <atoi>
 8004142:	4603      	mov	r3, r0
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	721a      	strb	r2, [r3, #8]

	return res_date;
 800414a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
//	if(date[])

}
 800414e:	4618      	mov	r0, r3
 8004150:	3758      	adds	r7, #88	; 0x58
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <NVIC_EnableIRQ>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2201      	movs	r2, #1
 800416a:	fa02 f103 	lsl.w	r1, r2, r3
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <NVIC_EnableIRQ+0x2c>)
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	e000e100 	.word	0xe000e100

08004188 <NVIC_DisableIRQ>:
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2201      	movs	r2, #1
 800419a:	fa02 f103 	lsl.w	r1, r2, r3
 800419e:	4a06      	ldr	r2, [pc, #24]	; (80041b8 <NVIC_DisableIRQ+0x30>)
 80041a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	3320      	adds	r3, #32
 80041a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e100 	.word	0xe000e100

080041bc <NVIC_SetPriority>:
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	da0b      	bge.n	80041e8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <NVIC_SetPriority+0x4c>)
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	3b04      	subs	r3, #4
 80041de:	0112      	lsls	r2, r2, #4
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	440b      	add	r3, r1
 80041e4:	761a      	strb	r2, [r3, #24]
}
 80041e6:	e009      	b.n	80041fc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4907      	ldr	r1, [pc, #28]	; (800420c <NVIC_SetPriority+0x50>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	0112      	lsls	r2, r2, #4
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	440b      	add	r3, r1
 80041f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000ed00 	.word	0xe000ed00
 800420c:	e000e100 	.word	0xe000e100

08004210 <PN532_SPIInit>:

volatile uint8_t SpiActive;					// флаг активной передачи



void PN532_SPIInit(void){
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0

	SpiActive = 1;
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <PN532_SPIInit+0x88>)
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]



//------------------------------------------------------------------------------
	//SPI_StructInit( &SPI_PN532_InitStruct);
	SPI_Cmd(SPI2, DISABLE);
 800421c:	2100      	movs	r1, #0
 800421e:	481f      	ldr	r0, [pc, #124]	; (800429c <PN532_SPIInit+0x8c>)
 8004220:	f000 fe4f 	bl	8004ec2 <SPI_Cmd>
	NVIC_DisableIRQ(SPI2_IRQn);
 8004224:	2024      	movs	r0, #36	; 0x24
 8004226:	f7ff ffaf 	bl	8004188 <NVIC_DisableIRQ>

	/* Initialize the SPI_Direction member */
	SPI_PN532_InitStruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 800422a:	2300      	movs	r3, #0
 800422c:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_PN532_InitStruct.SPI_Mode = SPI_Mode_Master;
 800422e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004232:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_PN532_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8004234:	2300      	movs	r3, #0
 8004236:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_PN532_InitStruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 8004238:	2300      	movs	r3, #0
 800423a:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_PN532_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 800423c:	2300      	movs	r3, #0
 800423e:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_PN532_InitStruct.SPI_NSS = SPI_NSS_Hard;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 8004240:	2300      	movs	r3, #0
 8004242:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_PN532_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 8004244:	2338      	movs	r3, #56	; 0x38
 8004246:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_PN532_InitStruct.SPI_FirstBit = SPI_FirstBit_LSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_PN532_InitStruct.SPI_CRCPolynomial = 7;
 800424c:	2307      	movs	r3, #7
 800424e:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_PN532_InitStruct);
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4811      	ldr	r0, [pc, #68]	; (800429c <PN532_SPIInit+0x8c>)
 8004256:	f000 fdf1 	bl	8004e3c <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, DISABLE );
 800425a:	2200      	movs	r2, #0
 800425c:	2160      	movs	r1, #96	; 0x60
 800425e:	480f      	ldr	r0, [pc, #60]	; (800429c <PN532_SPIInit+0x8c>)
 8004260:	f000 fe4e 	bl	8004f00 <SPI_I2S_ITConfig>

	SPI_CalculateCRC ( SPI2, DISABLE);
 8004264:	2100      	movs	r1, #0
 8004266:	480d      	ldr	r0, [pc, #52]	; (800429c <PN532_SPIInit+0x8c>)
 8004268:	f000 feb3 	bl	8004fd2 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800426c:	2201      	movs	r2, #1
 800426e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004272:	480b      	ldr	r0, [pc, #44]	; (80042a0 <PN532_SPIInit+0x90>)
 8004274:	f000 fad7 	bl	8004826 <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8004278:	2101      	movs	r1, #1
 800427a:	4808      	ldr	r0, [pc, #32]	; (800429c <PN532_SPIInit+0x8c>)
 800427c:	f000 fe8a 	bl	8004f94 <SPI_SSOutputCmd>
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/

	SPI_Cmd(SPI2, ENABLE);
 8004280:	2101      	movs	r1, #1
 8004282:	4806      	ldr	r0, [pc, #24]	; (800429c <PN532_SPIInit+0x8c>)
 8004284:	f000 fe1d 	bl	8004ec2 <SPI_Cmd>

	SpiActive = 0;
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <PN532_SPIInit+0x88>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]

}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000a8e 	.word	0x20000a8e
 800429c:	40003800 	.word	0x40003800
 80042a0:	40010c00 	.word	0x40010c00

080042a4 <SPI_Send_Recv>:
	return SPI_OK;
}


void SPI_Send_Recv(uint8_t *buf_tx, uint8_t *buf_rx, uint16_t len)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
	SpiActive = 1;
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <SPI_Send_Recv+0x68>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]

	pBufTx = buf_tx;
 80042b8:	4a15      	ldr	r2, [pc, #84]	; (8004310 <SPI_Send_Recv+0x6c>)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6013      	str	r3, [r2, #0]
	pBufRx = buf_rx;
 80042be:	4a15      	ldr	r2, [pc, #84]	; (8004314 <SPI_Send_Recv+0x70>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6013      	str	r3, [r2, #0]
	usBufPosRx = 0;
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <SPI_Send_Recv+0x74>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	801a      	strh	r2, [r3, #0]
	usBufPosTx = 1;
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <SPI_Send_Recv+0x78>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	801a      	strh	r2, [r3, #0]
	usBufCnt = len;
 80042d0:	4a13      	ldr	r2, [pc, #76]	; (8004320 <SPI_Send_Recv+0x7c>)
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	8013      	strh	r3, [r2, #0]

	while (!(SPI2->SR & SPI_SR_TXE)); //ожидание установки 1 в TXE(окончание передачи)
 80042d6:	bf00      	nop
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <SPI_Send_Recv+0x80>)
 80042da:	891b      	ldrh	r3, [r3, #8]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f8      	beq.n	80042d8 <SPI_Send_Recv+0x34>
	if (pBufTx)
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <SPI_Send_Recv+0x6c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <SPI_Send_Recv+0x56>
		*(uint8_t*)&SPI2->DR = *pBufTx;
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <SPI_Send_Recv+0x6c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <SPI_Send_Recv+0x84>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	7013      	strb	r3, [r2, #0]
	//_SPI->DR = 5;
	else
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
}
 80042f8:	e002      	b.n	8004300 <SPI_Send_Recv+0x5c>
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <SPI_Send_Recv+0x84>)
 80042fc:	22ff      	movs	r2, #255	; 0xff
 80042fe:	701a      	strb	r2, [r3, #0]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000a8e 	.word	0x20000a8e
 8004310:	20000a80 	.word	0x20000a80
 8004314:	20000a84 	.word	0x20000a84
 8004318:	20000a88 	.word	0x20000a88
 800431c:	20000a8a 	.word	0x20000a8a
 8004320:	20000a8c 	.word	0x20000a8c
 8004324:	40003800 	.word	0x40003800
 8004328:	4000380c 	.word	0x4000380c

0800432c <SpiSendRecvFlash>:


void SpiSendRecvFlash(uint8_t **a_buf_tx, uint8_t **a_buf_rx, uint16_t *a_buf_len, uint8_t cnt)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < cnt; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]
 800433e:	e014      	b.n	800436a <SpiSendRecvFlash+0x3e>
			{

				SPI_Send_Recv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f7ff ffa0 	bl	80042a4 <SPI_Send_Recv>
			for (uint8_t i = 0; i < cnt; i++)
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	3301      	adds	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
 800436a:	7dfa      	ldrb	r2, [r7, #23]
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	429a      	cmp	r2, r3
 8004370:	d3e6      	bcc.n	8004340 <SpiSendRecvFlash+0x14>

		//		while(SpiActive);
			}
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <SPI2_IRQHandler>:

}


void SPI2_IRQHandler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
	{
		volatile uint8_t ucByte = *(uint8_t*)&SPI2->DR;
 8004382:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <SPI2_IRQHandler+0x84>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	71fb      	strb	r3, [r7, #7]

		if (pBufRx)
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <SPI2_IRQHandler+0x88>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <SPI2_IRQHandler+0x24>
			pBufRx[usBufPosRx] = ucByte;
 8004390:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <SPI2_IRQHandler+0x88>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <SPI2_IRQHandler+0x8c>)
 8004396:	8812      	ldrh	r2, [r2, #0]
 8004398:	4413      	add	r3, r2
 800439a:	79fa      	ldrb	r2, [r7, #7]
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
	}

	{
		if (usBufPosTx < usBufCnt)
 80043a0:	4b1a      	ldr	r3, [pc, #104]	; (800440c <SPI2_IRQHandler+0x90>)
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <SPI2_IRQHandler+0x94>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d215      	bcs.n	80043d8 <SPI2_IRQHandler+0x5c>
		{
			if (pBufTx)
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <SPI2_IRQHandler+0x98>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <SPI2_IRQHandler+0x4a>
				*(uint8_t*)&SPI2->DR = pBufTx[usBufPosTx];
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <SPI2_IRQHandler+0x98>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <SPI2_IRQHandler+0x90>)
 80043ba:	8812      	ldrh	r2, [r2, #0]
 80043bc:	4413      	add	r3, r2
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <SPI2_IRQHandler+0x84>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	7013      	strb	r3, [r2, #0]
 80043c4:	e002      	b.n	80043cc <SPI2_IRQHandler+0x50>
			else
				*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <SPI2_IRQHandler+0x84>)
 80043c8:	22ff      	movs	r2, #255	; 0xff
 80043ca:	701a      	strb	r2, [r3, #0]

			usBufPosTx++;
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <SPI2_IRQHandler+0x90>)
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <SPI2_IRQHandler+0x90>)
 80043d6:	801a      	strh	r2, [r3, #0]
		}
	}

	if (++usBufPosRx >= usBufCnt)
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <SPI2_IRQHandler+0x8c>)
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <SPI2_IRQHandler+0x8c>)
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <SPI2_IRQHandler+0x8c>)
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <SPI2_IRQHandler+0x94>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <SPI2_IRQHandler+0x7a>
	{
		SpiActive = 0;
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <SPI2_IRQHandler+0x9c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
		//SPI_ON_READY_ISR_CB(0);
	}

}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	4000380c 	.word	0x4000380c
 8004404:	20000a84 	.word	0x20000a84
 8004408:	20000a88 	.word	0x20000a88
 800440c:	20000a8a 	.word	0x20000a8a
 8004410:	20000a8c 	.word	0x20000a8c
 8004414:	20000a80 	.word	0x20000a80
 8004418:	20000a8e 	.word	0x20000a8e

0800441c <SPI_FLASH_CONFIG>:



void SPI_FLASH_CONFIG(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8004422:	2201      	movs	r2, #1
 8004424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004428:	4824      	ldr	r0, [pc, #144]	; (80044bc <SPI_FLASH_CONFIG+0xa0>)
 800442a:	f000 f9fc 	bl	8004826 <GPIO_WriteBit>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800442e:	2201      	movs	r2, #1
 8004430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004434:	4821      	ldr	r0, [pc, #132]	; (80044bc <SPI_FLASH_CONFIG+0xa0>)
 8004436:	f000 f9f6 	bl	8004826 <GPIO_WriteBit>
//	SPI2->CR1 |= SPI_CR1_SPE;


	SPI_InitTypeDef			SPI_FLASH_Initstruct;

	SPI_Cmd(SPI2, DISABLE);
 800443a:	2100      	movs	r1, #0
 800443c:	4820      	ldr	r0, [pc, #128]	; (80044c0 <SPI_FLASH_CONFIG+0xa4>)
 800443e:	f000 fd40 	bl	8004ec2 <SPI_Cmd>
//	NVIC_DisableIRQ(SPI2_IRQn);

	/* Initialize the SPI_Direction member */
	SPI_FLASH_Initstruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 8004442:	2300      	movs	r3, #0
 8004444:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_FLASH_Initstruct.SPI_Mode = SPI_Mode_Master;
 8004446:	f44f 7382 	mov.w	r3, #260	; 0x104
 800444a:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_FLASH_Initstruct.SPI_DataSize = SPI_DataSize_8b;
 800444c:	2300      	movs	r3, #0
 800444e:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_FLASH_Initstruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 8004450:	2300      	movs	r3, #0
 8004452:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_FLASH_Initstruct.SPI_CPHA = SPI_CPHA_1Edge;
 8004454:	2300      	movs	r3, #0
 8004456:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_FLASH_Initstruct.SPI_NSS = SPI_NSS_Hard;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 8004458:	2300      	movs	r3, #0
 800445a:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_FLASH_Initstruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 800445c:	2338      	movs	r3, #56	; 0x38
 800445e:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_FLASH_Initstruct.SPI_FirstBit = SPI_FirstBit_MSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 8004460:	2300      	movs	r3, #0
 8004462:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_FLASH_Initstruct.SPI_CRCPolynomial = 7;
 8004464:	2307      	movs	r3, #7
 8004466:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_FLASH_Initstruct);
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	4619      	mov	r1, r3
 800446c:	4814      	ldr	r0, [pc, #80]	; (80044c0 <SPI_FLASH_CONFIG+0xa4>)
 800446e:	f000 fce5 	bl	8004e3c <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);

	SPI_CalculateCRC ( SPI2, DISABLE);
 8004472:	2100      	movs	r1, #0
 8004474:	4812      	ldr	r0, [pc, #72]	; (80044c0 <SPI_FLASH_CONFIG+0xa4>)
 8004476:	f000 fdac 	bl	8004fd2 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800447a:	2201      	movs	r2, #1
 800447c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004480:	480e      	ldr	r0, [pc, #56]	; (80044bc <SPI_FLASH_CONFIG+0xa0>)
 8004482:	f000 f9d0 	bl	8004826 <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8004486:	2101      	movs	r1, #1
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <SPI_FLASH_CONFIG+0xa4>)
 800448a:	f000 fd83 	bl	8004f94 <SPI_SSOutputCmd>
	uint32_t tmpreg = 0;
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, ENABLE );
 800448e:	2201      	movs	r2, #1
 8004490:	2160      	movs	r1, #96	; 0x60
 8004492:	480b      	ldr	r0, [pc, #44]	; (80044c0 <SPI_FLASH_CONFIG+0xa4>)
 8004494:	f000 fd34 	bl	8004f00 <SPI_I2S_ITConfig>
	NVIC_SetPriority(SPI2_IRQn, 3);
 8004498:	2103      	movs	r1, #3
 800449a:	2024      	movs	r0, #36	; 0x24
 800449c:	f7ff fe8e 	bl	80041bc <NVIC_SetPriority>
	NVIC_EnableIRQ(SPI2_IRQn);
 80044a0:	2024      	movs	r0, #36	; 0x24
 80044a2:	f7ff fe59 	bl	8004158 <NVIC_EnableIRQ>



	SPI_Cmd(SPI2, ENABLE);
 80044a6:	2101      	movs	r1, #1
 80044a8:	4805      	ldr	r0, [pc, #20]	; (80044c0 <SPI_FLASH_CONFIG+0xa4>)
 80044aa:	f000 fd0a 	bl	8004ec2 <SPI_Cmd>

	SpiActive = 0;
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <SPI_FLASH_CONFIG+0xa8>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init ( &NVIC_InitStruct );
*/


}
 80044b4:	bf00      	nop
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40010c00 	.word	0x40010c00
 80044c0:	40003800 	.word	0x40003800
 80044c4:	20000a8e 	.word	0x20000a8e

080044c8 <spiFlash_readJEDECDesc>:

	return res;
}

uint32_t spiFlash_readJEDECDesc( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
	uint32_t result = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80044d2:	2201      	movs	r2, #1
 80044d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044d8:	4815      	ldr	r0, [pc, #84]	; (8004530 <spiFlash_readJEDECDesc+0x68>)
 80044da:	f000 f9a4 	bl	8004826 <GPIO_WriteBit>

//	SPI_CS_Set(GPIOA, 4);

	buf_txrx[0] = 0x9F;
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <spiFlash_readJEDECDesc+0x6c>)
 80044e0:	229f      	movs	r2, #159	; 0x9f
 80044e2:	701a      	strb	r2, [r3, #0]
	a_buf_tx[0] = buf_txrx;
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <spiFlash_readJEDECDesc+0x70>)
 80044e6:	4a13      	ldr	r2, [pc, #76]	; (8004534 <spiFlash_readJEDECDesc+0x6c>)
 80044e8:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <spiFlash_readJEDECDesc+0x74>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 1;
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <spiFlash_readJEDECDesc+0x78>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = NULL;
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <spiFlash_readJEDECDesc+0x70>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
	a_buf_rx[1] = (uint8_t*)&result;
 80044fc:	4a0f      	ldr	r2, [pc, #60]	; (800453c <spiFlash_readJEDECDesc+0x74>)
 80044fe:	1d3b      	adds	r3, r7, #4
 8004500:	6053      	str	r3, [r2, #4]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8004502:	2200      	movs	r2, #0
 8004504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004508:	4809      	ldr	r0, [pc, #36]	; (8004530 <spiFlash_readJEDECDesc+0x68>)
 800450a:	f000 f98c 	bl	8004826 <GPIO_WriteBit>
	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 800450e:	2302      	movs	r3, #2
 8004510:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <spiFlash_readJEDECDesc+0x78>)
 8004512:	490a      	ldr	r1, [pc, #40]	; (800453c <spiFlash_readJEDECDesc+0x74>)
 8004514:	4808      	ldr	r0, [pc, #32]	; (8004538 <spiFlash_readJEDECDesc+0x70>)
 8004516:	f7ff ff09 	bl	800432c <SpiSendRecvFlash>
	//while(SpiActive){};
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800451a:	2201      	movs	r2, #1
 800451c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004520:	4803      	ldr	r0, [pc, #12]	; (8004530 <spiFlash_readJEDECDesc+0x68>)
 8004522:	f000 f980 	bl	8004826 <GPIO_WriteBit>

	return result;
 8004526:	687b      	ldr	r3, [r7, #4]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40010c00 	.word	0x40010c00
 8004534:	20000aa4 	.word	0x20000aa4
 8004538:	20000a90 	.word	0x20000a90
 800453c:	20000a98 	.word	0x20000a98
 8004540:	20000aa0 	.word	0x20000aa0

08004544 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800454c:	4a05      	ldr	r2, [pc, #20]	; (8004564 <NVIC_PriorityGroupConfig+0x20>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004558:	60d3      	str	r3, [r2, #12]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	230f      	movs	r3, #15
 800457a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	78db      	ldrb	r3, [r3, #3]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03a      	beq.n	80045fa <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004584:	4b27      	ldr	r3, [pc, #156]	; (8004624 <NVIC_Init+0xbc>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	43db      	mvns	r3, r3
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f1c3 0304 	rsb	r3, r3, #4
 8004598:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	461a      	mov	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	789b      	ldrb	r3, [r3, #2]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <NVIC_Init+0xc0>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	6979      	ldr	r1, [r7, #20]
 80045d0:	b2c9      	uxtb	r1, r1
 80045d2:	4413      	add	r3, r2
 80045d4:	460a      	mov	r2, r1
 80045d6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80045e2:	4911      	ldr	r1, [pc, #68]	; (8004628 <NVIC_Init+0xc0>)
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	0952      	lsrs	r2, r2, #5
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80045ee:	2201      	movs	r2, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80045f4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80045f8:	e00f      	b.n	800461a <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004602:	4909      	ldr	r1, [pc, #36]	; (8004628 <NVIC_Init+0xc0>)
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	0952      	lsrs	r2, r2, #5
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800460e:	2201      	movs	r2, #1
 8004610:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004612:	f100 0320 	add.w	r3, r0, #32
 8004616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	e000ed00 	.word	0xe000ed00
 8004628:	e000e100 	.word	0xe000e100

0800462c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004638:	4b08      	ldr	r3, [pc, #32]	; (800465c <EXTI_GetFlagStatus+0x30>)
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e001      	b.n	800464e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010400 	.word	0x40010400

08004660 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004668:	4a03      	ldr	r2, [pc, #12]	; (8004678 <EXTI_ClearITPendingBit+0x18>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6153      	str	r3, [r2, #20]
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40010400 	.word	0x40010400

0800467c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	78db      	ldrb	r3, [r3, #3]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	78db      	ldrb	r3, [r3, #3]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <GPIO_Init+0x44>
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	789b      	ldrb	r3, [r3, #2]
 80046b8:	461a      	mov	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d044      	beq.n	8004754 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	e038      	b.n	8004748 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80046d6:	2201      	movs	r2, #1
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d126      	bne.n	8004742 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80046fa:	220f      	movs	r2, #15
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	43db      	mvns	r3, r3
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4013      	ands	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	2b28      	cmp	r3, #40	; 0x28
 8004722:	d105      	bne.n	8004730 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8004724:	2201      	movs	r2, #1
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	409a      	lsls	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	615a      	str	r2, [r3, #20]
 800472e:	e008      	b.n	8004742 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	78db      	ldrb	r3, [r3, #3]
 8004734:	2b48      	cmp	r3, #72	; 0x48
 8004736:	d104      	bne.n	8004742 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8004738:	2201      	movs	r2, #1
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	409a      	lsls	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3301      	adds	r3, #1
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b07      	cmp	r3, #7
 800474c:	d9c3      	bls.n	80046d6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	2bff      	cmp	r3, #255	; 0xff
 800475a:	d946      	bls.n	80047ea <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e03a      	b.n	80047de <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	3308      	adds	r3, #8
 800476c:	2201      	movs	r2, #1
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	429a      	cmp	r2, r3
 8004786:	d127      	bne.n	80047d8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800478e:	220f      	movs	r2, #15
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	43db      	mvns	r3, r3
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4013      	ands	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	78db      	ldrb	r3, [r3, #3]
 80047b4:	2b28      	cmp	r3, #40	; 0x28
 80047b6:	d105      	bne.n	80047c4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	3308      	adds	r3, #8
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	78db      	ldrb	r3, [r3, #3]
 80047c8:	2b48      	cmp	r3, #72	; 0x48
 80047ca:	d105      	bne.n	80047d8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	3308      	adds	r3, #8
 80047d0:	2201      	movs	r2, #1
 80047d2:	409a      	lsls	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	3301      	adds	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b07      	cmp	r3, #7
 80047e2:	d9c1      	bls.n	8004768 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	605a      	str	r2, [r3, #4]
  }
}
 80047ea:	bf00      	nop
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004800:	2300      	movs	r3, #0
 8004802:	73fb      	strb	r3, [r7, #15]
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	887b      	ldrh	r3, [r7, #2]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e001      	b.n	800481a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	807b      	strh	r3, [r7, #2]
 8004832:	4613      	mov	r3, r2
 8004834:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 8004836:	787b      	ldrb	r3, [r7, #1]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8004842:	e002      	b.n	800484a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	615a      	str	r2, [r3, #20]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004862:	2300      	movs	r3, #0
 8004864:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8004866:	2304      	movs	r3, #4
 8004868:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800486a:	4b57      	ldr	r3, [pc, #348]	; (80049c8 <I2C_Init+0x174>)
 800486c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	889b      	ldrh	r3, [r3, #4]
 8004872:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8004874:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004876:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800487a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800487c:	f107 0308 	add.w	r3, r7, #8
 8004880:	4618      	mov	r0, r3
 8004882:	f000 f9d9 	bl	8004c38 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <I2C_Init+0x178>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	0c9b      	lsrs	r3, r3, #18
 8004894:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8004896:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800489a:	4313      	orrs	r3, r2
 800489c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80048a2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a44      	ldr	r2, [pc, #272]	; (80049d0 <I2C_Init+0x17c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d815      	bhi.n	80048ee <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80048d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d801      	bhi.n	80048da <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80048d6:	2304      	movs	r3, #4
 80048d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80048da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80048dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048de:	4313      	orrs	r3, r2
 80048e0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80048e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048e4:	3301      	adds	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	841a      	strh	r2, [r3, #32]
 80048ec:	e040      	b.n	8004970 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	88db      	ldrh	r3, [r3, #6]
 80048f2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d109      	bne.n	800490e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4413      	add	r3, r2
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800490c:	e00e      	b.n	800492c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	009a      	lsls	r2, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8004924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800492a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 800492c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800492e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8004936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 800493e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004940:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004942:	4313      	orrs	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800494a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8004950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <I2C_Init+0x180>)
 800495c:	fb82 1203 	smull	r1, r2, r2, r3
 8004960:	1192      	asrs	r2, r2, #6
 8004962:	17db      	asrs	r3, r3, #31
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	3301      	adds	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004974:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 800498c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800498e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8004992:	f023 0302 	bic.w	r3, r3, #2
 8004996:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	889a      	ldrh	r2, [r3, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	895b      	ldrh	r3, [r3, #10]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049a6:	4313      	orrs	r3, r2
 80049a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80049ae:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	899a      	ldrh	r2, [r3, #12]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	891b      	ldrh	r3, [r3, #8]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	811a      	strh	r2, [r3, #8]
}
 80049c0:	bf00      	nop
 80049c2:	3728      	adds	r7, #40	; 0x28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	007a1200 	.word	0x007a1200
 80049cc:	431bde83 	.word	0x431bde83
 80049d0:	000186a0 	.word	0x000186a0
 80049d4:	10624dd3 	.word	0x10624dd3

080049d8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 80049fa:	e007      	b.n	8004a0c <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	801a      	strh	r2, [r3, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8004a38:	e007      	b.n	8004a4a <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	801a      	strh	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8004a76:	e007      	b.n	8004a88 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	801a      	strh	r2, [r3, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	821a      	strh	r2, [r3, #16]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
 8004abc:	4613      	mov	r3, r2
 8004abe:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8004ac0:	78bb      	ldrb	r3, [r7, #2]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	70fb      	strb	r3, [r7, #3]
 8004ace:	e003      	b.n	8004ad8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	821a      	strh	r2, [r3, #16]
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b087      	sub	sp, #28
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8004b00:	2300      	movs	r3, #0
 8004b02:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8a9b      	ldrh	r3, [r3, #20]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8b1b      	ldrh	r3, [r3, #24]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d102      	bne.n	8004b38 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
 8004b36:	e001      	b.n	8004b3c <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5a:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b66:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d004      	beq.n	8004b7a <RCC_HSEConfig+0x32>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b76:	d007      	beq.n	8004b88 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8004b78:	e00d      	b.n	8004b96 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
      break;
 8004b86:	e006      	b.n	8004b96 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <RCC_HSEConfig+0x58>)
 8004b8e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004b92:	6013      	str	r3, [r2, #0]
      break;
 8004b94:	bf00      	nop
  }
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr
 8004ba0:	40021000 	.word	0x40021000

08004ba4 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]

  tmpreg = RCC->CFGR;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <RCC_PLLConfig+0x38>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004bcc:	4a03      	ldr	r2, [pc, #12]	; (8004bdc <RCC_PLLConfig+0x38>)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6053      	str	r3, [r2, #4]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40021000 	.word	0x40021000

08004be0 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8004bea:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <RCC_PLLCmd+0x1c>)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	42420060 	.word	0x42420060

08004c00 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpreg = RCC->CFGR;
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <RCC_SYSCLKConfig+0x34>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 0303 	bic.w	r3, r3, #3
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c22:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <RCC_SYSCLKConfig+0x34>)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6053      	str	r3, [r2, #4]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000

08004c38 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004c50:	4b4f      	ldr	r3, [pc, #316]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d011      	beq.n	8004c84 <RCC_GetClocksFreq+0x4c>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d83a      	bhi.n	8004cdc <RCC_GetClocksFreq+0xa4>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <RCC_GetClocksFreq+0x3c>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d004      	beq.n	8004c7c <RCC_GetClocksFreq+0x44>
 8004c72:	e033      	b.n	8004cdc <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a47      	ldr	r2, [pc, #284]	; (8004d94 <RCC_GetClocksFreq+0x15c>)
 8004c78:	601a      	str	r2, [r3, #0]
      break;
 8004c7a:	e033      	b.n	8004ce4 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a45      	ldr	r2, [pc, #276]	; (8004d94 <RCC_GetClocksFreq+0x15c>)
 8004c80:	601a      	str	r2, [r3, #0]
      break;
 8004c82:	e02f      	b.n	8004ce4 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004c84:	4b42      	ldr	r3, [pc, #264]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c8c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004c8e:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c96:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	0c9b      	lsrs	r3, r3, #18
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4a3b      	ldr	r2, [pc, #236]	; (8004d98 <RCC_GetClocksFreq+0x160>)
 8004caa:	fb03 f202 	mul.w	r2, r3, r2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8004cb2:	e017      	b.n	8004ce4 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8004cb4:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4a35      	ldr	r2, [pc, #212]	; (8004d98 <RCC_GetClocksFreq+0x160>)
 8004cc4:	fb03 f202 	mul.w	r2, r3, r2
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
      break;
 8004ccc:	e00a      	b.n	8004ce4 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <RCC_GetClocksFreq+0x15c>)
 8004cd2:	fb03 f202 	mul.w	r2, r3, r2
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
      break;
 8004cda:	e003      	b.n	8004ce4 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <RCC_GetClocksFreq+0x15c>)
 8004ce0:	601a      	str	r2, [r3, #0]
      break;
 8004ce2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004ce4:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cec:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004cf4:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <RCC_GetClocksFreq+0x164>)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	40da      	lsrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004d0c:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d14:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	0a1b      	lsrs	r3, r3, #8
 8004d1a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <RCC_GetClocksFreq+0x164>)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	4413      	add	r3, r2
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	40da      	lsrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004d34:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	0adb      	lsrs	r3, r3, #11
 8004d42:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004d44:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <RCC_GetClocksFreq+0x164>)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	40da      	lsrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <RCC_GetClocksFreq+0x158>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d64:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	0b9b      	lsrs	r3, r3, #14
 8004d6a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8004d6c:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <RCC_GetClocksFreq+0x168>)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	4413      	add	r3, r2
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	40021000 	.word	0x40021000
 8004d94:	007a1200 	.word	0x007a1200
 8004d98:	003d0900 	.word	0x003d0900
 8004d9c:	20000404 	.word	0x20000404
 8004da0:	20000414 	.word	0x20000414

08004da4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <RCC_APB2PeriphClockCmd+0x38>)
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	4908      	ldr	r1, [pc, #32]	; (8004ddc <RCC_APB2PeriphClockCmd+0x38>)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8004dc2:	e006      	b.n	8004dd2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <RCC_APB2PeriphClockCmd+0x38>)
 8004dc6:	699a      	ldr	r2, [r3, #24]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	4903      	ldr	r1, [pc, #12]	; (8004ddc <RCC_APB2PeriphClockCmd+0x38>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	618b      	str	r3, [r1, #24]
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	40021000 	.word	0x40021000

08004de0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <RCC_APB1PeriphClockCmd+0x38>)
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	4908      	ldr	r1, [pc, #32]	; (8004e18 <RCC_APB1PeriphClockCmd+0x38>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8004dfe:	e006      	b.n	8004e0e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <RCC_APB1PeriphClockCmd+0x38>)
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <RCC_APB1PeriphClockCmd+0x38>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61cb      	str	r3, [r1, #28]
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	40021000 	.word	0x40021000

08004e1c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <RCC_ClockSecuritySystemCmd+0x1c>)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	6013      	str	r3, [r2, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	4242004c 	.word	0x4242004c

08004e3c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8004e56:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	881a      	ldrh	r2, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	885b      	ldrh	r3, [r3, #2]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004e90:	4313      	orrs	r3, r2
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	89fb      	ldrh	r3, [r7, #14]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	89fa      	ldrh	r2, [r7, #14]
 8004e9e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8b9b      	ldrh	r3, [r3, #28]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	8a1a      	ldrh	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	821a      	strh	r2, [r3, #16]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8004ee4:	e007      	b.n	8004ef6 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	801a      	strh	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8004f10:	2300      	movs	r3, #0
 8004f12:	81fb      	strh	r3, [r7, #14]
 8004f14:	2300      	movs	r3, #0
 8004f16:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	2201      	movs	r2, #1
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8004f2a:	78bb      	ldrb	r3, [r7, #2]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	889b      	ldrh	r3, [r3, #4]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	89bb      	ldrh	r3, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8004f40:	e009      	b.n	8004f56 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	889b      	ldrh	r3, [r3, #4]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	89bb      	ldrh	r3, [r7, #12]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4013      	ands	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	809a      	strh	r2, [r3, #4]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	819a      	strh	r2, [r3, #12]
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	899b      	ldrh	r3, [r3, #12]
 8004f88:	b29b      	uxth	r3, r3
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	889b      	ldrh	r3, [r3, #4]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f043 0304 	orr.w	r3, r3, #4
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8004fb6:	e007      	b.n	8004fc8 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	889b      	ldrh	r3, [r3, #4]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f023 0304 	bic.w	r3, r3, #4
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	809a      	strh	r2, [r3, #4]
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
  }
}
 8004ff4:	e007      	b.n	8005006 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= CR1_CRCEN_Reset;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	801a      	strh	r2, [r3, #0]
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	891b      	ldrh	r3, [r3, #8]
 8005024:	b29a      	uxth	r2, r3
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	4013      	ands	r3, r2
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	e001      	b.n	800503a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
	...

08005048 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	81fb      	strh	r3, [r7, #14]

  tmpcr1 = TIMx->CR1;  
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a2e      	ldr	r2, [pc, #184]	; (8005118 <TIM_TimeBaseInit+0xd0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <TIM_TimeBaseInit+0x44>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2d      	ldr	r2, [pc, #180]	; (800511c <TIM_TimeBaseInit+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00f      	beq.n	800508c <TIM_TimeBaseInit+0x44>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005072:	d00b      	beq.n	800508c <TIM_TimeBaseInit+0x44>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <TIM_TimeBaseInit+0xd8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_TimeBaseInit+0x44>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a29      	ldr	r2, [pc, #164]	; (8005124 <TIM_TimeBaseInit+0xdc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <TIM_TimeBaseInit+0xe0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d108      	bne.n	800509e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800508c:	89fb      	ldrh	r3, [r7, #14]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	885a      	ldrh	r2, [r3, #2]
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	4313      	orrs	r3, r2
 800509c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a22      	ldr	r2, [pc, #136]	; (800512c <TIM_TimeBaseInit+0xe4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00c      	beq.n	80050c0 <TIM_TimeBaseInit+0x78>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a21      	ldr	r2, [pc, #132]	; (8005130 <TIM_TimeBaseInit+0xe8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d008      	beq.n	80050c0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80050ae:	89fb      	ldrh	r3, [r7, #14]
 80050b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	88da      	ldrh	r2, [r3, #6]
 80050ba:	89fb      	ldrh	r3, [r7, #14]
 80050bc:	4313      	orrs	r3, r2
 80050be:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	89fa      	ldrh	r2, [r7, #14]
 80050c4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	889a      	ldrh	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a0f      	ldr	r2, [pc, #60]	; (8005118 <TIM_TimeBaseInit+0xd0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00f      	beq.n	80050fe <TIM_TimeBaseInit+0xb6>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a0e      	ldr	r2, [pc, #56]	; (800511c <TIM_TimeBaseInit+0xd4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00b      	beq.n	80050fe <TIM_TimeBaseInit+0xb6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a12      	ldr	r2, [pc, #72]	; (8005134 <TIM_TimeBaseInit+0xec>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <TIM_TimeBaseInit+0xb6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a11      	ldr	r2, [pc, #68]	; (8005138 <TIM_TimeBaseInit+0xf0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_TimeBaseInit+0xb6>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a10      	ldr	r2, [pc, #64]	; (800513c <TIM_TimeBaseInit+0xf4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d104      	bne.n	8005108 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	7a1b      	ldrb	r3, [r3, #8]
 8005102:	b29a      	uxth	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	829a      	strh	r2, [r3, #20]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40013400 	.word	0x40013400
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40001000 	.word	0x40001000
 8005130:	40001400 	.word	0x40001400
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800

08005140 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8005162:	e007      	b.n	8005174 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	801a      	strh	r2, [r3, #0]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	807b      	strh	r3, [r7, #2]
 800518a:	4613      	mov	r3, r2
 800518c:	707b      	strb	r3, [r7, #1]
  if (NewState != DISABLE)
 800518e:	787b      	ldrb	r3, [r7, #1]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	899b      	ldrh	r3, [r3, #12]
 8005198:	b29a      	uxth	r2, r3
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	4313      	orrs	r3, r2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80051a4:	e009      	b.n	80051ba <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	899b      	ldrh	r3, [r3, #12]
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4013      	ands	r3, r2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	819a      	strh	r2, [r3, #12]
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	81bb      	strh	r3, [r7, #12]
 80051d8:	2300      	movs	r3, #0
 80051da:	817b      	strh	r3, [r7, #10]
   
  itstatus = TIMx->SR & TIM_IT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8a1b      	ldrh	r3, [r3, #16]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	887b      	ldrh	r3, [r7, #2]
 80051e4:	4013      	ands	r3, r2
 80051e6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	899b      	ldrh	r3, [r3, #12]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	4013      	ands	r3, r2
 80051f2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80051f4:	89bb      	ldrh	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <TIM_GetITStatus+0x42>
 80051fa:	897b      	ldrh	r3, [r7, #10]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
 8005204:	e001      	b.n	800520a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	807b      	strh	r3, [r7, #2]
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8005222:	887b      	ldrh	r3, [r7, #2]
 8005224:	43db      	mvns	r3, r3
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	821a      	strh	r2, [r3, #16]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr
	...

08005238 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	; 0x30
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8005242:	2300      	movs	r3, #0
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005246:	2300      	movs	r3, #0
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800524a:	2300      	movs	r3, #0
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800524e:	2300      	movs	r3, #0
 8005250:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  usartxbase = (uint32_t)USARTx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8a1b      	ldrh	r3, [r3, #16]
 800525e:	b29b      	uxth	r3, r3
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005264:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8005268:	4013      	ands	r3, r2
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	88db      	ldrh	r3, [r3, #6]
 8005270:	461a      	mov	r2, r3
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	4313      	orrs	r3, r2
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	899b      	ldrh	r3, [r3, #12]
 8005284:	b29b      	uxth	r3, r3
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800528e:	4013      	ands	r3, r2
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	889a      	ldrh	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	891b      	ldrh	r3, [r3, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80052a2:	4313      	orrs	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	4313      	orrs	r3, r2
 80052ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8a9b      	ldrh	r3, [r3, #20]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80052be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80052c4:	4013      	ands	r3, r2
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	899b      	ldrh	r3, [r3, #12]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	4313      	orrs	r3, r2
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fca9 	bl	8004c38 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4a2e      	ldr	r2, [pc, #184]	; (80053a4 <USART_Init+0x16c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d102      	bne.n	80052f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f2:	e001      	b.n	80052f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	899b      	ldrh	r3, [r3, #12]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	b21b      	sxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	da0c      	bge.n	800531e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009a      	lsls	r2, r3, #2
 800530e:	441a      	add	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
 800531c:	e00b      	b.n	8005336 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800531e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009a      	lsls	r2, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <USART_Init+0x170>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	2264      	movs	r2, #100	; 0x64
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	899b      	ldrh	r3, [r3, #12]
 8005358:	b29b      	uxth	r3, r3
 800535a:	b21b      	sxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	da0c      	bge.n	800537a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	3332      	adds	r3, #50	; 0x32
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <USART_Init+0x170>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005374:	4313      	orrs	r3, r2
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005378:	e00b      	b.n	8005392 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	3332      	adds	r3, #50	; 0x32
 8005380:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <USART_Init+0x170>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800538e:	4313      	orrs	r3, r2
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	811a      	strh	r2, [r3, #8]
}
 800539a:	bf00      	nop
 800539c:	3730      	adds	r7, #48	; 0x30
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40013800 	.word	0x40013800
 80053a8:	51eb851f 	.word	0x51eb851f

080053ac <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	899b      	ldrh	r3, [r3, #12]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80053ce:	e007      	b.n	80053e0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	899b      	ldrh	r3, [r3, #12]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053da:	b29a      	uxth	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	819a      	strh	r2, [r3, #12]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	807b      	strh	r3, [r7, #2]
 80053f6:	4613      	mov	r3, r2
 80053f8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
  /* The CTS interrupt is not available for UART4 and UART5 */
  
  usartxbase = (uint32_t)USARTx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800540e:	887b      	ldrh	r3, [r7, #2]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	b2db      	uxtb	r3, r3
 8005416:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8005418:	887b      	ldrh	r3, [r7, #2]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8005420:	2201      	movs	r2, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d103      	bne.n	8005438 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	330c      	adds	r3, #12
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e009      	b.n	800544c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d103      	bne.n	8005446 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	3310      	adds	r3, #16
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e002      	b.n	800544c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	3314      	adds	r3, #20
 800544a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800544c:	787b      	ldrb	r3, [r7, #1]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800545e:	e006      	b.n	800546e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	43da      	mvns	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	400a      	ands	r2, r1
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	809a      	strh	r2, [r3, #4]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	889b      	ldrh	r3, [r3, #4]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ac:	b29b      	uxth	r3, r3
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]
  /* The CTS flag is not available for UART4 and UART5 */
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	887b      	ldrh	r3, [r7, #2]
 80054d0:	4013      	ands	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
 80054dc:	e001      	b.n	80054e2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80054fa:	2300      	movs	r3, #0
 80054fc:	81fb      	strh	r3, [r7, #14]
 80054fe:	2300      	movs	r3, #0
 8005500:	81bb      	strh	r3, [r7, #12]
  
  bitpos = USART_IT >> 0x08;
 8005502:	887b      	ldrh	r3, [r7, #2]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	2201      	movs	r2, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8005512:	89bb      	ldrh	r3, [r7, #12]
 8005514:	43db      	mvns	r3, r3
 8005516:	b29a      	uxth	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	801a      	strh	r2, [r3, #0]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr
	...

08005528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005528:	480c      	ldr	r0, [pc, #48]	; (800555c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800552a:	490d      	ldr	r1, [pc, #52]	; (8005560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800552c:	4a0d      	ldr	r2, [pc, #52]	; (8005564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800552e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005530:	e002      	b.n	8005538 <LoopCopyDataInit>

08005532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005536:	3304      	adds	r3, #4

08005538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800553a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800553c:	d3f9      	bcc.n	8005532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005540:	4c0a      	ldr	r4, [pc, #40]	; (800556c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005544:	e001      	b.n	800554a <LoopFillZerobss>

08005546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005548:	3204      	adds	r2, #4

0800554a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800554a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800554c:	d3fb      	bcc.n	8005546 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800554e:	f7fa fe05 	bl	800015c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005552:	f000 fab7 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005556:	f7fa ffe9 	bl	800052c <main>
  bx lr
 800555a:	4770      	bx	lr
  ldr r0, =_sdata
 800555c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005560:	2000047c 	.word	0x2000047c
  ldr r2, =_sidata
 8005564:	08007110 	.word	0x08007110
  ldr r2, =_sbss
 8005568:	2000047c 	.word	0x2000047c
  ldr r4, =_ebss
 800556c:	20000b9c 	.word	0x20000b9c

08005570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005570:	e7fe      	b.n	8005570 <ADC1_2_IRQHandler>
	...

08005574 <Usart2Init>:
static int g_iEnd = 0;

int flag_usart = 0;

//USART2 для передачи на компьютер
void Usart2Init(void) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART2_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART2 initialization: PA2 - USART2_TX, PA3 - USART2_RX */

	USART2_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_PORT, ENABLE );
 800557a:	2101      	movs	r1, #1
 800557c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005580:	f7ff fc2e 	bl	8004de0 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8005584:	2302      	movs	r3, #2
 8005586:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8005588:	2318      	movs	r3, #24
 800558a:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_TX_PIN;
 800558c:	2304      	movs	r3, #4
 800558e:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 8005590:	f107 0314 	add.w	r3, r7, #20
 8005594:	4619      	mov	r1, r3
 8005596:	4821      	ldr	r0, [pc, #132]	; (800561c <Usart2Init+0xa8>)
 8005598:	f7ff f870 	bl	800467c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 800559c:	2348      	movs	r3, #72	; 0x48
 800559e:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_RX_PIN;
 80055a0:	2308      	movs	r3, #8
 80055a2:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 80055a4:	f107 0314 	add.w	r3, r7, #20
 80055a8:	4619      	mov	r1, r3
 80055aa:	481c      	ldr	r0, [pc, #112]	; (800561c <Usart2Init+0xa8>)
 80055ac:	f7ff f866 	bl	800467c <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_APBPORT, ENABLE );
 80055b0:	2101      	movs	r1, #1
 80055b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80055b6:	f7ff fbf5 	bl	8004da4 <RCC_APB2PeriphClockCmd>

	USART2_InitStruct.USART_BaudRate = 9600;//для работы с SPI2 только эта скорость подходит
 80055ba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80055be:	607b      	str	r3, [r7, #4]
	USART2_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80055c0:	2300      	movs	r3, #0
 80055c2:	823b      	strh	r3, [r7, #16]
	USART2_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80055c4:	230c      	movs	r3, #12
 80055c6:	81fb      	strh	r3, [r7, #14]
	USART2_InitStruct.USART_Parity = USART_Parity_No;
 80055c8:	2300      	movs	r3, #0
 80055ca:	81bb      	strh	r3, [r7, #12]
	USART2_InitStruct.USART_StopBits = USART_StopBits_1;
 80055cc:	2300      	movs	r3, #0
 80055ce:	817b      	strh	r3, [r7, #10]
	USART2_InitStruct.USART_WordLength = USART_WordLength_8b;
 80055d0:	2300      	movs	r3, #0
 80055d2:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART2_NUM, &USART2_InitStruct );
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	4619      	mov	r1, r3
 80055d8:	4811      	ldr	r0, [pc, #68]	; (8005620 <Usart2Init+0xac>)
 80055da:	f7ff fe2d 	bl	8005238 <USART_Init>

	USART_Cmd ( USART2_NUM, ENABLE );
 80055de:	2101      	movs	r1, #1
 80055e0:	480f      	ldr	r0, [pc, #60]	; (8005620 <Usart2Init+0xac>)
 80055e2:	f7ff fee3 	bl	80053ac <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 80055e6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80055ea:	f7fe ffab 	bl	8004544 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQ;
 80055ee:	2326      	movs	r3, #38	; 0x26
 80055f0:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80055f2:	2301      	movs	r3, #1
 80055f4:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 80055fe:	463b      	mov	r3, r7
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe ffb1 	bl	8004568 <NVIC_Init>

	USART_ITConfig ( USART2_NUM, USART_IT_RXNE, ENABLE );
 8005606:	2201      	movs	r2, #1
 8005608:	f240 5125 	movw	r1, #1317	; 0x525
 800560c:	4804      	ldr	r0, [pc, #16]	; (8005620 <Usart2Init+0xac>)
 800560e:	f7ff feec 	bl	80053ea <USART_ITConfig>

}
 8005612:	bf00      	nop
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40010800 	.word	0x40010800
 8005620:	40004400 	.word	0x40004400

08005624 <Usart2_SendData>:
//******************************************************************


//******************************************************************
void Usart2_SendData (char* strcmd, int sz_cmd){
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
//Передача на копьютер до символа окончания строки (0x00).
	for(int ik=0;ik<sz_cmd;ik++){
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e013      	b.n	800565c <Usart2_SendData+0x38>
	    //if(strcmd[ik]!=0x00){
 		  while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE) == RESET){}
 8005634:	bf00      	nop
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	480d      	ldr	r0, [pc, #52]	; (8005670 <Usart2_SendData+0x4c>)
 800563a:	f7ff ff3d 	bl	80054b8 <USART_GetFlagStatus>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f8      	beq.n	8005636 <Usart2_SendData+0x12>
		  USART_SendData(USART2_NUM, strcmd[ik]);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4413      	add	r3, r2
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	4619      	mov	r1, r3
 8005650:	4807      	ldr	r0, [pc, #28]	; (8005670 <Usart2_SendData+0x4c>)
 8005652:	f7ff ff11 	bl	8005478 <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	dbe7      	blt.n	8005634 <Usart2_SendData+0x10>
	    //}
	}

}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40004400 	.word	0x40004400

08005674 <SCAN_UsartInit>:

//******************************************************************
//******************************************************************
void SCAN_UsartInit(void) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART1 initialization: PA9 - USART1_TX, PA10 - USART1_RX */

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_PORT, ENABLE );
 800567a:	2101      	movs	r1, #1
 800567c:	2004      	movs	r0, #4
 800567e:	f7ff fb91 	bl	8004da4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8005682:	2302      	movs	r3, #2
 8005684:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8005686:	2318      	movs	r3, #24
 8005688:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_TX_PIN;
 800568a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800568e:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	4619      	mov	r1, r3
 8005696:	4821      	ldr	r0, [pc, #132]	; (800571c <SCAN_UsartInit+0xa8>)
 8005698:	f7fe fff0 	bl	800467c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 800569c:	2348      	movs	r3, #72	; 0x48
 800569e:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_RX_PIN;
 80056a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a4:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 80056a6:	f107 0314 	add.w	r3, r7, #20
 80056aa:	4619      	mov	r1, r3
 80056ac:	481b      	ldr	r0, [pc, #108]	; (800571c <SCAN_UsartInit+0xa8>)
 80056ae:	f7fe ffe5 	bl	800467c <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_APBPORT, ENABLE );
 80056b2:	2101      	movs	r1, #1
 80056b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056b8:	f7ff fb74 	bl	8004da4 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 9600;
 80056bc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80056c0:	607b      	str	r3, [r7, #4]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80056c2:	2300      	movs	r3, #0
 80056c4:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80056c6:	230c      	movs	r3, #12
 80056c8:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 80056ca:	2300      	movs	r3, #0
 80056cc:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80056ce:	2300      	movs	r3, #0
 80056d0:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80056d2:	2300      	movs	r3, #0
 80056d4:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART_NUM, &USART_InitStruct );
 80056d6:	1d3b      	adds	r3, r7, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4811      	ldr	r0, [pc, #68]	; (8005720 <SCAN_UsartInit+0xac>)
 80056dc:	f7ff fdac 	bl	8005238 <USART_Init>

	USART_Cmd ( USART_NUM, ENABLE );
 80056e0:	2101      	movs	r1, #1
 80056e2:	480f      	ldr	r0, [pc, #60]	; (8005720 <SCAN_UsartInit+0xac>)
 80056e4:	f7ff fe62 	bl	80053ac <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 80056e8:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80056ec:	f7fe ff2a 	bl	8004544 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART_IRQ;
 80056f0:	2325      	movs	r3, #37	; 0x25
 80056f2:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8005700:	463b      	mov	r3, r7
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe ff30 	bl	8004568 <NVIC_Init>

	USART_ITConfig ( USART_NUM, USART_IT_RXNE, ENABLE );
 8005708:	2201      	movs	r2, #1
 800570a:	f240 5125 	movw	r1, #1317	; 0x525
 800570e:	4804      	ldr	r0, [pc, #16]	; (8005720 <SCAN_UsartInit+0xac>)
 8005710:	f7ff fe6b 	bl	80053ea <USART_ITConfig>
}
 8005714:	bf00      	nop
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40010800 	.word	0x40010800
 8005720:	40013800 	.word	0x40013800

08005724 <SCAN_SendCMD>:



void SCAN_SendCMD (char* strcmd,int sz_cmd){
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]

	for(int ik=0;ik<sz_cmd;ik++){
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	e013      	b.n	800575c <SCAN_SendCMD+0x38>

		 while (READ_BIT(USART_NUM->SR, USART_SR_TXE) != (USART_SR_TXE)) {}
 8005734:	bf00      	nop
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <SCAN_SendCMD+0x4c>)
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b80      	cmp	r3, #128	; 0x80
 8005742:	d1f8      	bne.n	8005736 <SCAN_SendCMD+0x12>

		USART_SendData(USART_NUM, strcmd[ik]);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	4619      	mov	r1, r3
 8005750:	4807      	ldr	r0, [pc, #28]	; (8005770 <SCAN_SendCMD+0x4c>)
 8005752:	f7ff fe91 	bl	8005478 <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	dbe7      	blt.n	8005734 <SCAN_SendCMD+0x10>
	}


}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40013800 	.word	0x40013800

08005774 <USART_NUM_IRQHandler>:

void USART_NUM_IRQHandler ( void ) {
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus ( USART_NUM, USART_FLAG_RXNE ) == SET) {
 8005778:	2120      	movs	r1, #32
 800577a:	4824      	ldr	r0, [pc, #144]	; (800580c <USART_NUM_IRQHandler+0x98>)
 800577c:	f7ff fe9c 	bl	80054b8 <USART_GetFlagStatus>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d13f      	bne.n	8005806 <USART_NUM_IRQHandler+0x92>
		if(b_getversion){
 8005786:	4b22      	ldr	r3, [pc, #136]	; (8005810 <USART_NUM_IRQHandler+0x9c>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01e      	beq.n	80057cc <USART_NUM_IRQHandler+0x58>

			USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 800578e:	f240 5125 	movw	r1, #1317	; 0x525
 8005792:	481e      	ldr	r0, [pc, #120]	; (800580c <USART_NUM_IRQHandler+0x98>)
 8005794:	f7ff feab 	bl	80054ee <USART_ClearITPendingBit>
			ScanerVersion [ cntbyteversion++ ] = USART_ReceiveData ( USART_NUM );
 8005798:	481c      	ldr	r0, [pc, #112]	; (800580c <USART_NUM_IRQHandler+0x98>)
 800579a:	f7ff fe7e 	bl	800549a <USART_ReceiveData>
 800579e:	4603      	mov	r3, r0
 80057a0:	4618      	mov	r0, r3
 80057a2:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <USART_NUM_IRQHandler+0xa0>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	b2d1      	uxtb	r1, r2
 80057aa:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <USART_NUM_IRQHandler+0xa0>)
 80057ac:	7011      	strb	r1, [r2, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	b2c1      	uxtb	r1, r0
 80057b2:	4b19      	ldr	r3, [pc, #100]	; (8005818 <USART_NUM_IRQHandler+0xa4>)
 80057b4:	5499      	strb	r1, [r3, r2]
			if (cntbyteversion>71){
 80057b6:	4b17      	ldr	r3, [pc, #92]	; (8005814 <USART_NUM_IRQHandler+0xa0>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b47      	cmp	r3, #71	; 0x47
 80057bc:	d923      	bls.n	8005806 <USART_NUM_IRQHandler+0x92>
				b_getversion=DISABLE;
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <USART_NUM_IRQHandler+0x9c>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
				cntbyteversion=0;
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <USART_NUM_IRQHandler+0xa0>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
		g_iEnd %= QUEUE_LEN;
		}
	}
}
 80057ca:	e01c      	b.n	8005806 <USART_NUM_IRQHandler+0x92>
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 80057cc:	f240 5125 	movw	r1, #1317	; 0x525
 80057d0:	480e      	ldr	r0, [pc, #56]	; (800580c <USART_NUM_IRQHandler+0x98>)
 80057d2:	f7ff fe8c 	bl	80054ee <USART_ClearITPendingBit>
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
 80057d6:	480d      	ldr	r0, [pc, #52]	; (800580c <USART_NUM_IRQHandler+0x98>)
 80057d8:	f7ff fe5f 	bl	800549a <USART_ReceiveData>
 80057dc:	4603      	mov	r3, r0
 80057de:	4618      	mov	r0, r3
 80057e0:	4b0e      	ldr	r3, [pc, #56]	; (800581c <USART_NUM_IRQHandler+0xa8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	490d      	ldr	r1, [pc, #52]	; (800581c <USART_NUM_IRQHandler+0xa8>)
 80057e8:	600a      	str	r2, [r1, #0]
 80057ea:	b2c1      	uxtb	r1, r0
 80057ec:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <USART_NUM_IRQHandler+0xac>)
 80057ee:	54d1      	strb	r1, [r2, r3]
		g_iEnd %= QUEUE_LEN;
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <USART_NUM_IRQHandler+0xa8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	425a      	negs	r2, r3
 80057f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057fe:	bf58      	it	pl
 8005800:	4253      	negpl	r3, r2
 8005802:	4a06      	ldr	r2, [pc, #24]	; (800581c <USART_NUM_IRQHandler+0xa8>)
 8005804:	6013      	str	r3, [r2, #0]
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40013800 	.word	0x40013800
 8005810:	2000057c 	.word	0x2000057c
 8005814:	20000aaa 	.word	0x20000aaa
 8005818:	20000aac 	.word	0x20000aac
 800581c:	20000b80 	.word	0x20000b80
 8005820:	20000b3c 	.word	0x20000b3c

08005824 <FIFO_GetNextData>:




ErrorStatus FIFO_GetNextData ( char * pResult ) {
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 800582c:	2300      	movs	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]

	if ( g_iBegin != g_iEnd ) {
 8005830:	4b10      	ldr	r3, [pc, #64]	; (8005874 <FIFO_GetNextData+0x50>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b10      	ldr	r3, [pc, #64]	; (8005878 <FIFO_GetNextData+0x54>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d015      	beq.n	8005868 <FIFO_GetNextData+0x44>
		*pResult = g_aInputQueue [ g_iBegin++ ];
 800583c:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <FIFO_GetNextData+0x50>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	490c      	ldr	r1, [pc, #48]	; (8005874 <FIFO_GetNextData+0x50>)
 8005844:	600a      	str	r2, [r1, #0]
 8005846:	4a0d      	ldr	r2, [pc, #52]	; (800587c <FIFO_GetNextData+0x58>)
 8005848:	5cd2      	ldrb	r2, [r2, r3]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	701a      	strb	r2, [r3, #0]
		g_iBegin %= QUEUE_LEN;
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <FIFO_GetNextData+0x50>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	425a      	negs	r2, r3
 8005854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005858:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800585c:	bf58      	it	pl
 800585e:	4253      	negpl	r3, r2
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <FIFO_GetNextData+0x50>)
 8005862:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	20000b7c 	.word	0x20000b7c
 8005878:	20000b80 	.word	0x20000b80
 800587c:	20000b3c 	.word	0x20000b3c

08005880 <Date_GetNextDate>:



ErrorStatus Date_GetNextDate(char *dResult ){
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 8005888:	2300      	movs	r3, #0
 800588a:	73fb      	strb	r3, [r7, #15]
	if(date_iBegin != date_iEnd){
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <Date_GetNextDate+0x50>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <Date_GetNextDate+0x54>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d015      	beq.n	80058c4 <Date_GetNextDate+0x44>
		*dResult = date_InputQueue[date_iBegin++];
 8005898:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <Date_GetNextDate+0x50>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	490c      	ldr	r1, [pc, #48]	; (80058d0 <Date_GetNextDate+0x50>)
 80058a0:	600a      	str	r2, [r1, #0]
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <Date_GetNextDate+0x58>)
 80058a4:	5cd2      	ldrb	r2, [r2, r3]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	701a      	strb	r2, [r3, #0]
		date_iBegin %= DATE_LEN;
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <Date_GetNextDate+0x50>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	425a      	negs	r2, r3
 80058b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80058b8:	bf58      	it	pl
 80058ba:	4253      	negpl	r3, r2
 80058bc:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <Date_GetNextDate+0x50>)
 80058be:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	20000b34 	.word	0x20000b34
 80058d4:	20000b38 	.word	0x20000b38
 80058d8:	20000af4 	.word	0x20000af4

080058dc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus ( USART2_NUM, USART_FLAG_RXNE) == SET){
 80058e0:	2120      	movs	r1, #32
 80058e2:	4814      	ldr	r0, [pc, #80]	; (8005934 <USART2_IRQHandler+0x58>)
 80058e4:	f7ff fde8 	bl	80054b8 <USART_GetFlagStatus>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d11f      	bne.n	800592e <USART2_IRQHandler+0x52>
		flag_usart = 1;
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <USART2_IRQHandler+0x5c>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
		USART_ClearITPendingBit(USART2_NUM, USART_IT_RXNE);
 80058f4:	f240 5125 	movw	r1, #1317	; 0x525
 80058f8:	480e      	ldr	r0, [pc, #56]	; (8005934 <USART2_IRQHandler+0x58>)
 80058fa:	f7ff fdf8 	bl	80054ee <USART_ClearITPendingBit>
		date_InputQueue [ date_iEnd++ ] = USART_ReceiveData(USART2_NUM);
 80058fe:	480d      	ldr	r0, [pc, #52]	; (8005934 <USART2_IRQHandler+0x58>)
 8005900:	f7ff fdcb 	bl	800549a <USART_ReceiveData>
 8005904:	4603      	mov	r3, r0
 8005906:	4618      	mov	r0, r3
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <USART2_IRQHandler+0x60>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	490b      	ldr	r1, [pc, #44]	; (800593c <USART2_IRQHandler+0x60>)
 8005910:	600a      	str	r2, [r1, #0]
 8005912:	b2c1      	uxtb	r1, r0
 8005914:	4a0a      	ldr	r2, [pc, #40]	; (8005940 <USART2_IRQHandler+0x64>)
 8005916:	54d1      	strb	r1, [r2, r3]
		date_iEnd %= DATE_LEN;
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <USART2_IRQHandler+0x60>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	425a      	negs	r2, r3
 800591e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005922:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005926:	bf58      	it	pl
 8005928:	4253      	negpl	r3, r2
 800592a:	4a04      	ldr	r2, [pc, #16]	; (800593c <USART2_IRQHandler+0x60>)
 800592c:	6013      	str	r3, [r2, #0]

	}
}
 800592e:	bf00      	nop
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40004400 	.word	0x40004400
 8005938:	20000b84 	.word	0x20000b84
 800593c:	20000b38 	.word	0x20000b38
 8005940:	20000af4 	.word	0x20000af4

08005944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
	return 1;
 8005948:	2301      	movs	r3, #1
}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <_kill>:

int _kill(int pid, int sig)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800595c:	f000 f8ac 	bl	8005ab8 <__errno>
 8005960:	4603      	mov	r3, r0
 8005962:	2216      	movs	r2, #22
 8005964:	601a      	str	r2, [r3, #0]
	return -1;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <_exit>:

void _exit (int status)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800597a:	f04f 31ff 	mov.w	r1, #4294967295
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffe7 	bl	8005952 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005984:	e7fe      	b.n	8005984 <_exit+0x12>

08005986 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e00a      	b.n	80059ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005998:	f3af 8000 	nop.w
 800599c:	4601      	mov	r1, r0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	60ba      	str	r2, [r7, #8]
 80059a4:	b2ca      	uxtb	r2, r1
 80059a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	3301      	adds	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	dbf0      	blt.n	8005998 <_read+0x12>
	}

return len;
 80059b6:	687b      	ldr	r3, [r7, #4]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e009      	b.n	80059e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	60ba      	str	r2, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3301      	adds	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	dbf1      	blt.n	80059d2 <_write+0x12>
	}
	return len;
 80059ee:	687b      	ldr	r3, [r7, #4]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <_close>:

int _close(int file)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	return -1;
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <_isatty>:

int _isatty(int file)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	return 1;
 8005a34:	2301      	movs	r3, #1
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <_sbrk+0x50>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <_sbrk+0x16>
		heap_end = &end;
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <_sbrk+0x50>)
 8005a6a:	4a10      	ldr	r2, [pc, #64]	; (8005aac <_sbrk+0x54>)
 8005a6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a6e:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <_sbrk+0x50>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <_sbrk+0x50>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	466a      	mov	r2, sp
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d907      	bls.n	8005a92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a82:	f000 f819 	bl	8005ab8 <__errno>
 8005a86:	4603      	mov	r3, r0
 8005a88:	220c      	movs	r2, #12
 8005a8a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a90:	e006      	b.n	8005aa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <_sbrk+0x50>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	4a03      	ldr	r2, [pc, #12]	; (8005aa8 <_sbrk+0x50>)
 8005a9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000b88 	.word	0x20000b88
 8005aac:	20000ba0 	.word	0x20000ba0

08005ab0 <atoi>:
 8005ab0:	220a      	movs	r2, #10
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	f000 b9b0 	b.w	8005e18 <strtol>

08005ab8 <__errno>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	; (8005ac0 <__errno+0x8>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000418 	.word	0x20000418

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	4d0c      	ldr	r5, [pc, #48]	; (8005afc <__libc_init_array+0x38>)
 8005aca:	4c0d      	ldr	r4, [pc, #52]	; (8005b00 <__libc_init_array+0x3c>)
 8005acc:	1b64      	subs	r4, r4, r5
 8005ace:	10a4      	asrs	r4, r4, #2
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	f001 f9aa 	bl	8006e2c <_init>
 8005ad8:	2600      	movs	r6, #0
 8005ada:	4d0a      	ldr	r5, [pc, #40]	; (8005b04 <__libc_init_array+0x40>)
 8005adc:	4c0a      	ldr	r4, [pc, #40]	; (8005b08 <__libc_init_array+0x44>)
 8005ade:	1b64      	subs	r4, r4, r5
 8005ae0:	10a4      	asrs	r4, r4, #2
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08007108 	.word	0x08007108
 8005b00:	08007108 	.word	0x08007108
 8005b04:	08007108 	.word	0x08007108
 8005b08:	0800710c 	.word	0x0800710c

08005b0c <memcmp>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	3901      	subs	r1, #1
 8005b10:	4402      	add	r2, r0
 8005b12:	4290      	cmp	r0, r2
 8005b14:	d101      	bne.n	8005b1a <memcmp+0xe>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e005      	b.n	8005b26 <memcmp+0x1a>
 8005b1a:	7803      	ldrb	r3, [r0, #0]
 8005b1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b20:	42a3      	cmp	r3, r4
 8005b22:	d001      	beq.n	8005b28 <memcmp+0x1c>
 8005b24:	1b18      	subs	r0, r3, r4
 8005b26:	bd10      	pop	{r4, pc}
 8005b28:	3001      	adds	r0, #1
 8005b2a:	e7f2      	b.n	8005b12 <memcmp+0x6>

08005b2c <memcpy>:
 8005b2c:	440a      	add	r2, r1
 8005b2e:	4291      	cmp	r1, r2
 8005b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b34:	d100      	bne.n	8005b38 <memcpy+0xc>
 8005b36:	4770      	bx	lr
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b44:	d1f9      	bne.n	8005b3a <memcpy+0xe>
 8005b46:	bd10      	pop	{r4, pc}

08005b48 <memmove>:
 8005b48:	4288      	cmp	r0, r1
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	eb01 0402 	add.w	r4, r1, r2
 8005b50:	d902      	bls.n	8005b58 <memmove+0x10>
 8005b52:	4284      	cmp	r4, r0
 8005b54:	4623      	mov	r3, r4
 8005b56:	d807      	bhi.n	8005b68 <memmove+0x20>
 8005b58:	1e43      	subs	r3, r0, #1
 8005b5a:	42a1      	cmp	r1, r4
 8005b5c:	d008      	beq.n	8005b70 <memmove+0x28>
 8005b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b66:	e7f8      	b.n	8005b5a <memmove+0x12>
 8005b68:	4601      	mov	r1, r0
 8005b6a:	4402      	add	r2, r0
 8005b6c:	428a      	cmp	r2, r1
 8005b6e:	d100      	bne.n	8005b72 <memmove+0x2a>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b7a:	e7f7      	b.n	8005b6c <memmove+0x24>

08005b7c <memset>:
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	4402      	add	r2, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <strcat>:
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	7814      	ldrb	r4, [r2, #0]
 8005b92:	4613      	mov	r3, r2
 8005b94:	3201      	adds	r2, #1
 8005b96:	2c00      	cmp	r4, #0
 8005b98:	d1fa      	bne.n	8005b90 <strcat+0x4>
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	d1f9      	bne.n	8005b9c <strcat+0x10>
 8005ba8:	bd10      	pop	{r4, pc}

08005baa <strcpy>:
 8005baa:	4603      	mov	r3, r0
 8005bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bb0:	f803 2b01 	strb.w	r2, [r3], #1
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d1f9      	bne.n	8005bac <strcpy+0x2>
 8005bb8:	4770      	bx	lr

08005bba <strlcpy>:
 8005bba:	460b      	mov	r3, r1
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	b162      	cbz	r2, 8005bda <strlcpy+0x20>
 8005bc0:	3a01      	subs	r2, #1
 8005bc2:	d008      	beq.n	8005bd6 <strlcpy+0x1c>
 8005bc4:	f813 4b01 	ldrb.w	r4, [r3], #1
 8005bc8:	f800 4b01 	strb.w	r4, [r0], #1
 8005bcc:	2c00      	cmp	r4, #0
 8005bce:	d1f7      	bne.n	8005bc0 <strlcpy+0x6>
 8005bd0:	1a58      	subs	r0, r3, r1
 8005bd2:	3801      	subs	r0, #1
 8005bd4:	bd10      	pop	{r4, pc}
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	7002      	strb	r2, [r0, #0]
 8005bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	d1fb      	bne.n	8005bda <strlcpy+0x20>
 8005be2:	e7f5      	b.n	8005bd0 <strlcpy+0x16>

08005be4 <strncat>:
 8005be4:	b530      	push	{r4, r5, lr}
 8005be6:	4604      	mov	r4, r0
 8005be8:	7825      	ldrb	r5, [r4, #0]
 8005bea:	4623      	mov	r3, r4
 8005bec:	3401      	adds	r4, #1
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	d1fa      	bne.n	8005be8 <strncat+0x4>
 8005bf2:	3a01      	subs	r2, #1
 8005bf4:	d304      	bcc.n	8005c00 <strncat+0x1c>
 8005bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfa:	f803 4b01 	strb.w	r4, [r3], #1
 8005bfe:	b904      	cbnz	r4, 8005c02 <strncat+0x1e>
 8005c00:	bd30      	pop	{r4, r5, pc}
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	d1f5      	bne.n	8005bf2 <strncat+0xe>
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e7f3      	b.n	8005bf2 <strncat+0xe>

08005c0a <strpbrk>:
 8005c0a:	b570      	push	{r4, r5, r6, lr}
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	7800      	ldrb	r0, [r0, #0]
 8005c10:	b190      	cbz	r0, 8005c38 <strpbrk+0x2e>
 8005c12:	460c      	mov	r4, r1
 8005c14:	4618      	mov	r0, r3
 8005c16:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005c1a:	b14d      	cbz	r5, 8005c30 <strpbrk+0x26>
 8005c1c:	460a      	mov	r2, r1
 8005c1e:	e001      	b.n	8005c24 <strpbrk+0x1a>
 8005c20:	42ae      	cmp	r6, r5
 8005c22:	d009      	beq.n	8005c38 <strpbrk+0x2e>
 8005c24:	4614      	mov	r4, r2
 8005c26:	f812 6b01 	ldrb.w	r6, [r2], #1
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	d1f8      	bne.n	8005c20 <strpbrk+0x16>
 8005c2e:	e7f1      	b.n	8005c14 <strpbrk+0xa>
 8005c30:	7823      	ldrb	r3, [r4, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bf08      	it	eq
 8005c36:	2000      	moveq	r0, #0
 8005c38:	bd70      	pop	{r4, r5, r6, pc}

08005c3a <strstr>:
 8005c3a:	780a      	ldrb	r2, [r1, #0]
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	b96a      	cbnz	r2, 8005c5c <strstr+0x22>
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d109      	bne.n	8005c5a <strstr+0x20>
 8005c46:	460c      	mov	r4, r1
 8005c48:	4605      	mov	r5, r0
 8005c4a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f6      	beq.n	8005c40 <strstr+0x6>
 8005c52:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005c56:	429e      	cmp	r6, r3
 8005c58:	d0f7      	beq.n	8005c4a <strstr+0x10>
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	7803      	ldrb	r3, [r0, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1ef      	bne.n	8005c42 <strstr+0x8>
 8005c62:	4618      	mov	r0, r3
 8005c64:	e7ec      	b.n	8005c40 <strstr+0x6>
	...

08005c68 <strtok>:
 8005c68:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <strtok+0x5c>)
 8005c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	681f      	ldr	r7, [r3, #0]
 8005c70:	4605      	mov	r5, r0
 8005c72:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005c74:	460e      	mov	r6, r1
 8005c76:	b9ec      	cbnz	r4, 8005cb4 <strtok+0x4c>
 8005c78:	2050      	movs	r0, #80	; 0x50
 8005c7a:	f000 f907 	bl	8005e8c <malloc>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	65b8      	str	r0, [r7, #88]	; 0x58
 8005c82:	b920      	cbnz	r0, 8005c8e <strtok+0x26>
 8005c84:	2157      	movs	r1, #87	; 0x57
 8005c86:	4b10      	ldr	r3, [pc, #64]	; (8005cc8 <strtok+0x60>)
 8005c88:	4810      	ldr	r0, [pc, #64]	; (8005ccc <strtok+0x64>)
 8005c8a:	f000 f8cf 	bl	8005e2c <__assert_func>
 8005c8e:	e9c0 4400 	strd	r4, r4, [r0]
 8005c92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005c96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005c9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005c9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005ca2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005ca6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005caa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005cae:	6184      	str	r4, [r0, #24]
 8005cb0:	7704      	strb	r4, [r0, #28]
 8005cb2:	6244      	str	r4, [r0, #36]	; 0x24
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc0:	f000 b806 	b.w	8005cd0 <__strtok_r>
 8005cc4:	20000418 	.word	0x20000418
 8005cc8:	08006ec4 	.word	0x08006ec4
 8005ccc:	08006edb 	.word	0x08006edb

08005cd0 <__strtok_r>:
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd2:	b908      	cbnz	r0, 8005cd8 <__strtok_r+0x8>
 8005cd4:	6810      	ldr	r0, [r2, #0]
 8005cd6:	b188      	cbz	r0, 8005cfc <__strtok_r+0x2c>
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460f      	mov	r7, r1
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005ce2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ce6:	b91e      	cbnz	r6, 8005cf0 <__strtok_r+0x20>
 8005ce8:	b965      	cbnz	r5, 8005d04 <__strtok_r+0x34>
 8005cea:	4628      	mov	r0, r5
 8005cec:	6015      	str	r5, [r2, #0]
 8005cee:	e005      	b.n	8005cfc <__strtok_r+0x2c>
 8005cf0:	42b5      	cmp	r5, r6
 8005cf2:	d1f6      	bne.n	8005ce2 <__strtok_r+0x12>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <__strtok_r+0xa>
 8005cf8:	6014      	str	r4, [r2, #0]
 8005cfa:	7003      	strb	r3, [r0, #0]
 8005cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfe:	461c      	mov	r4, r3
 8005d00:	e00c      	b.n	8005d1c <__strtok_r+0x4c>
 8005d02:	b915      	cbnz	r5, 8005d0a <__strtok_r+0x3a>
 8005d04:	460e      	mov	r6, r1
 8005d06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005d0e:	42ab      	cmp	r3, r5
 8005d10:	d1f7      	bne.n	8005d02 <__strtok_r+0x32>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f3      	beq.n	8005cfe <__strtok_r+0x2e>
 8005d16:	2300      	movs	r3, #0
 8005d18:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005d1c:	6014      	str	r4, [r2, #0]
 8005d1e:	e7ed      	b.n	8005cfc <__strtok_r+0x2c>

08005d20 <_strtol_l.constprop.0>:
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d26:	4680      	mov	r8, r0
 8005d28:	d001      	beq.n	8005d2e <_strtol_l.constprop.0+0xe>
 8005d2a:	2b24      	cmp	r3, #36	; 0x24
 8005d2c:	d906      	bls.n	8005d3c <_strtol_l.constprop.0+0x1c>
 8005d2e:	f7ff fec3 	bl	8005ab8 <__errno>
 8005d32:	2316      	movs	r3, #22
 8005d34:	6003      	str	r3, [r0, #0]
 8005d36:	2000      	movs	r0, #0
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	4f35      	ldr	r7, [pc, #212]	; (8005e14 <_strtol_l.constprop.0+0xf4>)
 8005d40:	4628      	mov	r0, r5
 8005d42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d46:	5de6      	ldrb	r6, [r4, r7]
 8005d48:	f016 0608 	ands.w	r6, r6, #8
 8005d4c:	d1f8      	bne.n	8005d40 <_strtol_l.constprop.0+0x20>
 8005d4e:	2c2d      	cmp	r4, #45	; 0x2d
 8005d50:	d12f      	bne.n	8005db2 <_strtol_l.constprop.0+0x92>
 8005d52:	2601      	movs	r6, #1
 8005d54:	782c      	ldrb	r4, [r5, #0]
 8005d56:	1c85      	adds	r5, r0, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d057      	beq.n	8005e0c <_strtol_l.constprop.0+0xec>
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d109      	bne.n	8005d74 <_strtol_l.constprop.0+0x54>
 8005d60:	2c30      	cmp	r4, #48	; 0x30
 8005d62:	d107      	bne.n	8005d74 <_strtol_l.constprop.0+0x54>
 8005d64:	7828      	ldrb	r0, [r5, #0]
 8005d66:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005d6a:	2858      	cmp	r0, #88	; 0x58
 8005d6c:	d149      	bne.n	8005e02 <_strtol_l.constprop.0+0xe2>
 8005d6e:	2310      	movs	r3, #16
 8005d70:	786c      	ldrb	r4, [r5, #1]
 8005d72:	3502      	adds	r5, #2
 8005d74:	2700      	movs	r7, #0
 8005d76:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005d7a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005d7e:	fbbe f9f3 	udiv	r9, lr, r3
 8005d82:	4638      	mov	r0, r7
 8005d84:	fb03 ea19 	mls	sl, r3, r9, lr
 8005d88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d8c:	f1bc 0f09 	cmp.w	ip, #9
 8005d90:	d814      	bhi.n	8005dbc <_strtol_l.constprop.0+0x9c>
 8005d92:	4664      	mov	r4, ip
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	dd22      	ble.n	8005dde <_strtol_l.constprop.0+0xbe>
 8005d98:	2f00      	cmp	r7, #0
 8005d9a:	db1d      	blt.n	8005dd8 <_strtol_l.constprop.0+0xb8>
 8005d9c:	4581      	cmp	r9, r0
 8005d9e:	d31b      	bcc.n	8005dd8 <_strtol_l.constprop.0+0xb8>
 8005da0:	d101      	bne.n	8005da6 <_strtol_l.constprop.0+0x86>
 8005da2:	45a2      	cmp	sl, r4
 8005da4:	db18      	blt.n	8005dd8 <_strtol_l.constprop.0+0xb8>
 8005da6:	2701      	movs	r7, #1
 8005da8:	fb00 4003 	mla	r0, r0, r3, r4
 8005dac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005db0:	e7ea      	b.n	8005d88 <_strtol_l.constprop.0+0x68>
 8005db2:	2c2b      	cmp	r4, #43	; 0x2b
 8005db4:	bf04      	itt	eq
 8005db6:	782c      	ldrbeq	r4, [r5, #0]
 8005db8:	1c85      	addeq	r5, r0, #2
 8005dba:	e7cd      	b.n	8005d58 <_strtol_l.constprop.0+0x38>
 8005dbc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005dc0:	f1bc 0f19 	cmp.w	ip, #25
 8005dc4:	d801      	bhi.n	8005dca <_strtol_l.constprop.0+0xaa>
 8005dc6:	3c37      	subs	r4, #55	; 0x37
 8005dc8:	e7e4      	b.n	8005d94 <_strtol_l.constprop.0+0x74>
 8005dca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005dce:	f1bc 0f19 	cmp.w	ip, #25
 8005dd2:	d804      	bhi.n	8005dde <_strtol_l.constprop.0+0xbe>
 8005dd4:	3c57      	subs	r4, #87	; 0x57
 8005dd6:	e7dd      	b.n	8005d94 <_strtol_l.constprop.0+0x74>
 8005dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8005ddc:	e7e6      	b.n	8005dac <_strtol_l.constprop.0+0x8c>
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	da07      	bge.n	8005df2 <_strtol_l.constprop.0+0xd2>
 8005de2:	2322      	movs	r3, #34	; 0x22
 8005de4:	4670      	mov	r0, lr
 8005de6:	f8c8 3000 	str.w	r3, [r8]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d0a4      	beq.n	8005d38 <_strtol_l.constprop.0+0x18>
 8005dee:	1e69      	subs	r1, r5, #1
 8005df0:	e005      	b.n	8005dfe <_strtol_l.constprop.0+0xde>
 8005df2:	b106      	cbz	r6, 8005df6 <_strtol_l.constprop.0+0xd6>
 8005df4:	4240      	negs	r0, r0
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	d09e      	beq.n	8005d38 <_strtol_l.constprop.0+0x18>
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	d1f7      	bne.n	8005dee <_strtol_l.constprop.0+0xce>
 8005dfe:	6011      	str	r1, [r2, #0]
 8005e00:	e79a      	b.n	8005d38 <_strtol_l.constprop.0+0x18>
 8005e02:	2430      	movs	r4, #48	; 0x30
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1b5      	bne.n	8005d74 <_strtol_l.constprop.0+0x54>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	e7b3      	b.n	8005d74 <_strtol_l.constprop.0+0x54>
 8005e0c:	2c30      	cmp	r4, #48	; 0x30
 8005e0e:	d0a9      	beq.n	8005d64 <_strtol_l.constprop.0+0x44>
 8005e10:	230a      	movs	r3, #10
 8005e12:	e7af      	b.n	8005d74 <_strtol_l.constprop.0+0x54>
 8005e14:	08006f75 	.word	0x08006f75

08005e18 <strtol>:
 8005e18:	4613      	mov	r3, r2
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	4802      	ldr	r0, [pc, #8]	; (8005e28 <strtol+0x10>)
 8005e20:	6800      	ldr	r0, [r0, #0]
 8005e22:	f7ff bf7d 	b.w	8005d20 <_strtol_l.constprop.0>
 8005e26:	bf00      	nop
 8005e28:	20000418 	.word	0x20000418

08005e2c <__assert_func>:
 8005e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e2e:	4614      	mov	r4, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <__assert_func+0x2c>)
 8005e34:	4605      	mov	r5, r0
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68d8      	ldr	r0, [r3, #12]
 8005e3a:	b14c      	cbz	r4, 8005e50 <__assert_func+0x24>
 8005e3c:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <__assert_func+0x30>)
 8005e3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e42:	9100      	str	r1, [sp, #0]
 8005e44:	462b      	mov	r3, r5
 8005e46:	4906      	ldr	r1, [pc, #24]	; (8005e60 <__assert_func+0x34>)
 8005e48:	f000 f80e 	bl	8005e68 <fiprintf>
 8005e4c:	f000 fcc0 	bl	80067d0 <abort>
 8005e50:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <__assert_func+0x38>)
 8005e52:	461c      	mov	r4, r3
 8005e54:	e7f3      	b.n	8005e3e <__assert_func+0x12>
 8005e56:	bf00      	nop
 8005e58:	20000418 	.word	0x20000418
 8005e5c:	08006f38 	.word	0x08006f38
 8005e60:	08006f45 	.word	0x08006f45
 8005e64:	08006f73 	.word	0x08006f73

08005e68 <fiprintf>:
 8005e68:	b40e      	push	{r1, r2, r3}
 8005e6a:	b503      	push	{r0, r1, lr}
 8005e6c:	4601      	mov	r1, r0
 8005e6e:	ab03      	add	r3, sp, #12
 8005e70:	4805      	ldr	r0, [pc, #20]	; (8005e88 <fiprintf+0x20>)
 8005e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e76:	6800      	ldr	r0, [r0, #0]
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	f000 f913 	bl	80060a4 <_vfiprintf_r>
 8005e7e:	b002      	add	sp, #8
 8005e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e84:	b003      	add	sp, #12
 8005e86:	4770      	bx	lr
 8005e88:	20000418 	.word	0x20000418

08005e8c <malloc>:
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <malloc+0xc>)
 8005e8e:	4601      	mov	r1, r0
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	f000 b86b 	b.w	8005f6c <_malloc_r>
 8005e96:	bf00      	nop
 8005e98:	20000418 	.word	0x20000418

08005e9c <_free_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d040      	beq.n	8005f26 <_free_r+0x8a>
 8005ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea8:	1f0c      	subs	r4, r1, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bfb8      	it	lt
 8005eae:	18e4      	addlt	r4, r4, r3
 8005eb0:	f000 fec0 	bl	8006c34 <__malloc_lock>
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <_free_r+0x8c>)
 8005eb6:	6813      	ldr	r3, [r2, #0]
 8005eb8:	b933      	cbnz	r3, 8005ec8 <_free_r+0x2c>
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	6014      	str	r4, [r2, #0]
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ec4:	f000 bebc 	b.w	8006c40 <__malloc_unlock>
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	d908      	bls.n	8005ede <_free_r+0x42>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	1821      	adds	r1, r4, r0
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	bf01      	itttt	eq
 8005ed4:	6819      	ldreq	r1, [r3, #0]
 8005ed6:	685b      	ldreq	r3, [r3, #4]
 8005ed8:	1809      	addeq	r1, r1, r0
 8005eda:	6021      	streq	r1, [r4, #0]
 8005edc:	e7ed      	b.n	8005eba <_free_r+0x1e>
 8005ede:	461a      	mov	r2, r3
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b10b      	cbz	r3, 8005ee8 <_free_r+0x4c>
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	d9fa      	bls.n	8005ede <_free_r+0x42>
 8005ee8:	6811      	ldr	r1, [r2, #0]
 8005eea:	1850      	adds	r0, r2, r1
 8005eec:	42a0      	cmp	r0, r4
 8005eee:	d10b      	bne.n	8005f08 <_free_r+0x6c>
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	4401      	add	r1, r0
 8005ef4:	1850      	adds	r0, r2, r1
 8005ef6:	4283      	cmp	r3, r0
 8005ef8:	6011      	str	r1, [r2, #0]
 8005efa:	d1e0      	bne.n	8005ebe <_free_r+0x22>
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	4401      	add	r1, r0
 8005f02:	6011      	str	r1, [r2, #0]
 8005f04:	6053      	str	r3, [r2, #4]
 8005f06:	e7da      	b.n	8005ebe <_free_r+0x22>
 8005f08:	d902      	bls.n	8005f10 <_free_r+0x74>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	e7d6      	b.n	8005ebe <_free_r+0x22>
 8005f10:	6820      	ldr	r0, [r4, #0]
 8005f12:	1821      	adds	r1, r4, r0
 8005f14:	428b      	cmp	r3, r1
 8005f16:	bf01      	itttt	eq
 8005f18:	6819      	ldreq	r1, [r3, #0]
 8005f1a:	685b      	ldreq	r3, [r3, #4]
 8005f1c:	1809      	addeq	r1, r1, r0
 8005f1e:	6021      	streq	r1, [r4, #0]
 8005f20:	6063      	str	r3, [r4, #4]
 8005f22:	6054      	str	r4, [r2, #4]
 8005f24:	e7cb      	b.n	8005ebe <_free_r+0x22>
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	20000b8c 	.word	0x20000b8c

08005f2c <sbrk_aligned>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4e0e      	ldr	r6, [pc, #56]	; (8005f68 <sbrk_aligned+0x3c>)
 8005f30:	460c      	mov	r4, r1
 8005f32:	6831      	ldr	r1, [r6, #0]
 8005f34:	4605      	mov	r5, r0
 8005f36:	b911      	cbnz	r1, 8005f3e <sbrk_aligned+0x12>
 8005f38:	f000 fb7a 	bl	8006630 <_sbrk_r>
 8005f3c:	6030      	str	r0, [r6, #0]
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 fb75 	bl	8006630 <_sbrk_r>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d00a      	beq.n	8005f60 <sbrk_aligned+0x34>
 8005f4a:	1cc4      	adds	r4, r0, #3
 8005f4c:	f024 0403 	bic.w	r4, r4, #3
 8005f50:	42a0      	cmp	r0, r4
 8005f52:	d007      	beq.n	8005f64 <sbrk_aligned+0x38>
 8005f54:	1a21      	subs	r1, r4, r0
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 fb6a 	bl	8006630 <_sbrk_r>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d101      	bne.n	8005f64 <sbrk_aligned+0x38>
 8005f60:	f04f 34ff 	mov.w	r4, #4294967295
 8005f64:	4620      	mov	r0, r4
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	20000b90 	.word	0x20000b90

08005f6c <_malloc_r>:
 8005f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f70:	1ccd      	adds	r5, r1, #3
 8005f72:	f025 0503 	bic.w	r5, r5, #3
 8005f76:	3508      	adds	r5, #8
 8005f78:	2d0c      	cmp	r5, #12
 8005f7a:	bf38      	it	cc
 8005f7c:	250c      	movcc	r5, #12
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	4607      	mov	r7, r0
 8005f82:	db01      	blt.n	8005f88 <_malloc_r+0x1c>
 8005f84:	42a9      	cmp	r1, r5
 8005f86:	d905      	bls.n	8005f94 <_malloc_r+0x28>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4630      	mov	r0, r6
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	4e2e      	ldr	r6, [pc, #184]	; (8006050 <_malloc_r+0xe4>)
 8005f96:	f000 fe4d 	bl	8006c34 <__malloc_lock>
 8005f9a:	6833      	ldr	r3, [r6, #0]
 8005f9c:	461c      	mov	r4, r3
 8005f9e:	bb34      	cbnz	r4, 8005fee <_malloc_r+0x82>
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	f7ff ffc2 	bl	8005f2c <sbrk_aligned>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	4604      	mov	r4, r0
 8005fac:	d14d      	bne.n	800604a <_malloc_r+0xde>
 8005fae:	6834      	ldr	r4, [r6, #0]
 8005fb0:	4626      	mov	r6, r4
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d140      	bne.n	8006038 <_malloc_r+0xcc>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4638      	mov	r0, r7
 8005fbc:	eb04 0803 	add.w	r8, r4, r3
 8005fc0:	f000 fb36 	bl	8006630 <_sbrk_r>
 8005fc4:	4580      	cmp	r8, r0
 8005fc6:	d13a      	bne.n	800603e <_malloc_r+0xd2>
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	3503      	adds	r5, #3
 8005fcc:	1a6d      	subs	r5, r5, r1
 8005fce:	f025 0503 	bic.w	r5, r5, #3
 8005fd2:	3508      	adds	r5, #8
 8005fd4:	2d0c      	cmp	r5, #12
 8005fd6:	bf38      	it	cc
 8005fd8:	250c      	movcc	r5, #12
 8005fda:	4638      	mov	r0, r7
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7ff ffa5 	bl	8005f2c <sbrk_aligned>
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d02b      	beq.n	800603e <_malloc_r+0xd2>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	442b      	add	r3, r5
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	e00e      	b.n	800600c <_malloc_r+0xa0>
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	1b52      	subs	r2, r2, r5
 8005ff2:	d41e      	bmi.n	8006032 <_malloc_r+0xc6>
 8005ff4:	2a0b      	cmp	r2, #11
 8005ff6:	d916      	bls.n	8006026 <_malloc_r+0xba>
 8005ff8:	1961      	adds	r1, r4, r5
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	6025      	str	r5, [r4, #0]
 8005ffe:	bf18      	it	ne
 8006000:	6059      	strne	r1, [r3, #4]
 8006002:	6863      	ldr	r3, [r4, #4]
 8006004:	bf08      	it	eq
 8006006:	6031      	streq	r1, [r6, #0]
 8006008:	5162      	str	r2, [r4, r5]
 800600a:	604b      	str	r3, [r1, #4]
 800600c:	4638      	mov	r0, r7
 800600e:	f104 060b 	add.w	r6, r4, #11
 8006012:	f000 fe15 	bl	8006c40 <__malloc_unlock>
 8006016:	f026 0607 	bic.w	r6, r6, #7
 800601a:	1d23      	adds	r3, r4, #4
 800601c:	1af2      	subs	r2, r6, r3
 800601e:	d0b6      	beq.n	8005f8e <_malloc_r+0x22>
 8006020:	1b9b      	subs	r3, r3, r6
 8006022:	50a3      	str	r3, [r4, r2]
 8006024:	e7b3      	b.n	8005f8e <_malloc_r+0x22>
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	42a3      	cmp	r3, r4
 800602a:	bf0c      	ite	eq
 800602c:	6032      	streq	r2, [r6, #0]
 800602e:	605a      	strne	r2, [r3, #4]
 8006030:	e7ec      	b.n	800600c <_malloc_r+0xa0>
 8006032:	4623      	mov	r3, r4
 8006034:	6864      	ldr	r4, [r4, #4]
 8006036:	e7b2      	b.n	8005f9e <_malloc_r+0x32>
 8006038:	4634      	mov	r4, r6
 800603a:	6876      	ldr	r6, [r6, #4]
 800603c:	e7b9      	b.n	8005fb2 <_malloc_r+0x46>
 800603e:	230c      	movs	r3, #12
 8006040:	4638      	mov	r0, r7
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	f000 fdfc 	bl	8006c40 <__malloc_unlock>
 8006048:	e7a1      	b.n	8005f8e <_malloc_r+0x22>
 800604a:	6025      	str	r5, [r4, #0]
 800604c:	e7de      	b.n	800600c <_malloc_r+0xa0>
 800604e:	bf00      	nop
 8006050:	20000b8c 	.word	0x20000b8c

08006054 <__sfputc_r>:
 8006054:	6893      	ldr	r3, [r2, #8]
 8006056:	b410      	push	{r4}
 8006058:	3b01      	subs	r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	6093      	str	r3, [r2, #8]
 800605e:	da07      	bge.n	8006070 <__sfputc_r+0x1c>
 8006060:	6994      	ldr	r4, [r2, #24]
 8006062:	42a3      	cmp	r3, r4
 8006064:	db01      	blt.n	800606a <__sfputc_r+0x16>
 8006066:	290a      	cmp	r1, #10
 8006068:	d102      	bne.n	8006070 <__sfputc_r+0x1c>
 800606a:	bc10      	pop	{r4}
 800606c:	f000 baf0 	b.w	8006650 <__swbuf_r>
 8006070:	6813      	ldr	r3, [r2, #0]
 8006072:	1c58      	adds	r0, r3, #1
 8006074:	6010      	str	r0, [r2, #0]
 8006076:	7019      	strb	r1, [r3, #0]
 8006078:	4608      	mov	r0, r1
 800607a:	bc10      	pop	{r4}
 800607c:	4770      	bx	lr

0800607e <__sfputs_r>:
 800607e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006080:	4606      	mov	r6, r0
 8006082:	460f      	mov	r7, r1
 8006084:	4614      	mov	r4, r2
 8006086:	18d5      	adds	r5, r2, r3
 8006088:	42ac      	cmp	r4, r5
 800608a:	d101      	bne.n	8006090 <__sfputs_r+0x12>
 800608c:	2000      	movs	r0, #0
 800608e:	e007      	b.n	80060a0 <__sfputs_r+0x22>
 8006090:	463a      	mov	r2, r7
 8006092:	4630      	mov	r0, r6
 8006094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006098:	f7ff ffdc 	bl	8006054 <__sfputc_r>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d1f3      	bne.n	8006088 <__sfputs_r+0xa>
 80060a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060a4 <_vfiprintf_r>:
 80060a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	460d      	mov	r5, r1
 80060aa:	4614      	mov	r4, r2
 80060ac:	4698      	mov	r8, r3
 80060ae:	4606      	mov	r6, r0
 80060b0:	b09d      	sub	sp, #116	; 0x74
 80060b2:	b118      	cbz	r0, 80060bc <_vfiprintf_r+0x18>
 80060b4:	6983      	ldr	r3, [r0, #24]
 80060b6:	b90b      	cbnz	r3, 80060bc <_vfiprintf_r+0x18>
 80060b8:	f000 fca8 	bl	8006a0c <__sinit>
 80060bc:	4b89      	ldr	r3, [pc, #548]	; (80062e4 <_vfiprintf_r+0x240>)
 80060be:	429d      	cmp	r5, r3
 80060c0:	d11b      	bne.n	80060fa <_vfiprintf_r+0x56>
 80060c2:	6875      	ldr	r5, [r6, #4]
 80060c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060c6:	07d9      	lsls	r1, r3, #31
 80060c8:	d405      	bmi.n	80060d6 <_vfiprintf_r+0x32>
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	059a      	lsls	r2, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_vfiprintf_r+0x32>
 80060d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060d2:	f000 fd39 	bl	8006b48 <__retarget_lock_acquire_recursive>
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	071b      	lsls	r3, r3, #28
 80060da:	d501      	bpl.n	80060e0 <_vfiprintf_r+0x3c>
 80060dc:	692b      	ldr	r3, [r5, #16]
 80060de:	b9eb      	cbnz	r3, 800611c <_vfiprintf_r+0x78>
 80060e0:	4629      	mov	r1, r5
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 fb06 	bl	80066f4 <__swsetup_r>
 80060e8:	b1c0      	cbz	r0, 800611c <_vfiprintf_r+0x78>
 80060ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ec:	07dc      	lsls	r4, r3, #31
 80060ee:	d50e      	bpl.n	800610e <_vfiprintf_r+0x6a>
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	b01d      	add	sp, #116	; 0x74
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	4b7b      	ldr	r3, [pc, #492]	; (80062e8 <_vfiprintf_r+0x244>)
 80060fc:	429d      	cmp	r5, r3
 80060fe:	d101      	bne.n	8006104 <_vfiprintf_r+0x60>
 8006100:	68b5      	ldr	r5, [r6, #8]
 8006102:	e7df      	b.n	80060c4 <_vfiprintf_r+0x20>
 8006104:	4b79      	ldr	r3, [pc, #484]	; (80062ec <_vfiprintf_r+0x248>)
 8006106:	429d      	cmp	r5, r3
 8006108:	bf08      	it	eq
 800610a:	68f5      	ldreq	r5, [r6, #12]
 800610c:	e7da      	b.n	80060c4 <_vfiprintf_r+0x20>
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	0598      	lsls	r0, r3, #22
 8006112:	d4ed      	bmi.n	80060f0 <_vfiprintf_r+0x4c>
 8006114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006116:	f000 fd18 	bl	8006b4a <__retarget_lock_release_recursive>
 800611a:	e7e9      	b.n	80060f0 <_vfiprintf_r+0x4c>
 800611c:	2300      	movs	r3, #0
 800611e:	9309      	str	r3, [sp, #36]	; 0x24
 8006120:	2320      	movs	r3, #32
 8006122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006126:	2330      	movs	r3, #48	; 0x30
 8006128:	f04f 0901 	mov.w	r9, #1
 800612c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006130:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80062f0 <_vfiprintf_r+0x24c>
 8006134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006138:	4623      	mov	r3, r4
 800613a:	469a      	mov	sl, r3
 800613c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006140:	b10a      	cbz	r2, 8006146 <_vfiprintf_r+0xa2>
 8006142:	2a25      	cmp	r2, #37	; 0x25
 8006144:	d1f9      	bne.n	800613a <_vfiprintf_r+0x96>
 8006146:	ebba 0b04 	subs.w	fp, sl, r4
 800614a:	d00b      	beq.n	8006164 <_vfiprintf_r+0xc0>
 800614c:	465b      	mov	r3, fp
 800614e:	4622      	mov	r2, r4
 8006150:	4629      	mov	r1, r5
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ff93 	bl	800607e <__sfputs_r>
 8006158:	3001      	adds	r0, #1
 800615a:	f000 80aa 	beq.w	80062b2 <_vfiprintf_r+0x20e>
 800615e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006160:	445a      	add	r2, fp
 8006162:	9209      	str	r2, [sp, #36]	; 0x24
 8006164:	f89a 3000 	ldrb.w	r3, [sl]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80a2 	beq.w	80062b2 <_vfiprintf_r+0x20e>
 800616e:	2300      	movs	r3, #0
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
 8006174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006178:	f10a 0a01 	add.w	sl, sl, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006184:	931a      	str	r3, [sp, #104]	; 0x68
 8006186:	4654      	mov	r4, sl
 8006188:	2205      	movs	r2, #5
 800618a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800618e:	4858      	ldr	r0, [pc, #352]	; (80062f0 <_vfiprintf_r+0x24c>)
 8006190:	f000 fd42 	bl	8006c18 <memchr>
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	b9d8      	cbnz	r0, 80061d0 <_vfiprintf_r+0x12c>
 8006198:	06d1      	lsls	r1, r2, #27
 800619a:	bf44      	itt	mi
 800619c:	2320      	movmi	r3, #32
 800619e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a2:	0713      	lsls	r3, r2, #28
 80061a4:	bf44      	itt	mi
 80061a6:	232b      	movmi	r3, #43	; 0x2b
 80061a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ac:	f89a 3000 	ldrb.w	r3, [sl]
 80061b0:	2b2a      	cmp	r3, #42	; 0x2a
 80061b2:	d015      	beq.n	80061e0 <_vfiprintf_r+0x13c>
 80061b4:	4654      	mov	r4, sl
 80061b6:	2000      	movs	r0, #0
 80061b8:	f04f 0c0a 	mov.w	ip, #10
 80061bc:	9a07      	ldr	r2, [sp, #28]
 80061be:	4621      	mov	r1, r4
 80061c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061c4:	3b30      	subs	r3, #48	; 0x30
 80061c6:	2b09      	cmp	r3, #9
 80061c8:	d94e      	bls.n	8006268 <_vfiprintf_r+0x1c4>
 80061ca:	b1b0      	cbz	r0, 80061fa <_vfiprintf_r+0x156>
 80061cc:	9207      	str	r2, [sp, #28]
 80061ce:	e014      	b.n	80061fa <_vfiprintf_r+0x156>
 80061d0:	eba0 0308 	sub.w	r3, r0, r8
 80061d4:	fa09 f303 	lsl.w	r3, r9, r3
 80061d8:	4313      	orrs	r3, r2
 80061da:	46a2      	mov	sl, r4
 80061dc:	9304      	str	r3, [sp, #16]
 80061de:	e7d2      	b.n	8006186 <_vfiprintf_r+0xe2>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	1d19      	adds	r1, r3, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	9103      	str	r1, [sp, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfbb      	ittet	lt
 80061ec:	425b      	neglt	r3, r3
 80061ee:	f042 0202 	orrlt.w	r2, r2, #2
 80061f2:	9307      	strge	r3, [sp, #28]
 80061f4:	9307      	strlt	r3, [sp, #28]
 80061f6:	bfb8      	it	lt
 80061f8:	9204      	strlt	r2, [sp, #16]
 80061fa:	7823      	ldrb	r3, [r4, #0]
 80061fc:	2b2e      	cmp	r3, #46	; 0x2e
 80061fe:	d10c      	bne.n	800621a <_vfiprintf_r+0x176>
 8006200:	7863      	ldrb	r3, [r4, #1]
 8006202:	2b2a      	cmp	r3, #42	; 0x2a
 8006204:	d135      	bne.n	8006272 <_vfiprintf_r+0x1ce>
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	3402      	adds	r4, #2
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	9203      	str	r2, [sp, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	bfb8      	it	lt
 8006214:	f04f 33ff 	movlt.w	r3, #4294967295
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80062f4 <_vfiprintf_r+0x250>
 800621e:	2203      	movs	r2, #3
 8006220:	4650      	mov	r0, sl
 8006222:	7821      	ldrb	r1, [r4, #0]
 8006224:	f000 fcf8 	bl	8006c18 <memchr>
 8006228:	b140      	cbz	r0, 800623c <_vfiprintf_r+0x198>
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	eba0 000a 	sub.w	r0, r0, sl
 8006230:	fa03 f000 	lsl.w	r0, r3, r0
 8006234:	9b04      	ldr	r3, [sp, #16]
 8006236:	3401      	adds	r4, #1
 8006238:	4303      	orrs	r3, r0
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006240:	2206      	movs	r2, #6
 8006242:	482d      	ldr	r0, [pc, #180]	; (80062f8 <_vfiprintf_r+0x254>)
 8006244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006248:	f000 fce6 	bl	8006c18 <memchr>
 800624c:	2800      	cmp	r0, #0
 800624e:	d03f      	beq.n	80062d0 <_vfiprintf_r+0x22c>
 8006250:	4b2a      	ldr	r3, [pc, #168]	; (80062fc <_vfiprintf_r+0x258>)
 8006252:	bb1b      	cbnz	r3, 800629c <_vfiprintf_r+0x1f8>
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	3307      	adds	r3, #7
 8006258:	f023 0307 	bic.w	r3, r3, #7
 800625c:	3308      	adds	r3, #8
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006262:	443b      	add	r3, r7
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	e767      	b.n	8006138 <_vfiprintf_r+0x94>
 8006268:	460c      	mov	r4, r1
 800626a:	2001      	movs	r0, #1
 800626c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006270:	e7a5      	b.n	80061be <_vfiprintf_r+0x11a>
 8006272:	2300      	movs	r3, #0
 8006274:	f04f 0c0a 	mov.w	ip, #10
 8006278:	4619      	mov	r1, r3
 800627a:	3401      	adds	r4, #1
 800627c:	9305      	str	r3, [sp, #20]
 800627e:	4620      	mov	r0, r4
 8006280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006284:	3a30      	subs	r2, #48	; 0x30
 8006286:	2a09      	cmp	r2, #9
 8006288:	d903      	bls.n	8006292 <_vfiprintf_r+0x1ee>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0c5      	beq.n	800621a <_vfiprintf_r+0x176>
 800628e:	9105      	str	r1, [sp, #20]
 8006290:	e7c3      	b.n	800621a <_vfiprintf_r+0x176>
 8006292:	4604      	mov	r4, r0
 8006294:	2301      	movs	r3, #1
 8006296:	fb0c 2101 	mla	r1, ip, r1, r2
 800629a:	e7f0      	b.n	800627e <_vfiprintf_r+0x1da>
 800629c:	ab03      	add	r3, sp, #12
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	462a      	mov	r2, r5
 80062a2:	4630      	mov	r0, r6
 80062a4:	4b16      	ldr	r3, [pc, #88]	; (8006300 <_vfiprintf_r+0x25c>)
 80062a6:	a904      	add	r1, sp, #16
 80062a8:	f3af 8000 	nop.w
 80062ac:	4607      	mov	r7, r0
 80062ae:	1c78      	adds	r0, r7, #1
 80062b0:	d1d6      	bne.n	8006260 <_vfiprintf_r+0x1bc>
 80062b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062b4:	07d9      	lsls	r1, r3, #31
 80062b6:	d405      	bmi.n	80062c4 <_vfiprintf_r+0x220>
 80062b8:	89ab      	ldrh	r3, [r5, #12]
 80062ba:	059a      	lsls	r2, r3, #22
 80062bc:	d402      	bmi.n	80062c4 <_vfiprintf_r+0x220>
 80062be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062c0:	f000 fc43 	bl	8006b4a <__retarget_lock_release_recursive>
 80062c4:	89ab      	ldrh	r3, [r5, #12]
 80062c6:	065b      	lsls	r3, r3, #25
 80062c8:	f53f af12 	bmi.w	80060f0 <_vfiprintf_r+0x4c>
 80062cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ce:	e711      	b.n	80060f4 <_vfiprintf_r+0x50>
 80062d0:	ab03      	add	r3, sp, #12
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	462a      	mov	r2, r5
 80062d6:	4630      	mov	r0, r6
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <_vfiprintf_r+0x25c>)
 80062da:	a904      	add	r1, sp, #16
 80062dc:	f000 f882 	bl	80063e4 <_printf_i>
 80062e0:	e7e4      	b.n	80062ac <_vfiprintf_r+0x208>
 80062e2:	bf00      	nop
 80062e4:	080070c8 	.word	0x080070c8
 80062e8:	080070e8 	.word	0x080070e8
 80062ec:	080070a8 	.word	0x080070a8
 80062f0:	08007075 	.word	0x08007075
 80062f4:	0800707b 	.word	0x0800707b
 80062f8:	0800707f 	.word	0x0800707f
 80062fc:	00000000 	.word	0x00000000
 8006300:	0800607f 	.word	0x0800607f

08006304 <_printf_common>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	4616      	mov	r6, r2
 800630a:	4699      	mov	r9, r3
 800630c:	688a      	ldr	r2, [r1, #8]
 800630e:	690b      	ldr	r3, [r1, #16]
 8006310:	4607      	mov	r7, r0
 8006312:	4293      	cmp	r3, r2
 8006314:	bfb8      	it	lt
 8006316:	4613      	movlt	r3, r2
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800631e:	460c      	mov	r4, r1
 8006320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006324:	b10a      	cbz	r2, 800632a <_printf_common+0x26>
 8006326:	3301      	adds	r3, #1
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	0699      	lsls	r1, r3, #26
 800632e:	bf42      	ittt	mi
 8006330:	6833      	ldrmi	r3, [r6, #0]
 8006332:	3302      	addmi	r3, #2
 8006334:	6033      	strmi	r3, [r6, #0]
 8006336:	6825      	ldr	r5, [r4, #0]
 8006338:	f015 0506 	ands.w	r5, r5, #6
 800633c:	d106      	bne.n	800634c <_printf_common+0x48>
 800633e:	f104 0a19 	add.w	sl, r4, #25
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	6832      	ldr	r2, [r6, #0]
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	42ab      	cmp	r3, r5
 800634a:	dc28      	bgt.n	800639e <_printf_common+0x9a>
 800634c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006350:	1e13      	subs	r3, r2, #0
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	bf18      	it	ne
 8006356:	2301      	movne	r3, #1
 8006358:	0692      	lsls	r2, r2, #26
 800635a:	d42d      	bmi.n	80063b8 <_printf_common+0xb4>
 800635c:	4649      	mov	r1, r9
 800635e:	4638      	mov	r0, r7
 8006360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d020      	beq.n	80063ac <_printf_common+0xa8>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	68e5      	ldr	r5, [r4, #12]
 800636e:	f003 0306 	and.w	r3, r3, #6
 8006372:	2b04      	cmp	r3, #4
 8006374:	bf18      	it	ne
 8006376:	2500      	movne	r5, #0
 8006378:	6832      	ldr	r2, [r6, #0]
 800637a:	f04f 0600 	mov.w	r6, #0
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	bf08      	it	eq
 8006382:	1aad      	subeq	r5, r5, r2
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	bf08      	it	eq
 8006388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800638c:	4293      	cmp	r3, r2
 800638e:	bfc4      	itt	gt
 8006390:	1a9b      	subgt	r3, r3, r2
 8006392:	18ed      	addgt	r5, r5, r3
 8006394:	341a      	adds	r4, #26
 8006396:	42b5      	cmp	r5, r6
 8006398:	d11a      	bne.n	80063d0 <_printf_common+0xcc>
 800639a:	2000      	movs	r0, #0
 800639c:	e008      	b.n	80063b0 <_printf_common+0xac>
 800639e:	2301      	movs	r3, #1
 80063a0:	4652      	mov	r2, sl
 80063a2:	4649      	mov	r1, r9
 80063a4:	4638      	mov	r0, r7
 80063a6:	47c0      	blx	r8
 80063a8:	3001      	adds	r0, #1
 80063aa:	d103      	bne.n	80063b4 <_printf_common+0xb0>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7c4      	b.n	8006342 <_printf_common+0x3e>
 80063b8:	2030      	movs	r0, #48	; 0x30
 80063ba:	18e1      	adds	r1, r4, r3
 80063bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c6:	4422      	add	r2, r4
 80063c8:	3302      	adds	r3, #2
 80063ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063ce:	e7c5      	b.n	800635c <_printf_common+0x58>
 80063d0:	2301      	movs	r3, #1
 80063d2:	4622      	mov	r2, r4
 80063d4:	4649      	mov	r1, r9
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c0      	blx	r8
 80063da:	3001      	adds	r0, #1
 80063dc:	d0e6      	beq.n	80063ac <_printf_common+0xa8>
 80063de:	3601      	adds	r6, #1
 80063e0:	e7d9      	b.n	8006396 <_printf_common+0x92>
	...

080063e4 <_printf_i>:
 80063e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	7e0f      	ldrb	r7, [r1, #24]
 80063ea:	4691      	mov	r9, r2
 80063ec:	2f78      	cmp	r7, #120	; 0x78
 80063ee:	4680      	mov	r8, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	469a      	mov	sl, r3
 80063f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063fa:	d807      	bhi.n	800640c <_printf_i+0x28>
 80063fc:	2f62      	cmp	r7, #98	; 0x62
 80063fe:	d80a      	bhi.n	8006416 <_printf_i+0x32>
 8006400:	2f00      	cmp	r7, #0
 8006402:	f000 80d9 	beq.w	80065b8 <_printf_i+0x1d4>
 8006406:	2f58      	cmp	r7, #88	; 0x58
 8006408:	f000 80a4 	beq.w	8006554 <_printf_i+0x170>
 800640c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006414:	e03a      	b.n	800648c <_printf_i+0xa8>
 8006416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800641a:	2b15      	cmp	r3, #21
 800641c:	d8f6      	bhi.n	800640c <_printf_i+0x28>
 800641e:	a101      	add	r1, pc, #4	; (adr r1, 8006424 <_printf_i+0x40>)
 8006420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006424:	0800647d 	.word	0x0800647d
 8006428:	08006491 	.word	0x08006491
 800642c:	0800640d 	.word	0x0800640d
 8006430:	0800640d 	.word	0x0800640d
 8006434:	0800640d 	.word	0x0800640d
 8006438:	0800640d 	.word	0x0800640d
 800643c:	08006491 	.word	0x08006491
 8006440:	0800640d 	.word	0x0800640d
 8006444:	0800640d 	.word	0x0800640d
 8006448:	0800640d 	.word	0x0800640d
 800644c:	0800640d 	.word	0x0800640d
 8006450:	0800659f 	.word	0x0800659f
 8006454:	080064c1 	.word	0x080064c1
 8006458:	08006581 	.word	0x08006581
 800645c:	0800640d 	.word	0x0800640d
 8006460:	0800640d 	.word	0x0800640d
 8006464:	080065c1 	.word	0x080065c1
 8006468:	0800640d 	.word	0x0800640d
 800646c:	080064c1 	.word	0x080064c1
 8006470:	0800640d 	.word	0x0800640d
 8006474:	0800640d 	.word	0x0800640d
 8006478:	08006589 	.word	0x08006589
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	602a      	str	r2, [r5, #0]
 8006484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800648c:	2301      	movs	r3, #1
 800648e:	e0a4      	b.n	80065da <_printf_i+0x1f6>
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	6829      	ldr	r1, [r5, #0]
 8006494:	0606      	lsls	r6, r0, #24
 8006496:	f101 0304 	add.w	r3, r1, #4
 800649a:	d50a      	bpl.n	80064b2 <_printf_i+0xce>
 800649c:	680e      	ldr	r6, [r1, #0]
 800649e:	602b      	str	r3, [r5, #0]
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	da03      	bge.n	80064ac <_printf_i+0xc8>
 80064a4:	232d      	movs	r3, #45	; 0x2d
 80064a6:	4276      	negs	r6, r6
 80064a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ac:	230a      	movs	r3, #10
 80064ae:	485e      	ldr	r0, [pc, #376]	; (8006628 <_printf_i+0x244>)
 80064b0:	e019      	b.n	80064e6 <_printf_i+0x102>
 80064b2:	680e      	ldr	r6, [r1, #0]
 80064b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	bf18      	it	ne
 80064bc:	b236      	sxthne	r6, r6
 80064be:	e7ef      	b.n	80064a0 <_printf_i+0xbc>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	6820      	ldr	r0, [r4, #0]
 80064c4:	1d19      	adds	r1, r3, #4
 80064c6:	6029      	str	r1, [r5, #0]
 80064c8:	0601      	lsls	r1, r0, #24
 80064ca:	d501      	bpl.n	80064d0 <_printf_i+0xec>
 80064cc:	681e      	ldr	r6, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <_printf_i+0xf2>
 80064d0:	0646      	lsls	r6, r0, #25
 80064d2:	d5fb      	bpl.n	80064cc <_printf_i+0xe8>
 80064d4:	881e      	ldrh	r6, [r3, #0]
 80064d6:	2f6f      	cmp	r7, #111	; 0x6f
 80064d8:	bf0c      	ite	eq
 80064da:	2308      	moveq	r3, #8
 80064dc:	230a      	movne	r3, #10
 80064de:	4852      	ldr	r0, [pc, #328]	; (8006628 <_printf_i+0x244>)
 80064e0:	2100      	movs	r1, #0
 80064e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064e6:	6865      	ldr	r5, [r4, #4]
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	bfa8      	it	ge
 80064ec:	6821      	ldrge	r1, [r4, #0]
 80064ee:	60a5      	str	r5, [r4, #8]
 80064f0:	bfa4      	itt	ge
 80064f2:	f021 0104 	bicge.w	r1, r1, #4
 80064f6:	6021      	strge	r1, [r4, #0]
 80064f8:	b90e      	cbnz	r6, 80064fe <_printf_i+0x11a>
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	d04d      	beq.n	800659a <_printf_i+0x1b6>
 80064fe:	4615      	mov	r5, r2
 8006500:	fbb6 f1f3 	udiv	r1, r6, r3
 8006504:	fb03 6711 	mls	r7, r3, r1, r6
 8006508:	5dc7      	ldrb	r7, [r0, r7]
 800650a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800650e:	4637      	mov	r7, r6
 8006510:	42bb      	cmp	r3, r7
 8006512:	460e      	mov	r6, r1
 8006514:	d9f4      	bls.n	8006500 <_printf_i+0x11c>
 8006516:	2b08      	cmp	r3, #8
 8006518:	d10b      	bne.n	8006532 <_printf_i+0x14e>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	07de      	lsls	r6, r3, #31
 800651e:	d508      	bpl.n	8006532 <_printf_i+0x14e>
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	6861      	ldr	r1, [r4, #4]
 8006524:	4299      	cmp	r1, r3
 8006526:	bfde      	ittt	le
 8006528:	2330      	movle	r3, #48	; 0x30
 800652a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800652e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006532:	1b52      	subs	r2, r2, r5
 8006534:	6122      	str	r2, [r4, #16]
 8006536:	464b      	mov	r3, r9
 8006538:	4621      	mov	r1, r4
 800653a:	4640      	mov	r0, r8
 800653c:	f8cd a000 	str.w	sl, [sp]
 8006540:	aa03      	add	r2, sp, #12
 8006542:	f7ff fedf 	bl	8006304 <_printf_common>
 8006546:	3001      	adds	r0, #1
 8006548:	d14c      	bne.n	80065e4 <_printf_i+0x200>
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	b004      	add	sp, #16
 8006550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006554:	4834      	ldr	r0, [pc, #208]	; (8006628 <_printf_i+0x244>)
 8006556:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800655a:	6829      	ldr	r1, [r5, #0]
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006562:	6029      	str	r1, [r5, #0]
 8006564:	061d      	lsls	r5, r3, #24
 8006566:	d514      	bpl.n	8006592 <_printf_i+0x1ae>
 8006568:	07df      	lsls	r7, r3, #31
 800656a:	bf44      	itt	mi
 800656c:	f043 0320 	orrmi.w	r3, r3, #32
 8006570:	6023      	strmi	r3, [r4, #0]
 8006572:	b91e      	cbnz	r6, 800657c <_printf_i+0x198>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	f023 0320 	bic.w	r3, r3, #32
 800657a:	6023      	str	r3, [r4, #0]
 800657c:	2310      	movs	r3, #16
 800657e:	e7af      	b.n	80064e0 <_printf_i+0xfc>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	f043 0320 	orr.w	r3, r3, #32
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	2378      	movs	r3, #120	; 0x78
 800658a:	4828      	ldr	r0, [pc, #160]	; (800662c <_printf_i+0x248>)
 800658c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006590:	e7e3      	b.n	800655a <_printf_i+0x176>
 8006592:	0659      	lsls	r1, r3, #25
 8006594:	bf48      	it	mi
 8006596:	b2b6      	uxthmi	r6, r6
 8006598:	e7e6      	b.n	8006568 <_printf_i+0x184>
 800659a:	4615      	mov	r5, r2
 800659c:	e7bb      	b.n	8006516 <_printf_i+0x132>
 800659e:	682b      	ldr	r3, [r5, #0]
 80065a0:	6826      	ldr	r6, [r4, #0]
 80065a2:	1d18      	adds	r0, r3, #4
 80065a4:	6961      	ldr	r1, [r4, #20]
 80065a6:	6028      	str	r0, [r5, #0]
 80065a8:	0635      	lsls	r5, r6, #24
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	d501      	bpl.n	80065b2 <_printf_i+0x1ce>
 80065ae:	6019      	str	r1, [r3, #0]
 80065b0:	e002      	b.n	80065b8 <_printf_i+0x1d4>
 80065b2:	0670      	lsls	r0, r6, #25
 80065b4:	d5fb      	bpl.n	80065ae <_printf_i+0x1ca>
 80065b6:	8019      	strh	r1, [r3, #0]
 80065b8:	2300      	movs	r3, #0
 80065ba:	4615      	mov	r5, r2
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	e7ba      	b.n	8006536 <_printf_i+0x152>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	2100      	movs	r1, #0
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	602a      	str	r2, [r5, #0]
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	6862      	ldr	r2, [r4, #4]
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 fb23 	bl	8006c18 <memchr>
 80065d2:	b108      	cbz	r0, 80065d8 <_printf_i+0x1f4>
 80065d4:	1b40      	subs	r0, r0, r5
 80065d6:	6060      	str	r0, [r4, #4]
 80065d8:	6863      	ldr	r3, [r4, #4]
 80065da:	6123      	str	r3, [r4, #16]
 80065dc:	2300      	movs	r3, #0
 80065de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e2:	e7a8      	b.n	8006536 <_printf_i+0x152>
 80065e4:	462a      	mov	r2, r5
 80065e6:	4649      	mov	r1, r9
 80065e8:	4640      	mov	r0, r8
 80065ea:	6923      	ldr	r3, [r4, #16]
 80065ec:	47d0      	blx	sl
 80065ee:	3001      	adds	r0, #1
 80065f0:	d0ab      	beq.n	800654a <_printf_i+0x166>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	079b      	lsls	r3, r3, #30
 80065f6:	d413      	bmi.n	8006620 <_printf_i+0x23c>
 80065f8:	68e0      	ldr	r0, [r4, #12]
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	4298      	cmp	r0, r3
 80065fe:	bfb8      	it	lt
 8006600:	4618      	movlt	r0, r3
 8006602:	e7a4      	b.n	800654e <_printf_i+0x16a>
 8006604:	2301      	movs	r3, #1
 8006606:	4632      	mov	r2, r6
 8006608:	4649      	mov	r1, r9
 800660a:	4640      	mov	r0, r8
 800660c:	47d0      	blx	sl
 800660e:	3001      	adds	r0, #1
 8006610:	d09b      	beq.n	800654a <_printf_i+0x166>
 8006612:	3501      	adds	r5, #1
 8006614:	68e3      	ldr	r3, [r4, #12]
 8006616:	9903      	ldr	r1, [sp, #12]
 8006618:	1a5b      	subs	r3, r3, r1
 800661a:	42ab      	cmp	r3, r5
 800661c:	dcf2      	bgt.n	8006604 <_printf_i+0x220>
 800661e:	e7eb      	b.n	80065f8 <_printf_i+0x214>
 8006620:	2500      	movs	r5, #0
 8006622:	f104 0619 	add.w	r6, r4, #25
 8006626:	e7f5      	b.n	8006614 <_printf_i+0x230>
 8006628:	08007086 	.word	0x08007086
 800662c:	08007097 	.word	0x08007097

08006630 <_sbrk_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	2300      	movs	r3, #0
 8006634:	4d05      	ldr	r5, [pc, #20]	; (800664c <_sbrk_r+0x1c>)
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7ff fa0c 	bl	8005a58 <_sbrk>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_sbrk_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_sbrk_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	20000b98 	.word	0x20000b98

08006650 <__swbuf_r>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	460e      	mov	r6, r1
 8006654:	4614      	mov	r4, r2
 8006656:	4605      	mov	r5, r0
 8006658:	b118      	cbz	r0, 8006662 <__swbuf_r+0x12>
 800665a:	6983      	ldr	r3, [r0, #24]
 800665c:	b90b      	cbnz	r3, 8006662 <__swbuf_r+0x12>
 800665e:	f000 f9d5 	bl	8006a0c <__sinit>
 8006662:	4b21      	ldr	r3, [pc, #132]	; (80066e8 <__swbuf_r+0x98>)
 8006664:	429c      	cmp	r4, r3
 8006666:	d12b      	bne.n	80066c0 <__swbuf_r+0x70>
 8006668:	686c      	ldr	r4, [r5, #4]
 800666a:	69a3      	ldr	r3, [r4, #24]
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	89a3      	ldrh	r3, [r4, #12]
 8006670:	071a      	lsls	r2, r3, #28
 8006672:	d52f      	bpl.n	80066d4 <__swbuf_r+0x84>
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	b36b      	cbz	r3, 80066d4 <__swbuf_r+0x84>
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	b2f6      	uxtb	r6, r6
 800667e:	1ac0      	subs	r0, r0, r3
 8006680:	6963      	ldr	r3, [r4, #20]
 8006682:	4637      	mov	r7, r6
 8006684:	4283      	cmp	r3, r0
 8006686:	dc04      	bgt.n	8006692 <__swbuf_r+0x42>
 8006688:	4621      	mov	r1, r4
 800668a:	4628      	mov	r0, r5
 800668c:	f000 f92a 	bl	80068e4 <_fflush_r>
 8006690:	bb30      	cbnz	r0, 80066e0 <__swbuf_r+0x90>
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	3001      	adds	r0, #1
 8006696:	3b01      	subs	r3, #1
 8006698:	60a3      	str	r3, [r4, #8]
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	6022      	str	r2, [r4, #0]
 80066a0:	701e      	strb	r6, [r3, #0]
 80066a2:	6963      	ldr	r3, [r4, #20]
 80066a4:	4283      	cmp	r3, r0
 80066a6:	d004      	beq.n	80066b2 <__swbuf_r+0x62>
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	07db      	lsls	r3, r3, #31
 80066ac:	d506      	bpl.n	80066bc <__swbuf_r+0x6c>
 80066ae:	2e0a      	cmp	r6, #10
 80066b0:	d104      	bne.n	80066bc <__swbuf_r+0x6c>
 80066b2:	4621      	mov	r1, r4
 80066b4:	4628      	mov	r0, r5
 80066b6:	f000 f915 	bl	80068e4 <_fflush_r>
 80066ba:	b988      	cbnz	r0, 80066e0 <__swbuf_r+0x90>
 80066bc:	4638      	mov	r0, r7
 80066be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <__swbuf_r+0x9c>)
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d101      	bne.n	80066ca <__swbuf_r+0x7a>
 80066c6:	68ac      	ldr	r4, [r5, #8]
 80066c8:	e7cf      	b.n	800666a <__swbuf_r+0x1a>
 80066ca:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <__swbuf_r+0xa0>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	bf08      	it	eq
 80066d0:	68ec      	ldreq	r4, [r5, #12]
 80066d2:	e7ca      	b.n	800666a <__swbuf_r+0x1a>
 80066d4:	4621      	mov	r1, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f80c 	bl	80066f4 <__swsetup_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0cb      	beq.n	8006678 <__swbuf_r+0x28>
 80066e0:	f04f 37ff 	mov.w	r7, #4294967295
 80066e4:	e7ea      	b.n	80066bc <__swbuf_r+0x6c>
 80066e6:	bf00      	nop
 80066e8:	080070c8 	.word	0x080070c8
 80066ec:	080070e8 	.word	0x080070e8
 80066f0:	080070a8 	.word	0x080070a8

080066f4 <__swsetup_r>:
 80066f4:	4b32      	ldr	r3, [pc, #200]	; (80067c0 <__swsetup_r+0xcc>)
 80066f6:	b570      	push	{r4, r5, r6, lr}
 80066f8:	681d      	ldr	r5, [r3, #0]
 80066fa:	4606      	mov	r6, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	b125      	cbz	r5, 800670a <__swsetup_r+0x16>
 8006700:	69ab      	ldr	r3, [r5, #24]
 8006702:	b913      	cbnz	r3, 800670a <__swsetup_r+0x16>
 8006704:	4628      	mov	r0, r5
 8006706:	f000 f981 	bl	8006a0c <__sinit>
 800670a:	4b2e      	ldr	r3, [pc, #184]	; (80067c4 <__swsetup_r+0xd0>)
 800670c:	429c      	cmp	r4, r3
 800670e:	d10f      	bne.n	8006730 <__swsetup_r+0x3c>
 8006710:	686c      	ldr	r4, [r5, #4]
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006718:	0719      	lsls	r1, r3, #28
 800671a:	d42c      	bmi.n	8006776 <__swsetup_r+0x82>
 800671c:	06dd      	lsls	r5, r3, #27
 800671e:	d411      	bmi.n	8006744 <__swsetup_r+0x50>
 8006720:	2309      	movs	r3, #9
 8006722:	6033      	str	r3, [r6, #0]
 8006724:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	81a3      	strh	r3, [r4, #12]
 800672e:	e03e      	b.n	80067ae <__swsetup_r+0xba>
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <__swsetup_r+0xd4>)
 8006732:	429c      	cmp	r4, r3
 8006734:	d101      	bne.n	800673a <__swsetup_r+0x46>
 8006736:	68ac      	ldr	r4, [r5, #8]
 8006738:	e7eb      	b.n	8006712 <__swsetup_r+0x1e>
 800673a:	4b24      	ldr	r3, [pc, #144]	; (80067cc <__swsetup_r+0xd8>)
 800673c:	429c      	cmp	r4, r3
 800673e:	bf08      	it	eq
 8006740:	68ec      	ldreq	r4, [r5, #12]
 8006742:	e7e6      	b.n	8006712 <__swsetup_r+0x1e>
 8006744:	0758      	lsls	r0, r3, #29
 8006746:	d512      	bpl.n	800676e <__swsetup_r+0x7a>
 8006748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800674a:	b141      	cbz	r1, 800675e <__swsetup_r+0x6a>
 800674c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006750:	4299      	cmp	r1, r3
 8006752:	d002      	beq.n	800675a <__swsetup_r+0x66>
 8006754:	4630      	mov	r0, r6
 8006756:	f7ff fba1 	bl	8005e9c <_free_r>
 800675a:	2300      	movs	r3, #0
 800675c:	6363      	str	r3, [r4, #52]	; 0x34
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	2300      	movs	r3, #0
 8006768:	6063      	str	r3, [r4, #4]
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f043 0308 	orr.w	r3, r3, #8
 8006774:	81a3      	strh	r3, [r4, #12]
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	b94b      	cbnz	r3, 800678e <__swsetup_r+0x9a>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006784:	d003      	beq.n	800678e <__swsetup_r+0x9a>
 8006786:	4621      	mov	r1, r4
 8006788:	4630      	mov	r0, r6
 800678a:	f000 fa05 	bl	8006b98 <__smakebuf_r>
 800678e:	89a0      	ldrh	r0, [r4, #12]
 8006790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006794:	f010 0301 	ands.w	r3, r0, #1
 8006798:	d00a      	beq.n	80067b0 <__swsetup_r+0xbc>
 800679a:	2300      	movs	r3, #0
 800679c:	60a3      	str	r3, [r4, #8]
 800679e:	6963      	ldr	r3, [r4, #20]
 80067a0:	425b      	negs	r3, r3
 80067a2:	61a3      	str	r3, [r4, #24]
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	b943      	cbnz	r3, 80067ba <__swsetup_r+0xc6>
 80067a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067ac:	d1ba      	bne.n	8006724 <__swsetup_r+0x30>
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	0781      	lsls	r1, r0, #30
 80067b2:	bf58      	it	pl
 80067b4:	6963      	ldrpl	r3, [r4, #20]
 80067b6:	60a3      	str	r3, [r4, #8]
 80067b8:	e7f4      	b.n	80067a4 <__swsetup_r+0xb0>
 80067ba:	2000      	movs	r0, #0
 80067bc:	e7f7      	b.n	80067ae <__swsetup_r+0xba>
 80067be:	bf00      	nop
 80067c0:	20000418 	.word	0x20000418
 80067c4:	080070c8 	.word	0x080070c8
 80067c8:	080070e8 	.word	0x080070e8
 80067cc:	080070a8 	.word	0x080070a8

080067d0 <abort>:
 80067d0:	2006      	movs	r0, #6
 80067d2:	b508      	push	{r3, lr}
 80067d4:	f000 fa62 	bl	8006c9c <raise>
 80067d8:	2001      	movs	r0, #1
 80067da:	f7ff f8ca 	bl	8005972 <_exit>
	...

080067e0 <__sflush_r>:
 80067e0:	898a      	ldrh	r2, [r1, #12]
 80067e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e4:	4605      	mov	r5, r0
 80067e6:	0710      	lsls	r0, r2, #28
 80067e8:	460c      	mov	r4, r1
 80067ea:	d457      	bmi.n	800689c <__sflush_r+0xbc>
 80067ec:	684b      	ldr	r3, [r1, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dc04      	bgt.n	80067fc <__sflush_r+0x1c>
 80067f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dc01      	bgt.n	80067fc <__sflush_r+0x1c>
 80067f8:	2000      	movs	r0, #0
 80067fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067fe:	2e00      	cmp	r6, #0
 8006800:	d0fa      	beq.n	80067f8 <__sflush_r+0x18>
 8006802:	2300      	movs	r3, #0
 8006804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006808:	682f      	ldr	r7, [r5, #0]
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	d032      	beq.n	8006874 <__sflush_r+0x94>
 800680e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	075a      	lsls	r2, r3, #29
 8006814:	d505      	bpl.n	8006822 <__sflush_r+0x42>
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	1ac0      	subs	r0, r0, r3
 800681a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800681c:	b10b      	cbz	r3, 8006822 <__sflush_r+0x42>
 800681e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006820:	1ac0      	subs	r0, r0, r3
 8006822:	2300      	movs	r3, #0
 8006824:	4602      	mov	r2, r0
 8006826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006828:	4628      	mov	r0, r5
 800682a:	6a21      	ldr	r1, [r4, #32]
 800682c:	47b0      	blx	r6
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	d106      	bne.n	8006842 <__sflush_r+0x62>
 8006834:	6829      	ldr	r1, [r5, #0]
 8006836:	291d      	cmp	r1, #29
 8006838:	d82c      	bhi.n	8006894 <__sflush_r+0xb4>
 800683a:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <__sflush_r+0x100>)
 800683c:	40ca      	lsrs	r2, r1
 800683e:	07d6      	lsls	r6, r2, #31
 8006840:	d528      	bpl.n	8006894 <__sflush_r+0xb4>
 8006842:	2200      	movs	r2, #0
 8006844:	6062      	str	r2, [r4, #4]
 8006846:	6922      	ldr	r2, [r4, #16]
 8006848:	04d9      	lsls	r1, r3, #19
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	d504      	bpl.n	8006858 <__sflush_r+0x78>
 800684e:	1c42      	adds	r2, r0, #1
 8006850:	d101      	bne.n	8006856 <__sflush_r+0x76>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	b903      	cbnz	r3, 8006858 <__sflush_r+0x78>
 8006856:	6560      	str	r0, [r4, #84]	; 0x54
 8006858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800685a:	602f      	str	r7, [r5, #0]
 800685c:	2900      	cmp	r1, #0
 800685e:	d0cb      	beq.n	80067f8 <__sflush_r+0x18>
 8006860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006864:	4299      	cmp	r1, r3
 8006866:	d002      	beq.n	800686e <__sflush_r+0x8e>
 8006868:	4628      	mov	r0, r5
 800686a:	f7ff fb17 	bl	8005e9c <_free_r>
 800686e:	2000      	movs	r0, #0
 8006870:	6360      	str	r0, [r4, #52]	; 0x34
 8006872:	e7c2      	b.n	80067fa <__sflush_r+0x1a>
 8006874:	6a21      	ldr	r1, [r4, #32]
 8006876:	2301      	movs	r3, #1
 8006878:	4628      	mov	r0, r5
 800687a:	47b0      	blx	r6
 800687c:	1c41      	adds	r1, r0, #1
 800687e:	d1c7      	bne.n	8006810 <__sflush_r+0x30>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0c4      	beq.n	8006810 <__sflush_r+0x30>
 8006886:	2b1d      	cmp	r3, #29
 8006888:	d001      	beq.n	800688e <__sflush_r+0xae>
 800688a:	2b16      	cmp	r3, #22
 800688c:	d101      	bne.n	8006892 <__sflush_r+0xb2>
 800688e:	602f      	str	r7, [r5, #0]
 8006890:	e7b2      	b.n	80067f8 <__sflush_r+0x18>
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	e7ae      	b.n	80067fa <__sflush_r+0x1a>
 800689c:	690f      	ldr	r7, [r1, #16]
 800689e:	2f00      	cmp	r7, #0
 80068a0:	d0aa      	beq.n	80067f8 <__sflush_r+0x18>
 80068a2:	0793      	lsls	r3, r2, #30
 80068a4:	bf18      	it	ne
 80068a6:	2300      	movne	r3, #0
 80068a8:	680e      	ldr	r6, [r1, #0]
 80068aa:	bf08      	it	eq
 80068ac:	694b      	ldreq	r3, [r1, #20]
 80068ae:	1bf6      	subs	r6, r6, r7
 80068b0:	600f      	str	r7, [r1, #0]
 80068b2:	608b      	str	r3, [r1, #8]
 80068b4:	2e00      	cmp	r6, #0
 80068b6:	dd9f      	ble.n	80067f8 <__sflush_r+0x18>
 80068b8:	4633      	mov	r3, r6
 80068ba:	463a      	mov	r2, r7
 80068bc:	4628      	mov	r0, r5
 80068be:	6a21      	ldr	r1, [r4, #32]
 80068c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80068c4:	47e0      	blx	ip
 80068c6:	2800      	cmp	r0, #0
 80068c8:	dc06      	bgt.n	80068d8 <__sflush_r+0xf8>
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	e790      	b.n	80067fa <__sflush_r+0x1a>
 80068d8:	4407      	add	r7, r0
 80068da:	1a36      	subs	r6, r6, r0
 80068dc:	e7ea      	b.n	80068b4 <__sflush_r+0xd4>
 80068de:	bf00      	nop
 80068e0:	20400001 	.word	0x20400001

080068e4 <_fflush_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	690b      	ldr	r3, [r1, #16]
 80068e8:	4605      	mov	r5, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	b913      	cbnz	r3, 80068f4 <_fflush_r+0x10>
 80068ee:	2500      	movs	r5, #0
 80068f0:	4628      	mov	r0, r5
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	b118      	cbz	r0, 80068fe <_fflush_r+0x1a>
 80068f6:	6983      	ldr	r3, [r0, #24]
 80068f8:	b90b      	cbnz	r3, 80068fe <_fflush_r+0x1a>
 80068fa:	f000 f887 	bl	8006a0c <__sinit>
 80068fe:	4b14      	ldr	r3, [pc, #80]	; (8006950 <_fflush_r+0x6c>)
 8006900:	429c      	cmp	r4, r3
 8006902:	d11b      	bne.n	800693c <_fflush_r+0x58>
 8006904:	686c      	ldr	r4, [r5, #4]
 8006906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0ef      	beq.n	80068ee <_fflush_r+0xa>
 800690e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006910:	07d0      	lsls	r0, r2, #31
 8006912:	d404      	bmi.n	800691e <_fflush_r+0x3a>
 8006914:	0599      	lsls	r1, r3, #22
 8006916:	d402      	bmi.n	800691e <_fflush_r+0x3a>
 8006918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800691a:	f000 f915 	bl	8006b48 <__retarget_lock_acquire_recursive>
 800691e:	4628      	mov	r0, r5
 8006920:	4621      	mov	r1, r4
 8006922:	f7ff ff5d 	bl	80067e0 <__sflush_r>
 8006926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006928:	4605      	mov	r5, r0
 800692a:	07da      	lsls	r2, r3, #31
 800692c:	d4e0      	bmi.n	80068f0 <_fflush_r+0xc>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	059b      	lsls	r3, r3, #22
 8006932:	d4dd      	bmi.n	80068f0 <_fflush_r+0xc>
 8006934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006936:	f000 f908 	bl	8006b4a <__retarget_lock_release_recursive>
 800693a:	e7d9      	b.n	80068f0 <_fflush_r+0xc>
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <_fflush_r+0x70>)
 800693e:	429c      	cmp	r4, r3
 8006940:	d101      	bne.n	8006946 <_fflush_r+0x62>
 8006942:	68ac      	ldr	r4, [r5, #8]
 8006944:	e7df      	b.n	8006906 <_fflush_r+0x22>
 8006946:	4b04      	ldr	r3, [pc, #16]	; (8006958 <_fflush_r+0x74>)
 8006948:	429c      	cmp	r4, r3
 800694a:	bf08      	it	eq
 800694c:	68ec      	ldreq	r4, [r5, #12]
 800694e:	e7da      	b.n	8006906 <_fflush_r+0x22>
 8006950:	080070c8 	.word	0x080070c8
 8006954:	080070e8 	.word	0x080070e8
 8006958:	080070a8 	.word	0x080070a8

0800695c <std>:
 800695c:	2300      	movs	r3, #0
 800695e:	b510      	push	{r4, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	e9c0 3300 	strd	r3, r3, [r0]
 8006966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800696a:	6083      	str	r3, [r0, #8]
 800696c:	8181      	strh	r1, [r0, #12]
 800696e:	6643      	str	r3, [r0, #100]	; 0x64
 8006970:	81c2      	strh	r2, [r0, #14]
 8006972:	6183      	str	r3, [r0, #24]
 8006974:	4619      	mov	r1, r3
 8006976:	2208      	movs	r2, #8
 8006978:	305c      	adds	r0, #92	; 0x5c
 800697a:	f7ff f8ff 	bl	8005b7c <memset>
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <std+0x38>)
 8006980:	6224      	str	r4, [r4, #32]
 8006982:	6263      	str	r3, [r4, #36]	; 0x24
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <std+0x3c>)
 8006986:	62a3      	str	r3, [r4, #40]	; 0x28
 8006988:	4b04      	ldr	r3, [pc, #16]	; (800699c <std+0x40>)
 800698a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800698c:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <std+0x44>)
 800698e:	6323      	str	r3, [r4, #48]	; 0x30
 8006990:	bd10      	pop	{r4, pc}
 8006992:	bf00      	nop
 8006994:	08006cd5 	.word	0x08006cd5
 8006998:	08006cf7 	.word	0x08006cf7
 800699c:	08006d2f 	.word	0x08006d2f
 80069a0:	08006d53 	.word	0x08006d53

080069a4 <_cleanup_r>:
 80069a4:	4901      	ldr	r1, [pc, #4]	; (80069ac <_cleanup_r+0x8>)
 80069a6:	f000 b8af 	b.w	8006b08 <_fwalk_reent>
 80069aa:	bf00      	nop
 80069ac:	080068e5 	.word	0x080068e5

080069b0 <__sfmoreglue>:
 80069b0:	2268      	movs	r2, #104	; 0x68
 80069b2:	b570      	push	{r4, r5, r6, lr}
 80069b4:	1e4d      	subs	r5, r1, #1
 80069b6:	4355      	muls	r5, r2
 80069b8:	460e      	mov	r6, r1
 80069ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069be:	f7ff fad5 	bl	8005f6c <_malloc_r>
 80069c2:	4604      	mov	r4, r0
 80069c4:	b140      	cbz	r0, 80069d8 <__sfmoreglue+0x28>
 80069c6:	2100      	movs	r1, #0
 80069c8:	e9c0 1600 	strd	r1, r6, [r0]
 80069cc:	300c      	adds	r0, #12
 80069ce:	60a0      	str	r0, [r4, #8]
 80069d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069d4:	f7ff f8d2 	bl	8005b7c <memset>
 80069d8:	4620      	mov	r0, r4
 80069da:	bd70      	pop	{r4, r5, r6, pc}

080069dc <__sfp_lock_acquire>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__sfp_lock_acquire+0x8>)
 80069de:	f000 b8b3 	b.w	8006b48 <__retarget_lock_acquire_recursive>
 80069e2:	bf00      	nop
 80069e4:	20000b95 	.word	0x20000b95

080069e8 <__sfp_lock_release>:
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <__sfp_lock_release+0x8>)
 80069ea:	f000 b8ae 	b.w	8006b4a <__retarget_lock_release_recursive>
 80069ee:	bf00      	nop
 80069f0:	20000b95 	.word	0x20000b95

080069f4 <__sinit_lock_acquire>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__sinit_lock_acquire+0x8>)
 80069f6:	f000 b8a7 	b.w	8006b48 <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	20000b96 	.word	0x20000b96

08006a00 <__sinit_lock_release>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__sinit_lock_release+0x8>)
 8006a02:	f000 b8a2 	b.w	8006b4a <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	20000b96 	.word	0x20000b96

08006a0c <__sinit>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4604      	mov	r4, r0
 8006a10:	f7ff fff0 	bl	80069f4 <__sinit_lock_acquire>
 8006a14:	69a3      	ldr	r3, [r4, #24]
 8006a16:	b11b      	cbz	r3, 8006a20 <__sinit+0x14>
 8006a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1c:	f7ff bff0 	b.w	8006a00 <__sinit_lock_release>
 8006a20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a24:	6523      	str	r3, [r4, #80]	; 0x50
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <__sinit+0x68>)
 8006a28:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <__sinit+0x6c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	bf08      	it	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	4620      	mov	r0, r4
 8006a36:	bf08      	it	eq
 8006a38:	61a3      	streq	r3, [r4, #24]
 8006a3a:	f000 f81f 	bl	8006a7c <__sfp>
 8006a3e:	6060      	str	r0, [r4, #4]
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 f81b 	bl	8006a7c <__sfp>
 8006a46:	60a0      	str	r0, [r4, #8]
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 f817 	bl	8006a7c <__sfp>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2104      	movs	r1, #4
 8006a52:	60e0      	str	r0, [r4, #12]
 8006a54:	6860      	ldr	r0, [r4, #4]
 8006a56:	f7ff ff81 	bl	800695c <std>
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	2109      	movs	r1, #9
 8006a5e:	68a0      	ldr	r0, [r4, #8]
 8006a60:	f7ff ff7c 	bl	800695c <std>
 8006a64:	2202      	movs	r2, #2
 8006a66:	2112      	movs	r1, #18
 8006a68:	68e0      	ldr	r0, [r4, #12]
 8006a6a:	f7ff ff77 	bl	800695c <std>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	61a3      	str	r3, [r4, #24]
 8006a72:	e7d1      	b.n	8006a18 <__sinit+0xc>
 8006a74:	08006ec0 	.word	0x08006ec0
 8006a78:	080069a5 	.word	0x080069a5

08006a7c <__sfp>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	4607      	mov	r7, r0
 8006a80:	f7ff ffac 	bl	80069dc <__sfp_lock_acquire>
 8006a84:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <__sfp+0x84>)
 8006a86:	681e      	ldr	r6, [r3, #0]
 8006a88:	69b3      	ldr	r3, [r6, #24]
 8006a8a:	b913      	cbnz	r3, 8006a92 <__sfp+0x16>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f7ff ffbd 	bl	8006a0c <__sinit>
 8006a92:	3648      	adds	r6, #72	; 0x48
 8006a94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	d503      	bpl.n	8006aa4 <__sfp+0x28>
 8006a9c:	6833      	ldr	r3, [r6, #0]
 8006a9e:	b30b      	cbz	r3, 8006ae4 <__sfp+0x68>
 8006aa0:	6836      	ldr	r6, [r6, #0]
 8006aa2:	e7f7      	b.n	8006a94 <__sfp+0x18>
 8006aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006aa8:	b9d5      	cbnz	r5, 8006ae0 <__sfp+0x64>
 8006aaa:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <__sfp+0x88>)
 8006aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ab0:	60e3      	str	r3, [r4, #12]
 8006ab2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ab4:	f000 f847 	bl	8006b46 <__retarget_lock_init_recursive>
 8006ab8:	f7ff ff96 	bl	80069e8 <__sfp_lock_release>
 8006abc:	2208      	movs	r2, #8
 8006abe:	4629      	mov	r1, r5
 8006ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ac8:	6025      	str	r5, [r4, #0]
 8006aca:	61a5      	str	r5, [r4, #24]
 8006acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ad0:	f7ff f854 	bl	8005b7c <memset>
 8006ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006adc:	4620      	mov	r0, r4
 8006ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae0:	3468      	adds	r4, #104	; 0x68
 8006ae2:	e7d9      	b.n	8006a98 <__sfp+0x1c>
 8006ae4:	2104      	movs	r1, #4
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f7ff ff62 	bl	80069b0 <__sfmoreglue>
 8006aec:	4604      	mov	r4, r0
 8006aee:	6030      	str	r0, [r6, #0]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1d5      	bne.n	8006aa0 <__sfp+0x24>
 8006af4:	f7ff ff78 	bl	80069e8 <__sfp_lock_release>
 8006af8:	230c      	movs	r3, #12
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	e7ee      	b.n	8006adc <__sfp+0x60>
 8006afe:	bf00      	nop
 8006b00:	08006ec0 	.word	0x08006ec0
 8006b04:	ffff0001 	.word	0xffff0001

08006b08 <_fwalk_reent>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	4688      	mov	r8, r1
 8006b10:	2700      	movs	r7, #0
 8006b12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b1e:	d505      	bpl.n	8006b2c <_fwalk_reent+0x24>
 8006b20:	6824      	ldr	r4, [r4, #0]
 8006b22:	2c00      	cmp	r4, #0
 8006b24:	d1f7      	bne.n	8006b16 <_fwalk_reent+0xe>
 8006b26:	4638      	mov	r0, r7
 8006b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b2c:	89ab      	ldrh	r3, [r5, #12]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d907      	bls.n	8006b42 <_fwalk_reent+0x3a>
 8006b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b36:	3301      	adds	r3, #1
 8006b38:	d003      	beq.n	8006b42 <_fwalk_reent+0x3a>
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	47c0      	blx	r8
 8006b40:	4307      	orrs	r7, r0
 8006b42:	3568      	adds	r5, #104	; 0x68
 8006b44:	e7e9      	b.n	8006b1a <_fwalk_reent+0x12>

08006b46 <__retarget_lock_init_recursive>:
 8006b46:	4770      	bx	lr

08006b48 <__retarget_lock_acquire_recursive>:
 8006b48:	4770      	bx	lr

08006b4a <__retarget_lock_release_recursive>:
 8006b4a:	4770      	bx	lr

08006b4c <__swhatbuf_r>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	460e      	mov	r6, r1
 8006b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b54:	4614      	mov	r4, r2
 8006b56:	2900      	cmp	r1, #0
 8006b58:	461d      	mov	r5, r3
 8006b5a:	b096      	sub	sp, #88	; 0x58
 8006b5c:	da08      	bge.n	8006b70 <__swhatbuf_r+0x24>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	061a      	lsls	r2, r3, #24
 8006b68:	d410      	bmi.n	8006b8c <__swhatbuf_r+0x40>
 8006b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b6e:	e00e      	b.n	8006b8e <__swhatbuf_r+0x42>
 8006b70:	466a      	mov	r2, sp
 8006b72:	f000 f915 	bl	8006da0 <_fstat_r>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	dbf1      	blt.n	8006b5e <__swhatbuf_r+0x12>
 8006b7a:	9a01      	ldr	r2, [sp, #4]
 8006b7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b84:	425a      	negs	r2, r3
 8006b86:	415a      	adcs	r2, r3
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	e7ee      	b.n	8006b6a <__swhatbuf_r+0x1e>
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	2000      	movs	r0, #0
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	b016      	add	sp, #88	; 0x58
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b98 <__smakebuf_r>:
 8006b98:	898b      	ldrh	r3, [r1, #12]
 8006b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b9c:	079d      	lsls	r5, r3, #30
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	d507      	bpl.n	8006bb4 <__smakebuf_r+0x1c>
 8006ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	2301      	movs	r3, #1
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	b002      	add	sp, #8
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	466a      	mov	r2, sp
 8006bb6:	ab01      	add	r3, sp, #4
 8006bb8:	f7ff ffc8 	bl	8006b4c <__swhatbuf_r>
 8006bbc:	9900      	ldr	r1, [sp, #0]
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff f9d3 	bl	8005f6c <_malloc_r>
 8006bc6:	b948      	cbnz	r0, 8006bdc <__smakebuf_r+0x44>
 8006bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bcc:	059a      	lsls	r2, r3, #22
 8006bce:	d4ef      	bmi.n	8006bb0 <__smakebuf_r+0x18>
 8006bd0:	f023 0303 	bic.w	r3, r3, #3
 8006bd4:	f043 0302 	orr.w	r3, r3, #2
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	e7e3      	b.n	8006ba4 <__smakebuf_r+0xc>
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <__smakebuf_r+0x7c>)
 8006bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	6020      	str	r0, [r4, #0]
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	9b00      	ldr	r3, [sp, #0]
 8006bec:	6120      	str	r0, [r4, #16]
 8006bee:	6163      	str	r3, [r4, #20]
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	b15b      	cbz	r3, 8006c0c <__smakebuf_r+0x74>
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bfa:	f000 f8e3 	bl	8006dc4 <_isatty_r>
 8006bfe:	b128      	cbz	r0, 8006c0c <__smakebuf_r+0x74>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	89a0      	ldrh	r0, [r4, #12]
 8006c0e:	4305      	orrs	r5, r0
 8006c10:	81a5      	strh	r5, [r4, #12]
 8006c12:	e7cd      	b.n	8006bb0 <__smakebuf_r+0x18>
 8006c14:	080069a5 	.word	0x080069a5

08006c18 <memchr>:
 8006c18:	4603      	mov	r3, r0
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	b2c9      	uxtb	r1, r1
 8006c1e:	4402      	add	r2, r0
 8006c20:	4293      	cmp	r3, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	d101      	bne.n	8006c2a <memchr+0x12>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e003      	b.n	8006c32 <memchr+0x1a>
 8006c2a:	7804      	ldrb	r4, [r0, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	428c      	cmp	r4, r1
 8006c30:	d1f6      	bne.n	8006c20 <memchr+0x8>
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <__malloc_lock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__malloc_lock+0x8>)
 8006c36:	f7ff bf87 	b.w	8006b48 <__retarget_lock_acquire_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20000b94 	.word	0x20000b94

08006c40 <__malloc_unlock>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__malloc_unlock+0x8>)
 8006c42:	f7ff bf82 	b.w	8006b4a <__retarget_lock_release_recursive>
 8006c46:	bf00      	nop
 8006c48:	20000b94 	.word	0x20000b94

08006c4c <_raise_r>:
 8006c4c:	291f      	cmp	r1, #31
 8006c4e:	b538      	push	{r3, r4, r5, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	d904      	bls.n	8006c60 <_raise_r+0x14>
 8006c56:	2316      	movs	r3, #22
 8006c58:	6003      	str	r3, [r0, #0]
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c62:	b112      	cbz	r2, 8006c6a <_raise_r+0x1e>
 8006c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c68:	b94b      	cbnz	r3, 8006c7e <_raise_r+0x32>
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 f830 	bl	8006cd0 <_getpid_r>
 8006c70:	462a      	mov	r2, r5
 8006c72:	4601      	mov	r1, r0
 8006c74:	4620      	mov	r0, r4
 8006c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c7a:	f000 b817 	b.w	8006cac <_kill_r>
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d00a      	beq.n	8006c98 <_raise_r+0x4c>
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	d103      	bne.n	8006c8e <_raise_r+0x42>
 8006c86:	2316      	movs	r3, #22
 8006c88:	6003      	str	r3, [r0, #0]
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e7e7      	b.n	8006c5e <_raise_r+0x12>
 8006c8e:	2400      	movs	r4, #0
 8006c90:	4628      	mov	r0, r5
 8006c92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c96:	4798      	blx	r3
 8006c98:	2000      	movs	r0, #0
 8006c9a:	e7e0      	b.n	8006c5e <_raise_r+0x12>

08006c9c <raise>:
 8006c9c:	4b02      	ldr	r3, [pc, #8]	; (8006ca8 <raise+0xc>)
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	f7ff bfd3 	b.w	8006c4c <_raise_r>
 8006ca6:	bf00      	nop
 8006ca8:	20000418 	.word	0x20000418

08006cac <_kill_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_kill_r+0x20>)
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	f7fe fe4a 	bl	8005952 <_kill>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d102      	bne.n	8006cc8 <_kill_r+0x1c>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	b103      	cbz	r3, 8006cc8 <_kill_r+0x1c>
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000b98 	.word	0x20000b98

08006cd0 <_getpid_r>:
 8006cd0:	f7fe be38 	b.w	8005944 <_getpid>

08006cd4 <__sread>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cdc:	f000 f894 	bl	8006e08 <_read_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	bfab      	itete	ge
 8006ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce8:	181b      	addge	r3, r3, r0
 8006cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cee:	bfac      	ite	ge
 8006cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cf2:	81a3      	strhlt	r3, [r4, #12]
 8006cf4:	bd10      	pop	{r4, pc}

08006cf6 <__swrite>:
 8006cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	4605      	mov	r5, r0
 8006d00:	05db      	lsls	r3, r3, #23
 8006d02:	460c      	mov	r4, r1
 8006d04:	4616      	mov	r6, r2
 8006d06:	d505      	bpl.n	8006d14 <__swrite+0x1e>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d10:	f000 f868 	bl	8006de4 <_lseek_r>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	4632      	mov	r2, r6
 8006d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	4628      	mov	r0, r5
 8006d20:	463b      	mov	r3, r7
 8006d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	f000 b817 	b.w	8006d5c <_write_r>

08006d2e <__sseek>:
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 f855 	bl	8006de4 <_lseek_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	bf15      	itete	ne
 8006d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d4a:	81a3      	strheq	r3, [r4, #12]
 8006d4c:	bf18      	it	ne
 8006d4e:	81a3      	strhne	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__sclose>:
 8006d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d56:	f000 b813 	b.w	8006d80 <_close_r>
	...

08006d5c <_write_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	2200      	movs	r2, #0
 8006d66:	4d05      	ldr	r5, [pc, #20]	; (8006d7c <_write_r+0x20>)
 8006d68:	602a      	str	r2, [r5, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f7fe fe28 	bl	80059c0 <_write>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_write_r+0x1e>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_write_r+0x1e>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000b98 	.word	0x20000b98

08006d80 <_close_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	2300      	movs	r3, #0
 8006d84:	4d05      	ldr	r5, [pc, #20]	; (8006d9c <_close_r+0x1c>)
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	f7fe fe34 	bl	80059f8 <_close>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_close_r+0x1a>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_close_r+0x1a>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20000b98 	.word	0x20000b98

08006da0 <_fstat_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	2300      	movs	r3, #0
 8006da4:	4d06      	ldr	r5, [pc, #24]	; (8006dc0 <_fstat_r+0x20>)
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	602b      	str	r3, [r5, #0]
 8006dae:	f7fe fe2e 	bl	8005a0e <_fstat>
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	d102      	bne.n	8006dbc <_fstat_r+0x1c>
 8006db6:	682b      	ldr	r3, [r5, #0]
 8006db8:	b103      	cbz	r3, 8006dbc <_fstat_r+0x1c>
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	bd38      	pop	{r3, r4, r5, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000b98 	.word	0x20000b98

08006dc4 <_isatty_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4d05      	ldr	r5, [pc, #20]	; (8006de0 <_isatty_r+0x1c>)
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	f7fe fe2c 	bl	8005a2c <_isatty>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_isatty_r+0x1a>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_isatty_r+0x1a>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000b98 	.word	0x20000b98

08006de4 <_lseek_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	2200      	movs	r2, #0
 8006dee:	4d05      	ldr	r5, [pc, #20]	; (8006e04 <_lseek_r+0x20>)
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f7fe fe24 	bl	8005a40 <_lseek>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_lseek_r+0x1e>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_lseek_r+0x1e>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	20000b98 	.word	0x20000b98

08006e08 <_read_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	2200      	movs	r2, #0
 8006e12:	4d05      	ldr	r5, [pc, #20]	; (8006e28 <_read_r+0x20>)
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f7fe fdb5 	bl	8005986 <_read>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_read_r+0x1e>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_read_r+0x1e>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20000b98 	.word	0x20000b98

08006e2c <_init>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr

08006e38 <_fini>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr
