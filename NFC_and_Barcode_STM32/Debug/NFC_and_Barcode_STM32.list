
NFC_and_Barcode_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800911c  0800911c  00020508  2**0
                  CONTENTS
  4 .ARM          00000000  0800911c  0800911c  00020508  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800911c  0800911c  00020508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000508  20000000  08009124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  20000508  0800962c  00020508  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec8  0800962c  00020ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc64  00000000  00000000  00020531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298d  00000000  00000000  0002e195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00030b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010be3  00000000  00000000  00032618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e4  00000000  00000000  000431fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004cce0  00000000  00000000  000517df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009e4bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f8  00000000  00000000  0009e510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000508 	.word	0x20000508
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e40 	.word	0x08008e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000050c 	.word	0x2000050c
 8000148:	08008e40 	.word	0x08008e40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SystemInit>:
    *         SystemCoreClock variable.
    * @note   This function should be used only after reset.
    * @param  None
    * @retval None
    */
void SystemInit() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	SetSysClock();
 8000160:	f000 f802 	bl	8000168 <SetSysClock>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800016c:	f000 f802 	bl	8000174 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}

08000174 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	2300      	movs	r3, #0
 8000180:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000182:	4b3a      	ldr	r3, [pc, #232]	; (800026c <SetSysClockTo72+0xf8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a39      	ldr	r2, [pc, #228]	; (800026c <SetSysClockTo72+0xf8>)
 8000188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800018c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800018e:	4b37      	ldr	r3, [pc, #220]	; (800026c <SetSysClockTo72+0xf8>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000196:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <SetSysClockTo72+0x38>
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001aa:	d1f0      	bne.n	800018e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001ac:	4b2f      	ldr	r3, [pc, #188]	; (800026c <SetSysClockTo72+0xf8>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80001b8:	2301      	movs	r3, #1
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	e001      	b.n	80001c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d14b      	bne.n	8000260 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001c8:	4b29      	ldr	r3, [pc, #164]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a28      	ldr	r2, [pc, #160]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001d4:	4b26      	ldr	r3, [pc, #152]	; (8000270 <SetSysClockTo72+0xfc>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <SetSysClockTo72+0xfc>)
 80001da:	f023 0303 	bic.w	r3, r3, #3
 80001de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a22      	ldr	r2, [pc, #136]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001ec:	4b1f      	ldr	r3, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f6:	4a1d      	ldr	r2, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <SetSysClockTo72+0xf8>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <SetSysClockTo72+0xf8>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <SetSysClockTo72+0xf8>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <SetSysClockTo72+0xf8>)
 800020e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000212:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <SetSysClockTo72+0xf8>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <SetSysClockTo72+0xf8>)
 800021a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800021e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <SetSysClockTo72+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <SetSysClockTo72+0xf8>)
 8000226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800022c:	bf00      	nop
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <SetSysClockTo72+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SetSysClockTo72+0xf8>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <SetSysClockTo72+0xf8>)
 8000240:	f023 0303 	bic.w	r3, r3, #3
 8000244:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <SetSysClockTo72+0xf8>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <SetSysClockTo72+0xf8>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000252:	bf00      	nop
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SetSysClockTo72+0xf8>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	f003 030c 	and.w	r3, r3, #12
 800025c:	2b08      	cmp	r3, #8
 800025e:	d1f9      	bne.n	8000254 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000
 8000270:	40022000 	.word	0x40022000

08000274 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da0b      	bge.n	80002a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <NVIC_SetPriority+0x4c>)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 030f 	and.w	r3, r3, #15
 8000294:	3b04      	subs	r3, #4
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800029e:	e009      	b.n	80002b4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <NVIC_SetPriority+0x50>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	0112      	lsls	r2, r2, #4
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002d6:	d301      	bcc.n	80002dc <SysTick_Config+0x14>
 80002d8:	2301      	movs	r3, #1
 80002da:	e011      	b.n	8000300 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <SysTick_Config+0x40>)
 80002e4:	3b01      	subs	r3, #1
 80002e6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80002e8:	210f      	movs	r1, #15
 80002ea:	f04f 30ff 	mov.w	r0, #4294967295
 80002ee:	f7ff ffc1 	bl	8000274 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SysTick_Config+0x40>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SysTick_Config+0x40>)
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e010 	.word	0xe000e010

0800030c <LCD_PN532_CreateRunInfoString>:

extern char fl_bar_buff[16];
extern char nfc_uid_arr[10];


void LCD_PN532_CreateRunInfoString(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	strcpy( s_pn_info, s_pn_fchip);	//копирую первую заготовку в пустую строку
 8000310:	4912      	ldr	r1, [pc, #72]	; (800035c <LCD_PN532_CreateRunInfoString+0x50>)
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000314:	f007 fc53 	bl	8007bbe <strcpy>
	strcat(s_pn_info, s_pn_nchip);	//копирую в заготовку пробельную строку
 8000318:	4912      	ldr	r1, [pc, #72]	; (8000364 <LCD_PN532_CreateRunInfoString+0x58>)
 800031a:	4811      	ldr	r0, [pc, #68]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800031c:	f007 fc40 	bl	8007ba0 <strcat>
	strcat(s_pn_info,s_space );
 8000320:	4911      	ldr	r1, [pc, #68]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000324:	f007 fc3c 	bl	8007ba0 <strcat>
	strcat(s_pn_info,s_pn_wfchip );
 8000328:	4910      	ldr	r1, [pc, #64]	; (800036c <LCD_PN532_CreateRunInfoString+0x60>)
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800032c:	f007 fc38 	bl	8007ba0 <strcat>
	strcat(s_pn_info, s_pn_fw1nchip);
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <LCD_PN532_CreateRunInfoString+0x64>)
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000334:	f007 fc34 	bl	8007ba0 <strcat>
	strcat(s_pn_info,s_pn_fw2nchip );
 8000338:	490e      	ldr	r1, [pc, #56]	; (8000374 <LCD_PN532_CreateRunInfoString+0x68>)
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800033c:	f007 fc30 	bl	8007ba0 <strcat>
	strcat(s_pn_info,s_space );
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000344:	f007 fc2c 	bl	8007ba0 <strcat>
	strcat(s_pn_info,s_pn_suppchip);
 8000348:	490b      	ldr	r1, [pc, #44]	; (8000378 <LCD_PN532_CreateRunInfoString+0x6c>)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800034c:	f007 fc28 	bl	8007ba0 <strcat>
	strcat(s_pn_info,s_pn_suchip);
 8000350:	490a      	ldr	r1, [pc, #40]	; (800037c <LCD_PN532_CreateRunInfoString+0x70>)
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000354:	f007 fc24 	bl	8007ba0 <strcat>

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200001ec 	.word	0x200001ec
 8000360:	20000788 	.word	0x20000788
 8000364:	200001dc 	.word	0x200001dc
 8000368:	200001d0 	.word	0x200001d0
 800036c:	200001fc 	.word	0x200001fc
 8000370:	200001e0 	.word	0x200001e0
 8000374:	200001e4 	.word	0x200001e4
 8000378:	2000020c 	.word	0x2000020c
 800037c:	200001e8 	.word	0x200001e8

08000380 <LCD_BAR_CreateRunInfoString>:


//Сборка сборка бегущей строки с версией ПО сканера штрих-кодов модуля для LCD
void LCD_BAR_CreateRunInfoString(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
//				s_bar_info++;
//			}
//		}
//	}

	char *ptr_bar_ver_info=strtok(ScanerVersion,"\r\n");
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LCD_BAR_CreateRunInfoString+0x40>)
 800038a:	f007 fc77 	bl	8007c7c <strtok>
 800038e:	6078      	str	r0, [r7, #4]
	strcpy(s_bar_info,ptr_bar_ver_info);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 8000394:	f007 fc13 	bl	8007bbe <strcpy>
	strcat(s_bar_info,s_space);
 8000398:	490b      	ldr	r1, [pc, #44]	; (80003c8 <LCD_BAR_CreateRunInfoString+0x48>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 800039c:	f007 fc00 	bl	8007ba0 <strcat>
	ptr_bar_ver_info=strtok(NULL,"\r\n");
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 80003a2:	2000      	movs	r0, #0
 80003a4:	f007 fc6a 	bl	8007c7c <strtok>
 80003a8:	6078      	str	r0, [r7, #4]
	strcat(s_bar_info,ptr_bar_ver_info);
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 80003ae:	f007 fbf7 	bl	8007ba0 <strcat>

//	char *s_bar_info=strcat(s_bar_ver_info,s_bar_site_info);
//	strcpy(s_bar_info,s_bar_ver_info);


}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	08008e58 	.word	0x08008e58
 80003c0:	20000dd8 	.word	0x20000dd8
 80003c4:	20000808 	.word	0x20000808
 80003c8:	200001d0 	.word	0x200001d0

080003cc <PN532_Write_Data>:


uint8_t PN532_Write_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b092      	sub	sp, #72	; 0x48
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	72fb      	strb	r3, [r7, #11]
 80003da:	4613      	mov	r3, r2
 80003dc:	72bb      	strb	r3, [r7, #10]
//	uint8_t success=0;	// Flag to check if there was an error with the PN532
	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 80003de:	4a51      	ldr	r2, [pc, #324]	; (8000524 <PN532_Write_Data+0x158>)
 80003e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e8:	6018      	str	r0, [r3, #0]
 80003ea:	3304      	adds	r3, #4
 80003ec:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

	bool authenticated = FALSE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t blockBuffer[16];                  // Buffer to store block contents
	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 80003f4:	4a4c      	ldr	r2, [pc, #304]	; (8000528 <PN532_Write_Data+0x15c>)
 80003f6:	f107 0320 	add.w	r3, r7, #32
 80003fa:	6812      	ldr	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	8019      	strh	r1, [r3, #0]
 8000400:	3302      	adds	r3, #2
 8000402:	0c12      	lsrs	r2, r2, #16
 8000404:	701a      	strb	r2, [r3, #0]
	//uint8_t idx = 0;
	uint8_t numOfSector = 16;                 // Assume Mifare Classic 1K for now (16 4-block sectors)
 8000406:	2310      	movs	r3, #16
 8000408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t i=0;
 800040c:	2300      	movs	r3, #0
 800040e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    uint8_t RdWrDataBlock[16];


	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8000412:	7af9      	ldrb	r1, [r7, #11]
 8000414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2301      	movs	r3, #1
 800041c:	2200      	movs	r2, #0
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f004 ff70 	bl	8005304 <PN532_mifareclassic_AuthenticateBlock>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d105      	bne.n	8000436 <PN532_Write_Data+0x6a>
	        {
	          return res_excep=1;	//выход из-за ошибки аутентификации блока
 800042a:	2301      	movs	r3, #1
 800042c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000430:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000434:	e072      	b.n	800051c <PN532_Write_Data+0x150>
	        }

	        res_excep=PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f004 ffd7 	bl	80053f0 <PN532_mifareclassic_ReadDataBlock>
 8000442:	4603      	mov	r3, r0
 8000444:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	        if (!(PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock)))
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	f004 ffce 	bl	80053f0 <PN532_mifareclassic_ReadDataBlock>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d105      	bne.n	8000466 <PN532_Write_Data+0x9a>
	        {
	          return res_excep=2;	//выход из-за ошибки чтения блока
 800045a:	2302      	movs	r3, #2
 800045c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000460:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000464:	e05a      	b.n	800051c <PN532_Write_Data+0x150>
	        }
	        else{

	    		  for(i=0;i<4;i++){
 8000466:	2300      	movs	r3, #0
 8000468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800046c:	e00f      	b.n	800048e <PN532_Write_Data+0xc2>
	    			  RdWrDataBlock[i]=data[i];
 800046e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	441a      	add	r2, r3
 8000476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	3340      	adds	r3, #64	; 0x40
 800047e:	443b      	add	r3, r7
 8000480:	f803 2c30 	strb.w	r2, [r3, #-48]
	    		  for(i=0;i<4;i++){
 8000484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000488:	3301      	adds	r3, #1
 800048a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800048e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000492:	2b03      	cmp	r3, #3
 8000494:	d9eb      	bls.n	800046e <PN532_Write_Data+0xa2>
	    		}



	    		  if(!(PN532_mifareclassic_WriteDataBlock(1,RdWrDataBlock))){
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	2001      	movs	r0, #1
 800049e:	f004 ffe3 	bl	8005468 <PN532_mifareclassic_WriteDataBlock>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d105      	bne.n	80004b4 <PN532_Write_Data+0xe8>
	    			  return res_excep=3;	//выход из-за ошибки запииси блока
 80004a8:	2303      	movs	r3, #3
 80004aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80004ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80004b2:	e033      	b.n	800051c <PN532_Write_Data+0x150>
	    		  }

	        // Step 3: Reset both keys to 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
	        memcpy(blockBuffer, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80004bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c0:	6018      	str	r0, [r3, #0]
 80004c2:	3304      	adds	r3, #4
 80004c4:	8019      	strh	r1, [r3, #0]
	        memcpy(blockBuffer + 6, blankAccessBits, sizeof(blankAccessBits));
 80004c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ca:	3306      	adds	r3, #6
 80004cc:	461a      	mov	r2, r3
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	8819      	ldrh	r1, [r3, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	8011      	strh	r1, [r2, #0]
 80004d8:	7093      	strb	r3, [r2, #2]
	        blockBuffer[9] = 0x69;
 80004da:	2369      	movs	r3, #105	; 0x69
 80004dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	        memcpy(blockBuffer + 10, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e4:	330a      	adds	r3, #10
 80004e6:	461a      	mov	r2, r3
 80004e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	6010      	str	r0, [r2, #0]
 80004f0:	889b      	ldrh	r3, [r3, #4]
 80004f2:	8093      	strh	r3, [r2, #4]

	         //Step 4: Write the trailer block
	        if (!(PN532_mifareclassic_WriteDataBlock(3, blockBuffer)))
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4619      	mov	r1, r3
 80004fa:	2003      	movs	r0, #3
 80004fc:	f004 ffb4 	bl	8005468 <PN532_mifareclassic_WriteDataBlock>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d105      	bne.n	8000512 <PN532_Write_Data+0x146>
	        {
	          return res_excep=4;	//выход из-за ошибки записи ключа блока
 8000506:	2304      	movs	r3, #4
 8000508:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800050c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000510:	e004      	b.n	800051c <PN532_Write_Data+0x150>
	        }else return res_excep=0;
 8000512:	2300      	movs	r3, #0
 8000514:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000518:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c

	        }

}
 800051c:	4618      	mov	r0, r3
 800051e:	3740      	adds	r7, #64	; 0x40
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	08008e5c 	.word	0x08008e5c
 8000528:	08008e64 	.word	0x08008e64

0800052c <main>:





int main(void){
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b09b      	sub	sp, #108	; 0x6c
 8000530:	af00      	add	r7, sp, #0

	g_sSum[SUM_STR_LEN + 1] = '\0';
 8000532:	4ba5      	ldr	r3, [pc, #660]	; (80007c8 <main+0x29c>)
 8000534:	2200      	movs	r2, #0
 8000536:	721a      	strb	r2, [r3, #8]


	rtc_cal rtc_time;
	RTC_INIT();
 8000538:	f005 f820 	bl	800557c <RTC_INIT>

	RCC_PLLCmd(DISABLE);
 800053c:	2000      	movs	r0, #0
 800053e:	f006 fb59 	bl	8006bf4 <RCC_PLLCmd>
		RCC_HSEConfig(RCC_HSE_ON);
 8000542:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000546:	f006 fb09 	bl	8006b5c <RCC_HSEConfig>
		RCC_ClockSecuritySystemCmd(ENABLE);
 800054a:	2001      	movs	r0, #1
 800054c:	f006 fc70 	bl	8006e30 <RCC_ClockSecuritySystemCmd>
	    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000550:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000554:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000558:	f006 fb2e 	bl	8006bb8 <RCC_PLLConfig>
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800055c:	2002      	movs	r0, #2
 800055e:	f006 fb59 	bl	8006c14 <RCC_SYSCLKConfig>

		uint32_t tmpreg = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
		tmpreg=RCC->CFGR;
 8000566:	4b99      	ldr	r3, [pc, #612]	; (80007cc <main+0x2a0>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
		RCC->CFGR=tmpreg & 0xFFFFF0FF;
 800056c:	4a97      	ldr	r2, [pc, #604]	; (80007cc <main+0x2a0>)
 800056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000574:	6053      	str	r3, [r2, #4]
		//RCC->CFGR=tmpreg|0x00000400;//HCLK / 2 - значение по умолчанию? (36МГц)
		RCC->CFGR=tmpreg|0x00000500;//HCLK / 4
 8000576:	4a95      	ldr	r2, [pc, #596]	; (80007cc <main+0x2a0>)
 8000578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800057e:	6053      	str	r3, [r2, #4]

		RCC->CFGR|=RCC_CFGR_USBPRE;	//предделитель для usb
 8000580:	4b92      	ldr	r3, [pc, #584]	; (80007cc <main+0x2a0>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a91      	ldr	r2, [pc, #580]	; (80007cc <main+0x2a0>)
 8000586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058a:	6053      	str	r3, [r2, #4]

		//RCC->CFGR=tmpreg | 0x00000600;//HCLK / 8

	    RCC_PLLCmd(ENABLE);
 800058c:	2001      	movs	r0, #1
 800058e:	f006 fb31 	bl	8006bf4 <RCC_PLLCmd>

		/* SysTick end of count event each 1 ms */
		RCC_GetClocksFreq ( &RCC_Clocks );
 8000592:	488f      	ldr	r0, [pc, #572]	; (80007d0 <main+0x2a4>)
 8000594:	f006 fb5a 	bl	8006c4c <RCC_GetClocksFreq>
		SysTick_Config ( RCC_Clocks.HCLK_Frequency / 1000 );
 8000598:	4b8d      	ldr	r3, [pc, #564]	; (80007d0 <main+0x2a4>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a8d      	ldr	r2, [pc, #564]	; (80007d4 <main+0x2a8>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe8f 	bl	80002c8 <SysTick_Config>

		btnpress=0;
 80005aa:	4b8b      	ldr	r3, [pc, #556]	; (80007d8 <main+0x2ac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

		RTC_SET_COUNTER(timer);
 80005b0:	4b8a      	ldr	r3, [pc, #552]	; (80007dc <main+0x2b0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f005 f873 	bl	80056a0 <RTC_SET_COUNTER>


		 LCD_Init();
 80005ba:	f004 fa49 	bl	8004a50 <LCD_Init>
		BTN_Init();
 80005be:	f002 feef 	bl	80033a0 <BTN_Init>
		u8_btnstate=GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN );
 80005c2:	2101      	movs	r1, #1
 80005c4:	4886      	ldr	r0, [pc, #536]	; (80007e0 <main+0x2b4>)
 80005c6:	f006 f91f 	bl	8006808 <GPIO_ReadInputDataBit>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <main+0x2b8>)
 80005d0:	701a      	strb	r2, [r3, #0]
		previousState=u8_btnstate;
 80005d2:	4b84      	ldr	r3, [pc, #528]	; (80007e4 <main+0x2b8>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b84      	ldr	r3, [pc, #528]	; (80007e8 <main+0x2bc>)
 80005d8:	701a      	strb	r2, [r3, #0]
		 LED_Init();
 80005da:	f002 fec1 	bl	8003360 <LED_Init>

		 spi_gpio_init();
 80005de:	f003 fb6d 	bl	8003cbc <spi_gpio_init>

		   Usart2Init();
 80005e2:	f006 ffd1 	bl	8007588 <Usart2Init>
			SCAN_UsartInit();
 80005e6:	f007 f84f 	bl	8007688 <SCAN_UsartInit>
			PN532_SPIInit();
 80005ea:	f005 fcc9 	bl	8005f80 <PN532_SPIInit>
	//		SPI_FLASH_INIT();
	//		jedec_test = spiFlash_readJEDECDesc();



			nfc_cntcomand=0;
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <main+0x2c0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]


			statusDevice=ST_DEV_ALL_ERR;
 80005f4:	4b7e      	ldr	r3, [pc, #504]	; (80007f0 <main+0x2c4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]

				uint32_t buttonTick = GetTickCount();
 80005fa:	f003 f8ad 	bl	8003758 <GetTickCount>
 80005fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				uint32_t ledTick1 = GetTickCount();
 8000600:	f003 f8aa 	bl	8003758 <GetTickCount>
 8000604:	62b8      	str	r0, [r7, #40]	; 0x28
				uint32_t ledTick2 = ledTick1;
 8000606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000608:	627b      	str	r3, [r7, #36]	; 0x24

				uint32_t versiondata;
				uint32_t st;


				Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
 800060a:	487a      	ldr	r0, [pc, #488]	; (80007f4 <main+0x2c8>)
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	4619      	mov	r1, r3
 8000614:	4877      	ldr	r0, [pc, #476]	; (80007f4 <main+0x2c8>)
 8000616:	f007 f80f 	bl	8007638 <Usart2_SendData>
				Usart2_SendData(s_pc_scanner,strlen(s_pc_scanner));
 800061a:	4877      	ldr	r0, [pc, #476]	; (80007f8 <main+0x2cc>)
 800061c:	f7ff fd96 	bl	800014c <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	4619      	mov	r1, r3
 8000624:	4874      	ldr	r0, [pc, #464]	; (80007f8 <main+0x2cc>)
 8000626:	f007 f807 	bl	8007638 <Usart2_SendData>
				Usart2_SendData(s_pc_test,strlen(s_pc_test));
 800062a:	4874      	ldr	r0, [pc, #464]	; (80007fc <main+0x2d0>)
 800062c:	f7ff fd8e 	bl	800014c <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	4871      	ldr	r0, [pc, #452]	; (80007fc <main+0x2d0>)
 8000636:	f006 ffff 	bl	8007638 <Usart2_SendData>


			LCD_RunStringDevInfo ( s_lcd_hello,s_lcd_scanner,RUN_STR_DELAY_TST);
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4970      	ldr	r1, [pc, #448]	; (8000800 <main+0x2d4>)
 800063e:	4871      	ldr	r0, [pc, #452]	; (8000804 <main+0x2d8>)
 8000640:	f003 ffc8 	bl	80045d4 <LCD_RunStringDevInfo>


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000644:	bf00      	nop
 8000646:	4b70      	ldr	r3, [pc, #448]	; (8000808 <main+0x2dc>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d006      	beq.n	800065e <main+0x132>
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	486e      	ldr	r0, [pc, #440]	; (800080c <main+0x2e0>)
 8000654:	f006 fce6 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f3      	bne.n	8000646 <main+0x11a>
				SpiActive = 1;
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <main+0x2dc>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
			b_wakeup=PN532_WakeUp();
 8000664:	f004 fa54 	bl	8004b10 <PN532_WakeUp>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b68      	ldr	r3, [pc, #416]	; (8000810 <main+0x2e4>)
 800066e:	701a      	strb	r2, [r3, #0]
			b_samconfig=PN532_SAMConfig();
 8000670:	f004 faf2 	bl	8004c58 <PN532_SAMConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b66      	ldr	r3, [pc, #408]	; (8000814 <main+0x2e8>)
 800067a:	701a      	strb	r2, [r3, #0]

			versiondata = PN532_getFirmwareVersion();//Получениe версии ПО PN532
 800067c:	f004 fb18 	bl	8004cb0 <PN532_getFirmwareVersion>
 8000680:	6238      	str	r0, [r7, #32]

				if(versiondata){
 8000682:	6a3b      	ldr	r3, [r7, #32]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d013      	beq.n	80006b0 <main+0x184>
					statusDevice=statusDevice|ST_DEV_NFC_NOERR;//установка флага успешного теста NFC
 8000688:	4b59      	ldr	r3, [pc, #356]	; (80007f0 <main+0x2c4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b57      	ldr	r3, [pc, #348]	; (80007f0 <main+0x2c4>)
 8000694:	701a      	strb	r2, [r3, #0]
					PN532_FirmWareVersion2String (versiondata);
 8000696:	6a38      	ldr	r0, [r7, #32]
 8000698:	f003 f868 	bl	800376c <PN532_FirmWareVersion2String>
					b_rertyes=PN532_setPassiveActivationRetries(0xFF);
 800069c:	20ff      	movs	r0, #255	; 0xff
 800069e:	f004 fa4d 	bl	8004b3c <PN532_setPassiveActivationRetries>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <main+0x2ec>)
 80006a8:	701a      	strb	r2, [r3, #0]
					b_discannfc=0;
 80006aa:	4b5c      	ldr	r3, [pc, #368]	; (800081c <main+0x2f0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				}
				 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};
 80006b0:	bf00      	nop
 80006b2:	2102      	movs	r1, #2
 80006b4:	4855      	ldr	r0, [pc, #340]	; (800080c <main+0x2e0>)
 80006b6:	f006 fcb5 	bl	8007024 <SPI_I2S_GetFlagStatus>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f8      	beq.n	80006b2 <main+0x186>
				SpiActive = 0;
 80006c0:	4b51      	ldr	r3, [pc, #324]	; (8000808 <main+0x2dc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]


		/*	while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
				SPI_FLASH_CONFIG();*/

bcd_addr_start = 8192;
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <main+0x2f4>)
 80006c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006cc:	601a      	str	r2, [r3, #0]
bcd_cnt_addr_start = 0;
 80006ce:	4b55      	ldr	r3, [pc, #340]	; (8000824 <main+0x2f8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
//bcd_max_cnt_addr = 64;

nfc_addr_start = 12288;
 80006d4:	4b54      	ldr	r3, [pc, #336]	; (8000828 <main+0x2fc>)
 80006d6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006da:	601a      	str	r2, [r3, #0]
nfc_cnt_addr_start = 4096;
 80006dc:	4b53      	ldr	r3, [pc, #332]	; (800082c <main+0x300>)
 80006de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e2:	601a      	str	r2, [r3, #0]
//nfc_max_cnt_addr = 160;

cnt_addr_2Flash = 4;
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <main+0x304>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	701a      	strb	r2, [r3, #0]
cnt_4cnt = 1;
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <main+0x308>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
cnt_flash = 16;
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x30c>)
 80006f2:	2210      	movs	r2, #16
 80006f4:	801a      	strh	r2, [r3, #0]

val_max_cnt = 255;
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <main+0x310>)
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	701a      	strb	r2, [r3, #0]
val_start_cnt = 0;
 80006fc:	4b50      	ldr	r3, [pc, #320]	; (8000840 <main+0x314>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]

erase_addr = 0;
 8000702:	4b50      	ldr	r3, [pc, #320]	; (8000844 <main+0x318>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
cnt_flash_t = 255;
 8000708:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <main+0x31c>)
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	701a      	strb	r2, [r3, #0]
			memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
			spiFlash_Read(nfc_addr_start, cnt_addr_2Flash, rd_test_buff);
			nfc_flash_addr = flash_conv2_addr(rd_test_buff);
*/

				while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 800070e:	bf00      	nop
 8000710:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <main+0x2dc>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <main+0x1fc>
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	483b      	ldr	r0, [pc, #236]	; (800080c <main+0x2e0>)
 800071e:	f006 fc81 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f3      	bne.n	8000710 <main+0x1e4>
				SPI_FLASH_CONFIG();
 8000728:	f005 fd38 	bl	800619c <SPI_FLASH_CONFIG>
				spiFlash_write(erase_addr, cnt_addr_2Flash, wr_test_buff);
				do {
					stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
				} while (stat_reg1 & 0x01 );
*/
				memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	2100      	movs	r1, #0
 8000730:	4846      	ldr	r0, [pc, #280]	; (800084c <main+0x320>)
 8000732:	f007 fa2d 	bl	8007b90 <memset>
				spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <main+0x2f8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a43      	ldr	r2, [pc, #268]	; (8000848 <main+0x31c>)
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	b291      	uxth	r1, r2
 8000740:	4a42      	ldr	r2, [pc, #264]	; (800084c <main+0x320>)
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fd82 	bl	800624c <spiFlash_Read>
				for(int k = 0; k < 256; k++){
 8000748:	2300      	movs	r3, #0
 800074a:	667b      	str	r3, [r7, #100]	; 0x64
 800074c:	e015      	b.n	800077a <main+0x24e>
					if(rd_test_buff[k] == 0xFF){
 800074e:	4a3f      	ldr	r2, [pc, #252]	; (800084c <main+0x320>)
 8000750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2bff      	cmp	r3, #255	; 0xff
 8000758:	d10c      	bne.n	8000774 <main+0x248>
						if(k == 0){
 800075a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800075c:	2b00      	cmp	r3, #0
 800075e:	d109      	bne.n	8000774 <main+0x248>
							Set_Cnt_to_Flash(bcd_cnt_addr_start, cnt_4cnt, &val_start_cnt);
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <main+0x2f8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <main+0x308>)
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	b291      	uxth	r1, r2
 800076a:	4a35      	ldr	r2, [pc, #212]	; (8000840 <main+0x314>)
 800076c:	4618      	mov	r0, r3
 800076e:	f005 fadb 	bl	8005d28 <Set_Cnt_to_Flash>

						break;
 8000772:	e005      	b.n	8000780 <main+0x254>
				for(int k = 0; k < 256; k++){
 8000774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000776:	3301      	adds	r3, #1
 8000778:	667b      	str	r3, [r7, #100]	; 0x64
 800077a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800077c:	2bff      	cmp	r3, #255	; 0xff
 800077e:	dde6      	ble.n	800074e <main+0x222>
						}
					}
				}

				memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	2100      	movs	r1, #0
 8000784:	4831      	ldr	r0, [pc, #196]	; (800084c <main+0x320>)
 8000786:	f007 fa03 	bl	8007b90 <memset>
				spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <main+0x300>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <main+0x31c>)
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	b291      	uxth	r1, r2
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <main+0x320>)
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fd58 	bl	800624c <spiFlash_Read>
				for(int k = 0; k < 256; k++){
 800079c:	2300      	movs	r3, #0
 800079e:	663b      	str	r3, [r7, #96]	; 0x60
 80007a0:	e059      	b.n	8000856 <main+0x32a>
					if(rd_test_buff[k] == 0xFF){
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <main+0x320>)
 80007a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d150      	bne.n	8000850 <main+0x324>
						if(k == 0){
 80007ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14d      	bne.n	8000850 <main+0x324>
							Set_Cnt_to_Flash(nfc_cnt_addr_start, cnt_4cnt, &val_start_cnt);
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <main+0x300>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <main+0x308>)
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	b291      	uxth	r1, r2
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <main+0x314>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f005 fab1 	bl	8005d28 <Set_Cnt_to_Flash>

						break;
 80007c6:	e049      	b.n	800085c <main+0x330>
 80007c8:	20000524 	.word	0x20000524
 80007cc:	40021000 	.word	0x40021000
 80007d0:	20000534 	.word	0x20000534
 80007d4:	10624dd3 	.word	0x10624dd3
 80007d8:	2000063f 	.word	0x2000063f
 80007dc:	20000338 	.word	0x20000338
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	20000779 	.word	0x20000779
 80007e8:	20000778 	.word	0x20000778
 80007ec:	2000074d 	.word	0x2000074d
 80007f0:	20000888 	.word	0x20000888
 80007f4:	200000e8 	.word	0x200000e8
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	20000134 	.word	0x20000134
 8000800:	20000040 	.word	0x20000040
 8000804:	20000028 	.word	0x20000028
 8000808:	20000d76 	.word	0x20000d76
 800080c:	40003800 	.word	0x40003800
 8000810:	2000074e 	.word	0x2000074e
 8000814:	2000074f 	.word	0x2000074f
 8000818:	20000750 	.word	0x20000750
 800081c:	20000751 	.word	0x20000751
 8000820:	20000978 	.word	0x20000978
 8000824:	2000097c 	.word	0x2000097c
 8000828:	20000980 	.word	0x20000980
 800082c:	20000984 	.word	0x20000984
 8000830:	20000988 	.word	0x20000988
 8000834:	20000989 	.word	0x20000989
 8000838:	20000d5e 	.word	0x20000d5e
 800083c:	2000098b 	.word	0x2000098b
 8000840:	2000098c 	.word	0x2000098c
 8000844:	20000968 	.word	0x20000968
 8000848:	2000096c 	.word	0x2000096c
 800084c:	20000a24 	.word	0x20000a24
				for(int k = 0; k < 256; k++){
 8000850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000852:	3301      	adds	r3, #1
 8000854:	663b      	str	r3, [r7, #96]	; 0x60
 8000856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	dda2      	ble.n	80007a2 <main+0x276>
					}
				}



				SpiActive = 0;
 800085c:	4b82      	ldr	r3, [pc, #520]	; (8000a68 <main+0x53c>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000862:	bf00      	nop
 8000864:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <main+0x53c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <main+0x350>
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	487e      	ldr	r0, [pc, #504]	; (8000a6c <main+0x540>)
 8000872:	f006 fbd7 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1f3      	bne.n	8000864 <main+0x338>
				PN532_SPIInit();
 800087c:	f005 fb80 	bl	8005f80 <PN532_SPIInit>

				 b_getversion=ENABLE;
 8000880:	4b7b      	ldr	r3, [pc, #492]	; (8000a70 <main+0x544>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
				 cntbyteversion=0;
 8000886:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <main+0x548>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

				 SCAN_SendCMD(cmd_Version,STR_CMD_LENGTH);//Запрос версии  ПО сканера штрих-кодов
 800088c:	210c      	movs	r1, #12
 800088e:	487a      	ldr	r0, [pc, #488]	; (8000a78 <main+0x54c>)
 8000890:	f006 ff52 	bl	8007738 <SCAN_SendCMD>

				uint32_t tick1 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
				uint32_t tick2 = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	65fb      	str	r3, [r7, #92]	; 0x5c

					tick1=GetTickCount();
 800089c:	f002 ff5c 	bl	8003758 <GetTickCount>
 80008a0:	61f8      	str	r0, [r7, #28]
					tick2=tick1;
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	65fb      	str	r3, [r7, #92]	; 0x5c
				while(b_getversion || (tick2 - tick1 > 1000)){
 80008a6:	e002      	b.n	80008ae <main+0x382>
						// b_getversion=ENABLE;
						tick2=GetTickCount();
 80008a8:	f002 ff56 	bl	8003758 <GetTickCount>
 80008ac:	65f8      	str	r0, [r7, #92]	; 0x5c
				while(b_getversion || (tick2 - tick1 > 1000)){
 80008ae:	4b70      	ldr	r3, [pc, #448]	; (8000a70 <main+0x544>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f8      	bne.n	80008a8 <main+0x37c>
 80008b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c0:	d8f2      	bhi.n	80008a8 <main+0x37c>
					}

					if(!b_getversion){//Получена версия сканера штрих-кодов
 80008c2:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <main+0x544>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d106      	bne.n	80008d8 <main+0x3ac>
						statusDevice=statusDevice|ST_DEV_BAR_NOERR;//установка флага успешного теста сканера штрих-кодов
 80008ca:	4b6c      	ldr	r3, [pc, #432]	; (8000a7c <main+0x550>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <main+0x550>)
 80008d6:	701a      	strb	r2, [r3, #0]
					}



switch(statusDevice){
 80008d8:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <main+0x550>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b11      	cmp	r3, #17
 80008de:	f200 8156 	bhi.w	8000b8e <main+0x662>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <main+0x3bc>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000975 	.word	0x08000975
 80008f0:	08000b8f 	.word	0x08000b8f
 80008f4:	08000b8f 	.word	0x08000b8f
 80008f8:	08000b8f 	.word	0x08000b8f
 80008fc:	08000b8f 	.word	0x08000b8f
 8000900:	08000b8f 	.word	0x08000b8f
 8000904:	08000b8f 	.word	0x08000b8f
 8000908:	08000b8f 	.word	0x08000b8f
 800090c:	08000b8f 	.word	0x08000b8f
 8000910:	08000b8f 	.word	0x08000b8f
 8000914:	08000b8f 	.word	0x08000b8f
 8000918:	08000b8f 	.word	0x08000b8f
 800091c:	08000b8f 	.word	0x08000b8f
 8000920:	08000b8f 	.word	0x08000b8f
 8000924:	08000b8f 	.word	0x08000b8f
 8000928:	08000a0f 	.word	0x08000a0f
 800092c:	08000ac1 	.word	0x08000ac1
	case ST_DEV_ALL_ERR://Оба устройства не ответили

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000930:	4853      	ldr	r0, [pc, #332]	; (8000a80 <main+0x554>)
 8000932:	f7ff fc0b 	bl	800014c <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	4619      	mov	r1, r3
 800093a:	4852      	ldr	r0, [pc, #328]	; (8000a84 <main+0x558>)
 800093c:	f006 fe7c 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000940:	4851      	ldr	r0, [pc, #324]	; (8000a88 <main+0x55c>)
 8000942:	f7ff fc03 	bl	800014c <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	4619      	mov	r1, r3
 800094a:	484f      	ldr	r0, [pc, #316]	; (8000a88 <main+0x55c>)
 800094c:	f006 fe74 	bl	8007638 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 8000950:	211c      	movs	r1, #28
 8000952:	484e      	ldr	r0, [pc, #312]	; (8000a8c <main+0x560>)
 8000954:	f006 fe70 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000958:	484b      	ldr	r0, [pc, #300]	; (8000a88 <main+0x55c>)
 800095a:	f7ff fbf7 	bl	800014c <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	4619      	mov	r1, r3
 8000962:	4849      	ldr	r0, [pc, #292]	; (8000a88 <main+0x55c>)
 8000964:	f006 fe68 	bl	8007638 <Usart2_SendData>

		LCD_RunStringDevInfo ( s_lcd_bar_err,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000968:	22c8      	movs	r2, #200	; 0xc8
 800096a:	4948      	ldr	r1, [pc, #288]	; (8000a8c <main+0x560>)
 800096c:	4845      	ldr	r0, [pc, #276]	; (8000a84 <main+0x558>)
 800096e:	f003 fe31 	bl	80045d4 <LCD_RunStringDevInfo>

	break;
 8000972:	e10c      	b.n	8000b8e <main+0x662>

	case ST_DEV_NFC_NOERR://Ответил только NFC

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000974:	4842      	ldr	r0, [pc, #264]	; (8000a80 <main+0x554>)
 8000976:	f7ff fbe9 	bl	800014c <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	4619      	mov	r1, r3
 800097e:	4841      	ldr	r0, [pc, #260]	; (8000a84 <main+0x558>)
 8000980:	f006 fe5a 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000984:	4840      	ldr	r0, [pc, #256]	; (8000a88 <main+0x55c>)
 8000986:	f7ff fbe1 	bl	800014c <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	4619      	mov	r1, r3
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <main+0x55c>)
 8000990:	f006 fe52 	bl	8007638 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000994:	483e      	ldr	r0, [pc, #248]	; (8000a90 <main+0x564>)
 8000996:	f7ff fbd9 	bl	800014c <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	4619      	mov	r1, r3
 800099e:	483c      	ldr	r0, [pc, #240]	; (8000a90 <main+0x564>)
 80009a0:	f006 fe4a 	bl	8007638 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 80009a4:	2102      	movs	r1, #2
 80009a6:	483b      	ldr	r0, [pc, #236]	; (8000a94 <main+0x568>)
 80009a8:	f006 fe46 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009ac:	2102      	movs	r1, #2
 80009ae:	483a      	ldr	r0, [pc, #232]	; (8000a98 <main+0x56c>)
 80009b0:	f006 fe42 	bl	8007638 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 80009b4:	4839      	ldr	r0, [pc, #228]	; (8000a9c <main+0x570>)
 80009b6:	f7ff fbc9 	bl	800014c <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4619      	mov	r1, r3
 80009be:	4837      	ldr	r0, [pc, #220]	; (8000a9c <main+0x570>)
 80009c0:	f006 fe3a 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 80009c4:	2103      	movs	r1, #3
 80009c6:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <main+0x574>)
 80009c8:	f006 fe36 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 80009cc:	2300      	movs	r3, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <main+0x578>)
 80009d2:	f006 fe31 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 80009d6:	2103      	movs	r1, #3
 80009d8:	4833      	ldr	r0, [pc, #204]	; (8000aa8 <main+0x57c>)
 80009da:	f006 fe2d 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009de:	2102      	movs	r1, #2
 80009e0:	482d      	ldr	r0, [pc, #180]	; (8000a98 <main+0x56c>)
 80009e2:	f006 fe29 	bl	8007638 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 80009e6:	210a      	movs	r1, #10
 80009e8:	4830      	ldr	r0, [pc, #192]	; (8000aac <main+0x580>)
 80009ea:	f006 fe25 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 80009ee:	2102      	movs	r1, #2
 80009f0:	482f      	ldr	r0, [pc, #188]	; (8000ab0 <main+0x584>)
 80009f2:	f006 fe21 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009f6:	2102      	movs	r1, #2
 80009f8:	4827      	ldr	r0, [pc, #156]	; (8000a98 <main+0x56c>)
 80009fa:	f006 fe1d 	bl	8007638 <Usart2_SendData>


		LCD_PN532_CreateRunInfoString();
 80009fe:	f7ff fc85 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_lcd_bar_err,s_pn_info,RUN_STR_DELAY_TST);
 8000a02:	22c8      	movs	r2, #200	; 0xc8
 8000a04:	492b      	ldr	r1, [pc, #172]	; (8000ab4 <main+0x588>)
 8000a06:	481f      	ldr	r0, [pc, #124]	; (8000a84 <main+0x558>)
 8000a08:	f003 fde4 	bl	80045d4 <LCD_RunStringDevInfo>

	break;
 8000a0c:	e0bf      	b.n	8000b8e <main+0x662>

	case ST_DEV_BAR_NOERR://Ответил только сканер штрих-кодов

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <main+0x554>)
 8000a10:	f7ff fb9c 	bl	800014c <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4819      	ldr	r0, [pc, #100]	; (8000a80 <main+0x554>)
 8000a1a:	f006 fe0d 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000a1e:	4826      	ldr	r0, [pc, #152]	; (8000ab8 <main+0x58c>)
 8000a20:	f7ff fb94 	bl	800014c <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <main+0x58c>)
 8000a2a:	f006 fe05 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a2e:	4816      	ldr	r0, [pc, #88]	; (8000a88 <main+0x55c>)
 8000a30:	f7ff fb8c 	bl	800014c <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <main+0x55c>)
 8000a3a:	f006 fdfd 	bl	8007638 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 8000a3e:	211c      	movs	r1, #28
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <main+0x560>)
 8000a42:	f006 fdf9 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a46:	4810      	ldr	r0, [pc, #64]	; (8000a88 <main+0x55c>)
 8000a48:	f7ff fb80 	bl	800014c <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <main+0x55c>)
 8000a52:	f006 fdf1 	bl	8007638 <Usart2_SendData>

		LCD_BAR_CreateRunInfoString();
 8000a56:	f7ff fc93 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000a5a:	22c8      	movs	r2, #200	; 0xc8
 8000a5c:	490b      	ldr	r1, [pc, #44]	; (8000a8c <main+0x560>)
 8000a5e:	4817      	ldr	r0, [pc, #92]	; (8000abc <main+0x590>)
 8000a60:	f003 fdb8 	bl	80045d4 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

	break;
 8000a64:	e093      	b.n	8000b8e <main+0x662>
 8000a66:	bf00      	nop
 8000a68:	20000d76 	.word	0x20000d76
 8000a6c:	40003800 	.word	0x40003800
 8000a70:	20000640 	.word	0x20000640
 8000a74:	20000dd4 	.word	0x20000dd4
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000888 	.word	0x20000888
 8000a80:	2000014c 	.word	0x2000014c
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	20000168 	.word	0x20000168
 8000a8c:	20000070 	.word	0x20000070
 8000a90:	200001ec 	.word	0x200001ec
 8000a94:	200001dc 	.word	0x200001dc
 8000a98:	200001d8 	.word	0x200001d8
 8000a9c:	200001fc 	.word	0x200001fc
 8000aa0:	200001e0 	.word	0x200001e0
 8000aa4:	200001d4 	.word	0x200001d4
 8000aa8:	200001e4 	.word	0x200001e4
 8000aac:	2000020c 	.word	0x2000020c
 8000ab0:	200001e8 	.word	0x200001e8
 8000ab4:	20000788 	.word	0x20000788
 8000ab8:	20000dd8 	.word	0x20000dd8
 8000abc:	20000808 	.word	0x20000808

	case ST_DEV_ALL_NOERR://Оба устройства ответили

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000ac0:	48b5      	ldr	r0, [pc, #724]	; (8000d98 <main+0x86c>)
 8000ac2:	f7ff fb43 	bl	800014c <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	48b3      	ldr	r0, [pc, #716]	; (8000d98 <main+0x86c>)
 8000acc:	f006 fdb4 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000ad0:	48b2      	ldr	r0, [pc, #712]	; (8000d9c <main+0x870>)
 8000ad2:	f7ff fb3b 	bl	800014c <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	48b0      	ldr	r0, [pc, #704]	; (8000d9c <main+0x870>)
 8000adc:	f006 fdac 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000ae0:	48af      	ldr	r0, [pc, #700]	; (8000da0 <main+0x874>)
 8000ae2:	f7ff fb33 	bl	800014c <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	48ad      	ldr	r0, [pc, #692]	; (8000da0 <main+0x874>)
 8000aec:	f006 fda4 	bl	8007638 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000af0:	48ac      	ldr	r0, [pc, #688]	; (8000da4 <main+0x878>)
 8000af2:	f7ff fb2b 	bl	800014c <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4619      	mov	r1, r3
 8000afa:	48aa      	ldr	r0, [pc, #680]	; (8000da4 <main+0x878>)
 8000afc:	f006 fd9c 	bl	8007638 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 8000b00:	2102      	movs	r1, #2
 8000b02:	48a9      	ldr	r0, [pc, #676]	; (8000da8 <main+0x87c>)
 8000b04:	f006 fd98 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b08:	2102      	movs	r1, #2
 8000b0a:	48a8      	ldr	r0, [pc, #672]	; (8000dac <main+0x880>)
 8000b0c:	f006 fd94 	bl	8007638 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 8000b10:	48a7      	ldr	r0, [pc, #668]	; (8000db0 <main+0x884>)
 8000b12:	f7ff fb1b 	bl	800014c <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	48a5      	ldr	r0, [pc, #660]	; (8000db0 <main+0x884>)
 8000b1c:	f006 fd8c 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 8000b20:	2103      	movs	r1, #3
 8000b22:	48a4      	ldr	r0, [pc, #656]	; (8000db4 <main+0x888>)
 8000b24:	f006 fd88 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	48a2      	ldr	r0, [pc, #648]	; (8000db8 <main+0x88c>)
 8000b2e:	f006 fd83 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 8000b32:	2103      	movs	r1, #3
 8000b34:	48a1      	ldr	r0, [pc, #644]	; (8000dbc <main+0x890>)
 8000b36:	f006 fd7f 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	489b      	ldr	r0, [pc, #620]	; (8000dac <main+0x880>)
 8000b3e:	f006 fd7b 	bl	8007638 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 8000b42:	210a      	movs	r1, #10
 8000b44:	489e      	ldr	r0, [pc, #632]	; (8000dc0 <main+0x894>)
 8000b46:	f006 fd77 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	489d      	ldr	r0, [pc, #628]	; (8000dc4 <main+0x898>)
 8000b4e:	f006 fd73 	bl	8007638 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b52:	2102      	movs	r1, #2
 8000b54:	4895      	ldr	r0, [pc, #596]	; (8000dac <main+0x880>)
 8000b56:	f006 fd6f 	bl	8007638 <Usart2_SendData>


		LCD_BAR_CreateRunInfoString();
 8000b5a:	f7ff fc11 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_PN532_CreateRunInfoString();
 8000b5e:	f7ff fbd5 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_pn_info,RUN_STR_DELAY_TST);
 8000b62:	22c8      	movs	r2, #200	; 0xc8
 8000b64:	4998      	ldr	r1, [pc, #608]	; (8000dc8 <main+0x89c>)
 8000b66:	4899      	ldr	r0, [pc, #612]	; (8000dcc <main+0x8a0>)
 8000b68:	f003 fd34 	bl	80045d4 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

		LCD_SetCursor ( LCD_CURSOR_1STR );
 8000b6c:	2080      	movs	r0, #128	; 0x80
 8000b6e:	f003 fc63 	bl	8004438 <LCD_SetCursor>
		LCD_WriteString (s_lcd_scanner_rdy );
 8000b72:	4897      	ldr	r0, [pc, #604]	; (8000dd0 <main+0x8a4>)
 8000b74:	f003 fd10 	bl	8004598 <LCD_WriteString>

		LCD_SetCursor ( LCD_CURSOR_2STR );
 8000b78:	20c0      	movs	r0, #192	; 0xc0
 8000b7a:	f003 fc5d 	bl	8004438 <LCD_SetCursor>
		LCD_WriteString (s_lcd_ready );
 8000b7e:	4895      	ldr	r0, [pc, #596]	; (8000dd4 <main+0x8a8>)
 8000b80:	f003 fd0a 	bl	8004598 <LCD_WriteString>

		Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000b84:	2121      	movs	r1, #33	; 0x21
 8000b86:	4894      	ldr	r0, [pc, #592]	; (8000dd8 <main+0x8ac>)
 8000b88:	f006 fd56 	bl	8007638 <Usart2_SendData>


	break;
 8000b8c:	bf00      	nop

}

Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000b8e:	2121      	movs	r1, #33	; 0x21
 8000b90:	4891      	ldr	r0, [pc, #580]	; (8000dd8 <main+0x8ac>)
 8000b92:	f006 fd51 	bl	8007638 <Usart2_SendData>


Timer1Init();
 8000b96:	f002 fc67 	bl	8003468 <Timer1Init>
EnableTimer1Interrupt();
 8000b9a:	f002 fc9f 	bl	80034dc <EnableTimer1Interrupt>

		char cSymbol;

		char date_Symbol;

		if(timer1flag==1){
 8000b9e:	4b8f      	ldr	r3, [pc, #572]	; (8000ddc <main+0x8b0>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d110      	bne.n	8000bc8 <main+0x69c>
			ValueInterrupToStr();
 8000ba6:	f002 fe93 	bl	80038d0 <ValueInterrupToStr>
			Usart2_SendData(b_bounce_value,sizeof(b_bounce_value));
 8000baa:	2106      	movs	r1, #6
 8000bac:	488c      	ldr	r0, [pc, #560]	; (8000de0 <main+0x8b4>)
 8000bae:	f006 fd43 	bl	8007638 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8000bb2:	487b      	ldr	r0, [pc, #492]	; (8000da0 <main+0x874>)
 8000bb4:	f7ff faca 	bl	800014c <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4878      	ldr	r0, [pc, #480]	; (8000da0 <main+0x874>)
 8000bbe:	f006 fd3b 	bl	8007638 <Usart2_SendData>
			timer1flag=0;
 8000bc2:	4b86      	ldr	r3, [pc, #536]	; (8000ddc <main+0x8b0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
		}



		//если не режим записи метки NFC
		if(u8_wrnfcstatus==0){
 8000bc8:	4b86      	ldr	r3, [pc, #536]	; (8000de4 <main+0x8b8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f042 827b 	bne.w	80030c8 <main+0x2b9c>

				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000bd2:	e01b      	b.n	8000c0c <main+0x6e0>
					g_sBuffer [ g_iBufferLength++ ] = cSymbol;
 8000bd4:	4b84      	ldr	r3, [pc, #528]	; (8000de8 <main+0x8bc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	4983      	ldr	r1, [pc, #524]	; (8000de8 <main+0x8bc>)
 8000bdc:	600a      	str	r2, [r1, #0]
 8000bde:	79f9      	ldrb	r1, [r7, #7]
 8000be0:	4a82      	ldr	r2, [pc, #520]	; (8000dec <main+0x8c0>)
 8000be2:	54d1      	strb	r1, [r2, r3]
					g_sBuffer [ g_iBufferLength ] = '\0';
 8000be4:	4b80      	ldr	r3, [pc, #512]	; (8000de8 <main+0x8bc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a80      	ldr	r2, [pc, #512]	; (8000dec <main+0x8c0>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	54d1      	strb	r1, [r2, r3]
					if ( g_iBufferLength >= BUFFER_LEN ) {
 8000bee:	4b7e      	ldr	r3, [pc, #504]	; (8000de8 <main+0x8bc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf4:	dd0a      	ble.n	8000c0c <main+0x6e0>
						memmove ( g_sBuffer, g_sBuffer + 1, BUFFER_LEN );
 8000bf6:	4b7e      	ldr	r3, [pc, #504]	; (8000df0 <main+0x8c4>)
 8000bf8:	2280      	movs	r2, #128	; 0x80
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	487b      	ldr	r0, [pc, #492]	; (8000dec <main+0x8c0>)
 8000bfe:	f006 ffad 	bl	8007b5c <memmove>
						g_iBufferLength--;
 8000c02:	4b79      	ldr	r3, [pc, #484]	; (8000de8 <main+0x8bc>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a77      	ldr	r2, [pc, #476]	; (8000de8 <main+0x8bc>)
 8000c0a:	6013      	str	r3, [r2, #0]
				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 fe12 	bl	8007838 <FIFO_GetNextData>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d0dc      	beq.n	8000bd4 <main+0x6a8>
					}
				}
		//	прием данных с телефона
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000c1a:	e02b      	b.n	8000c74 <main+0x748>

				//	Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
				//	Usart2_SendData(s_newline,strlen(s_newline));


					date_sBuffer [ date_iBufferLength++ ] = date_Symbol;
 8000c1c:	4b75      	ldr	r3, [pc, #468]	; (8000df4 <main+0x8c8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	4974      	ldr	r1, [pc, #464]	; (8000df4 <main+0x8c8>)
 8000c24:	600a      	str	r2, [r1, #0]
 8000c26:	79b9      	ldrb	r1, [r7, #6]
 8000c28:	4a73      	ldr	r2, [pc, #460]	; (8000df8 <main+0x8cc>)
 8000c2a:	54d1      	strb	r1, [r2, r3]
					date_sBuffer [ date_iBufferLength] = '\0';
 8000c2c:	4b71      	ldr	r3, [pc, #452]	; (8000df4 <main+0x8c8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a71      	ldr	r2, [pc, #452]	; (8000df8 <main+0x8cc>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	54d1      	strb	r1, [r2, r3]
					if( date_iBufferLength >= BUFFER_LEN){
 8000c36:	4b6f      	ldr	r3, [pc, #444]	; (8000df4 <main+0x8c8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c3c:	dd0a      	ble.n	8000c54 <main+0x728>
						memmove(date_sBuffer, date_sBuffer + 1, BUFFER_LEN);
 8000c3e:	4b6f      	ldr	r3, [pc, #444]	; (8000dfc <main+0x8d0>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	4619      	mov	r1, r3
 8000c44:	486c      	ldr	r0, [pc, #432]	; (8000df8 <main+0x8cc>)
 8000c46:	f006 ff89 	bl	8007b5c <memmove>
						date_iBufferLength--;
 8000c4a:	4b6a      	ldr	r3, [pc, #424]	; (8000df4 <main+0x8c8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4a68      	ldr	r2, [pc, #416]	; (8000df4 <main+0x8c8>)
 8000c52:	6013      	str	r3, [r2, #0]
					}
						Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 8000c54:	4868      	ldr	r0, [pc, #416]	; (8000df8 <main+0x8cc>)
 8000c56:	f7ff fa79 	bl	800014c <strlen>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4866      	ldr	r0, [pc, #408]	; (8000df8 <main+0x8cc>)
 8000c60:	f006 fcea 	bl	8007638 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8000c64:	484e      	ldr	r0, [pc, #312]	; (8000da0 <main+0x874>)
 8000c66:	f7ff fa71 	bl	800014c <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	484c      	ldr	r0, [pc, #304]	; (8000da0 <main+0x874>)
 8000c70:	f006 fce2 	bl	8007638 <Usart2_SendData>
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000c74:	1dbb      	adds	r3, r7, #6
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 fe0c 	bl	8007894 <Date_GetNextDate>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d0cc      	beq.n	8000c1c <main+0x6f0>
		*/



		//	декодирование данных с телефона
				if(strstr(date_sBuffer, "\r\n") != NULL){
 8000c82:	495f      	ldr	r1, [pc, #380]	; (8000e00 <main+0x8d4>)
 8000c84:	485c      	ldr	r0, [pc, #368]	; (8000df8 <main+0x8cc>)
 8000c86:	f006 ffe2 	bl	8007c4e <strstr>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f001 8263 	beq.w	8002158 <main+0x1c2c>

				//	Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
				//	Usart2_SendData(s_newline,strlen(s_newline));

					char *pstr = date_sBuffer;
 8000c92:	4b59      	ldr	r3, [pc, #356]	; (8000df8 <main+0x8cc>)
 8000c94:	65bb      	str	r3, [r7, #88]	; 0x58

					if( date_sBuffer[0] == CMD /*&& date_sBuffer[4] == CMD*//**pstr == CMD*/ /*&& *pstr+4 == CMD*/){
 8000c96:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <main+0x8cc>)
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <main+0x8d8>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f041 822a 	bne.w	80020f8 <main+0x1bcc>
						pstr++;
 8000ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58

						for(int i = 0; i < SIZE_CMD ; i++){
 8000caa:	2300      	movs	r3, #0
 8000cac:	657b      	str	r3, [r7, #84]	; 0x54
 8000cae:	e00b      	b.n	8000cc8 <main+0x79c>
							test_buffer[i] = *pstr++;
 8000cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8000cb6:	7819      	ldrb	r1, [r3, #0]
 8000cb8:	4a53      	ldr	r2, [pc, #332]	; (8000e08 <main+0x8dc>)
 8000cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cbc:	4413      	add	r3, r2
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
						for(int i = 0; i < SIZE_CMD ; i++){
 8000cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8000cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	ddf0      	ble.n	8000cb0 <main+0x784>

						}
						NUM_CMD = atoi(test_buffer);
 8000cce:	484e      	ldr	r0, [pc, #312]	; (8000e08 <main+0x8dc>)
 8000cd0:	f006 fef8 	bl	8007ac4 <atoi>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a4d      	ldr	r2, [pc, #308]	; (8000e0c <main+0x8e0>)
 8000cd8:	6013      	str	r3, [r2, #0]
						if(NUM_CMD == 0){
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <main+0x8e0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10f      	bne.n	8000d02 <main+0x7d6>
							Usart2_SendData(android_wron_cmd_form,strlen(android_wron_cmd_form));
 8000ce2:	484b      	ldr	r0, [pc, #300]	; (8000e10 <main+0x8e4>)
 8000ce4:	f7ff fa32 	bl	800014c <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4848      	ldr	r0, [pc, #288]	; (8000e10 <main+0x8e4>)
 8000cee:	f006 fca3 	bl	8007638 <Usart2_SendData>
							Usart2_SendData(s_newline,strlen(s_newline));
 8000cf2:	482b      	ldr	r0, [pc, #172]	; (8000da0 <main+0x874>)
 8000cf4:	f7ff fa2a 	bl	800014c <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4828      	ldr	r0, [pc, #160]	; (8000da0 <main+0x874>)
 8000cfe:	f006 fc9b 	bl	8007638 <Usart2_SendData>
						}
						switch (NUM_CMD) {
 8000d02:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <main+0x8e0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2bcc      	cmp	r3, #204	; 0xcc
 8000d08:	f301 81e5 	bgt.w	80020d6 <main+0x1baa>
 8000d0c:	2bc9      	cmp	r3, #201	; 0xc9
 8000d0e:	da0c      	bge.n	8000d2a <main+0x7fe>
 8000d10:	2b67      	cmp	r3, #103	; 0x67
 8000d12:	f001 8202 	beq.w	800211a <main+0x1bee>
 8000d16:	2b67      	cmp	r3, #103	; 0x67
 8000d18:	f301 81dd 	bgt.w	80020d6 <main+0x1baa>
 8000d1c:	2b65      	cmp	r3, #101	; 0x65
 8000d1e:	d013      	beq.n	8000d48 <main+0x81c>
 8000d20:	2b66      	cmp	r3, #102	; 0x66
 8000d22:	f000 80ca 	beq.w	8000eba <main+0x98e>
 8000d26:	f001 b9d6 	b.w	80020d6 <main+0x1baa>
 8000d2a:	3bc9      	subs	r3, #201	; 0xc9
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	f201 81d2 	bhi.w	80020d6 <main+0x1baa>
 8000d32:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <main+0x80c>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08001125 	.word	0x08001125
 8000d3c:	080014fd 	.word	0x080014fd
 8000d40:	080018e5 	.word	0x080018e5
 8000d44:	080020b5 	.word	0x080020b5
							case 101:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000d48:	482f      	ldr	r0, [pc, #188]	; (8000e08 <main+0x8dc>)
 8000d4a:	f7ff f9ff 	bl	800014c <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4619      	mov	r1, r3
 8000d52:	482d      	ldr	r0, [pc, #180]	; (8000e08 <main+0x8dc>)
 8000d54:	f006 fc70 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <main+0x874>)
 8000d5a:	f7ff f9f7 	bl	800014c <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4619      	mov	r1, r3
 8000d62:	480f      	ldr	r0, [pc, #60]	; (8000da0 <main+0x874>)
 8000d64:	f006 fc68 	bl	8007638 <Usart2_SendData>

								uint8_t date_result;

								date_result = convert_time_from_android(&rtc_time, date_sBuffer);
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4922      	ldr	r1, [pc, #136]	; (8000df8 <main+0x8cc>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f004 fe48 	bl	8005a04 <convert_time_from_android>
 8000d74:	4603      	mov	r3, r0
 8000d76:	76fb      	strb	r3, [r7, #27]
								switch(date_result){
 8000d78:	7efb      	ldrb	r3, [r7, #27]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	f201 81cf 	bhi.w	800211e <main+0x1bf2>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <main+0x85c>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000e15 	.word	0x08000e15
 8000d8c:	08000e51 	.word	0x08000e51
 8000d90:	08000e73 	.word	0x08000e73
 8000d94:	08000e95 	.word	0x08000e95
 8000d98:	2000014c 	.word	0x2000014c
 8000d9c:	20000dd8 	.word	0x20000dd8
 8000da0:	20000168 	.word	0x20000168
 8000da4:	200001ec 	.word	0x200001ec
 8000da8:	200001dc 	.word	0x200001dc
 8000dac:	200001d8 	.word	0x200001d8
 8000db0:	200001fc 	.word	0x200001fc
 8000db4:	200001e0 	.word	0x200001e0
 8000db8:	200001d4 	.word	0x200001d4
 8000dbc:	200001e4 	.word	0x200001e4
 8000dc0:	2000020c 	.word	0x2000020c
 8000dc4:	200001e8 	.word	0x200001e8
 8000dc8:	20000788 	.word	0x20000788
 8000dcc:	20000808 	.word	0x20000808
 8000dd0:	20000034 	.word	0x20000034
 8000dd4:	20000064 	.word	0x20000064
 8000dd8:	20000110 	.word	0x20000110
 8000ddc:	2000077e 	.word	0x2000077e
 8000de0:	20000218 	.word	0x20000218
 8000de4:	2000077f 	.word	0x2000077f
 8000de8:	200005cc 	.word	0x200005cc
 8000dec:	20000548 	.word	0x20000548
 8000df0:	20000549 	.word	0x20000549
 8000df4:	200006c8 	.word	0x200006c8
 8000df8:	20000644 	.word	0x20000644
 8000dfc:	20000645 	.word	0x20000645
 8000e00:	08008e58 	.word	0x08008e58
 8000e04:	20000480 	.word	0x20000480
 8000e08:	200006cc 	.word	0x200006cc
 8000e0c:	20000960 	.word	0x20000960
 8000e10:	2000035c 	.word	0x2000035c
								case 0:
									tim = cal_to_timer(&rtc_time);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fd75 	bl	8005908 <cal_to_timer>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4ab3      	ldr	r2, [pc, #716]	; (80010f0 <main+0xbc4>)
 8000e22:	6013      	str	r3, [r2, #0]
									RTC_SET_COUNTER(tim);
 8000e24:	4bb2      	ldr	r3, [pc, #712]	; (80010f0 <main+0xbc4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fc39 	bl	80056a0 <RTC_SET_COUNTER>
									Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 8000e2e:	48b1      	ldr	r0, [pc, #708]	; (80010f4 <main+0xbc8>)
 8000e30:	f7ff f98c 	bl	800014c <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4619      	mov	r1, r3
 8000e38:	48ae      	ldr	r0, [pc, #696]	; (80010f4 <main+0xbc8>)
 8000e3a:	f006 fbfd 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e3e:	48ae      	ldr	r0, [pc, #696]	; (80010f8 <main+0xbcc>)
 8000e40:	f7ff f984 	bl	800014c <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4619      	mov	r1, r3
 8000e48:	48ab      	ldr	r0, [pc, #684]	; (80010f8 <main+0xbcc>)
 8000e4a:	f006 fbf5 	bl	8007638 <Usart2_SendData>
									break;
 8000e4e:	e032      	b.n	8000eb6 <main+0x98a>
								case 1:
									Usart2_SendData(incorrect_rtc_year,strlen(incorrect_rtc_year));
 8000e50:	48aa      	ldr	r0, [pc, #680]	; (80010fc <main+0xbd0>)
 8000e52:	f7ff f97b 	bl	800014c <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	48a8      	ldr	r0, [pc, #672]	; (80010fc <main+0xbd0>)
 8000e5c:	f006 fbec 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e60:	48a5      	ldr	r0, [pc, #660]	; (80010f8 <main+0xbcc>)
 8000e62:	f7ff f973 	bl	800014c <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	48a3      	ldr	r0, [pc, #652]	; (80010f8 <main+0xbcc>)
 8000e6c:	f006 fbe4 	bl	8007638 <Usart2_SendData>
									break;
 8000e70:	e021      	b.n	8000eb6 <main+0x98a>
								case 2:
									Usart2_SendData(incorrect_rtc_mon,strlen(incorrect_rtc_mon));
 8000e72:	48a3      	ldr	r0, [pc, #652]	; (8001100 <main+0xbd4>)
 8000e74:	f7ff f96a 	bl	800014c <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	48a0      	ldr	r0, [pc, #640]	; (8001100 <main+0xbd4>)
 8000e7e:	f006 fbdb 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e82:	489d      	ldr	r0, [pc, #628]	; (80010f8 <main+0xbcc>)
 8000e84:	f7ff f962 	bl	800014c <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	489a      	ldr	r0, [pc, #616]	; (80010f8 <main+0xbcc>)
 8000e8e:	f006 fbd3 	bl	8007638 <Usart2_SendData>
									break;
 8000e92:	e010      	b.n	8000eb6 <main+0x98a>
								case 3:
									Usart2_SendData(incorrect_rtc_day,strlen(incorrect_rtc_day));
 8000e94:	489b      	ldr	r0, [pc, #620]	; (8001104 <main+0xbd8>)
 8000e96:	f7ff f959 	bl	800014c <strlen>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4899      	ldr	r0, [pc, #612]	; (8001104 <main+0xbd8>)
 8000ea0:	f006 fbca 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000ea4:	4894      	ldr	r0, [pc, #592]	; (80010f8 <main+0xbcc>)
 8000ea6:	f7ff f951 	bl	800014c <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4892      	ldr	r0, [pc, #584]	; (80010f8 <main+0xbcc>)
 8000eb0:	f006 fbc2 	bl	8007638 <Usart2_SendData>
									break;
 8000eb4:	bf00      	nop

								}
								break;
 8000eb6:	f001 b932 	b.w	800211e <main+0x1bf2>
							case 102:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000eba:	4893      	ldr	r0, [pc, #588]	; (8001108 <main+0xbdc>)
 8000ebc:	f7ff f946 	bl	800014c <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4890      	ldr	r0, [pc, #576]	; (8001108 <main+0xbdc>)
 8000ec6:	f006 fbb7 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000eca:	488b      	ldr	r0, [pc, #556]	; (80010f8 <main+0xbcc>)
 8000ecc:	f7ff f93e 	bl	800014c <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4888      	ldr	r0, [pc, #544]	; (80010f8 <main+0xbcc>)
 8000ed6:	f006 fbaf 	bl	8007638 <Usart2_SendData>

								timer = RTC_GET_COUNTER();
 8000eda:	f004 fbd1 	bl	8005680 <RTC_GET_COUNTER>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a8a      	ldr	r2, [pc, #552]	; (800110c <main+0xbe0>)
 8000ee2:	6013      	str	r3, [r2, #0]
								timer_to_cal(timer, &rtc_time);
 8000ee4:	4b89      	ldr	r3, [pc, #548]	; (800110c <main+0xbe0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f107 0208 	add.w	r2, r7, #8
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fc20 	bl	8005734 <timer_to_cal>
								tim = cal_to_timer(&rtc_time);
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 fd05 	bl	8005908 <cal_to_timer>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a7b      	ldr	r2, [pc, #492]	; (80010f0 <main+0xbc4>)
 8000f02:	6013      	str	r3, [r2, #0]


								//*xxx*yyyy-MM-dd HH:mm:ss

								s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4a82      	ldr	r2, [pc, #520]	; (8001110 <main+0xbe4>)
 8000f08:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0c:	1192      	asrs	r2, r2, #6
 8000f0e:	17db      	asrs	r3, r3, #31
 8000f10:	1ad2      	subs	r2, r2, r3
 8000f12:	4b80      	ldr	r3, [pc, #512]	; (8001114 <main+0xbe8>)
 8000f14:	fb83 1302 	smull	r1, r3, r3, r2
 8000f18:	1099      	asrs	r1, r3, #2
 8000f1a:	17d3      	asrs	r3, r2, #31
 8000f1c:	1ac9      	subs	r1, r1, r3
 8000f1e:	460b      	mov	r3, r1
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	1ad1      	subs	r1, r2, r3
 8000f28:	b2cb      	uxtb	r3, r1
 8000f2a:	3330      	adds	r3, #48	; 0x30
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b7a      	ldr	r3, [pc, #488]	; (8001118 <main+0xbec>)
 8000f30:	701a      	strb	r2, [r3, #0]
								s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	4a79      	ldr	r2, [pc, #484]	; (800111c <main+0xbf0>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	1152      	asrs	r2, r2, #5
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad2      	subs	r2, r2, r3
 8000f40:	4b74      	ldr	r3, [pc, #464]	; (8001114 <main+0xbe8>)
 8000f42:	fb83 1302 	smull	r1, r3, r3, r2
 8000f46:	1099      	asrs	r1, r3, #2
 8000f48:	17d3      	asrs	r3, r2, #31
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	1ad1      	subs	r1, r2, r3
 8000f56:	b2cb      	uxtb	r3, r1
 8000f58:	3330      	adds	r3, #48	; 0x30
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b6e      	ldr	r3, [pc, #440]	; (8001118 <main+0xbec>)
 8000f5e:	705a      	strb	r2, [r3, #1]
								s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4a6c      	ldr	r2, [pc, #432]	; (8001114 <main+0xbe8>)
 8000f64:	fb82 1203 	smull	r1, r2, r2, r3
 8000f68:	1092      	asrs	r2, r2, #2
 8000f6a:	17db      	asrs	r3, r3, #31
 8000f6c:	1ad2      	subs	r2, r2, r3
 8000f6e:	4b69      	ldr	r3, [pc, #420]	; (8001114 <main+0xbe8>)
 8000f70:	fb83 1302 	smull	r1, r3, r3, r2
 8000f74:	1099      	asrs	r1, r3, #2
 8000f76:	17d3      	asrs	r3, r2, #31
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	1ad1      	subs	r1, r2, r3
 8000f84:	b2cb      	uxtb	r3, r1
 8000f86:	3330      	adds	r3, #48	; 0x30
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <main+0xbec>)
 8000f8c:	709a      	strb	r2, [r3, #2]
								s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	4b60      	ldr	r3, [pc, #384]	; (8001114 <main+0xbe8>)
 8000f92:	fb83 1302 	smull	r1, r3, r3, r2
 8000f96:	1099      	asrs	r1, r3, #2
 8000f98:	17d3      	asrs	r3, r2, #31
 8000f9a:	1ac9      	subs	r1, r1, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	1ad1      	subs	r1, r2, r3
 8000fa6:	b2cb      	uxtb	r3, r1
 8000fa8:	3330      	adds	r3, #48	; 0x30
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <main+0xbec>)
 8000fae:	70da      	strb	r2, [r3, #3]

								s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	4a5b      	ldr	r2, [pc, #364]	; (8001120 <main+0xbf4>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	3330      	adds	r3, #48	; 0x30
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <main+0xbec>)
 8000fc2:	715a      	strb	r2, [r3, #5]
								s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8000fc4:	7b3a      	ldrb	r2, [r7, #12]
 8000fc6:	4b56      	ldr	r3, [pc, #344]	; (8001120 <main+0xbf4>)
 8000fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fcc:	08d9      	lsrs	r1, r3, #3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3330      	adds	r3, #48	; 0x30
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <main+0xbec>)
 8000fe0:	719a      	strb	r2, [r3, #6]

								s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <main+0xbf4>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3330      	adds	r3, #48	; 0x30
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <main+0xbec>)
 8000ff4:	721a      	strb	r2, [r3, #8]
								s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8000ff6:	7b7a      	ldrb	r2, [r7, #13]
 8000ff8:	4b49      	ldr	r3, [pc, #292]	; (8001120 <main+0xbf4>)
 8000ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8000ffe:	08d9      	lsrs	r1, r3, #3
 8001000:	460b      	mov	r3, r1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3330      	adds	r3, #48	; 0x30
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b41      	ldr	r3, [pc, #260]	; (8001118 <main+0xbec>)
 8001012:	725a      	strb	r2, [r3, #9]

								s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <main+0xbf4>)
 8001018:	fba2 2303 	umull	r2, r3, r2, r3
 800101c:	08db      	lsrs	r3, r3, #3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	3330      	adds	r3, #48	; 0x30
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b3c      	ldr	r3, [pc, #240]	; (8001118 <main+0xbec>)
 8001026:	72da      	strb	r2, [r3, #11]
								s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001028:	7bba      	ldrb	r2, [r7, #14]
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <main+0xbf4>)
 800102c:	fba3 1302 	umull	r1, r3, r3, r2
 8001030:	08d9      	lsrs	r1, r3, #3
 8001032:	460b      	mov	r3, r1
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3330      	adds	r3, #48	; 0x30
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <main+0xbec>)
 8001044:	731a      	strb	r2, [r3, #12]

								s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	4a35      	ldr	r2, [pc, #212]	; (8001120 <main+0xbf4>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3330      	adds	r3, #48	; 0x30
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <main+0xbec>)
 8001058:	739a      	strb	r2, [r3, #14]
								s_cal_data[15] = 0x30 + (rtc_time.min%10);
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <main+0xbf4>)
 800105e:	fba3 1302 	umull	r1, r3, r3, r2
 8001062:	08d9      	lsrs	r1, r3, #3
 8001064:	460b      	mov	r3, r1
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	3330      	adds	r3, #48	; 0x30
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <main+0xbec>)
 8001076:	73da      	strb	r2, [r3, #15]

								s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8001078:	7c3b      	ldrb	r3, [r7, #16]
 800107a:	4a29      	ldr	r2, [pc, #164]	; (8001120 <main+0xbf4>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	3330      	adds	r3, #48	; 0x30
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <main+0xbec>)
 800108a:	745a      	strb	r2, [r3, #17]
								s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 800108c:	7c3a      	ldrb	r2, [r7, #16]
 800108e:	4b24      	ldr	r3, [pc, #144]	; (8001120 <main+0xbf4>)
 8001090:	fba3 1302 	umull	r1, r3, r3, r2
 8001094:	08d9      	lsrs	r1, r3, #3
 8001096:	460b      	mov	r3, r1
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3330      	adds	r3, #48	; 0x30
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <main+0xbec>)
 80010a8:	749a      	strb	r2, [r3, #18]

								Usart2_SendData(s_cal_data,strlen(s_cal_data));
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <main+0xbec>)
 80010ac:	f7ff f84e 	bl	800014c <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4818      	ldr	r0, [pc, #96]	; (8001118 <main+0xbec>)
 80010b6:	f006 fabf 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80010ba:	480f      	ldr	r0, [pc, #60]	; (80010f8 <main+0xbcc>)
 80010bc:	f7ff f846 	bl	800014c <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <main+0xbcc>)
 80010c6:	f006 fab7 	bl	8007638 <Usart2_SendData>


								Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <main+0xbc8>)
 80010cc:	f7ff f83e 	bl	800014c <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <main+0xbc8>)
 80010d6:	f006 faaf 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <main+0xbcc>)
 80010dc:	f7ff f836 	bl	800014c <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4619      	mov	r1, r3
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <main+0xbcc>)
 80010e6:	f006 faa7 	bl	8007638 <Usart2_SendData>
								break;
 80010ea:	f001 b819 	b.w	8002120 <main+0x1bf4>
 80010ee:	bf00      	nop
 80010f0:	2000095c 	.word	0x2000095c
 80010f4:	20000058 	.word	0x20000058
 80010f8:	20000168 	.word	0x20000168
 80010fc:	20000370 	.word	0x20000370
 8001100:	20000380 	.word	0x20000380
 8001104:	20000390 	.word	0x20000390
 8001108:	200006cc 	.word	0x200006cc
 800110c:	20000338 	.word	0x20000338
 8001110:	10624dd3 	.word	0x10624dd3
 8001114:	66666667 	.word	0x66666667
 8001118:	20000220 	.word	0x20000220
 800111c:	51eb851f 	.word	0x51eb851f
 8001120:	cccccccd 	.word	0xcccccccd
							case 103://отправка настроек устройства

								break;
							case 201://чтение последнего штрих-кода
								Usart2_SendData(android_last_barcode,strlen(android_last_barcode));
 8001124:	481f      	ldr	r0, [pc, #124]	; (80011a4 <main+0xc78>)
 8001126:	f7ff f811 	bl	800014c <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	4619      	mov	r1, r3
 800112e:	481d      	ldr	r0, [pc, #116]	; (80011a4 <main+0xc78>)
 8001130:	f006 fa82 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8001134:	481c      	ldr	r0, [pc, #112]	; (80011a8 <main+0xc7c>)
 8001136:	f7ff f809 	bl	800014c <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	4619      	mov	r1, r3
 800113e:	481a      	ldr	r0, [pc, #104]	; (80011a8 <main+0xc7c>)
 8001140:	f006 fa7a 	bl	8007638 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8001144:	bf00      	nop
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <main+0xc80>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <main+0xc32>
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <main+0xc84>)
 8001154:	f005 ff66 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f3      	bne.n	8001146 <main+0xc1a>
								SPI_FLASH_CONFIG();
 800115e:	f005 f81d 	bl	800619c <SPI_FLASH_CONFIG>



								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001162:	22ff      	movs	r2, #255	; 0xff
 8001164:	2100      	movs	r1, #0
 8001166:	4813      	ldr	r0, [pc, #76]	; (80011b4 <main+0xc88>)
 8001168:	f006 fd12 	bl	8007b90 <memset>
								spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <main+0xc8c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <main+0xc90>)
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	b291      	uxth	r1, r2
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <main+0xc88>)
 8001178:	4618      	mov	r0, r3
 800117a:	f005 f867 	bl	800624c <spiFlash_Read>
								for(int j = 0; j < 253; j++){
 800117e:	2300      	movs	r3, #0
 8001180:	653b      	str	r3, [r7, #80]	; 0x50
 8001182:	e024      	b.n	80011ce <main+0xca2>
									if(rd_test_buff[j] == 0xFF){
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <main+0xc88>)
 8001186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2bff      	cmp	r3, #255	; 0xff
 800118e:	d11b      	bne.n	80011c8 <main+0xc9c>
										val_cnt = rd_test_buff[j-1];
 8001190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001192:	3b01      	subs	r3, #1
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <main+0xc88>)
 8001196:	5cd2      	ldrb	r2, [r2, r3]
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <main+0xc94>)
 800119a:	701a      	strb	r2, [r3, #0]
										bcd_cnt_addr = j;
 800119c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <main+0xc98>)
 80011a0:	6013      	str	r3, [r2, #0]
										break;
 80011a2:	e017      	b.n	80011d4 <main+0xca8>
 80011a4:	200003a0 	.word	0x200003a0
 80011a8:	20000168 	.word	0x20000168
 80011ac:	20000d76 	.word	0x20000d76
 80011b0:	40003800 	.word	0x40003800
 80011b4:	20000a24 	.word	0x20000a24
 80011b8:	2000097c 	.word	0x2000097c
 80011bc:	2000096c 	.word	0x2000096c
 80011c0:	2000098a 	.word	0x2000098a
 80011c4:	2000099c 	.word	0x2000099c
								for(int j = 0; j < 253; j++){
 80011c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ca:	3301      	adds	r3, #1
 80011cc:	653b      	str	r3, [r7, #80]	; 0x50
 80011ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d0:	2bfc      	cmp	r3, #252	; 0xfc
 80011d2:	ddd7      	ble.n	8001184 <main+0xc58>
									}
								}
								if(val_cnt == 0){
 80011d4:	4bb5      	ldr	r3, [pc, #724]	; (80014ac <main+0xf80>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10f      	bne.n	80011fc <main+0xcd0>
									Usart2_SendData(android_empty_bar_mem,strlen(android_empty_bar_mem));
 80011dc:	48b4      	ldr	r0, [pc, #720]	; (80014b0 <main+0xf84>)
 80011de:	f7fe ffb5 	bl	800014c <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4619      	mov	r1, r3
 80011e6:	48b2      	ldr	r0, [pc, #712]	; (80014b0 <main+0xf84>)
 80011e8:	f006 fa26 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 80011ec:	48b1      	ldr	r0, [pc, #708]	; (80014b4 <main+0xf88>)
 80011ee:	f7fe ffad 	bl	800014c <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4619      	mov	r1, r3
 80011f6:	48af      	ldr	r0, [pc, #700]	; (80014b4 <main+0xf88>)
 80011f8:	f006 fa1e 	bl	8007638 <Usart2_SendData>

									}

								if(val_cnt > 0 && val_cnt < 253){
 80011fc:	4bab      	ldr	r3, [pc, #684]	; (80014ac <main+0xf80>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 814b 	beq.w	800149c <main+0xf70>
 8001206:	4ba9      	ldr	r3, [pc, #676]	; (80014ac <main+0xf80>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2bfc      	cmp	r3, #252	; 0xfc
 800120c:	f200 8146 	bhi.w	800149c <main+0xf70>
									bar_flash_addr = 8192 + (val_cnt - 1) * 16;
 8001210:	4ba6      	ldr	r3, [pc, #664]	; (80014ac <main+0xf80>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	461a      	mov	r2, r3
 800121c:	4ba6      	ldr	r3, [pc, #664]	; (80014b8 <main+0xf8c>)
 800121e:	601a      	str	r2, [r3, #0]
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	2100      	movs	r1, #0
 8001224:	48a5      	ldr	r0, [pc, #660]	; (80014bc <main+0xf90>)
 8001226:	f006 fcb3 	bl	8007b90 <memset>
									memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 800122a:	2210      	movs	r2, #16
 800122c:	2100      	movs	r1, #0
 800122e:	48a4      	ldr	r0, [pc, #656]	; (80014c0 <main+0xf94>)
 8001230:	f006 fcae 	bl	8007b90 <memset>
									spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 8001234:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <main+0xf8c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4aa2      	ldr	r2, [pc, #648]	; (80014c4 <main+0xf98>)
 800123a:	8811      	ldrh	r1, [r2, #0]
 800123c:	4aa0      	ldr	r2, [pc, #640]	; (80014c0 <main+0xf94>)
 800123e:	4618      	mov	r0, r3
 8001240:	f005 f804 	bl	800624c <spiFlash_Read>
									flash_timer = flash_conv2_timer(rd_flash_buff);
 8001244:	489e      	ldr	r0, [pc, #632]	; (80014c0 <main+0xf94>)
 8001246:	f002 fe9f 	bl	8003f88 <flash_conv2_timer>
 800124a:	4603      	mov	r3, r0
 800124c:	4a9e      	ldr	r2, [pc, #632]	; (80014c8 <main+0xf9c>)
 800124e:	6013      	str	r3, [r2, #0]
									timer_to_cal(flash_timer, &rtc_time);
 8001250:	4b9d      	ldr	r3, [pc, #628]	; (80014c8 <main+0xf9c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f107 0208 	add.w	r2, r7, #8
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f004 fa6a 	bl	8005734 <timer_to_cal>

									s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4a9a      	ldr	r2, [pc, #616]	; (80014cc <main+0xfa0>)
 8001264:	fb82 1203 	smull	r1, r2, r2, r3
 8001268:	1192      	asrs	r2, r2, #6
 800126a:	17db      	asrs	r3, r3, #31
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	4b98      	ldr	r3, [pc, #608]	; (80014d0 <main+0xfa4>)
 8001270:	fb83 1302 	smull	r1, r3, r3, r2
 8001274:	1099      	asrs	r1, r3, #2
 8001276:	17d3      	asrs	r3, r2, #31
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	460b      	mov	r3, r1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	1ad1      	subs	r1, r2, r3
 8001284:	b2cb      	uxtb	r3, r1
 8001286:	3330      	adds	r3, #48	; 0x30
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b92      	ldr	r3, [pc, #584]	; (80014d4 <main+0xfa8>)
 800128c:	701a      	strb	r2, [r3, #0]
									s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4a91      	ldr	r2, [pc, #580]	; (80014d8 <main+0xfac>)
 8001292:	fb82 1203 	smull	r1, r2, r2, r3
 8001296:	1152      	asrs	r2, r2, #5
 8001298:	17db      	asrs	r3, r3, #31
 800129a:	1ad2      	subs	r2, r2, r3
 800129c:	4b8c      	ldr	r3, [pc, #560]	; (80014d0 <main+0xfa4>)
 800129e:	fb83 1302 	smull	r1, r3, r3, r2
 80012a2:	1099      	asrs	r1, r3, #2
 80012a4:	17d3      	asrs	r3, r2, #31
 80012a6:	1ac9      	subs	r1, r1, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	1ad1      	subs	r1, r2, r3
 80012b2:	b2cb      	uxtb	r3, r1
 80012b4:	3330      	adds	r3, #48	; 0x30
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b86      	ldr	r3, [pc, #536]	; (80014d4 <main+0xfa8>)
 80012ba:	705a      	strb	r2, [r3, #1]
									s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4a84      	ldr	r2, [pc, #528]	; (80014d0 <main+0xfa4>)
 80012c0:	fb82 1203 	smull	r1, r2, r2, r3
 80012c4:	1092      	asrs	r2, r2, #2
 80012c6:	17db      	asrs	r3, r3, #31
 80012c8:	1ad2      	subs	r2, r2, r3
 80012ca:	4b81      	ldr	r3, [pc, #516]	; (80014d0 <main+0xfa4>)
 80012cc:	fb83 1302 	smull	r1, r3, r3, r2
 80012d0:	1099      	asrs	r1, r3, #2
 80012d2:	17d3      	asrs	r3, r2, #31
 80012d4:	1ac9      	subs	r1, r1, r3
 80012d6:	460b      	mov	r3, r1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	1ad1      	subs	r1, r2, r3
 80012e0:	b2cb      	uxtb	r3, r1
 80012e2:	3330      	adds	r3, #48	; 0x30
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <main+0xfa8>)
 80012e8:	709a      	strb	r2, [r3, #2]
									s_cal_data[3] = 0x30 + (rtc_time.year%10);
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <main+0xfa4>)
 80012ee:	fb83 1302 	smull	r1, r3, r3, r2
 80012f2:	1099      	asrs	r1, r3, #2
 80012f4:	17d3      	asrs	r3, r2, #31
 80012f6:	1ac9      	subs	r1, r1, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	1ad1      	subs	r1, r2, r3
 8001302:	b2cb      	uxtb	r3, r1
 8001304:	3330      	adds	r3, #48	; 0x30
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <main+0xfa8>)
 800130a:	70da      	strb	r2, [r3, #3]

									s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	4a73      	ldr	r2, [pc, #460]	; (80014dc <main+0xfb0>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3330      	adds	r3, #48	; 0x30
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <main+0xfa8>)
 800131e:	715a      	strb	r2, [r3, #5]
									s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8001320:	7b3a      	ldrb	r2, [r7, #12]
 8001322:	4b6e      	ldr	r3, [pc, #440]	; (80014dc <main+0xfb0>)
 8001324:	fba3 1302 	umull	r1, r3, r3, r2
 8001328:	08d9      	lsrs	r1, r3, #3
 800132a:	460b      	mov	r3, r1
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <main+0xfa8>)
 800133c:	719a      	strb	r2, [r3, #6]

									s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 800133e:	7b7b      	ldrb	r3, [r7, #13]
 8001340:	4a66      	ldr	r2, [pc, #408]	; (80014dc <main+0xfb0>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3330      	adds	r3, #48	; 0x30
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b61      	ldr	r3, [pc, #388]	; (80014d4 <main+0xfa8>)
 8001350:	721a      	strb	r2, [r3, #8]
									s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8001352:	7b7a      	ldrb	r2, [r7, #13]
 8001354:	4b61      	ldr	r3, [pc, #388]	; (80014dc <main+0xfb0>)
 8001356:	fba3 1302 	umull	r1, r3, r3, r2
 800135a:	08d9      	lsrs	r1, r3, #3
 800135c:	460b      	mov	r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	3330      	adds	r3, #48	; 0x30
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <main+0xfa8>)
 800136e:	725a      	strb	r2, [r3, #9]

									s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <main+0xfb0>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	3330      	adds	r3, #48	; 0x30
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <main+0xfa8>)
 8001382:	72da      	strb	r2, [r3, #11]
									s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001384:	7bba      	ldrb	r2, [r7, #14]
 8001386:	4b55      	ldr	r3, [pc, #340]	; (80014dc <main+0xfb0>)
 8001388:	fba3 1302 	umull	r1, r3, r3, r2
 800138c:	08d9      	lsrs	r1, r3, #3
 800138e:	460b      	mov	r3, r1
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3330      	adds	r3, #48	; 0x30
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <main+0xfa8>)
 80013a0:	731a      	strb	r2, [r3, #12]

									s_cal_data[14] = 0x30 + (rtc_time.min/10);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <main+0xfb0>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	3330      	adds	r3, #48	; 0x30
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <main+0xfa8>)
 80013b4:	739a      	strb	r2, [r3, #14]
									s_cal_data[15] = 0x30 + (rtc_time.min%10);
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	4b48      	ldr	r3, [pc, #288]	; (80014dc <main+0xfb0>)
 80013ba:	fba3 1302 	umull	r1, r3, r3, r2
 80013be:	08d9      	lsrs	r1, r3, #3
 80013c0:	460b      	mov	r3, r1
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3330      	adds	r3, #48	; 0x30
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <main+0xfa8>)
 80013d2:	73da      	strb	r2, [r3, #15]

									s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	4a41      	ldr	r2, [pc, #260]	; (80014dc <main+0xfb0>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	3330      	adds	r3, #48	; 0x30
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <main+0xfa8>)
 80013e6:	745a      	strb	r2, [r3, #17]
									s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 80013e8:	7c3a      	ldrb	r2, [r7, #16]
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <main+0xfb0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	08d9      	lsrs	r1, r3, #3
 80013f2:	460b      	mov	r3, r1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3330      	adds	r3, #48	; 0x30
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <main+0xfa8>)
 8001404:	749a      	strb	r2, [r3, #18]

									flash_conv2_bcode(rd_flash_buff);
 8001406:	482e      	ldr	r0, [pc, #184]	; (80014c0 <main+0xf94>)
 8001408:	f002 fdda 	bl	8003fc0 <flash_conv2_bcode>
									memset(f_sBarCode,0,strlen(f_sNfcCode));
 800140c:	4834      	ldr	r0, [pc, #208]	; (80014e0 <main+0xfb4>)
 800140e:	f7fe fe9d 	bl	800014c <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	4832      	ldr	r0, [pc, #200]	; (80014e4 <main+0xfb8>)
 800141a:	f006 fbb9 	bl	8007b90 <memset>
									strlcpy ( f_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 800141e:	221a      	movs	r2, #26
 8001420:	4931      	ldr	r1, [pc, #196]	; (80014e8 <main+0xfbc>)
 8001422:	4830      	ldr	r0, [pc, #192]	; (80014e4 <main+0xfb8>)
 8001424:	f006 fbd3 	bl	8007bce <strlcpy>
									strcat(f_sBarCode,fl_bar_buff );
 8001428:	4930      	ldr	r1, [pc, #192]	; (80014ec <main+0xfc0>)
 800142a:	482e      	ldr	r0, [pc, #184]	; (80014e4 <main+0xfb8>)
 800142c:	f006 fbb8 	bl	8007ba0 <strcat>
									strncat(s_flash_d_c, s_cal_data, 19);
 8001430:	2213      	movs	r2, #19
 8001432:	4928      	ldr	r1, [pc, #160]	; (80014d4 <main+0xfa8>)
 8001434:	482e      	ldr	r0, [pc, #184]	; (80014f0 <main+0xfc4>)
 8001436:	f006 fbdf 	bl	8007bf8 <strncat>
									strncat(s_flash_d_c, s_space, strlen(s_space));
 800143a:	2300      	movs	r3, #0
 800143c:	461a      	mov	r2, r3
 800143e:	492d      	ldr	r1, [pc, #180]	; (80014f4 <main+0xfc8>)
 8001440:	482b      	ldr	r0, [pc, #172]	; (80014f0 <main+0xfc4>)
 8001442:	f006 fbd9 	bl	8007bf8 <strncat>
									strncat(s_flash_d_c, f_sBarCode, strlen(f_sBarCode));
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <main+0xfb8>)
 8001448:	f7fe fe80 	bl	800014c <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4924      	ldr	r1, [pc, #144]	; (80014e4 <main+0xfb8>)
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <main+0xfc4>)
 8001454:	f006 fbd0 	bl	8007bf8 <strncat>
									strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <main+0xf88>)
 800145a:	f7fe fe77 	bl	800014c <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <main+0xf88>)
 8001464:	4822      	ldr	r0, [pc, #136]	; (80014f0 <main+0xfc4>)
 8001466:	f006 fbc7 	bl	8007bf8 <strncat>

									Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 800146a:	4821      	ldr	r0, [pc, #132]	; (80014f0 <main+0xfc4>)
 800146c:	f7fe fe6e 	bl	800014c <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	481e      	ldr	r0, [pc, #120]	; (80014f0 <main+0xfc4>)
 8001476:	f006 f8df 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <main+0xf88>)
 800147c:	f7fe fe66 	bl	800014c <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <main+0xf88>)
 8001486:	f006 f8d7 	bl	8007638 <Usart2_SendData>

									memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 800148a:	4819      	ldr	r0, [pc, #100]	; (80014f0 <main+0xfc4>)
 800148c:	f7fe fe5e 	bl	800014c <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	2100      	movs	r1, #0
 8001496:	4816      	ldr	r0, [pc, #88]	; (80014f0 <main+0xfc4>)
 8001498:	f006 fb7a 	bl	8007b90 <memset>
								}

								SpiActive = 0;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <main+0xfcc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 80014a2:	f004 fd6d 	bl	8005f80 <PN532_SPIInit>
								break;
 80014a6:	f000 be3b 	b.w	8002120 <main+0x1bf4>
 80014aa:	bf00      	nop
 80014ac:	2000098a 	.word	0x2000098a
 80014b0:	20000418 	.word	0x20000418
 80014b4:	20000168 	.word	0x20000168
 80014b8:	20000990 	.word	0x20000990
 80014bc:	20000a24 	.word	0x20000a24
 80014c0:	20000b24 	.word	0x20000b24
 80014c4:	20000d5e 	.word	0x20000d5e
 80014c8:	20000998 	.word	0x20000998
 80014cc:	10624dd3 	.word	0x10624dd3
 80014d0:	66666667 	.word	0x66666667
 80014d4:	20000220 	.word	0x20000220
 80014d8:	51eb851f 	.word	0x51eb851f
 80014dc:	cccccccd 	.word	0xcccccccd
 80014e0:	20000624 	.word	0x20000624
 80014e4:	200005ec 	.word	0x200005ec
 80014e8:	200000d4 	.word	0x200000d4
 80014ec:	20000b34 	.word	0x20000b34
 80014f0:	200008dc 	.word	0x200008dc
 80014f4:	200001d0 	.word	0x200001d0
 80014f8:	20000d76 	.word	0x20000d76
							case 202://чтение последней NFC-метки
								Usart2_SendData(android_last_nfc,strlen(android_last_nfc));
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <main+0x1050>)
 80014fe:	f7fe fe25 	bl	800014c <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	4619      	mov	r1, r3
 8001506:	481d      	ldr	r0, [pc, #116]	; (800157c <main+0x1050>)
 8001508:	f006 f896 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800150c:	481c      	ldr	r0, [pc, #112]	; (8001580 <main+0x1054>)
 800150e:	f7fe fe1d 	bl	800014c <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	4619      	mov	r1, r3
 8001516:	481a      	ldr	r0, [pc, #104]	; (8001580 <main+0x1054>)
 8001518:	f006 f88e 	bl	8007638 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 800151c:	bf00      	nop
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <main+0x1058>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d006      	beq.n	8001536 <main+0x100a>
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	4817      	ldr	r0, [pc, #92]	; (8001588 <main+0x105c>)
 800152c:	f005 fd7a 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f3      	bne.n	800151e <main+0xff2>
								SPI_FLASH_CONFIG();
 8001536:	f004 fe31 	bl	800619c <SPI_FLASH_CONFIG>


								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 800153a:	22ff      	movs	r2, #255	; 0xff
 800153c:	2100      	movs	r1, #0
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <main+0x1060>)
 8001540:	f006 fb26 	bl	8007b90 <memset>
								spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <main+0x1064>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a12      	ldr	r2, [pc, #72]	; (8001594 <main+0x1068>)
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	b291      	uxth	r1, r2
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <main+0x1060>)
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fe7b 	bl	800624c <spiFlash_Read>
								for(int j = 0; j < 253; j++){
 8001556:	2300      	movs	r3, #0
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800155a:	e024      	b.n	80015a6 <main+0x107a>
								if(rd_test_buff[j] == 0xFF){
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <main+0x1060>)
 800155e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2bff      	cmp	r3, #255	; 0xff
 8001566:	d11b      	bne.n	80015a0 <main+0x1074>
									val_cnt = rd_test_buff[j-1];
 8001568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156a:	3b01      	subs	r3, #1
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <main+0x1060>)
 800156e:	5cd2      	ldrb	r2, [r2, r3]
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <main+0x106c>)
 8001572:	701a      	strb	r2, [r3, #0]
									nfc_cnt_addr = j;
 8001574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <main+0x1070>)
 8001578:	6013      	str	r3, [r2, #0]
									break;
 800157a:	e017      	b.n	80015ac <main+0x1080>
 800157c:	200003bc 	.word	0x200003bc
 8001580:	20000168 	.word	0x20000168
 8001584:	20000d76 	.word	0x20000d76
 8001588:	40003800 	.word	0x40003800
 800158c:	20000a24 	.word	0x20000a24
 8001590:	20000984 	.word	0x20000984
 8001594:	2000096c 	.word	0x2000096c
 8001598:	2000098a 	.word	0x2000098a
 800159c:	200009a0 	.word	0x200009a0
								for(int j = 0; j < 253; j++){
 80015a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a2:	3301      	adds	r3, #1
 80015a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a8:	2bfc      	cmp	r3, #252	; 0xfc
 80015aa:	ddd7      	ble.n	800155c <main+0x1030>
									}
								}
								if(val_cnt == 0){
 80015ac:	4bb9      	ldr	r3, [pc, #740]	; (8001894 <main+0x1368>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10f      	bne.n	80015d4 <main+0x10a8>
								Usart2_SendData(android_empty_nfc_mem,strlen(android_empty_nfc_mem));
 80015b4:	48b8      	ldr	r0, [pc, #736]	; (8001898 <main+0x136c>)
 80015b6:	f7fe fdc9 	bl	800014c <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	48b6      	ldr	r0, [pc, #728]	; (8001898 <main+0x136c>)
 80015c0:	f006 f83a 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80015c4:	48b5      	ldr	r0, [pc, #724]	; (800189c <main+0x1370>)
 80015c6:	f7fe fdc1 	bl	800014c <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	48b3      	ldr	r0, [pc, #716]	; (800189c <main+0x1370>)
 80015d0:	f006 f832 	bl	8007638 <Usart2_SendData>

								}

								if(val_cnt > 0 && val_cnt < 253){
 80015d4:	4baf      	ldr	r3, [pc, #700]	; (8001894 <main+0x1368>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8153 	beq.w	8001884 <main+0x1358>
 80015de:	4bad      	ldr	r3, [pc, #692]	; (8001894 <main+0x1368>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2bfc      	cmp	r3, #252	; 0xfc
 80015e4:	f200 814e 	bhi.w	8001884 <main+0x1358>
								nfc_flash_addr = 12288 + (val_cnt - 1) * 16;
 80015e8:	4baa      	ldr	r3, [pc, #680]	; (8001894 <main+0x1368>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f203 23ff 	addw	r3, r3, #767	; 0x2ff
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	461a      	mov	r2, r3
 80015f4:	4baa      	ldr	r3, [pc, #680]	; (80018a0 <main+0x1374>)
 80015f6:	601a      	str	r2, [r3, #0]
								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 80015f8:	22ff      	movs	r2, #255	; 0xff
 80015fa:	2100      	movs	r1, #0
 80015fc:	48a9      	ldr	r0, [pc, #676]	; (80018a4 <main+0x1378>)
 80015fe:	f006 fac7 	bl	8007b90 <memset>
								memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 8001602:	2210      	movs	r2, #16
 8001604:	2100      	movs	r1, #0
 8001606:	48a8      	ldr	r0, [pc, #672]	; (80018a8 <main+0x137c>)
 8001608:	f006 fac2 	bl	8007b90 <memset>
								spiFlash_Read(nfc_flash_addr, cnt_flash, rd_flash_buff);
 800160c:	4ba4      	ldr	r3, [pc, #656]	; (80018a0 <main+0x1374>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4aa6      	ldr	r2, [pc, #664]	; (80018ac <main+0x1380>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	4aa4      	ldr	r2, [pc, #656]	; (80018a8 <main+0x137c>)
 8001616:	4618      	mov	r0, r3
 8001618:	f004 fe18 	bl	800624c <spiFlash_Read>
								flash_timer = flash_conv2_timer(rd_flash_buff);
 800161c:	48a2      	ldr	r0, [pc, #648]	; (80018a8 <main+0x137c>)
 800161e:	f002 fcb3 	bl	8003f88 <flash_conv2_timer>
 8001622:	4603      	mov	r3, r0
 8001624:	4aa2      	ldr	r2, [pc, #648]	; (80018b0 <main+0x1384>)
 8001626:	6013      	str	r3, [r2, #0]
								timer_to_cal(flash_timer, &rtc_time);
 8001628:	4ba1      	ldr	r3, [pc, #644]	; (80018b0 <main+0x1384>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f107 0208 	add.w	r2, r7, #8
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f004 f87e 	bl	8005734 <timer_to_cal>

								s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4a9e      	ldr	r2, [pc, #632]	; (80018b4 <main+0x1388>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	1192      	asrs	r2, r2, #6
 8001642:	17db      	asrs	r3, r3, #31
 8001644:	1ad2      	subs	r2, r2, r3
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <main+0x138c>)
 8001648:	fb83 1302 	smull	r1, r3, r3, r2
 800164c:	1099      	asrs	r1, r3, #2
 800164e:	17d3      	asrs	r3, r2, #31
 8001650:	1ac9      	subs	r1, r1, r3
 8001652:	460b      	mov	r3, r1
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	1ad1      	subs	r1, r2, r3
 800165c:	b2cb      	uxtb	r3, r1
 800165e:	3330      	adds	r3, #48	; 0x30
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b96      	ldr	r3, [pc, #600]	; (80018bc <main+0x1390>)
 8001664:	701a      	strb	r2, [r3, #0]
								s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4a95      	ldr	r2, [pc, #596]	; (80018c0 <main+0x1394>)
 800166a:	fb82 1203 	smull	r1, r2, r2, r3
 800166e:	1152      	asrs	r2, r2, #5
 8001670:	17db      	asrs	r3, r3, #31
 8001672:	1ad2      	subs	r2, r2, r3
 8001674:	4b90      	ldr	r3, [pc, #576]	; (80018b8 <main+0x138c>)
 8001676:	fb83 1302 	smull	r1, r3, r3, r2
 800167a:	1099      	asrs	r1, r3, #2
 800167c:	17d3      	asrs	r3, r2, #31
 800167e:	1ac9      	subs	r1, r1, r3
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	1ad1      	subs	r1, r2, r3
 800168a:	b2cb      	uxtb	r3, r1
 800168c:	3330      	adds	r3, #48	; 0x30
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b8a      	ldr	r3, [pc, #552]	; (80018bc <main+0x1390>)
 8001692:	705a      	strb	r2, [r3, #1]
								s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4a88      	ldr	r2, [pc, #544]	; (80018b8 <main+0x138c>)
 8001698:	fb82 1203 	smull	r1, r2, r2, r3
 800169c:	1092      	asrs	r2, r2, #2
 800169e:	17db      	asrs	r3, r3, #31
 80016a0:	1ad2      	subs	r2, r2, r3
 80016a2:	4b85      	ldr	r3, [pc, #532]	; (80018b8 <main+0x138c>)
 80016a4:	fb83 1302 	smull	r1, r3, r3, r2
 80016a8:	1099      	asrs	r1, r3, #2
 80016aa:	17d3      	asrs	r3, r2, #31
 80016ac:	1ac9      	subs	r1, r1, r3
 80016ae:	460b      	mov	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	1ad1      	subs	r1, r2, r3
 80016b8:	b2cb      	uxtb	r3, r1
 80016ba:	3330      	adds	r3, #48	; 0x30
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <main+0x1390>)
 80016c0:	709a      	strb	r2, [r3, #2]
								s_cal_data[3] = 0x30 + (rtc_time.year%10);
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <main+0x138c>)
 80016c6:	fb83 1302 	smull	r1, r3, r3, r2
 80016ca:	1099      	asrs	r1, r3, #2
 80016cc:	17d3      	asrs	r3, r2, #31
 80016ce:	1ac9      	subs	r1, r1, r3
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	1ad1      	subs	r1, r2, r3
 80016da:	b2cb      	uxtb	r3, r1
 80016dc:	3330      	adds	r3, #48	; 0x30
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b76      	ldr	r3, [pc, #472]	; (80018bc <main+0x1390>)
 80016e2:	70da      	strb	r2, [r3, #3]

								s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <main+0x1398>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3330      	adds	r3, #48	; 0x30
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b71      	ldr	r3, [pc, #452]	; (80018bc <main+0x1390>)
 80016f6:	715a      	strb	r2, [r3, #5]
								s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 80016f8:	7b3a      	ldrb	r2, [r7, #12]
 80016fa:	4b72      	ldr	r3, [pc, #456]	; (80018c4 <main+0x1398>)
 80016fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001700:	08d9      	lsrs	r1, r3, #3
 8001702:	460b      	mov	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3330      	adds	r3, #48	; 0x30
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b6a      	ldr	r3, [pc, #424]	; (80018bc <main+0x1390>)
 8001714:	719a      	strb	r2, [r3, #6]

								s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <main+0x1398>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	08db      	lsrs	r3, r3, #3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	3330      	adds	r3, #48	; 0x30
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b65      	ldr	r3, [pc, #404]	; (80018bc <main+0x1390>)
 8001728:	721a      	strb	r2, [r3, #8]
								s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 800172a:	7b7a      	ldrb	r2, [r7, #13]
 800172c:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <main+0x1398>)
 800172e:	fba3 1302 	umull	r1, r3, r3, r2
 8001732:	08d9      	lsrs	r1, r3, #3
 8001734:	460b      	mov	r3, r1
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3330      	adds	r3, #48	; 0x30
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <main+0x1390>)
 8001746:	725a      	strb	r2, [r3, #9]

								s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <main+0x1398>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	3330      	adds	r3, #48	; 0x30
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b58      	ldr	r3, [pc, #352]	; (80018bc <main+0x1390>)
 800175a:	72da      	strb	r2, [r3, #11]
								s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 800175c:	7bba      	ldrb	r2, [r7, #14]
 800175e:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <main+0x1398>)
 8001760:	fba3 1302 	umull	r1, r3, r3, r2
 8001764:	08d9      	lsrs	r1, r3, #3
 8001766:	460b      	mov	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	3330      	adds	r3, #48	; 0x30
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b51      	ldr	r3, [pc, #324]	; (80018bc <main+0x1390>)
 8001778:	731a      	strb	r2, [r3, #12]

								s_cal_data[14] = 0x30 + (rtc_time.min/10);
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	4a51      	ldr	r2, [pc, #324]	; (80018c4 <main+0x1398>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3330      	adds	r3, #48	; 0x30
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <main+0x1390>)
 800178c:	739a      	strb	r2, [r3, #14]
								s_cal_data[15] = 0x30 + (rtc_time.min%10);
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <main+0x1398>)
 8001792:	fba3 1302 	umull	r1, r3, r3, r2
 8001796:	08d9      	lsrs	r1, r3, #3
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3330      	adds	r3, #48	; 0x30
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <main+0x1390>)
 80017aa:	73da      	strb	r2, [r3, #15]

								s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 80017ac:	7c3b      	ldrb	r3, [r7, #16]
 80017ae:	4a45      	ldr	r2, [pc, #276]	; (80018c4 <main+0x1398>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	3330      	adds	r3, #48	; 0x30
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <main+0x1390>)
 80017be:	745a      	strb	r2, [r3, #17]
								s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 80017c0:	7c3a      	ldrb	r2, [r7, #16]
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <main+0x1398>)
 80017c4:	fba3 1302 	umull	r1, r3, r3, r2
 80017c8:	08d9      	lsrs	r1, r3, #3
 80017ca:	460b      	mov	r3, r1
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3330      	adds	r3, #48	; 0x30
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <main+0x1390>)
 80017dc:	749a      	strb	r2, [r3, #18]

								flash_uid = flash_conv2_uid(rd_flash_buff);
 80017de:	4832      	ldr	r0, [pc, #200]	; (80018a8 <main+0x137c>)
 80017e0:	f002 fc66 	bl	80040b0 <flash_conv2_uid>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <main+0x139c>)
 80017e8:	6013      	str	r3, [r2, #0]
								flash_conv2_nfc(flash_uid);
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <main+0x139c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fc7c 	bl	80040ec <flash_conv2_nfc>

								memset(f_sNfcCode,0,strlen(f_sNfcCode));
 80017f4:	4835      	ldr	r0, [pc, #212]	; (80018cc <main+0x13a0>)
 80017f6:	f7fe fca9 	bl	800014c <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	4832      	ldr	r0, [pc, #200]	; (80018cc <main+0x13a0>)
 8001802:	f006 f9c5 	bl	8007b90 <memset>
								strlcpy ( f_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 8001806:	221a      	movs	r2, #26
 8001808:	4931      	ldr	r1, [pc, #196]	; (80018d0 <main+0x13a4>)
 800180a:	4830      	ldr	r0, [pc, #192]	; (80018cc <main+0x13a0>)
 800180c:	f006 f9df 	bl	8007bce <strlcpy>
								strcat(f_sNfcCode,nfc_uid_arr );
 8001810:	4930      	ldr	r1, [pc, #192]	; (80018d4 <main+0x13a8>)
 8001812:	482e      	ldr	r0, [pc, #184]	; (80018cc <main+0x13a0>)
 8001814:	f006 f9c4 	bl	8007ba0 <strcat>
								strncat(s_flash_d_c, s_cal_data, 19);
 8001818:	2213      	movs	r2, #19
 800181a:	4928      	ldr	r1, [pc, #160]	; (80018bc <main+0x1390>)
 800181c:	482e      	ldr	r0, [pc, #184]	; (80018d8 <main+0x13ac>)
 800181e:	f006 f9eb 	bl	8007bf8 <strncat>
								strncat(s_flash_d_c, s_space, strlen(s_space));
 8001822:	2300      	movs	r3, #0
 8001824:	461a      	mov	r2, r3
 8001826:	492d      	ldr	r1, [pc, #180]	; (80018dc <main+0x13b0>)
 8001828:	482b      	ldr	r0, [pc, #172]	; (80018d8 <main+0x13ac>)
 800182a:	f006 f9e5 	bl	8007bf8 <strncat>
								strncat(s_flash_d_c, f_sNfcCode, strlen(f_sNfcCode));
 800182e:	4827      	ldr	r0, [pc, #156]	; (80018cc <main+0x13a0>)
 8001830:	f7fe fc8c 	bl	800014c <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4924      	ldr	r1, [pc, #144]	; (80018cc <main+0x13a0>)
 800183a:	4827      	ldr	r0, [pc, #156]	; (80018d8 <main+0x13ac>)
 800183c:	f006 f9dc 	bl	8007bf8 <strncat>
								strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <main+0x1370>)
 8001842:	f7fe fc83 	bl	800014c <strlen>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4914      	ldr	r1, [pc, #80]	; (800189c <main+0x1370>)
 800184c:	4822      	ldr	r0, [pc, #136]	; (80018d8 <main+0x13ac>)
 800184e:	f006 f9d3 	bl	8007bf8 <strncat>

								Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 8001852:	4821      	ldr	r0, [pc, #132]	; (80018d8 <main+0x13ac>)
 8001854:	f7fe fc7a 	bl	800014c <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	481e      	ldr	r0, [pc, #120]	; (80018d8 <main+0x13ac>)
 800185e:	f005 feeb 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <main+0x1370>)
 8001864:	f7fe fc72 	bl	800014c <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <main+0x1370>)
 800186e:	f005 fee3 	bl	8007638 <Usart2_SendData>

								memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 8001872:	4819      	ldr	r0, [pc, #100]	; (80018d8 <main+0x13ac>)
 8001874:	f7fe fc6a 	bl	800014c <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	2100      	movs	r1, #0
 800187e:	4816      	ldr	r0, [pc, #88]	; (80018d8 <main+0x13ac>)
 8001880:	f006 f986 	bl	8007b90 <memset>
								}

								SpiActive = 0;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <main+0x13b4>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 800188a:	f004 fb79 	bl	8005f80 <PN532_SPIInit>

								break;
 800188e:	f000 bc47 	b.w	8002120 <main+0x1bf4>
 8001892:	bf00      	nop
 8001894:	2000098a 	.word	0x2000098a
 8001898:	2000043c 	.word	0x2000043c
 800189c:	20000168 	.word	0x20000168
 80018a0:	20000994 	.word	0x20000994
 80018a4:	20000a24 	.word	0x20000a24
 80018a8:	20000b24 	.word	0x20000b24
 80018ac:	20000d5e 	.word	0x20000d5e
 80018b0:	20000998 	.word	0x20000998
 80018b4:	10624dd3 	.word	0x10624dd3
 80018b8:	66666667 	.word	0x66666667
 80018bc:	20000220 	.word	0x20000220
 80018c0:	51eb851f 	.word	0x51eb851f
 80018c4:	cccccccd 	.word	0xcccccccd
 80018c8:	200009a8 	.word	0x200009a8
 80018cc:	20000624 	.word	0x20000624
 80018d0:	200000e0 	.word	0x200000e0
 80018d4:	200009f8 	.word	0x200009f8
 80018d8:	200008dc 	.word	0x200008dc
 80018dc:	200001d0 	.word	0x200001d0
 80018e0:	20000d76 	.word	0x20000d76
							case 203://чтение последних пяти штрих-кодов
								Usart2_SendData(android_last_5_bcodes,strlen(android_last_5_bcodes));
 80018e4:	484a      	ldr	r0, [pc, #296]	; (8001a10 <main+0x14e4>)
 80018e6:	f7fe fc31 	bl	800014c <strlen>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4848      	ldr	r0, [pc, #288]	; (8001a10 <main+0x14e4>)
 80018f0:	f005 fea2 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80018f4:	4847      	ldr	r0, [pc, #284]	; (8001a14 <main+0x14e8>)
 80018f6:	f7fe fc29 	bl	800014c <strlen>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4845      	ldr	r0, [pc, #276]	; (8001a14 <main+0x14e8>)
 8001900:	f005 fe9a 	bl	8007638 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8001904:	bf00      	nop
 8001906:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <main+0x14ec>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <main+0x13f2>
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	4842      	ldr	r0, [pc, #264]	; (8001a1c <main+0x14f0>)
 8001914:	f005 fb86 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f3      	bne.n	8001906 <main+0x13da>
								SPI_FLASH_CONFIG();
 800191e:	f004 fc3d 	bl	800619c <SPI_FLASH_CONFIG>

								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001922:	22ff      	movs	r2, #255	; 0xff
 8001924:	2100      	movs	r1, #0
 8001926:	483e      	ldr	r0, [pc, #248]	; (8001a20 <main+0x14f4>)
 8001928:	f006 f932 	bl	8007b90 <memset>
								spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <main+0x14f8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <main+0x14fc>)
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	b291      	uxth	r1, r2
 8001936:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <main+0x14f4>)
 8001938:	4618      	mov	r0, r3
 800193a:	f004 fc87 	bl	800624c <spiFlash_Read>
								for(int j = 0; j < 253; j++){
 800193e:	2300      	movs	r3, #0
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
 8001942:	e012      	b.n	800196a <main+0x143e>
								if(rd_test_buff[j] == 0xFF){
 8001944:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <main+0x14f4>)
 8001946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2bff      	cmp	r3, #255	; 0xff
 800194e:	d109      	bne.n	8001964 <main+0x1438>
									val_cnt = rd_test_buff[j-1];
 8001950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001952:	3b01      	subs	r3, #1
 8001954:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <main+0x14f4>)
 8001956:	5cd2      	ldrb	r2, [r2, r3]
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <main+0x1500>)
 800195a:	701a      	strb	r2, [r3, #0]
									bcd_cnt_addr = j;
 800195c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800195e:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <main+0x1504>)
 8001960:	6013      	str	r3, [r2, #0]
									break;
 8001962:	e005      	b.n	8001970 <main+0x1444>
								for(int j = 0; j < 253; j++){
 8001964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001966:	3301      	adds	r3, #1
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
 800196a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800196c:	2bfc      	cmp	r3, #252	; 0xfc
 800196e:	dde9      	ble.n	8001944 <main+0x1418>
									}
								}

								if(val_cnt == 0){
 8001970:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <main+0x1500>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10f      	bne.n	8001998 <main+0x146c>
									Usart2_SendData(android_empty_bar_mem,strlen(android_empty_bar_mem));
 8001978:	482e      	ldr	r0, [pc, #184]	; (8001a34 <main+0x1508>)
 800197a:	f7fe fbe7 	bl	800014c <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	4619      	mov	r1, r3
 8001982:	482c      	ldr	r0, [pc, #176]	; (8001a34 <main+0x1508>)
 8001984:	f005 fe58 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8001988:	4822      	ldr	r0, [pc, #136]	; (8001a14 <main+0x14e8>)
 800198a:	f7fe fbdf 	bl	800014c <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	4619      	mov	r1, r3
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <main+0x14e8>)
 8001994:	f005 fe50 	bl	8007638 <Usart2_SendData>

									}
								if(val_cnt > 0 && val_cnt < 5){
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <main+0x1500>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 819d 	beq.w	8001cdc <main+0x17b0>
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <main+0x1500>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	f200 8198 	bhi.w	8001cdc <main+0x17b0>
									number_records = (char) val_cnt;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <main+0x1500>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <main+0x150c>)
 80019b2:	701a      	strb	r2, [r3, #0]
									memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 80019b4:	4821      	ldr	r0, [pc, #132]	; (8001a3c <main+0x1510>)
 80019b6:	f7fe fbc9 	bl	800014c <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	2100      	movs	r1, #0
 80019c0:	481e      	ldr	r0, [pc, #120]	; (8001a3c <main+0x1510>)
 80019c2:	f006 f8e5 	bl	8007b90 <memset>
									strncat(s_flash_d_c, android_number_records, strlen(android_number_records));
 80019c6:	481e      	ldr	r0, [pc, #120]	; (8001a40 <main+0x1514>)
 80019c8:	f7fe fbc0 	bl	800014c <strlen>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	491b      	ldr	r1, [pc, #108]	; (8001a40 <main+0x1514>)
 80019d2:	481a      	ldr	r0, [pc, #104]	; (8001a3c <main+0x1510>)
 80019d4:	f006 f910 	bl	8007bf8 <strncat>
									strncat(s_flash_d_c, number_records, strlen(number_records));
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <main+0x150c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461c      	mov	r4, r3
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <main+0x150c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fbb2 	bl	800014c <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4621      	mov	r1, r4
 80019ee:	4813      	ldr	r0, [pc, #76]	; (8001a3c <main+0x1510>)
 80019f0:	f006 f902 	bl	8007bf8 <strncat>
									strncat(s_flash_d_c, s_newline, strlen(s_newline));
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <main+0x14e8>)
 80019f6:	f7fe fba9 	bl	800014c <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4905      	ldr	r1, [pc, #20]	; (8001a14 <main+0x14e8>)
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <main+0x1510>)
 8001a02:	f006 f8f9 	bl	8007bf8 <strncat>

									for(int x = val_cnt; x == 1; x--){
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <main+0x1500>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a0c:	e162      	b.n	8001cd4 <main+0x17a8>
 8001a0e:	bf00      	nop
 8001a10:	200003f8 	.word	0x200003f8
 8001a14:	20000168 	.word	0x20000168
 8001a18:	20000d76 	.word	0x20000d76
 8001a1c:	40003800 	.word	0x40003800
 8001a20:	20000a24 	.word	0x20000a24
 8001a24:	2000097c 	.word	0x2000097c
 8001a28:	2000096c 	.word	0x2000096c
 8001a2c:	2000098a 	.word	0x2000098a
 8001a30:	2000099c 	.word	0x2000099c
 8001a34:	20000418 	.word	0x20000418
 8001a38:	200009ac 	.word	0x200009ac
 8001a3c:	200008dc 	.word	0x200008dc
 8001a40:	20000460 	.word	0x20000460
										bar_flash_addr = 8192 + (x - 1) * 16;
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4bbb      	ldr	r3, [pc, #748]	; (8001d3c <main+0x1810>)
 8001a50:	601a      	str	r2, [r3, #0]
										memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001a52:	22ff      	movs	r2, #255	; 0xff
 8001a54:	2100      	movs	r1, #0
 8001a56:	48ba      	ldr	r0, [pc, #744]	; (8001d40 <main+0x1814>)
 8001a58:	f006 f89a 	bl	8007b90 <memset>
										memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	2100      	movs	r1, #0
 8001a60:	48b8      	ldr	r0, [pc, #736]	; (8001d44 <main+0x1818>)
 8001a62:	f006 f895 	bl	8007b90 <memset>
										spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 8001a66:	4bb5      	ldr	r3, [pc, #724]	; (8001d3c <main+0x1810>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4ab7      	ldr	r2, [pc, #732]	; (8001d48 <main+0x181c>)
 8001a6c:	8811      	ldrh	r1, [r2, #0]
 8001a6e:	4ab5      	ldr	r2, [pc, #724]	; (8001d44 <main+0x1818>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 fbeb 	bl	800624c <spiFlash_Read>
										flash_timer = flash_conv2_timer(rd_flash_buff);
 8001a76:	48b3      	ldr	r0, [pc, #716]	; (8001d44 <main+0x1818>)
 8001a78:	f002 fa86 	bl	8003f88 <flash_conv2_timer>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4ab3      	ldr	r2, [pc, #716]	; (8001d4c <main+0x1820>)
 8001a80:	6013      	str	r3, [r2, #0]
										timer_to_cal(flash_timer, &rtc_time);
 8001a82:	4bb2      	ldr	r3, [pc, #712]	; (8001d4c <main+0x1820>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f107 0208 	add.w	r2, r7, #8
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fe51 	bl	8005734 <timer_to_cal>

										s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4aae      	ldr	r2, [pc, #696]	; (8001d50 <main+0x1824>)
 8001a96:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9a:	1192      	asrs	r2, r2, #6
 8001a9c:	17db      	asrs	r3, r3, #31
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	4bac      	ldr	r3, [pc, #688]	; (8001d54 <main+0x1828>)
 8001aa2:	fb83 1302 	smull	r1, r3, r3, r2
 8001aa6:	1099      	asrs	r1, r3, #2
 8001aa8:	17d3      	asrs	r3, r2, #31
 8001aaa:	1ac9      	subs	r1, r1, r3
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	1ad1      	subs	r1, r2, r3
 8001ab6:	b2cb      	uxtb	r3, r1
 8001ab8:	3330      	adds	r3, #48	; 0x30
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4ba6      	ldr	r3, [pc, #664]	; (8001d58 <main+0x182c>)
 8001abe:	701a      	strb	r2, [r3, #0]
										s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4aa6      	ldr	r2, [pc, #664]	; (8001d5c <main+0x1830>)
 8001ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac8:	1152      	asrs	r2, r2, #5
 8001aca:	17db      	asrs	r3, r3, #31
 8001acc:	1ad2      	subs	r2, r2, r3
 8001ace:	4ba1      	ldr	r3, [pc, #644]	; (8001d54 <main+0x1828>)
 8001ad0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ad4:	1099      	asrs	r1, r3, #2
 8001ad6:	17d3      	asrs	r3, r2, #31
 8001ad8:	1ac9      	subs	r1, r1, r3
 8001ada:	460b      	mov	r3, r1
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1ad1      	subs	r1, r2, r3
 8001ae4:	b2cb      	uxtb	r3, r1
 8001ae6:	3330      	adds	r3, #48	; 0x30
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b9b      	ldr	r3, [pc, #620]	; (8001d58 <main+0x182c>)
 8001aec:	705a      	strb	r2, [r3, #1]
										s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	4a98      	ldr	r2, [pc, #608]	; (8001d54 <main+0x1828>)
 8001af2:	fb82 1203 	smull	r1, r2, r2, r3
 8001af6:	1092      	asrs	r2, r2, #2
 8001af8:	17db      	asrs	r3, r3, #31
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	4b95      	ldr	r3, [pc, #596]	; (8001d54 <main+0x1828>)
 8001afe:	fb83 1302 	smull	r1, r3, r3, r2
 8001b02:	1099      	asrs	r1, r3, #2
 8001b04:	17d3      	asrs	r3, r2, #31
 8001b06:	1ac9      	subs	r1, r1, r3
 8001b08:	460b      	mov	r3, r1
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	1ad1      	subs	r1, r2, r3
 8001b12:	b2cb      	uxtb	r3, r1
 8001b14:	3330      	adds	r3, #48	; 0x30
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b8f      	ldr	r3, [pc, #572]	; (8001d58 <main+0x182c>)
 8001b1a:	709a      	strb	r2, [r3, #2]
										s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	4b8d      	ldr	r3, [pc, #564]	; (8001d54 <main+0x1828>)
 8001b20:	fb83 1302 	smull	r1, r3, r3, r2
 8001b24:	1099      	asrs	r1, r3, #2
 8001b26:	17d3      	asrs	r3, r2, #31
 8001b28:	1ac9      	subs	r1, r1, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	1ad1      	subs	r1, r2, r3
 8001b34:	b2cb      	uxtb	r3, r1
 8001b36:	3330      	adds	r3, #48	; 0x30
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b87      	ldr	r3, [pc, #540]	; (8001d58 <main+0x182c>)
 8001b3c:	70da      	strb	r2, [r3, #3]

										s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8001b3e:	7b3b      	ldrb	r3, [r7, #12]
 8001b40:	4a87      	ldr	r2, [pc, #540]	; (8001d60 <main+0x1834>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3330      	adds	r3, #48	; 0x30
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b82      	ldr	r3, [pc, #520]	; (8001d58 <main+0x182c>)
 8001b50:	715a      	strb	r2, [r3, #5]
										s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8001b52:	7b3a      	ldrb	r2, [r7, #12]
 8001b54:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <main+0x1834>)
 8001b56:	fba3 1302 	umull	r1, r3, r3, r2
 8001b5a:	08d9      	lsrs	r1, r3, #3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3330      	adds	r3, #48	; 0x30
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b7a      	ldr	r3, [pc, #488]	; (8001d58 <main+0x182c>)
 8001b6e:	719a      	strb	r2, [r3, #6]

										s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001b70:	7b7b      	ldrb	r3, [r7, #13]
 8001b72:	4a7b      	ldr	r2, [pc, #492]	; (8001d60 <main+0x1834>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3330      	adds	r3, #48	; 0x30
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b75      	ldr	r3, [pc, #468]	; (8001d58 <main+0x182c>)
 8001b82:	721a      	strb	r2, [r3, #8]
										s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8001b84:	7b7a      	ldrb	r2, [r7, #13]
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <main+0x1834>)
 8001b88:	fba3 1302 	umull	r1, r3, r3, r2
 8001b8c:	08d9      	lsrs	r1, r3, #3
 8001b8e:	460b      	mov	r3, r1
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3330      	adds	r3, #48	; 0x30
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <main+0x182c>)
 8001ba0:	725a      	strb	r2, [r3, #9]

										s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <main+0x1834>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	3330      	adds	r3, #48	; 0x30
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <main+0x182c>)
 8001bb4:	72da      	strb	r2, [r3, #11]
										s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001bb6:	7bba      	ldrb	r2, [r7, #14]
 8001bb8:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <main+0x1834>)
 8001bba:	fba3 1302 	umull	r1, r3, r3, r2
 8001bbe:	08d9      	lsrs	r1, r3, #3
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3330      	adds	r3, #48	; 0x30
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <main+0x182c>)
 8001bd2:	731a      	strb	r2, [r3, #12]

										s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	4a62      	ldr	r2, [pc, #392]	; (8001d60 <main+0x1834>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3330      	adds	r3, #48	; 0x30
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <main+0x182c>)
 8001be6:	739a      	strb	r2, [r3, #14]
										s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <main+0x1834>)
 8001bec:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf0:	08d9      	lsrs	r1, r3, #3
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	3330      	adds	r3, #48	; 0x30
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <main+0x182c>)
 8001c04:	73da      	strb	r2, [r3, #15]

										s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8001c06:	7c3b      	ldrb	r3, [r7, #16]
 8001c08:	4a55      	ldr	r2, [pc, #340]	; (8001d60 <main+0x1834>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3330      	adds	r3, #48	; 0x30
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <main+0x182c>)
 8001c18:	745a      	strb	r2, [r3, #17]
										s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8001c1a:	7c3a      	ldrb	r2, [r7, #16]
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <main+0x1834>)
 8001c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c22:	08d9      	lsrs	r1, r3, #3
 8001c24:	460b      	mov	r3, r1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3330      	adds	r3, #48	; 0x30
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <main+0x182c>)
 8001c36:	749a      	strb	r2, [r3, #18]

										flash_conv2_bcode(rd_flash_buff);
 8001c38:	4842      	ldr	r0, [pc, #264]	; (8001d44 <main+0x1818>)
 8001c3a:	f002 f9c1 	bl	8003fc0 <flash_conv2_bcode>
										memset(f_sBarCode,0,strlen(f_sNfcCode));
 8001c3e:	4849      	ldr	r0, [pc, #292]	; (8001d64 <main+0x1838>)
 8001c40:	f7fe fa84 	bl	800014c <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4847      	ldr	r0, [pc, #284]	; (8001d68 <main+0x183c>)
 8001c4c:	f005 ffa0 	bl	8007b90 <memset>
										strlcpy ( f_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 8001c50:	221a      	movs	r2, #26
 8001c52:	4946      	ldr	r1, [pc, #280]	; (8001d6c <main+0x1840>)
 8001c54:	4844      	ldr	r0, [pc, #272]	; (8001d68 <main+0x183c>)
 8001c56:	f005 ffba 	bl	8007bce <strlcpy>
										strcat(f_sBarCode,fl_bar_buff );
 8001c5a:	4945      	ldr	r1, [pc, #276]	; (8001d70 <main+0x1844>)
 8001c5c:	4842      	ldr	r0, [pc, #264]	; (8001d68 <main+0x183c>)
 8001c5e:	f005 ff9f 	bl	8007ba0 <strcat>
										strncat(s_flash_d_c, s_cal_data, 19);
 8001c62:	2213      	movs	r2, #19
 8001c64:	493c      	ldr	r1, [pc, #240]	; (8001d58 <main+0x182c>)
 8001c66:	4843      	ldr	r0, [pc, #268]	; (8001d74 <main+0x1848>)
 8001c68:	f005 ffc6 	bl	8007bf8 <strncat>
										strncat(s_flash_d_c, s_space, strlen(s_space));
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4941      	ldr	r1, [pc, #260]	; (8001d78 <main+0x184c>)
 8001c72:	4840      	ldr	r0, [pc, #256]	; (8001d74 <main+0x1848>)
 8001c74:	f005 ffc0 	bl	8007bf8 <strncat>
										strncat(s_flash_d_c, f_sBarCode, strlen(f_sBarCode));
 8001c78:	483b      	ldr	r0, [pc, #236]	; (8001d68 <main+0x183c>)
 8001c7a:	f7fe fa67 	bl	800014c <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4939      	ldr	r1, [pc, #228]	; (8001d68 <main+0x183c>)
 8001c84:	483b      	ldr	r0, [pc, #236]	; (8001d74 <main+0x1848>)
 8001c86:	f005 ffb7 	bl	8007bf8 <strncat>
										strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001c8a:	483c      	ldr	r0, [pc, #240]	; (8001d7c <main+0x1850>)
 8001c8c:	f7fe fa5e 	bl	800014c <strlen>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4939      	ldr	r1, [pc, #228]	; (8001d7c <main+0x1850>)
 8001c96:	4837      	ldr	r0, [pc, #220]	; (8001d74 <main+0x1848>)
 8001c98:	f005 ffae 	bl	8007bf8 <strncat>

										Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 8001c9c:	4835      	ldr	r0, [pc, #212]	; (8001d74 <main+0x1848>)
 8001c9e:	f7fe fa55 	bl	800014c <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4833      	ldr	r0, [pc, #204]	; (8001d74 <main+0x1848>)
 8001ca8:	f005 fcc6 	bl	8007638 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001cac:	4833      	ldr	r0, [pc, #204]	; (8001d7c <main+0x1850>)
 8001cae:	f7fe fa4d 	bl	800014c <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4831      	ldr	r0, [pc, #196]	; (8001d7c <main+0x1850>)
 8001cb8:	f005 fcbe 	bl	8007638 <Usart2_SendData>

										memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 8001cbc:	482d      	ldr	r0, [pc, #180]	; (8001d74 <main+0x1848>)
 8001cbe:	f7fe fa45 	bl	800014c <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	482a      	ldr	r0, [pc, #168]	; (8001d74 <main+0x1848>)
 8001cca:	f005 ff61 	bl	8007b90 <memset>
									for(int x = val_cnt; x == 1; x--){
 8001cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	f43f aeb4 	beq.w	8001a44 <main+0x1518>
									}

								}

								if(val_cnt > 5 && val_cnt < 253){
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <main+0x1854>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	f240 81b9 	bls.w	8002058 <main+0x1b2c>
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <main+0x1854>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2bfc      	cmp	r3, #252	; 0xfc
 8001cec:	f200 81b4 	bhi.w	8002058 <main+0x1b2c>
									number_records = (char) val_cnt;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <main+0x1854>)
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <main+0x1858>)
 8001cf6:	701a      	strb	r2, [r3, #0]
									memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 8001cf8:	481e      	ldr	r0, [pc, #120]	; (8001d74 <main+0x1848>)
 8001cfa:	f7fe fa27 	bl	800014c <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	481b      	ldr	r0, [pc, #108]	; (8001d74 <main+0x1848>)
 8001d06:	f005 ff43 	bl	8007b90 <memset>
									strncat(s_flash_d_c, android_number_records, strlen(android_number_records));
 8001d0a:	481f      	ldr	r0, [pc, #124]	; (8001d88 <main+0x185c>)
 8001d0c:	f7fe fa1e 	bl	800014c <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	491c      	ldr	r1, [pc, #112]	; (8001d88 <main+0x185c>)
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <main+0x1848>)
 8001d18:	f005 ff6e 	bl	8007bf8 <strncat>
									strncat(s_flash_d_c, number_records, strlen(number_records));
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <main+0x1858>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461c      	mov	r4, r3
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <main+0x1858>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa10 	bl	800014c <strlen>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	4810      	ldr	r0, [pc, #64]	; (8001d74 <main+0x1848>)
 8001d34:	f005 ff60 	bl	8007bf8 <strncat>
 8001d38:	e028      	b.n	8001d8c <main+0x1860>
 8001d3a:	bf00      	nop
 8001d3c:	20000990 	.word	0x20000990
 8001d40:	20000a24 	.word	0x20000a24
 8001d44:	20000b24 	.word	0x20000b24
 8001d48:	20000d5e 	.word	0x20000d5e
 8001d4c:	20000998 	.word	0x20000998
 8001d50:	10624dd3 	.word	0x10624dd3
 8001d54:	66666667 	.word	0x66666667
 8001d58:	20000220 	.word	0x20000220
 8001d5c:	51eb851f 	.word	0x51eb851f
 8001d60:	cccccccd 	.word	0xcccccccd
 8001d64:	20000624 	.word	0x20000624
 8001d68:	200005ec 	.word	0x200005ec
 8001d6c:	200000d4 	.word	0x200000d4
 8001d70:	20000b34 	.word	0x20000b34
 8001d74:	200008dc 	.word	0x200008dc
 8001d78:	200001d0 	.word	0x200001d0
 8001d7c:	20000168 	.word	0x20000168
 8001d80:	2000098a 	.word	0x2000098a
 8001d84:	200009ac 	.word	0x200009ac
 8001d88:	20000460 	.word	0x20000460
									strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001d8c:	48b5      	ldr	r0, [pc, #724]	; (8002064 <main+0x1b38>)
 8001d8e:	f7fe f9dd 	bl	800014c <strlen>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	49b3      	ldr	r1, [pc, #716]	; (8002064 <main+0x1b38>)
 8001d98:	48b3      	ldr	r0, [pc, #716]	; (8002068 <main+0x1b3c>)
 8001d9a:	f005 ff2d 	bl	8007bf8 <strncat>
									last_bcode = val_cnt - 5;
 8001d9e:	4bb3      	ldr	r3, [pc, #716]	; (800206c <main+0x1b40>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	3b05      	subs	r3, #5
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4bb2      	ldr	r3, [pc, #712]	; (8002070 <main+0x1b44>)
 8001da8:	701a      	strb	r2, [r3, #0]
									for(uint8_t k = val_cnt; k >= last_bcode; k--){
 8001daa:	4bb0      	ldr	r3, [pc, #704]	; (800206c <main+0x1b40>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001db2:	e14a      	b.n	800204a <main+0x1b1e>
										bar_flash_addr = 8192 + (k - 1) * 16;
 8001db4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001db8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4bac      	ldr	r3, [pc, #688]	; (8002074 <main+0x1b48>)
 8001dc2:	601a      	str	r2, [r3, #0]
										memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001dc4:	22ff      	movs	r2, #255	; 0xff
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	48ab      	ldr	r0, [pc, #684]	; (8002078 <main+0x1b4c>)
 8001dca:	f005 fee1 	bl	8007b90 <memset>
										memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 8001dce:	2210      	movs	r2, #16
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	48aa      	ldr	r0, [pc, #680]	; (800207c <main+0x1b50>)
 8001dd4:	f005 fedc 	bl	8007b90 <memset>
										spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 8001dd8:	4ba6      	ldr	r3, [pc, #664]	; (8002074 <main+0x1b48>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4aa8      	ldr	r2, [pc, #672]	; (8002080 <main+0x1b54>)
 8001dde:	8811      	ldrh	r1, [r2, #0]
 8001de0:	4aa6      	ldr	r2, [pc, #664]	; (800207c <main+0x1b50>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f004 fa32 	bl	800624c <spiFlash_Read>
										flash_timer = flash_conv2_timer(rd_flash_buff);
 8001de8:	48a4      	ldr	r0, [pc, #656]	; (800207c <main+0x1b50>)
 8001dea:	f002 f8cd 	bl	8003f88 <flash_conv2_timer>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4aa4      	ldr	r2, [pc, #656]	; (8002084 <main+0x1b58>)
 8001df2:	6013      	str	r3, [r2, #0]
										timer_to_cal(flash_timer, &rtc_time);
 8001df4:	4ba3      	ldr	r3, [pc, #652]	; (8002084 <main+0x1b58>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f107 0208 	add.w	r2, r7, #8
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fc98 	bl	8005734 <timer_to_cal>

										s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4aa0      	ldr	r2, [pc, #640]	; (8002088 <main+0x1b5c>)
 8001e08:	fb82 1203 	smull	r1, r2, r2, r3
 8001e0c:	1192      	asrs	r2, r2, #6
 8001e0e:	17db      	asrs	r3, r3, #31
 8001e10:	1ad2      	subs	r2, r2, r3
 8001e12:	4b9e      	ldr	r3, [pc, #632]	; (800208c <main+0x1b60>)
 8001e14:	fb83 1302 	smull	r1, r3, r3, r2
 8001e18:	1099      	asrs	r1, r3, #2
 8001e1a:	17d3      	asrs	r3, r2, #31
 8001e1c:	1ac9      	subs	r1, r1, r3
 8001e1e:	460b      	mov	r3, r1
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	1ad1      	subs	r1, r2, r3
 8001e28:	b2cb      	uxtb	r3, r1
 8001e2a:	3330      	adds	r3, #48	; 0x30
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b98      	ldr	r3, [pc, #608]	; (8002090 <main+0x1b64>)
 8001e30:	701a      	strb	r2, [r3, #0]
										s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4a97      	ldr	r2, [pc, #604]	; (8002094 <main+0x1b68>)
 8001e36:	fb82 1203 	smull	r1, r2, r2, r3
 8001e3a:	1152      	asrs	r2, r2, #5
 8001e3c:	17db      	asrs	r3, r3, #31
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	4b92      	ldr	r3, [pc, #584]	; (800208c <main+0x1b60>)
 8001e42:	fb83 1302 	smull	r1, r3, r3, r2
 8001e46:	1099      	asrs	r1, r3, #2
 8001e48:	17d3      	asrs	r3, r2, #31
 8001e4a:	1ac9      	subs	r1, r1, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	1ad1      	subs	r1, r2, r3
 8001e56:	b2cb      	uxtb	r3, r1
 8001e58:	3330      	adds	r3, #48	; 0x30
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b8c      	ldr	r3, [pc, #560]	; (8002090 <main+0x1b64>)
 8001e5e:	705a      	strb	r2, [r3, #1]
										s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4a8a      	ldr	r2, [pc, #552]	; (800208c <main+0x1b60>)
 8001e64:	fb82 1203 	smull	r1, r2, r2, r3
 8001e68:	1092      	asrs	r2, r2, #2
 8001e6a:	17db      	asrs	r3, r3, #31
 8001e6c:	1ad2      	subs	r2, r2, r3
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <main+0x1b60>)
 8001e70:	fb83 1302 	smull	r1, r3, r3, r2
 8001e74:	1099      	asrs	r1, r3, #2
 8001e76:	17d3      	asrs	r3, r2, #31
 8001e78:	1ac9      	subs	r1, r1, r3
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	1ad1      	subs	r1, r2, r3
 8001e84:	b2cb      	uxtb	r3, r1
 8001e86:	3330      	adds	r3, #48	; 0x30
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b81      	ldr	r3, [pc, #516]	; (8002090 <main+0x1b64>)
 8001e8c:	709a      	strb	r2, [r3, #2]
										s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	4b7e      	ldr	r3, [pc, #504]	; (800208c <main+0x1b60>)
 8001e92:	fb83 1302 	smull	r1, r3, r3, r2
 8001e96:	1099      	asrs	r1, r3, #2
 8001e98:	17d3      	asrs	r3, r2, #31
 8001e9a:	1ac9      	subs	r1, r1, r3
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	1ad1      	subs	r1, r2, r3
 8001ea6:	b2cb      	uxtb	r3, r1
 8001ea8:	3330      	adds	r3, #48	; 0x30
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b78      	ldr	r3, [pc, #480]	; (8002090 <main+0x1b64>)
 8001eae:	70da      	strb	r2, [r3, #3]

										s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8001eb0:	7b3b      	ldrb	r3, [r7, #12]
 8001eb2:	4a79      	ldr	r2, [pc, #484]	; (8002098 <main+0x1b6c>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3330      	adds	r3, #48	; 0x30
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b73      	ldr	r3, [pc, #460]	; (8002090 <main+0x1b64>)
 8001ec2:	715a      	strb	r2, [r3, #5]
										s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8001ec4:	7b3a      	ldrb	r2, [r7, #12]
 8001ec6:	4b74      	ldr	r3, [pc, #464]	; (8002098 <main+0x1b6c>)
 8001ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ecc:	08d9      	lsrs	r1, r3, #3
 8001ece:	460b      	mov	r3, r1
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3330      	adds	r3, #48	; 0x30
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b6c      	ldr	r3, [pc, #432]	; (8002090 <main+0x1b64>)
 8001ee0:	719a      	strb	r2, [r3, #6]

										s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001ee2:	7b7b      	ldrb	r3, [r7, #13]
 8001ee4:	4a6c      	ldr	r2, [pc, #432]	; (8002098 <main+0x1b6c>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	08db      	lsrs	r3, r3, #3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3330      	adds	r3, #48	; 0x30
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <main+0x1b64>)
 8001ef4:	721a      	strb	r2, [r3, #8]
										s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8001ef6:	7b7a      	ldrb	r2, [r7, #13]
 8001ef8:	4b67      	ldr	r3, [pc, #412]	; (8002098 <main+0x1b6c>)
 8001efa:	fba3 1302 	umull	r1, r3, r3, r2
 8001efe:	08d9      	lsrs	r1, r3, #3
 8001f00:	460b      	mov	r3, r1
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3330      	adds	r3, #48	; 0x30
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <main+0x1b64>)
 8001f12:	725a      	strb	r2, [r3, #9]

										s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	4a60      	ldr	r2, [pc, #384]	; (8002098 <main+0x1b6c>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	3330      	adds	r3, #48	; 0x30
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <main+0x1b64>)
 8001f26:	72da      	strb	r2, [r3, #11]
										s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001f28:	7bba      	ldrb	r2, [r7, #14]
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <main+0x1b6c>)
 8001f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f30:	08d9      	lsrs	r1, r3, #3
 8001f32:	460b      	mov	r3, r1
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3330      	adds	r3, #48	; 0x30
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b53      	ldr	r3, [pc, #332]	; (8002090 <main+0x1b64>)
 8001f44:	731a      	strb	r2, [r3, #12]

										s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	4a53      	ldr	r2, [pc, #332]	; (8002098 <main+0x1b6c>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	08db      	lsrs	r3, r3, #3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3330      	adds	r3, #48	; 0x30
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <main+0x1b64>)
 8001f58:	739a      	strb	r2, [r3, #14]
										s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <main+0x1b6c>)
 8001f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f62:	08d9      	lsrs	r1, r3, #3
 8001f64:	460b      	mov	r3, r1
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3330      	adds	r3, #48	; 0x30
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <main+0x1b64>)
 8001f76:	73da      	strb	r2, [r3, #15]

										s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8001f78:	7c3b      	ldrb	r3, [r7, #16]
 8001f7a:	4a47      	ldr	r2, [pc, #284]	; (8002098 <main+0x1b6c>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3330      	adds	r3, #48	; 0x30
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b41      	ldr	r3, [pc, #260]	; (8002090 <main+0x1b64>)
 8001f8a:	745a      	strb	r2, [r3, #17]
										s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8001f8c:	7c3a      	ldrb	r2, [r7, #16]
 8001f8e:	4b42      	ldr	r3, [pc, #264]	; (8002098 <main+0x1b6c>)
 8001f90:	fba3 1302 	umull	r1, r3, r3, r2
 8001f94:	08d9      	lsrs	r1, r3, #3
 8001f96:	460b      	mov	r3, r1
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3330      	adds	r3, #48	; 0x30
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <main+0x1b64>)
 8001fa8:	749a      	strb	r2, [r3, #18]

										flash_conv2_bcode(rd_flash_buff);
 8001faa:	4834      	ldr	r0, [pc, #208]	; (800207c <main+0x1b50>)
 8001fac:	f002 f808 	bl	8003fc0 <flash_conv2_bcode>
										memset(f_sBarCode,0,strlen(f_sNfcCode));
 8001fb0:	483a      	ldr	r0, [pc, #232]	; (800209c <main+0x1b70>)
 8001fb2:	f7fe f8cb 	bl	800014c <strlen>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4838      	ldr	r0, [pc, #224]	; (80020a0 <main+0x1b74>)
 8001fbe:	f005 fde7 	bl	8007b90 <memset>
										strlcpy ( f_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 8001fc2:	221a      	movs	r2, #26
 8001fc4:	4937      	ldr	r1, [pc, #220]	; (80020a4 <main+0x1b78>)
 8001fc6:	4836      	ldr	r0, [pc, #216]	; (80020a0 <main+0x1b74>)
 8001fc8:	f005 fe01 	bl	8007bce <strlcpy>
										strcat(f_sBarCode,fl_bar_buff );
 8001fcc:	4936      	ldr	r1, [pc, #216]	; (80020a8 <main+0x1b7c>)
 8001fce:	4834      	ldr	r0, [pc, #208]	; (80020a0 <main+0x1b74>)
 8001fd0:	f005 fde6 	bl	8007ba0 <strcat>
										strncat(s_flash_d_c, s_cal_data, 19);
 8001fd4:	2213      	movs	r2, #19
 8001fd6:	492e      	ldr	r1, [pc, #184]	; (8002090 <main+0x1b64>)
 8001fd8:	4823      	ldr	r0, [pc, #140]	; (8002068 <main+0x1b3c>)
 8001fda:	f005 fe0d 	bl	8007bf8 <strncat>
										strncat(s_flash_d_c, s_space, strlen(s_space));
 8001fde:	2300      	movs	r3, #0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4932      	ldr	r1, [pc, #200]	; (80020ac <main+0x1b80>)
 8001fe4:	4820      	ldr	r0, [pc, #128]	; (8002068 <main+0x1b3c>)
 8001fe6:	f005 fe07 	bl	8007bf8 <strncat>
										strncat(s_flash_d_c, f_sBarCode, strlen(f_sBarCode));
 8001fea:	482d      	ldr	r0, [pc, #180]	; (80020a0 <main+0x1b74>)
 8001fec:	f7fe f8ae 	bl	800014c <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	492a      	ldr	r1, [pc, #168]	; (80020a0 <main+0x1b74>)
 8001ff6:	481c      	ldr	r0, [pc, #112]	; (8002068 <main+0x1b3c>)
 8001ff8:	f005 fdfe 	bl	8007bf8 <strncat>
										strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001ffc:	4819      	ldr	r0, [pc, #100]	; (8002064 <main+0x1b38>)
 8001ffe:	f7fe f8a5 	bl	800014c <strlen>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4917      	ldr	r1, [pc, #92]	; (8002064 <main+0x1b38>)
 8002008:	4817      	ldr	r0, [pc, #92]	; (8002068 <main+0x1b3c>)
 800200a:	f005 fdf5 	bl	8007bf8 <strncat>

										Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 800200e:	4816      	ldr	r0, [pc, #88]	; (8002068 <main+0x1b3c>)
 8002010:	f7fe f89c 	bl	800014c <strlen>
 8002014:	4603      	mov	r3, r0
 8002016:	4619      	mov	r1, r3
 8002018:	4813      	ldr	r0, [pc, #76]	; (8002068 <main+0x1b3c>)
 800201a:	f005 fb0d 	bl	8007638 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 800201e:	4811      	ldr	r0, [pc, #68]	; (8002064 <main+0x1b38>)
 8002020:	f7fe f894 	bl	800014c <strlen>
 8002024:	4603      	mov	r3, r0
 8002026:	4619      	mov	r1, r3
 8002028:	480e      	ldr	r0, [pc, #56]	; (8002064 <main+0x1b38>)
 800202a:	f005 fb05 	bl	8007638 <Usart2_SendData>

										memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 800202e:	480e      	ldr	r0, [pc, #56]	; (8002068 <main+0x1b3c>)
 8002030:	f7fe f88c 	bl	800014c <strlen>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	2100      	movs	r1, #0
 800203a:	480b      	ldr	r0, [pc, #44]	; (8002068 <main+0x1b3c>)
 800203c:	f005 fda8 	bl	8007b90 <memset>
									for(uint8_t k = val_cnt; k >= last_bcode; k--){
 8002040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002044:	3b01      	subs	r3, #1
 8002046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <main+0x1b44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002052:	429a      	cmp	r2, r3
 8002054:	f4bf aeae 	bcs.w	8001db4 <main+0x1888>
									}
								}
								SpiActive = 0;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <main+0x1b84>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 800205e:	f003 ff8f 	bl	8005f80 <PN532_SPIInit>


								break;
 8002062:	e05d      	b.n	8002120 <main+0x1bf4>
 8002064:	20000168 	.word	0x20000168
 8002068:	200008dc 	.word	0x200008dc
 800206c:	2000098a 	.word	0x2000098a
 8002070:	200009a4 	.word	0x200009a4
 8002074:	20000990 	.word	0x20000990
 8002078:	20000a24 	.word	0x20000a24
 800207c:	20000b24 	.word	0x20000b24
 8002080:	20000d5e 	.word	0x20000d5e
 8002084:	20000998 	.word	0x20000998
 8002088:	10624dd3 	.word	0x10624dd3
 800208c:	66666667 	.word	0x66666667
 8002090:	20000220 	.word	0x20000220
 8002094:	51eb851f 	.word	0x51eb851f
 8002098:	cccccccd 	.word	0xcccccccd
 800209c:	20000624 	.word	0x20000624
 80020a0:	200005ec 	.word	0x200005ec
 80020a4:	200000d4 	.word	0x200000d4
 80020a8:	20000b34 	.word	0x20000b34
 80020ac:	200001d0 	.word	0x200001d0
 80020b0:	20000d76 	.word	0x20000d76
							case 204://чтение последних пяти NFC-меток
								Usart2_SendData(android_last_5_nfc,strlen(android_last_5_nfc));
 80020b4:	486a      	ldr	r0, [pc, #424]	; (8002260 <main+0x1d34>)
 80020b6:	f7fe f849 	bl	800014c <strlen>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4619      	mov	r1, r3
 80020be:	4868      	ldr	r0, [pc, #416]	; (8002260 <main+0x1d34>)
 80020c0:	f005 faba 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80020c4:	4867      	ldr	r0, [pc, #412]	; (8002264 <main+0x1d38>)
 80020c6:	f7fe f841 	bl	800014c <strlen>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4619      	mov	r1, r3
 80020ce:	4865      	ldr	r0, [pc, #404]	; (8002264 <main+0x1d38>)
 80020d0:	f005 fab2 	bl	8007638 <Usart2_SendData>


								break;
 80020d4:	e024      	b.n	8002120 <main+0x1bf4>
							default:
								Usart2_SendData(android_no_such_cmd,strlen(android_no_such_cmd));
 80020d6:	4864      	ldr	r0, [pc, #400]	; (8002268 <main+0x1d3c>)
 80020d8:	f7fe f838 	bl	800014c <strlen>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4861      	ldr	r0, [pc, #388]	; (8002268 <main+0x1d3c>)
 80020e2:	f005 faa9 	bl	8007638 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80020e6:	485f      	ldr	r0, [pc, #380]	; (8002264 <main+0x1d38>)
 80020e8:	f7fe f830 	bl	800014c <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4619      	mov	r1, r3
 80020f0:	485c      	ldr	r0, [pc, #368]	; (8002264 <main+0x1d38>)
 80020f2:	f005 faa1 	bl	8007638 <Usart2_SendData>
								break;
 80020f6:	e013      	b.n	8002120 <main+0x1bf4>
						}
					} else {
						Usart2_SendData(android_no_cmd_error,strlen(android_no_cmd_error));
 80020f8:	485c      	ldr	r0, [pc, #368]	; (800226c <main+0x1d40>)
 80020fa:	f7fe f827 	bl	800014c <strlen>
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	485a      	ldr	r0, [pc, #360]	; (800226c <main+0x1d40>)
 8002104:	f005 fa98 	bl	8007638 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8002108:	4856      	ldr	r0, [pc, #344]	; (8002264 <main+0x1d38>)
 800210a:	f7fe f81f 	bl	800014c <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	4619      	mov	r1, r3
 8002112:	4854      	ldr	r0, [pc, #336]	; (8002264 <main+0x1d38>)
 8002114:	f005 fa90 	bl	8007638 <Usart2_SendData>
 8002118:	e002      	b.n	8002120 <main+0x1bf4>
								break;
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <main+0x1bf4>
								break;
 800211e:	bf00      	nop

					}



					Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 8002120:	4853      	ldr	r0, [pc, #332]	; (8002270 <main+0x1d44>)
 8002122:	f7fe f813 	bl	800014c <strlen>
 8002126:	4603      	mov	r3, r0
 8002128:	4619      	mov	r1, r3
 800212a:	4851      	ldr	r0, [pc, #324]	; (8002270 <main+0x1d44>)
 800212c:	f005 fa84 	bl	8007638 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 8002130:	484c      	ldr	r0, [pc, #304]	; (8002264 <main+0x1d38>)
 8002132:	f7fe f80b 	bl	800014c <strlen>
 8002136:	4603      	mov	r3, r0
 8002138:	4619      	mov	r1, r3
 800213a:	484a      	ldr	r0, [pc, #296]	; (8002264 <main+0x1d38>)
 800213c:	f005 fa7c 	bl	8007638 <Usart2_SendData>



					date_iBufferLength=0;
 8002140:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <main+0x1d48>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

					memset(date_sBuffer, 0, strlen(date_sBuffer));
 8002146:	484a      	ldr	r0, [pc, #296]	; (8002270 <main+0x1d44>)
 8002148:	f7fe f800 	bl	800014c <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	2100      	movs	r1, #0
 8002152:	4847      	ldr	r0, [pc, #284]	; (8002270 <main+0x1d44>)
 8002154:	f005 fd1c 	bl	8007b90 <memset>
				//GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);

				/*
				 * Декодирование данных сканера
				 */
				if (strstr(g_sBuffer, "\r\n") != NULL) {
 8002158:	4947      	ldr	r1, [pc, #284]	; (8002278 <main+0x1d4c>)
 800215a:	4848      	ldr	r0, [pc, #288]	; (800227c <main+0x1d50>)
 800215c:	f005 fd77 	bl	8007c4e <strstr>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 82d5 	beq.w	8002712 <main+0x21e6>
					/* Выделение лексемы,
					 *  ограниченной справа одним из символов множества "\r\n"
					 */
					strtok ( g_sBuffer, "\r\n" );
 8002168:	4943      	ldr	r1, [pc, #268]	; (8002278 <main+0x1d4c>)
 800216a:	4844      	ldr	r0, [pc, #272]	; (800227c <main+0x1d50>)
 800216c:	f005 fd86 	bl	8007c7c <strtok>

					char * pBuffer = g_sBuffer;
 8002170:	4b42      	ldr	r3, [pc, #264]	; (800227c <main+0x1d50>)
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 8002174:	e002      	b.n	800217c <main+0x1c50>
						pBuffer++;
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	3301      	adds	r3, #1
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 800217c:	4940      	ldr	r1, [pc, #256]	; (8002280 <main+0x1d54>)
 800217e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002180:	f005 fd4d 	bl	8007c1e <strpbrk>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f5      	bne.n	8002176 <main+0x1c4a>
					}

					memset(g_sBarCode,0,strlen(g_sBarCode));
 800218a:	483e      	ldr	r0, [pc, #248]	; (8002284 <main+0x1d58>)
 800218c:	f7fd ffde 	bl	800014c <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	483b      	ldr	r0, [pc, #236]	; (8002284 <main+0x1d58>)
 8002198:	f005 fcfa 	bl	8007b90 <memset>
					  strlcpy ( g_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 800219c:	221a      	movs	r2, #26
 800219e:	493a      	ldr	r1, [pc, #232]	; (8002288 <main+0x1d5c>)
 80021a0:	4838      	ldr	r0, [pc, #224]	; (8002284 <main+0x1d58>)
 80021a2:	f005 fd14 	bl	8007bce <strlcpy>
					  strcat(g_sBarCode,pBuffer );
 80021a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021a8:	4836      	ldr	r0, [pc, #216]	; (8002284 <main+0x1d58>)
 80021aa:	f005 fcf9 	bl	8007ba0 <strcat>



						timer = RTC_GET_COUNTER();
 80021ae:	f003 fa67 	bl	8005680 <RTC_GET_COUNTER>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a35      	ldr	r2, [pc, #212]	; (800228c <main+0x1d60>)
 80021b6:	6013      	str	r3, [r2, #0]
						timer_to_cal(timer, &rtc_time);
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <main+0x1d60>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f107 0208 	add.w	r2, r7, #8
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fab6 	bl	8005734 <timer_to_cal>
						tim = cal_to_timer(&rtc_time);
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 fb9b 	bl	8005908 <cal_to_timer>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <main+0x1d64>)
 80021d6:	6013      	str	r3, [r2, #0]
						bcdflash = bcode_conv_to_flash(tim, g_sBuffer);
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <main+0x1d64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4927      	ldr	r1, [pc, #156]	; (800227c <main+0x1d50>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fda0 	bl	8003d24 <bcode_conv_to_flash>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	492a      	ldr	r1, [pc, #168]	; (8002294 <main+0x1d68>)
 80021ea:	e9c1 2300 	strd	r2, r3, [r1]
						data_conv2Flash(tim, bcdflash);
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <main+0x1d64>)
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <main+0x1d68>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	4608      	mov	r0, r1
 80021fa:	f001 fe27 	bl	8003e4c <data_conv2Flash>

					//	flash_conv2_bcode();



						while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 80021fe:	bf00      	nop
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <main+0x1d6c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <main+0x1cec>
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	4823      	ldr	r0, [pc, #140]	; (800229c <main+0x1d70>)
 800220e:	f004 ff09 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f3      	bne.n	8002200 <main+0x1cd4>
						SPI_FLASH_CONFIG();
 8002218:	f003 ffc0 	bl	800619c <SPI_FLASH_CONFIG>


						memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));	//получение значения счетчика записей
 800221c:	2210      	movs	r2, #16
 800221e:	2100      	movs	r1, #0
 8002220:	481f      	ldr	r0, [pc, #124]	; (80022a0 <main+0x1d74>)
 8002222:	f005 fcb5 	bl	8007b90 <memset>
						spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8002226:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <main+0x1d78>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <main+0x1d7c>)
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	b291      	uxth	r1, r2
 8002230:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <main+0x1d80>)
 8002232:	4618      	mov	r0, r3
 8002234:	f004 f80a 	bl	800624c <spiFlash_Read>
						for(int j = 0; j < 253; j++){
 8002238:	2300      	movs	r3, #0
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
 800223c:	e03f      	b.n	80022be <main+0x1d92>
							if(rd_test_buff[j] == 0xFF){
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <main+0x1d80>)
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2bff      	cmp	r3, #255	; 0xff
 8002248:	d136      	bne.n	80022b8 <main+0x1d8c>
								val_cnt = rd_test_buff[j-1];
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	3b01      	subs	r3, #1
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <main+0x1d80>)
 8002250:	5cd2      	ldrb	r2, [r2, r3]
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <main+0x1d84>)
 8002254:	701a      	strb	r2, [r3, #0]
								bcd_cnt_addr = j;
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <main+0x1d88>)
 800225a:	6013      	str	r3, [r2, #0]
								break;
 800225c:	e032      	b.n	80022c4 <main+0x1d98>
 800225e:	bf00      	nop
 8002260:	200003d8 	.word	0x200003d8
 8002264:	20000168 	.word	0x20000168
 8002268:	20000350 	.word	0x20000350
 800226c:	2000033c 	.word	0x2000033c
 8002270:	20000644 	.word	0x20000644
 8002274:	200006c8 	.word	0x200006c8
 8002278:	08008e58 	.word	0x08008e58
 800227c:	20000548 	.word	0x20000548
 8002280:	08008e68 	.word	0x08008e68
 8002284:	200005d0 	.word	0x200005d0
 8002288:	200000d4 	.word	0x200000d4
 800228c:	20000338 	.word	0x20000338
 8002290:	2000095c 	.word	0x2000095c
 8002294:	20000970 	.word	0x20000970
 8002298:	20000d76 	.word	0x20000d76
 800229c:	40003800 	.word	0x40003800
 80022a0:	20000b24 	.word	0x20000b24
 80022a4:	2000097c 	.word	0x2000097c
 80022a8:	2000096c 	.word	0x2000096c
 80022ac:	20000a24 	.word	0x20000a24
 80022b0:	2000098a 	.word	0x2000098a
 80022b4:	2000099c 	.word	0x2000099c
						for(int j = 0; j < 253; j++){
 80022b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ba:	3301      	adds	r3, #1
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	2bfc      	cmp	r3, #252	; 0xfc
 80022c2:	ddbc      	ble.n	800223e <main+0x1d12>
							}
						}

						if(val_cnt< 251){	//количество записей удовлетворяет диапазону
 80022c4:	4bac      	ldr	r3, [pc, #688]	; (8002578 <main+0x204c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2bfa      	cmp	r3, #250	; 0xfa
 80022ca:	d841      	bhi.n	8002350 <main+0x1e24>
							memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	2100      	movs	r1, #0
 80022d0:	48aa      	ldr	r0, [pc, #680]	; (800257c <main+0x2050>)
 80022d2:	f005 fc5d 	bl	8007b90 <memset>
							spiFlash_Read(bcd_addr_start, cnt_flash_t, rd_test_buff);
 80022d6:	4baa      	ldr	r3, [pc, #680]	; (8002580 <main+0x2054>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4aaa      	ldr	r2, [pc, #680]	; (8002584 <main+0x2058>)
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	b291      	uxth	r1, r2
 80022e0:	4aa6      	ldr	r2, [pc, #664]	; (800257c <main+0x2050>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 ffb2 	bl	800624c <spiFlash_Read>
							bar_flash_addr = 8192 + val_cnt * 16;
 80022e8:	4ba3      	ldr	r3, [pc, #652]	; (8002578 <main+0x204c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	461a      	mov	r2, r3
 80022f4:	4ba4      	ldr	r3, [pc, #656]	; (8002588 <main+0x205c>)
 80022f6:	601a      	str	r2, [r3, #0]
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 80022f8:	4ba3      	ldr	r3, [pc, #652]	; (8002588 <main+0x205c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4aa3      	ldr	r2, [pc, #652]	; (800258c <main+0x2060>)
 80022fe:	8811      	ldrh	r1, [r2, #0]
 8002300:	4aa3      	ldr	r2, [pc, #652]	; (8002590 <main+0x2064>)
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fcbc 	bl	8005c80 <Write_data_2Flash>
							spiFlash_write(bar_flash_addr, cnt_flash, data_to_flash);
 8002308:	4b9f      	ldr	r3, [pc, #636]	; (8002588 <main+0x205c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a9f      	ldr	r2, [pc, #636]	; (800258c <main+0x2060>)
 800230e:	8811      	ldrh	r1, [r2, #0]
 8002310:	4a9f      	ldr	r2, [pc, #636]	; (8002590 <main+0x2064>)
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fff2 	bl	80062fc <spiFlash_write>
							do {
									stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8002318:	2005      	movs	r0, #5
 800231a:	f004 f84d 	bl	80063b8 <spiFlash_readStatus>
 800231e:	4603      	mov	r3, r0
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b9c      	ldr	r3, [pc, #624]	; (8002594 <main+0x2068>)
 8002324:	801a      	strh	r2, [r3, #0]
							} while (stat_reg1 & 0x01 );
 8002326:	4b9b      	ldr	r3, [pc, #620]	; (8002594 <main+0x2068>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f2      	bne.n	8002318 <main+0x1dec>
							val_cnt++;
 8002332:	4b91      	ldr	r3, [pc, #580]	; (8002578 <main+0x204c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <main+0x204c>)
 800233c:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//количество штрих-кодов
 800233e:	4b96      	ldr	r3, [pc, #600]	; (8002598 <main+0x206c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a96      	ldr	r2, [pc, #600]	; (800259c <main+0x2070>)
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	b291      	uxth	r1, r2
 8002348:	4a8b      	ldr	r2, [pc, #556]	; (8002578 <main+0x204c>)
 800234a:	4618      	mov	r0, r3
 800234c:	f003 fcec 	bl	8005d28 <Set_Cnt_to_Flash>

						}
						if(bcd_cnt_addr == 252 ){		//стирка если больше диапазона
 8002350:	4b91      	ldr	r3, [pc, #580]	; (8002598 <main+0x206c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2bfc      	cmp	r3, #252	; 0xfc
 8002356:	d166      	bne.n	8002426 <main+0x1efa>
							memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8002358:	22ff      	movs	r2, #255	; 0xff
 800235a:	2100      	movs	r1, #0
 800235c:	4887      	ldr	r0, [pc, #540]	; (800257c <main+0x2050>)
 800235e:	f005 fc17 	bl	8007b90 <memset>
							spiFlash_Read(bcd_addr_start, cnt_flash_t, rd_test_buff);
 8002362:	4b87      	ldr	r3, [pc, #540]	; (8002580 <main+0x2054>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a87      	ldr	r2, [pc, #540]	; (8002584 <main+0x2058>)
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	b291      	uxth	r1, r2
 800236c:	4a83      	ldr	r2, [pc, #524]	; (800257c <main+0x2050>)
 800236e:	4618      	mov	r0, r3
 8002370:	f003 ff6c 	bl	800624c <spiFlash_Read>
							bcd_cnt_addr = 0;
 8002374:	4b88      	ldr	r3, [pc, #544]	; (8002598 <main+0x206c>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 800237a:	4b83      	ldr	r3, [pc, #524]	; (8002588 <main+0x205c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a83      	ldr	r2, [pc, #524]	; (800258c <main+0x2060>)
 8002380:	8811      	ldrh	r1, [r2, #0]
 8002382:	4a83      	ldr	r2, [pc, #524]	; (8002590 <main+0x2064>)
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fc7b 	bl	8005c80 <Write_data_2Flash>
							bar_flash_addr = 8192;
 800238a:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <main+0x205c>)
 800238c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002390:	601a      	str	r2, [r3, #0]
							Safe_Flash_Erase(bar_flash_addr);
 8002392:	4b7d      	ldr	r3, [pc, #500]	; (8002588 <main+0x205c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f003 fd2e 	bl	8005df8 <Safe_Flash_Erase>
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 800239c:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <main+0x205c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7a      	ldr	r2, [pc, #488]	; (800258c <main+0x2060>)
 80023a2:	8811      	ldrh	r1, [r2, #0]
 80023a4:	4a7a      	ldr	r2, [pc, #488]	; (8002590 <main+0x2064>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 fc6a 	bl	8005c80 <Write_data_2Flash>
							Safe_Flash_Erase(bcd_cnt_addr);
 80023ac:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <main+0x206c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fd21 	bl	8005df8 <Safe_Flash_Erase>
							val_cnt = 0;
 80023b6:	4b70      	ldr	r3, [pc, #448]	; (8002578 <main+0x204c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 80023bc:	4b76      	ldr	r3, [pc, #472]	; (8002598 <main+0x206c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a76      	ldr	r2, [pc, #472]	; (800259c <main+0x2070>)
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	b291      	uxth	r1, r2
 80023c6:	4a6c      	ldr	r2, [pc, #432]	; (8002578 <main+0x204c>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fcad 	bl	8005d28 <Set_Cnt_to_Flash>
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 80023ce:	4b6e      	ldr	r3, [pc, #440]	; (8002588 <main+0x205c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6e      	ldr	r2, [pc, #440]	; (800258c <main+0x2060>)
 80023d4:	8811      	ldrh	r1, [r2, #0]
 80023d6:	4a6e      	ldr	r2, [pc, #440]	; (8002590 <main+0x2064>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fc51 	bl	8005c80 <Write_data_2Flash>
							spiFlash_write(bar_flash_addr, cnt_flash, data_to_flash);
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <main+0x205c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6a      	ldr	r2, [pc, #424]	; (800258c <main+0x2060>)
 80023e4:	8811      	ldrh	r1, [r2, #0]
 80023e6:	4a6a      	ldr	r2, [pc, #424]	; (8002590 <main+0x2064>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 ff87 	bl	80062fc <spiFlash_write>
							do {
									stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80023ee:	2005      	movs	r0, #5
 80023f0:	f003 ffe2 	bl	80063b8 <spiFlash_readStatus>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b66      	ldr	r3, [pc, #408]	; (8002594 <main+0x2068>)
 80023fa:	801a      	strh	r2, [r3, #0]
							} while (stat_reg1 & 0x01 );
 80023fc:	4b65      	ldr	r3, [pc, #404]	; (8002594 <main+0x2068>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f2      	bne.n	80023ee <main+0x1ec2>
							bcd_cnt_addr = 1;
 8002408:	4b63      	ldr	r3, [pc, #396]	; (8002598 <main+0x206c>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]
							val_cnt = 1;
 800240e:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <main+0x204c>)
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8002414:	4b60      	ldr	r3, [pc, #384]	; (8002598 <main+0x206c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a60      	ldr	r2, [pc, #384]	; (800259c <main+0x2070>)
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	b291      	uxth	r1, r2
 800241e:	4a56      	ldr	r2, [pc, #344]	; (8002578 <main+0x204c>)
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fc81 	bl	8005d28 <Set_Cnt_to_Flash>
						}

						memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8002426:	22ff      	movs	r2, #255	; 0xff
 8002428:	2100      	movs	r1, #0
 800242a:	4854      	ldr	r0, [pc, #336]	; (800257c <main+0x2050>)
 800242c:	f005 fbb0 	bl	8007b90 <memset>
						spiFlash_Read(erase_addr, cnt_flash_t, rd_test_buff);
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <main+0x2074>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a53      	ldr	r2, [pc, #332]	; (8002584 <main+0x2058>)
 8002436:	7812      	ldrb	r2, [r2, #0]
 8002438:	b291      	uxth	r1, r2
 800243a:	4a50      	ldr	r2, [pc, #320]	; (800257c <main+0x2050>)
 800243c:	4618      	mov	r0, r3
 800243e:	f003 ff05 	bl	800624c <spiFlash_Read>

						memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	2100      	movs	r1, #0
 8002446:	484d      	ldr	r0, [pc, #308]	; (800257c <main+0x2050>)
 8002448:	f005 fba2 	bl	8007b90 <memset>
						spiFlash_Read(bar_flash_addr, cnt_flash_t, rd_test_buff);
 800244c:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <main+0x205c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <main+0x2058>)
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	b291      	uxth	r1, r2
 8002456:	4a49      	ldr	r2, [pc, #292]	; (800257c <main+0x2050>)
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fef7 	bl	800624c <spiFlash_Read>

						SpiActive = 0;
 800245e:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <main+0x2078>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
						PN532_SPIInit();
 8002464:	f003 fd8c 	bl	8005f80 <PN532_SPIInit>

						s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4a4f      	ldr	r2, [pc, #316]	; (80025a8 <main+0x207c>)
 800246c:	fb82 1203 	smull	r1, r2, r2, r3
 8002470:	1192      	asrs	r2, r2, #6
 8002472:	17db      	asrs	r3, r3, #31
 8002474:	1ad2      	subs	r2, r2, r3
 8002476:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <main+0x2080>)
 8002478:	fb83 1302 	smull	r1, r3, r3, r2
 800247c:	1099      	asrs	r1, r3, #2
 800247e:	17d3      	asrs	r3, r2, #31
 8002480:	1ac9      	subs	r1, r1, r3
 8002482:	460b      	mov	r3, r1
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	1ad1      	subs	r1, r2, r3
 800248c:	b2cb      	uxtb	r3, r1
 800248e:	3330      	adds	r3, #48	; 0x30
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <main+0x2084>)
 8002494:	701a      	strb	r2, [r3, #0]
						s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <main+0x2088>)
 800249a:	fb82 1203 	smull	r1, r2, r2, r3
 800249e:	1152      	asrs	r2, r2, #5
 80024a0:	17db      	asrs	r3, r3, #31
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	4b41      	ldr	r3, [pc, #260]	; (80025ac <main+0x2080>)
 80024a6:	fb83 1302 	smull	r1, r3, r3, r2
 80024aa:	1099      	asrs	r1, r3, #2
 80024ac:	17d3      	asrs	r3, r2, #31
 80024ae:	1ac9      	subs	r1, r1, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	1ad1      	subs	r1, r2, r3
 80024ba:	b2cb      	uxtb	r3, r1
 80024bc:	3330      	adds	r3, #48	; 0x30
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <main+0x2084>)
 80024c2:	705a      	strb	r2, [r3, #1]
						s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4a39      	ldr	r2, [pc, #228]	; (80025ac <main+0x2080>)
 80024c8:	fb82 1203 	smull	r1, r2, r2, r3
 80024cc:	1092      	asrs	r2, r2, #2
 80024ce:	17db      	asrs	r3, r3, #31
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <main+0x2080>)
 80024d4:	fb83 1302 	smull	r1, r3, r3, r2
 80024d8:	1099      	asrs	r1, r3, #2
 80024da:	17d3      	asrs	r3, r2, #31
 80024dc:	1ac9      	subs	r1, r1, r3
 80024de:	460b      	mov	r3, r1
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	1ad1      	subs	r1, r2, r3
 80024e8:	b2cb      	uxtb	r3, r1
 80024ea:	3330      	adds	r3, #48	; 0x30
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <main+0x2084>)
 80024f0:	709a      	strb	r2, [r3, #2]
						s_cal_data[3] = 0x30 + (rtc_time.year%10);
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <main+0x2080>)
 80024f6:	fb83 1302 	smull	r1, r3, r3, r2
 80024fa:	1099      	asrs	r1, r3, #2
 80024fc:	17d3      	asrs	r3, r2, #31
 80024fe:	1ac9      	subs	r1, r1, r3
 8002500:	460b      	mov	r3, r1
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	1ad1      	subs	r1, r2, r3
 800250a:	b2cb      	uxtb	r3, r1
 800250c:	3330      	adds	r3, #48	; 0x30
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <main+0x2084>)
 8002512:	70da      	strb	r2, [r3, #3]

						s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8002514:	7b3b      	ldrb	r3, [r7, #12]
 8002516:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <main+0x208c>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	08db      	lsrs	r3, r3, #3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3330      	adds	r3, #48	; 0x30
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <main+0x2084>)
 8002526:	715a      	strb	r2, [r3, #5]
						s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8002528:	7b3a      	ldrb	r2, [r7, #12]
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <main+0x208c>)
 800252c:	fba3 1302 	umull	r1, r3, r3, r2
 8002530:	08d9      	lsrs	r1, r3, #3
 8002532:	460b      	mov	r3, r1
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <main+0x2084>)
 8002544:	719a      	strb	r2, [r3, #6]

						s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <main+0x208c>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	08db      	lsrs	r3, r3, #3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3330      	adds	r3, #48	; 0x30
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <main+0x2084>)
 8002558:	721a      	strb	r2, [r3, #8]
						s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 800255a:	7b7a      	ldrb	r2, [r7, #13]
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <main+0x208c>)
 800255e:	fba3 1302 	umull	r1, r3, r3, r2
 8002562:	08d9      	lsrs	r1, r3, #3
 8002564:	460b      	mov	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3330      	adds	r3, #48	; 0x30
 8002572:	b2da      	uxtb	r2, r3
 8002574:	e022      	b.n	80025bc <main+0x2090>
 8002576:	bf00      	nop
 8002578:	2000098a 	.word	0x2000098a
 800257c:	20000a24 	.word	0x20000a24
 8002580:	20000978 	.word	0x20000978
 8002584:	2000096c 	.word	0x2000096c
 8002588:	20000990 	.word	0x20000990
 800258c:	20000d5e 	.word	0x20000d5e
 8002590:	20000a04 	.word	0x20000a04
 8002594:	20000d60 	.word	0x20000d60
 8002598:	2000099c 	.word	0x2000099c
 800259c:	20000989 	.word	0x20000989
 80025a0:	20000968 	.word	0x20000968
 80025a4:	20000d76 	.word	0x20000d76
 80025a8:	10624dd3 	.word	0x10624dd3
 80025ac:	66666667 	.word	0x66666667
 80025b0:	20000220 	.word	0x20000220
 80025b4:	51eb851f 	.word	0x51eb851f
 80025b8:	cccccccd 	.word	0xcccccccd
 80025bc:	4bb7      	ldr	r3, [pc, #732]	; (800289c <main+0x2370>)
 80025be:	725a      	strb	r2, [r3, #9]

						s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	4ab7      	ldr	r2, [pc, #732]	; (80028a0 <main+0x2374>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3330      	adds	r3, #48	; 0x30
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4bb2      	ldr	r3, [pc, #712]	; (800289c <main+0x2370>)
 80025d2:	72da      	strb	r2, [r3, #11]
						s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 80025d4:	7bba      	ldrb	r2, [r7, #14]
 80025d6:	4bb2      	ldr	r3, [pc, #712]	; (80028a0 <main+0x2374>)
 80025d8:	fba3 1302 	umull	r1, r3, r3, r2
 80025dc:	08d9      	lsrs	r1, r3, #3
 80025de:	460b      	mov	r3, r1
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3330      	adds	r3, #48	; 0x30
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4bab      	ldr	r3, [pc, #684]	; (800289c <main+0x2370>)
 80025f0:	731a      	strb	r2, [r3, #12]

						s_cal_data[14] = 0x30 + (rtc_time.min/10);
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	4aaa      	ldr	r2, [pc, #680]	; (80028a0 <main+0x2374>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	08db      	lsrs	r3, r3, #3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3330      	adds	r3, #48	; 0x30
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4ba6      	ldr	r3, [pc, #664]	; (800289c <main+0x2370>)
 8002604:	739a      	strb	r2, [r3, #14]
						s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	4ba5      	ldr	r3, [pc, #660]	; (80028a0 <main+0x2374>)
 800260a:	fba3 1302 	umull	r1, r3, r3, r2
 800260e:	08d9      	lsrs	r1, r3, #3
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3330      	adds	r3, #48	; 0x30
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b9e      	ldr	r3, [pc, #632]	; (800289c <main+0x2370>)
 8002622:	73da      	strb	r2, [r3, #15]

						s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8002624:	7c3b      	ldrb	r3, [r7, #16]
 8002626:	4a9e      	ldr	r2, [pc, #632]	; (80028a0 <main+0x2374>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3330      	adds	r3, #48	; 0x30
 8002632:	b2da      	uxtb	r2, r3
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <main+0x2370>)
 8002636:	745a      	strb	r2, [r3, #17]
						s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8002638:	7c3a      	ldrb	r2, [r7, #16]
 800263a:	4b99      	ldr	r3, [pc, #612]	; (80028a0 <main+0x2374>)
 800263c:	fba3 1302 	umull	r1, r3, r3, r2
 8002640:	08d9      	lsrs	r1, r3, #3
 8002642:	460b      	mov	r3, r1
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3330      	adds	r3, #48	; 0x30
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b92      	ldr	r3, [pc, #584]	; (800289c <main+0x2370>)
 8002654:	749a      	strb	r2, [r3, #18]


					//if(b_firstrddata==DISABLE){
						LCD_SetCursor ( LCD_CURSOR_1STR );
 8002656:	2080      	movs	r0, #128	; 0x80
 8002658:	f001 feee 	bl	8004438 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 800265c:	4891      	ldr	r0, [pc, #580]	; (80028a4 <main+0x2378>)
 800265e:	f001 ff9b 	bl	8004598 <LCD_WriteString>
						LCD_SetCursor ( LCD_CURSOR_2STR );
 8002662:	20c0      	movs	r0, #192	; 0xc0
 8002664:	f001 fee8 	bl	8004438 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 8002668:	488e      	ldr	r0, [pc, #568]	; (80028a4 <main+0x2378>)
 800266a:	f001 ff95 	bl	8004598 <LCD_WriteString>
						//b_firstrddata=ENABLE;

					//}

					LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 800266e:	2200      	movs	r2, #0
 8002670:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002674:	488c      	ldr	r0, [pc, #560]	; (80028a8 <main+0x237c>)
 8002676:	f002 f8c3 	bl	8004800 <LCD_RunStringBARCode>

					int strLength = strlen(g_sBuffer) + 1;
 800267a:	488c      	ldr	r0, [pc, #560]	; (80028ac <main+0x2380>)
 800267c:	f7fd fd66 	bl	800014c <strlen>
 8002680:	4603      	mov	r3, r0
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
					g_iBufferLength -= strLength;
 8002686:	4b8a      	ldr	r3, [pc, #552]	; (80028b0 <main+0x2384>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	4a88      	ldr	r2, [pc, #544]	; (80028b0 <main+0x2384>)
 8002690:	6013      	str	r3, [r2, #0]
					memmove ( g_sBuffer, g_sBuffer + strLength,
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	4a85      	ldr	r2, [pc, #532]	; (80028ac <main+0x2380>)
 8002696:	1899      	adds	r1, r3, r2

							BUFFER_LEN + 1 - strLength );
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f1c3 0381 	rsb	r3, r3, #129	; 0x81
					memmove ( g_sBuffer, g_sBuffer + strLength,
 800269e:	461a      	mov	r2, r3
 80026a0:	4882      	ldr	r0, [pc, #520]	; (80028ac <main+0x2380>)
 80026a2:	f005 fa5b 	bl	8007b5c <memmove>

					//*xxx*yyyy-MM-dd HH:mm:ss


					strncat(s_scan_d_c, s_cal_data, 19);
 80026a6:	2213      	movs	r2, #19
 80026a8:	497c      	ldr	r1, [pc, #496]	; (800289c <main+0x2370>)
 80026aa:	4882      	ldr	r0, [pc, #520]	; (80028b4 <main+0x2388>)
 80026ac:	f005 faa4 	bl	8007bf8 <strncat>
					strncat(s_scan_d_c, s_space, strlen(s_space));
 80026b0:	2300      	movs	r3, #0
 80026b2:	461a      	mov	r2, r3
 80026b4:	4980      	ldr	r1, [pc, #512]	; (80028b8 <main+0x238c>)
 80026b6:	487f      	ldr	r0, [pc, #508]	; (80028b4 <main+0x2388>)
 80026b8:	f005 fa9e 	bl	8007bf8 <strncat>
					strncat(s_scan_d_c, g_sBarCode, strlen(g_sBarCode));
 80026bc:	487a      	ldr	r0, [pc, #488]	; (80028a8 <main+0x237c>)
 80026be:	f7fd fd45 	bl	800014c <strlen>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4978      	ldr	r1, [pc, #480]	; (80028a8 <main+0x237c>)
 80026c8:	487a      	ldr	r0, [pc, #488]	; (80028b4 <main+0x2388>)
 80026ca:	f005 fa95 	bl	8007bf8 <strncat>
					strncat(s_scan_d_c, s_newline, strlen(s_newline));
 80026ce:	487b      	ldr	r0, [pc, #492]	; (80028bc <main+0x2390>)
 80026d0:	f7fd fd3c 	bl	800014c <strlen>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	4978      	ldr	r1, [pc, #480]	; (80028bc <main+0x2390>)
 80026da:	4876      	ldr	r0, [pc, #472]	; (80028b4 <main+0x2388>)
 80026dc:	f005 fa8c 	bl	8007bf8 <strncat>


					Usart2_SendData(s_scan_d_c,strlen(s_scan_d_c));
 80026e0:	4874      	ldr	r0, [pc, #464]	; (80028b4 <main+0x2388>)
 80026e2:	f7fd fd33 	bl	800014c <strlen>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4619      	mov	r1, r3
 80026ea:	4872      	ldr	r0, [pc, #456]	; (80028b4 <main+0x2388>)
 80026ec:	f004 ffa4 	bl	8007638 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 80026f0:	4872      	ldr	r0, [pc, #456]	; (80028bc <main+0x2390>)
 80026f2:	f7fd fd2b 	bl	800014c <strlen>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4619      	mov	r1, r3
 80026fa:	4870      	ldr	r0, [pc, #448]	; (80028bc <main+0x2390>)
 80026fc:	f004 ff9c 	bl	8007638 <Usart2_SendData>

					memset(s_scan_d_c, 0, strlen(s_scan_d_c));
 8002700:	486c      	ldr	r0, [pc, #432]	; (80028b4 <main+0x2388>)
 8002702:	f7fd fd23 	bl	800014c <strlen>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	2100      	movs	r1, #0
 800270c:	4869      	ldr	r0, [pc, #420]	; (80028b4 <main+0x2388>)
 800270e:	f005 fa3f 	bl	8007b90 <memset>



				//*****************************************************************************
				//Если тест NFC пройден успешно,то сканируем ID
						if(statusDevice==ST_DEV_NFC_NOERR || statusDevice==ST_DEV_ALL_NOERR ){
 8002712:	4b6b      	ldr	r3, [pc, #428]	; (80028c0 <main+0x2394>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d004      	beq.n	8002724 <main+0x21f8>
 800271a:	4b69      	ldr	r3, [pc, #420]	; (80028c0 <main+0x2394>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b11      	cmp	r3, #17
 8002720:	f040 8510 	bne.w	8003144 <main+0x2c18>
							if(cntlooppn532==CNT_LOOP_PN532){
 8002724:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <main+0x2398>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f24c 3250 	movw	r2, #50000	; 0xc350
 800272c:	4293      	cmp	r3, r2
 800272e:	f040 84bf 	bne.w	80030b0 <main+0x2b84>

								success=PN532_readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength,1500);
 8002732:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002736:	4a64      	ldr	r2, [pc, #400]	; (80028c8 <main+0x239c>)
 8002738:	4964      	ldr	r1, [pc, #400]	; (80028cc <main+0x23a0>)
 800273a:	2000      	movs	r0, #0
 800273c:	f002 fa24 	bl	8004b88 <PN532_readPassiveTargetID>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <main+0x23a4>)
 8002746:	701a      	strb	r2, [r3, #0]

								if(success && !b_discannfc){
 8002748:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <main+0x23a4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 84a5 	beq.w	800309c <main+0x2b70>
 8002752:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <main+0x23a8>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 84a0 	bne.w	800309c <main+0x2b70>

									b_discannfc=1;
 800275c:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <main+0x23a8>)
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]

									s_pn_uidlengthdata[0] = 0x30+(uidLength/100);
 8002762:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <main+0x239c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4a5c      	ldr	r2, [pc, #368]	; (80028d8 <main+0x23ac>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3330      	adds	r3, #48	; 0x30
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <main+0x23b0>)
 8002776:	701a      	strb	r2, [r3, #0]
									s_pn_uidlengthdata[1] = 0x30+(uidLength/10%10);
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <main+0x239c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4a48      	ldr	r2, [pc, #288]	; (80028a0 <main+0x2374>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <main+0x2374>)
 8002788:	fba3 1302 	umull	r1, r3, r3, r2
 800278c:	08d9      	lsrs	r1, r3, #3
 800278e:	460b      	mov	r3, r1
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3330      	adds	r3, #48	; 0x30
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <main+0x23b0>)
 80027a0:	705a      	strb	r2, [r3, #1]
									s_pn_uidlengthdata[2] = 0x30+(uidLength%10);
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <main+0x239c>)
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <main+0x2374>)
 80027a8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ac:	08d9      	lsrs	r1, r3, #3
 80027ae:	460b      	mov	r3, r1
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3330      	adds	r3, #48	; 0x30
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <main+0x23b0>)
 80027c0:	709a      	strb	r2, [r3, #2]

									Usart2_SendData(s_pn_foundcard,strlen(s_pn_foundcard));
 80027c2:	4847      	ldr	r0, [pc, #284]	; (80028e0 <main+0x23b4>)
 80027c4:	f7fd fcc2 	bl	800014c <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4844      	ldr	r0, [pc, #272]	; (80028e0 <main+0x23b4>)
 80027ce:	f004 ff33 	bl	8007638 <Usart2_SendData>

									Usart2_SendData(s_pn_uidlength,strlen(s_pn_uidlength));
 80027d2:	4844      	ldr	r0, [pc, #272]	; (80028e4 <main+0x23b8>)
 80027d4:	f7fd fcba 	bl	800014c <strlen>
 80027d8:	4603      	mov	r3, r0
 80027da:	4619      	mov	r1, r3
 80027dc:	4841      	ldr	r0, [pc, #260]	; (80028e4 <main+0x23b8>)
 80027de:	f004 ff2b 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_pn_uidlengthdata,strlen(s_pn_uidlengthdata));
 80027e2:	483e      	ldr	r0, [pc, #248]	; (80028dc <main+0x23b0>)
 80027e4:	f7fd fcb2 	bl	800014c <strlen>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	483b      	ldr	r0, [pc, #236]	; (80028dc <main+0x23b0>)
 80027ee:	f004 ff23 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 80027f2:	4832      	ldr	r0, [pc, #200]	; (80028bc <main+0x2390>)
 80027f4:	f7fd fcaa 	bl	800014c <strlen>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4619      	mov	r1, r3
 80027fc:	482f      	ldr	r0, [pc, #188]	; (80028bc <main+0x2390>)
 80027fe:	f004 ff1b 	bl	8007638 <Usart2_SendData>

									b_hextostr = fourbytes2strhex (&uid[0], &uidhex2pc4b[0]);
 8002802:	4939      	ldr	r1, [pc, #228]	; (80028e8 <main+0x23bc>)
 8002804:	4831      	ldr	r0, [pc, #196]	; (80028cc <main+0x23a0>)
 8002806:	f001 f8df 	bl	80039c8 <fourbytes2strhex>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	4b37      	ldr	r3, [pc, #220]	; (80028ec <main+0x23c0>)
 8002810:	701a      	strb	r2, [r3, #0]

									Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 8002812:	4837      	ldr	r0, [pc, #220]	; (80028f0 <main+0x23c4>)
 8002814:	f7fd fc9a 	bl	800014c <strlen>
 8002818:	4603      	mov	r3, r0
 800281a:	4619      	mov	r1, r3
 800281c:	4834      	ldr	r0, [pc, #208]	; (80028f0 <main+0x23c4>)
 800281e:	f004 ff0b 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(uidhex2pc4b,strlen(uidhex2pc4b));
 8002822:	4831      	ldr	r0, [pc, #196]	; (80028e8 <main+0x23bc>)
 8002824:	f7fd fc92 	bl	800014c <strlen>
 8002828:	4603      	mov	r3, r0
 800282a:	4619      	mov	r1, r3
 800282c:	482e      	ldr	r0, [pc, #184]	; (80028e8 <main+0x23bc>)
 800282e:	f004 ff03 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8002832:	4822      	ldr	r0, [pc, #136]	; (80028bc <main+0x2390>)
 8002834:	f7fd fc8a 	bl	800014c <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	4619      	mov	r1, r3
 800283c:	481f      	ldr	r0, [pc, #124]	; (80028bc <main+0x2390>)
 800283e:	f004 fefb 	bl	8007638 <Usart2_SendData>

									decuid = UIDResponse(&uid[0], uidLength);
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <main+0x239c>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4820      	ldr	r0, [pc, #128]	; (80028cc <main+0x23a0>)
 800284a:	f001 f931 	bl	8003ab0 <UIDResponse>
 800284e:	4603      	mov	r3, r0
 8002850:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <main+0x23c8>)
 8002852:	6013      	str	r3, [r2, #0]

									tim = RTC_GET_COUNTER();
 8002854:	f002 ff14 	bl	8005680 <RTC_GET_COUNTER>
 8002858:	4603      	mov	r3, r0
 800285a:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <main+0x23cc>)
 800285c:	6013      	str	r3, [r2, #0]

									nfc_conv2Flash(tim, decuid);
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <main+0x23cc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <main+0x23c8>)
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f001 fb5b 	bl	8003f24 <nfc_conv2Flash>

									while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 800286e:	bf00      	nop
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <main+0x23d0>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <main+0x235c>
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	4820      	ldr	r0, [pc, #128]	; (8002900 <main+0x23d4>)
 800287e:	f004 fbd1 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f3      	bne.n	8002870 <main+0x2344>
									SPI_FLASH_CONFIG();
 8002888:	f003 fc88 	bl	800619c <SPI_FLASH_CONFIG>


									memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));	//получение значения счетчика записей
 800288c:	2210      	movs	r2, #16
 800288e:	2100      	movs	r1, #0
 8002890:	481c      	ldr	r0, [pc, #112]	; (8002904 <main+0x23d8>)
 8002892:	f005 f97d 	bl	8007b90 <memset>
									spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <main+0x23dc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	e037      	b.n	800290c <main+0x23e0>
 800289c:	20000220 	.word	0x20000220
 80028a0:	cccccccd 	.word	0xcccccccd
 80028a4:	200000b4 	.word	0x200000b4
 80028a8:	200005d0 	.word	0x200005d0
 80028ac:	20000548 	.word	0x20000548
 80028b0:	200005cc 	.word	0x200005cc
 80028b4:	2000089c 	.word	0x2000089c
 80028b8:	200001d0 	.word	0x200001d0
 80028bc:	20000168 	.word	0x20000168
 80028c0:	20000888 	.word	0x20000888
 80028c4:	2000076c 	.word	0x2000076c
 80028c8:	20000764 	.word	0x20000764
 80028cc:	20000754 	.word	0x20000754
 80028d0:	20000752 	.word	0x20000752
 80028d4:	20000751 	.word	0x20000751
 80028d8:	51eb851f 	.word	0x51eb851f
 80028dc:	200001ac 	.word	0x200001ac
 80028e0:	2000016c 	.word	0x2000016c
 80028e4:	20000180 	.word	0x20000180
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	20000753 	.word	0x20000753
 80028f0:	20000198 	.word	0x20000198
 80028f4:	20000768 	.word	0x20000768
 80028f8:	2000095c 	.word	0x2000095c
 80028fc:	20000d76 	.word	0x20000d76
 8002900:	40003800 	.word	0x40003800
 8002904:	20000b24 	.word	0x20000b24
 8002908:	20000984 	.word	0x20000984
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <main+0x2414>)
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	b291      	uxth	r1, r2
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <main+0x2418>)
 8002914:	4618      	mov	r0, r3
 8002916:	f003 fc99 	bl	800624c <spiFlash_Read>
									for(int j = 0; j < 253; j++){
 800291a:	2300      	movs	r3, #0
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
 800291e:	e01a      	b.n	8002956 <main+0x242a>
										if(rd_test_buff[j] == 0xFF){
 8002920:	4a08      	ldr	r2, [pc, #32]	; (8002944 <main+0x2418>)
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2bff      	cmp	r3, #255	; 0xff
 800292a:	d111      	bne.n	8002950 <main+0x2424>
											val_cnt = rd_test_buff[j-1];
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	3b01      	subs	r3, #1
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <main+0x2418>)
 8002932:	5cd2      	ldrb	r2, [r2, r3]
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <main+0x241c>)
 8002936:	701a      	strb	r2, [r3, #0]
											nfc_cnt_addr = j;
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <main+0x2420>)
 800293c:	6013      	str	r3, [r2, #0]
											break;
 800293e:	e00d      	b.n	800295c <main+0x2430>
 8002940:	2000096c 	.word	0x2000096c
 8002944:	20000a24 	.word	0x20000a24
 8002948:	2000098a 	.word	0x2000098a
 800294c:	200009a0 	.word	0x200009a0
									for(int j = 0; j < 253; j++){
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	3301      	adds	r3, #1
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
 8002956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002958:	2bfc      	cmp	r3, #252	; 0xfc
 800295a:	dde1      	ble.n	8002920 <main+0x23f4>
											}
									}

									if(val_cnt< 251){	//количество записей удовлетворяет диапазону
 800295c:	4baa      	ldr	r3, [pc, #680]	; (8002c08 <main+0x26dc>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2bfa      	cmp	r3, #250	; 0xfa
 8002962:	d847      	bhi.n	80029f4 <main+0x24c8>
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	2100      	movs	r1, #0
 8002968:	48a8      	ldr	r0, [pc, #672]	; (8002c0c <main+0x26e0>)
 800296a:	f005 f911 	bl	8007b90 <memset>
									spiFlash_Read(nfc_addr_start, cnt_flash_t, rd_test_buff);
 800296e:	4ba8      	ldr	r3, [pc, #672]	; (8002c10 <main+0x26e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4aa8      	ldr	r2, [pc, #672]	; (8002c14 <main+0x26e8>)
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	b291      	uxth	r1, r2
 8002978:	4aa4      	ldr	r2, [pc, #656]	; (8002c0c <main+0x26e0>)
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fc66 	bl	800624c <spiFlash_Read>
									nfc_flash_addr = 12288 + val_cnt * 16;
 8002980:	4ba1      	ldr	r3, [pc, #644]	; (8002c08 <main+0x26dc>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	461a      	mov	r2, r3
 800298c:	4ba2      	ldr	r3, [pc, #648]	; (8002c18 <main+0x26ec>)
 800298e:	601a      	str	r2, [r3, #0]
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002990:	4ba1      	ldr	r3, [pc, #644]	; (8002c18 <main+0x26ec>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4aa1      	ldr	r2, [pc, #644]	; (8002c1c <main+0x26f0>)
 8002996:	8811      	ldrh	r1, [r2, #0]
 8002998:	4aa1      	ldr	r2, [pc, #644]	; (8002c20 <main+0x26f4>)
 800299a:	4618      	mov	r0, r3
 800299c:	f003 f970 	bl	8005c80 <Write_data_2Flash>
									spiFlash_write(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 80029a0:	4b9d      	ldr	r3, [pc, #628]	; (8002c18 <main+0x26ec>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a9d      	ldr	r2, [pc, #628]	; (8002c1c <main+0x26f0>)
 80029a6:	8811      	ldrh	r1, [r2, #0]
 80029a8:	4a9d      	ldr	r2, [pc, #628]	; (8002c20 <main+0x26f4>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 fca6 	bl	80062fc <spiFlash_write>
									do {
											stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80029b0:	2005      	movs	r0, #5
 80029b2:	f003 fd01 	bl	80063b8 <spiFlash_readStatus>
 80029b6:	4603      	mov	r3, r0
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	4b9a      	ldr	r3, [pc, #616]	; (8002c24 <main+0x26f8>)
 80029bc:	801a      	strh	r2, [r3, #0]
									} while (stat_reg1 & 0x01 );
 80029be:	4b99      	ldr	r3, [pc, #612]	; (8002c24 <main+0x26f8>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f2      	bne.n	80029b0 <main+0x2484>
									val_cnt++;
 80029ca:	4b8f      	ldr	r3, [pc, #572]	; (8002c08 <main+0x26dc>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b8d      	ldr	r3, [pc, #564]	; (8002c08 <main+0x26dc>)
 80029d4:	701a      	strb	r2, [r3, #0]
									nfc_cnt_addr = 4096 + nfc_cnt_addr;
 80029d6:	4b94      	ldr	r3, [pc, #592]	; (8002c28 <main+0x26fc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029de:	4a92      	ldr	r2, [pc, #584]	; (8002c28 <main+0x26fc>)
 80029e0:	6013      	str	r3, [r2, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//количество штрих-кодов
 80029e2:	4b91      	ldr	r3, [pc, #580]	; (8002c28 <main+0x26fc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a91      	ldr	r2, [pc, #580]	; (8002c2c <main+0x2700>)
 80029e8:	7812      	ldrb	r2, [r2, #0]
 80029ea:	b291      	uxth	r1, r2
 80029ec:	4a86      	ldr	r2, [pc, #536]	; (8002c08 <main+0x26dc>)
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f99a 	bl	8005d28 <Set_Cnt_to_Flash>

									}
									if(nfc_cnt_addr == 252 ){		//стирка если больше диапазона
 80029f4:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <main+0x26fc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2bfc      	cmp	r3, #252	; 0xfc
 80029fa:	d168      	bne.n	8002ace <main+0x25a2>
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	2100      	movs	r1, #0
 8002a00:	4882      	ldr	r0, [pc, #520]	; (8002c0c <main+0x26e0>)
 8002a02:	f005 f8c5 	bl	8007b90 <memset>
									spiFlash_Read(nfc_addr_start, cnt_flash_t, rd_test_buff);
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <main+0x26e4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a82      	ldr	r2, [pc, #520]	; (8002c14 <main+0x26e8>)
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	b291      	uxth	r1, r2
 8002a10:	4a7e      	ldr	r2, [pc, #504]	; (8002c0c <main+0x26e0>)
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fc1a 	bl	800624c <spiFlash_Read>
									nfc_cnt_addr = 4096;
 8002a18:	4b83      	ldr	r3, [pc, #524]	; (8002c28 <main+0x26fc>)
 8002a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a1e:	601a      	str	r2, [r3, #0]
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002a20:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <main+0x26ec>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a7d      	ldr	r2, [pc, #500]	; (8002c1c <main+0x26f0>)
 8002a26:	8811      	ldrh	r1, [r2, #0]
 8002a28:	4a7d      	ldr	r2, [pc, #500]	; (8002c20 <main+0x26f4>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 f928 	bl	8005c80 <Write_data_2Flash>
									nfc_flash_addr = 12288;
 8002a30:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <main+0x26ec>)
 8002a32:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002a36:	601a      	str	r2, [r3, #0]
									Safe_Flash_Erase(nfc_cnt_addr);
 8002a38:	4b7b      	ldr	r3, [pc, #492]	; (8002c28 <main+0x26fc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 f9db 	bl	8005df8 <Safe_Flash_Erase>
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002a42:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <main+0x26ec>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a75      	ldr	r2, [pc, #468]	; (8002c1c <main+0x26f0>)
 8002a48:	8811      	ldrh	r1, [r2, #0]
 8002a4a:	4a75      	ldr	r2, [pc, #468]	; (8002c20 <main+0x26f4>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 f917 	bl	8005c80 <Write_data_2Flash>
									Safe_Flash_Erase(nfc_flash_addr);
 8002a52:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <main+0x26ec>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 f9ce 	bl	8005df8 <Safe_Flash_Erase>
									val_cnt = 0;
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <main+0x26dc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8002a62:	4b71      	ldr	r3, [pc, #452]	; (8002c28 <main+0x26fc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a71      	ldr	r2, [pc, #452]	; (8002c2c <main+0x2700>)
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	b291      	uxth	r1, r2
 8002a6c:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <main+0x26dc>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 f95a 	bl	8005d28 <Set_Cnt_to_Flash>
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <main+0x26ec>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a68      	ldr	r2, [pc, #416]	; (8002c1c <main+0x26f0>)
 8002a7a:	8811      	ldrh	r1, [r2, #0]
 8002a7c:	4a68      	ldr	r2, [pc, #416]	; (8002c20 <main+0x26f4>)
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f8fe 	bl	8005c80 <Write_data_2Flash>
									spiFlash_write(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002a84:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <main+0x26ec>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a64      	ldr	r2, [pc, #400]	; (8002c1c <main+0x26f0>)
 8002a8a:	8811      	ldrh	r1, [r2, #0]
 8002a8c:	4a64      	ldr	r2, [pc, #400]	; (8002c20 <main+0x26f4>)
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fc34 	bl	80062fc <spiFlash_write>
									do {
											stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8002a94:	2005      	movs	r0, #5
 8002a96:	f003 fc8f 	bl	80063b8 <spiFlash_readStatus>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <main+0x26f8>)
 8002aa0:	801a      	strh	r2, [r3, #0]
									} while (stat_reg1 & 0x01 );
 8002aa2:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <main+0x26f8>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f2      	bne.n	8002a94 <main+0x2568>
									nfc_cnt_addr = 4097;
 8002aae:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <main+0x26fc>)
 8002ab0:	f241 0201 	movw	r2, #4097	; 0x1001
 8002ab4:	601a      	str	r2, [r3, #0]
									val_cnt = 1;
 8002ab6:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <main+0x26dc>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8002abc:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <main+0x26fc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a5a      	ldr	r2, [pc, #360]	; (8002c2c <main+0x2700>)
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	b291      	uxth	r1, r2
 8002ac6:	4a50      	ldr	r2, [pc, #320]	; (8002c08 <main+0x26dc>)
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 f92d 	bl	8005d28 <Set_Cnt_to_Flash>
									}

									memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8002ace:	22ff      	movs	r2, #255	; 0xff
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	484e      	ldr	r0, [pc, #312]	; (8002c0c <main+0x26e0>)
 8002ad4:	f005 f85c 	bl	8007b90 <memset>
									spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8002ad8:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <main+0x2704>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <main+0x26e8>)
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	b291      	uxth	r1, r2
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <main+0x26e0>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 fbb1 	bl	800624c <spiFlash_Read>

									memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8002aea:	22ff      	movs	r2, #255	; 0xff
 8002aec:	2100      	movs	r1, #0
 8002aee:	4847      	ldr	r0, [pc, #284]	; (8002c0c <main+0x26e0>)
 8002af0:	f005 f84e 	bl	8007b90 <memset>
									spiFlash_Read(nfc_flash_addr, cnt_flash_t, rd_test_buff);
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <main+0x26ec>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a46      	ldr	r2, [pc, #280]	; (8002c14 <main+0x26e8>)
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	b291      	uxth	r1, r2
 8002afe:	4a43      	ldr	r2, [pc, #268]	; (8002c0c <main+0x26e0>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fba3 	bl	800624c <spiFlash_Read>

									SpiActive = 0;
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <main+0x2708>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
									PN532_SPIInit();
 8002b0c:	f003 fa38 	bl	8005f80 <PN532_SPIInit>


									s_pn_uiddecdata[0] = 0x30+(decuid/1000000000);
 8002b10:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <main+0x270c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0a5b      	lsrs	r3, r3, #9
 8002b16:	4a49      	ldr	r2, [pc, #292]	; (8002c3c <main+0x2710>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	09db      	lsrs	r3, r3, #7
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3330      	adds	r3, #48	; 0x30
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <main+0x2714>)
 8002b26:	701a      	strb	r2, [r3, #0]
									s_pn_uiddecdata[1] = 0x30+(decuid/100000000%10);
 8002b28:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <main+0x270c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a45      	ldr	r2, [pc, #276]	; (8002c44 <main+0x2718>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0e59      	lsrs	r1, r3, #25
 8002b34:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <main+0x271c>)
 8002b36:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	1aca      	subs	r2, r1, r3
 8002b46:	b2d3      	uxtb	r3, r2
 8002b48:	3330      	adds	r3, #48	; 0x30
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <main+0x2714>)
 8002b4e:	705a      	strb	r2, [r3, #1]
									s_pn_uiddecdata[2] = 0x30+(decuid/10000000%10);
 8002b50:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <main+0x270c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a3d      	ldr	r2, [pc, #244]	; (8002c4c <main+0x2720>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0d99      	lsrs	r1, r3, #22
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <main+0x271c>)
 8002b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	1aca      	subs	r2, r1, r3
 8002b6e:	b2d3      	uxtb	r3, r2
 8002b70:	3330      	adds	r3, #48	; 0x30
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <main+0x2714>)
 8002b76:	709a      	strb	r2, [r3, #2]
									s_pn_uiddecdata[3] = 0x30+(decuid/1000000%10);
 8002b78:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <main+0x270c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <main+0x2724>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c99      	lsrs	r1, r3, #18
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <main+0x271c>)
 8002b86:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8a:	08da      	lsrs	r2, r3, #3
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	1aca      	subs	r2, r1, r3
 8002b96:	b2d3      	uxtb	r3, r2
 8002b98:	3330      	adds	r3, #48	; 0x30
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <main+0x2714>)
 8002b9e:	70da      	strb	r2, [r3, #3]
									s_pn_uiddecdata[4] = 0x30+(decuid/100000%10);
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <main+0x270c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <main+0x2728>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	09d9      	lsrs	r1, r3, #7
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <main+0x271c>)
 8002bb0:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb4:	08da      	lsrs	r2, r3, #3
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	1aca      	subs	r2, r1, r3
 8002bc0:	b2d3      	uxtb	r3, r2
 8002bc2:	3330      	adds	r3, #48	; 0x30
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <main+0x2714>)
 8002bc8:	711a      	strb	r2, [r3, #4]
									s_pn_uiddecdata[5] = 0x30+(decuid/10000%10);
 8002bca:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <main+0x270c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <main+0x272c>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0b59      	lsrs	r1, r3, #13
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <main+0x271c>)
 8002bd8:	fba3 2301 	umull	r2, r3, r3, r1
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	1aca      	subs	r2, r1, r3
 8002be8:	b2d3      	uxtb	r3, r2
 8002bea:	3330      	adds	r3, #48	; 0x30
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <main+0x2714>)
 8002bf0:	715a      	strb	r2, [r3, #5]
									s_pn_uiddecdata[6] = 0x30+(decuid/1000%10);
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <main+0x270c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <main+0x2730>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0999      	lsrs	r1, r3, #6
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <main+0x271c>)
 8002c00:	fba3 2301 	umull	r2, r3, r3, r1
 8002c04:	e02c      	b.n	8002c60 <main+0x2734>
 8002c06:	bf00      	nop
 8002c08:	2000098a 	.word	0x2000098a
 8002c0c:	20000a24 	.word	0x20000a24
 8002c10:	20000980 	.word	0x20000980
 8002c14:	2000096c 	.word	0x2000096c
 8002c18:	20000994 	.word	0x20000994
 8002c1c:	20000d5e 	.word	0x20000d5e
 8002c20:	20000a14 	.word	0x20000a14
 8002c24:	20000d60 	.word	0x20000d60
 8002c28:	200009a0 	.word	0x200009a0
 8002c2c:	20000989 	.word	0x20000989
 8002c30:	20000984 	.word	0x20000984
 8002c34:	20000d76 	.word	0x20000d76
 8002c38:	20000768 	.word	0x20000768
 8002c3c:	00044b83 	.word	0x00044b83
 8002c40:	200001b0 	.word	0x200001b0
 8002c44:	55e63b89 	.word	0x55e63b89
 8002c48:	cccccccd 	.word	0xcccccccd
 8002c4c:	6b5fca6b 	.word	0x6b5fca6b
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	0a7c5ac5 	.word	0x0a7c5ac5
 8002c58:	d1b71759 	.word	0xd1b71759
 8002c5c:	10624dd3 	.word	0x10624dd3
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	1aca      	subs	r2, r1, r3
 8002c6c:	b2d3      	uxtb	r3, r2
 8002c6e:	3330      	adds	r3, #48	; 0x30
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <main+0x28a4>)
 8002c74:	719a      	strb	r2, [r3, #6]
									s_pn_uiddecdata[7] = 0x30+(decuid/100%10);
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <main+0x28a8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <main+0x28ac>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	0959      	lsrs	r1, r3, #5
 8002c82:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <main+0x28b0>)
 8002c84:	fba3 2301 	umull	r2, r3, r3, r1
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	1aca      	subs	r2, r1, r3
 8002c94:	b2d3      	uxtb	r3, r2
 8002c96:	3330      	adds	r3, #48	; 0x30
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <main+0x28a4>)
 8002c9c:	71da      	strb	r2, [r3, #7]
									s_pn_uiddecdata[8] = 0x30+(decuid/10%10);
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <main+0x28a8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <main+0x28b0>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	08d9      	lsrs	r1, r3, #3
 8002caa:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <main+0x28b0>)
 8002cac:	fba3 2301 	umull	r2, r3, r3, r1
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	1aca      	subs	r2, r1, r3
 8002cbc:	b2d3      	uxtb	r3, r2
 8002cbe:	3330      	adds	r3, #48	; 0x30
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <main+0x28a4>)
 8002cc4:	721a      	strb	r2, [r3, #8]
									s_pn_uiddecdata[9] = 0x30+(decuid%10);
 8002cc6:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <main+0x28a8>)
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	4b44      	ldr	r3, [pc, #272]	; (8002ddc <main+0x28b0>)
 8002ccc:	fba3 2301 	umull	r2, r3, r3, r1
 8002cd0:	08da      	lsrs	r2, r3, #3
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	1aca      	subs	r2, r1, r3
 8002cdc:	b2d3      	uxtb	r3, r2
 8002cde:	3330      	adds	r3, #48	; 0x30
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <main+0x28a4>)
 8002ce4:	725a      	strb	r2, [r3, #9]

									Usart2_SendData(s_pn_uiddecvalue,strlen(s_pn_uiddecvalue));
 8002ce6:	483e      	ldr	r0, [pc, #248]	; (8002de0 <main+0x28b4>)
 8002ce8:	f7fd fa30 	bl	800014c <strlen>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4619      	mov	r1, r3
 8002cf0:	483b      	ldr	r0, [pc, #236]	; (8002de0 <main+0x28b4>)
 8002cf2:	f004 fca1 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_pn_uiddecdata,strlen(s_pn_uiddecdata));
 8002cf6:	4836      	ldr	r0, [pc, #216]	; (8002dd0 <main+0x28a4>)
 8002cf8:	f7fd fa28 	bl	800014c <strlen>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4833      	ldr	r0, [pc, #204]	; (8002dd0 <main+0x28a4>)
 8002d02:	f004 fc99 	bl	8007638 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8002d06:	4837      	ldr	r0, [pc, #220]	; (8002de4 <main+0x28b8>)
 8002d08:	f7fd fa20 	bl	800014c <strlen>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4834      	ldr	r0, [pc, #208]	; (8002de4 <main+0x28b8>)
 8002d12:	f004 fc91 	bl	8007638 <Usart2_SendData>
									//memset(g_sBarCode,0,strlen(g_sBarCode));
									//strlcpy ( g_sBarCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );


									//if(b_firstrddata==DISABLE){
										LCD_SetCursor ( LCD_CURSOR_1STR );
 8002d16:	2080      	movs	r0, #128	; 0x80
 8002d18:	f001 fb8e 	bl	8004438 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8002d1c:	4832      	ldr	r0, [pc, #200]	; (8002de8 <main+0x28bc>)
 8002d1e:	f001 fc3b 	bl	8004598 <LCD_WriteString>
										LCD_SetCursor ( LCD_CURSOR_2STR );
 8002d22:	20c0      	movs	r0, #192	; 0xc0
 8002d24:	f001 fb88 	bl	8004438 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8002d28:	482f      	ldr	r0, [pc, #188]	; (8002de8 <main+0x28bc>)
 8002d2a:	f001 fc35 	bl	8004598 <LCD_WriteString>
										//b_firstrddata=ENABLE;

									//}

									memset(g_sNfcCode,0,strlen(g_sNfcCode));
 8002d2e:	482f      	ldr	r0, [pc, #188]	; (8002dec <main+0x28c0>)
 8002d30:	f7fd fa0c 	bl	800014c <strlen>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	2100      	movs	r1, #0
 8002d3a:	482c      	ldr	r0, [pc, #176]	; (8002dec <main+0x28c0>)
 8002d3c:	f004 ff28 	bl	8007b90 <memset>

									  strlcpy ( g_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 8002d40:	221a      	movs	r2, #26
 8002d42:	492b      	ldr	r1, [pc, #172]	; (8002df0 <main+0x28c4>)
 8002d44:	4829      	ldr	r0, [pc, #164]	; (8002dec <main+0x28c0>)
 8002d46:	f004 ff42 	bl	8007bce <strlcpy>
									  strcat(g_sNfcCode, s_pn_uiddecdata );
 8002d4a:	4921      	ldr	r1, [pc, #132]	; (8002dd0 <main+0x28a4>)
 8002d4c:	4827      	ldr	r0, [pc, #156]	; (8002dec <main+0x28c0>)
 8002d4e:	f004 ff27 	bl	8007ba0 <strcat>

									//strlcpy ( g_sNfcCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );

									//LCD_SetCursor ( LCD_CURSOR_1STR );
									//LCD_WriteString ( s_lcd_nfc );
									LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 0 );
 8002d52:	2200      	movs	r2, #0
 8002d54:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002d58:	4824      	ldr	r0, [pc, #144]	; (8002dec <main+0x28c0>)
 8002d5a:	f001 fde5 	bl	8004928 <LCD_RunStringNFCCode>


								//	PN532_WriteID();
									pn532_rd_stat=PN532_Read_Data(uid,uidLength,1,  rdDataBlock);
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <main+0x28c8>)
 8002d60:	7819      	ldrb	r1, [r3, #0]
 8002d62:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <main+0x28cc>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	4825      	ldr	r0, [pc, #148]	; (8002dfc <main+0x28d0>)
 8002d68:	f002 fbb6 	bl	80054d8 <PN532_Read_Data>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <main+0x28d4>)
 8002d72:	701a      	strb	r2, [r3, #0]

									switch(pn532_rd_stat){
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <main+0x28d4>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d047      	beq.n	8002e0c <main+0x28e0>
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	dc56      	bgt.n	8002e2e <main+0x2902>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <main+0x285e>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d011      	beq.n	8002dac <main+0x2880>
 8002d88:	e051      	b.n	8002e2e <main+0x2902>
									case 0:
										Usart2_SendData(s_pc_PN532_info1,strlen(s_pc_PN532_info1));
 8002d8a:	481e      	ldr	r0, [pc, #120]	; (8002e04 <main+0x28d8>)
 8002d8c:	f7fd f9de 	bl	800014c <strlen>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4619      	mov	r1, r3
 8002d94:	481b      	ldr	r0, [pc, #108]	; (8002e04 <main+0x28d8>)
 8002d96:	f004 fc4f 	bl	8007638 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8002d9a:	4812      	ldr	r0, [pc, #72]	; (8002de4 <main+0x28b8>)
 8002d9c:	f7fd f9d6 	bl	800014c <strlen>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4619      	mov	r1, r3
 8002da4:	480f      	ldr	r0, [pc, #60]	; (8002de4 <main+0x28b8>)
 8002da6:	f004 fc47 	bl	8007638 <Usart2_SendData>
										break;
 8002daa:	e040      	b.n	8002e2e <main+0x2902>
									case 1:
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 8002dac:	4816      	ldr	r0, [pc, #88]	; (8002e08 <main+0x28dc>)
 8002dae:	f7fd f9cd 	bl	800014c <strlen>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4619      	mov	r1, r3
 8002db6:	4814      	ldr	r0, [pc, #80]	; (8002e08 <main+0x28dc>)
 8002db8:	f004 fc3e 	bl	8007638 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8002dbc:	4809      	ldr	r0, [pc, #36]	; (8002de4 <main+0x28b8>)
 8002dbe:	f7fd f9c5 	bl	800014c <strlen>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <main+0x28b8>)
 8002dc8:	f004 fc36 	bl	8007638 <Usart2_SendData>
										break;
 8002dcc:	e02f      	b.n	8002e2e <main+0x2902>
 8002dce:	bf00      	nop
 8002dd0:	200001b0 	.word	0x200001b0
 8002dd4:	20000768 	.word	0x20000768
 8002dd8:	51eb851f 	.word	0x51eb851f
 8002ddc:	cccccccd 	.word	0xcccccccd
 8002de0:	200001bc 	.word	0x200001bc
 8002de4:	20000168 	.word	0x20000168
 8002de8:	200000b4 	.word	0x200000b4
 8002dec:	20000608 	.word	0x20000608
 8002df0:	200000e0 	.word	0x200000e0
 8002df4:	20000764 	.word	0x20000764
 8002df8:	2000088c 	.word	0x2000088c
 8002dfc:	20000754 	.word	0x20000754
 8002e00:	20000781 	.word	0x20000781
 8002e04:	20000238 	.word	0x20000238
 8002e08:	20000270 	.word	0x20000270
									case 2:
										Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8002e0c:	48b4      	ldr	r0, [pc, #720]	; (80030e0 <main+0x2bb4>)
 8002e0e:	f7fd f99d 	bl	800014c <strlen>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4619      	mov	r1, r3
 8002e16:	48b2      	ldr	r0, [pc, #712]	; (80030e0 <main+0x2bb4>)
 8002e18:	f004 fc0e 	bl	8007638 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8002e1c:	48b1      	ldr	r0, [pc, #708]	; (80030e4 <main+0x2bb8>)
 8002e1e:	f7fd f995 	bl	800014c <strlen>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	48af      	ldr	r0, [pc, #700]	; (80030e4 <main+0x2bb8>)
 8002e28:	f004 fc06 	bl	8007638 <Usart2_SendData>
										break;
 8002e2c:	bf00      	nop
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
										Usart2_SendData(s_newline,strlen(s_newline));
									}
								*/

									Usart2_SendData(s_pn_data_block0,strlen(s_pn_data_block0));
 8002e2e:	48ae      	ldr	r0, [pc, #696]	; (80030e8 <main+0x2bbc>)
 8002e30:	f7fd f98c 	bl	800014c <strlen>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4619      	mov	r1, r3
 8002e38:	48ab      	ldr	r0, [pc, #684]	; (80030e8 <main+0x2bbc>)
 8002e3a:	f004 fbfd 	bl	8007638 <Usart2_SendData>


									//if(pn532_rd_stat==0){
									BytesHex2Str(rdDataBlock, sizeof(rdDataBlock), DataHex2pc);
 8002e3e:	4aab      	ldr	r2, [pc, #684]	; (80030ec <main+0x2bc0>)
 8002e40:	2110      	movs	r1, #16
 8002e42:	48ab      	ldr	r0, [pc, #684]	; (80030f0 <main+0x2bc4>)
 8002e44:	f000 fe66 	bl	8003b14 <BytesHex2Str>
										Usart2_SendData(DataHex2pc,sizeof(DataHex2pc));
 8002e48:	212f      	movs	r1, #47	; 0x2f
 8002e4a:	48a8      	ldr	r0, [pc, #672]	; (80030ec <main+0x2bc0>)
 8002e4c:	f004 fbf4 	bl	8007638 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8002e50:	48a4      	ldr	r0, [pc, #656]	; (80030e4 <main+0x2bb8>)
 8002e52:	f7fd f97b 	bl	800014c <strlen>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4619      	mov	r1, r3
 8002e5a:	48a2      	ldr	r0, [pc, #648]	; (80030e4 <main+0x2bb8>)
 8002e5c:	f004 fbec 	bl	8007638 <Usart2_SendData>

									//}
										timer = RTC_GET_COUNTER();
 8002e60:	f002 fc0e 	bl	8005680 <RTC_GET_COUNTER>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4aa3      	ldr	r2, [pc, #652]	; (80030f4 <main+0x2bc8>)
 8002e68:	6013      	str	r3, [r2, #0]
										timer_to_cal(timer, &rtc_time);
 8002e6a:	4ba2      	ldr	r3, [pc, #648]	; (80030f4 <main+0x2bc8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f107 0208 	add.w	r2, r7, #8
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 fc5d 	bl	8005734 <timer_to_cal>
										tim = cal_to_timer(&rtc_time);
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fd42 	bl	8005908 <cal_to_timer>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a9c      	ldr	r2, [pc, #624]	; (80030f8 <main+0x2bcc>)
 8002e88:	6013      	str	r3, [r2, #0]

										//*xxx*yyyy-MM-dd HH:mm:ss

										s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4a9b      	ldr	r2, [pc, #620]	; (80030fc <main+0x2bd0>)
 8002e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e92:	1192      	asrs	r2, r2, #6
 8002e94:	17db      	asrs	r3, r3, #31
 8002e96:	1ad2      	subs	r2, r2, r3
 8002e98:	4b99      	ldr	r3, [pc, #612]	; (8003100 <main+0x2bd4>)
 8002e9a:	fb83 1302 	smull	r1, r3, r3, r2
 8002e9e:	1099      	asrs	r1, r3, #2
 8002ea0:	17d3      	asrs	r3, r2, #31
 8002ea2:	1ac9      	subs	r1, r1, r3
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	1ad1      	subs	r1, r2, r3
 8002eae:	b2cb      	uxtb	r3, r1
 8002eb0:	3330      	adds	r3, #48	; 0x30
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	4b93      	ldr	r3, [pc, #588]	; (8003104 <main+0x2bd8>)
 8002eb6:	701a      	strb	r2, [r3, #0]
										s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4a93      	ldr	r2, [pc, #588]	; (8003108 <main+0x2bdc>)
 8002ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec0:	1152      	asrs	r2, r2, #5
 8002ec2:	17db      	asrs	r3, r3, #31
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	4b8e      	ldr	r3, [pc, #568]	; (8003100 <main+0x2bd4>)
 8002ec8:	fb83 1302 	smull	r1, r3, r3, r2
 8002ecc:	1099      	asrs	r1, r3, #2
 8002ece:	17d3      	asrs	r3, r2, #31
 8002ed0:	1ac9      	subs	r1, r1, r3
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	1ad1      	subs	r1, r2, r3
 8002edc:	b2cb      	uxtb	r3, r1
 8002ede:	3330      	adds	r3, #48	; 0x30
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <main+0x2bd8>)
 8002ee4:	705a      	strb	r2, [r3, #1]
										s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4a85      	ldr	r2, [pc, #532]	; (8003100 <main+0x2bd4>)
 8002eea:	fb82 1203 	smull	r1, r2, r2, r3
 8002eee:	1092      	asrs	r2, r2, #2
 8002ef0:	17db      	asrs	r3, r3, #31
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	4b82      	ldr	r3, [pc, #520]	; (8003100 <main+0x2bd4>)
 8002ef6:	fb83 1302 	smull	r1, r3, r3, r2
 8002efa:	1099      	asrs	r1, r3, #2
 8002efc:	17d3      	asrs	r3, r2, #31
 8002efe:	1ac9      	subs	r1, r1, r3
 8002f00:	460b      	mov	r3, r1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	1ad1      	subs	r1, r2, r3
 8002f0a:	b2cb      	uxtb	r3, r1
 8002f0c:	3330      	adds	r3, #48	; 0x30
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <main+0x2bd8>)
 8002f12:	709a      	strb	r2, [r3, #2]
										s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4b7a      	ldr	r3, [pc, #488]	; (8003100 <main+0x2bd4>)
 8002f18:	fb83 1302 	smull	r1, r3, r3, r2
 8002f1c:	1099      	asrs	r1, r3, #2
 8002f1e:	17d3      	asrs	r3, r2, #31
 8002f20:	1ac9      	subs	r1, r1, r3
 8002f22:	460b      	mov	r3, r1
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	1ad1      	subs	r1, r2, r3
 8002f2c:	b2cb      	uxtb	r3, r1
 8002f2e:	3330      	adds	r3, #48	; 0x30
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b74      	ldr	r3, [pc, #464]	; (8003104 <main+0x2bd8>)
 8002f34:	70da      	strb	r2, [r3, #3]

										s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8002f36:	7b3b      	ldrb	r3, [r7, #12]
 8002f38:	4a74      	ldr	r2, [pc, #464]	; (800310c <main+0x2be0>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	08db      	lsrs	r3, r3, #3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	3330      	adds	r3, #48	; 0x30
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <main+0x2bd8>)
 8002f48:	715a      	strb	r2, [r3, #5]
										s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8002f4a:	7b3a      	ldrb	r2, [r7, #12]
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <main+0x2be0>)
 8002f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f52:	08d9      	lsrs	r1, r3, #3
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3330      	adds	r3, #48	; 0x30
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b67      	ldr	r3, [pc, #412]	; (8003104 <main+0x2bd8>)
 8002f66:	719a      	strb	r2, [r3, #6]

										s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8002f68:	7b7b      	ldrb	r3, [r7, #13]
 8002f6a:	4a68      	ldr	r2, [pc, #416]	; (800310c <main+0x2be0>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	08db      	lsrs	r3, r3, #3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	3330      	adds	r3, #48	; 0x30
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b62      	ldr	r3, [pc, #392]	; (8003104 <main+0x2bd8>)
 8002f7a:	721a      	strb	r2, [r3, #8]
										s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8002f7c:	7b7a      	ldrb	r2, [r7, #13]
 8002f7e:	4b63      	ldr	r3, [pc, #396]	; (800310c <main+0x2be0>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	08d9      	lsrs	r1, r3, #3
 8002f86:	460b      	mov	r3, r1
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3330      	adds	r3, #48	; 0x30
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <main+0x2bd8>)
 8002f98:	725a      	strb	r2, [r3, #9]

										s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8002f9a:	7bbb      	ldrb	r3, [r7, #14]
 8002f9c:	4a5b      	ldr	r2, [pc, #364]	; (800310c <main+0x2be0>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3330      	adds	r3, #48	; 0x30
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4b56      	ldr	r3, [pc, #344]	; (8003104 <main+0x2bd8>)
 8002fac:	72da      	strb	r2, [r3, #11]
										s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8002fae:	7bba      	ldrb	r2, [r7, #14]
 8002fb0:	4b56      	ldr	r3, [pc, #344]	; (800310c <main+0x2be0>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	08d9      	lsrs	r1, r3, #3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3330      	adds	r3, #48	; 0x30
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <main+0x2bd8>)
 8002fca:	731a      	strb	r2, [r3, #12]

										s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	4a4f      	ldr	r2, [pc, #316]	; (800310c <main+0x2be0>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3330      	adds	r3, #48	; 0x30
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	4b49      	ldr	r3, [pc, #292]	; (8003104 <main+0x2bd8>)
 8002fde:	739a      	strb	r2, [r3, #14]
										s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	4b4a      	ldr	r3, [pc, #296]	; (800310c <main+0x2be0>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	08d9      	lsrs	r1, r3, #3
 8002fea:	460b      	mov	r3, r1
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3330      	adds	r3, #48	; 0x30
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <main+0x2bd8>)
 8002ffc:	73da      	strb	r2, [r3, #15]

										s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8002ffe:	7c3b      	ldrb	r3, [r7, #16]
 8003000:	4a42      	ldr	r2, [pc, #264]	; (800310c <main+0x2be0>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3330      	adds	r3, #48	; 0x30
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <main+0x2bd8>)
 8003010:	745a      	strb	r2, [r3, #17]
										s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8003012:	7c3a      	ldrb	r2, [r7, #16]
 8003014:	4b3d      	ldr	r3, [pc, #244]	; (800310c <main+0x2be0>)
 8003016:	fba3 1302 	umull	r1, r3, r3, r2
 800301a:	08d9      	lsrs	r1, r3, #3
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3330      	adds	r3, #48	; 0x30
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <main+0x2bd8>)
 800302e:	749a      	strb	r2, [r3, #18]

										strncat(s_nfc_tag_date, s_cal_data, 19);
 8003030:	2213      	movs	r2, #19
 8003032:	4934      	ldr	r1, [pc, #208]	; (8003104 <main+0x2bd8>)
 8003034:	4836      	ldr	r0, [pc, #216]	; (8003110 <main+0x2be4>)
 8003036:	f004 fddf 	bl	8007bf8 <strncat>
										strncat(s_nfc_tag_date, s_space, strlen(s_space));
 800303a:	2300      	movs	r3, #0
 800303c:	461a      	mov	r2, r3
 800303e:	4935      	ldr	r1, [pc, #212]	; (8003114 <main+0x2be8>)
 8003040:	4833      	ldr	r0, [pc, #204]	; (8003110 <main+0x2be4>)
 8003042:	f004 fdd9 	bl	8007bf8 <strncat>
										strncat(s_nfc_tag_date, g_sNfcCode, strlen(g_sNfcCode));
 8003046:	4834      	ldr	r0, [pc, #208]	; (8003118 <main+0x2bec>)
 8003048:	f7fd f880 	bl	800014c <strlen>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	4931      	ldr	r1, [pc, #196]	; (8003118 <main+0x2bec>)
 8003052:	482f      	ldr	r0, [pc, #188]	; (8003110 <main+0x2be4>)
 8003054:	f004 fdd0 	bl	8007bf8 <strncat>
										strncat(s_nfc_tag_date, s_newline, strlen(s_newline));
 8003058:	4822      	ldr	r0, [pc, #136]	; (80030e4 <main+0x2bb8>)
 800305a:	f7fd f877 	bl	800014c <strlen>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	4920      	ldr	r1, [pc, #128]	; (80030e4 <main+0x2bb8>)
 8003064:	482a      	ldr	r0, [pc, #168]	; (8003110 <main+0x2be4>)
 8003066:	f004 fdc7 	bl	8007bf8 <strncat>



									//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
										Usart2_SendData(s_nfc_tag_date,strlen(s_nfc_tag_date));
 800306a:	4829      	ldr	r0, [pc, #164]	; (8003110 <main+0x2be4>)
 800306c:	f7fd f86e 	bl	800014c <strlen>
 8003070:	4603      	mov	r3, r0
 8003072:	4619      	mov	r1, r3
 8003074:	4826      	ldr	r0, [pc, #152]	; (8003110 <main+0x2be4>)
 8003076:	f004 fadf 	bl	8007638 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 800307a:	481a      	ldr	r0, [pc, #104]	; (80030e4 <main+0x2bb8>)
 800307c:	f7fd f866 	bl	800014c <strlen>
 8003080:	4603      	mov	r3, r0
 8003082:	4619      	mov	r1, r3
 8003084:	4817      	ldr	r0, [pc, #92]	; (80030e4 <main+0x2bb8>)
 8003086:	f004 fad7 	bl	8007638 <Usart2_SendData>

										memset(s_nfc_tag_date, 0, strlen(s_nfc_tag_date));
 800308a:	4821      	ldr	r0, [pc, #132]	; (8003110 <main+0x2be4>)
 800308c:	f7fd f85e 	bl	800014c <strlen>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	2100      	movs	r1, #0
 8003096:	481e      	ldr	r0, [pc, #120]	; (8003110 <main+0x2be4>)
 8003098:	f004 fd7a 	bl	8007b90 <memset>

								}
								if(!success)
 800309c:	4b1f      	ldr	r3, [pc, #124]	; (800311c <main+0x2bf0>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <main+0x2b7e>
								{

									//Usart2_SendData(s_pn_notfoundcard,sizeof(s_pn_notfoundcard));
									b_discannfc=0;
 80030a4:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <main+0x2bf4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]

								}

								cntlooppn532=0;
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <main+0x2bf8>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
							}//конец if(cntlooppn532==CNT_LOOP_PN532)

							cntlooppn532++;
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <main+0x2bf8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <main+0x2bf8>)
 80030b8:	6013      	str	r3, [r2, #0]

							LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 1 );
 80030ba:	2201      	movs	r2, #1
 80030bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80030c0:	4815      	ldr	r0, [pc, #84]	; (8003118 <main+0x2bec>)
 80030c2:	f001 fc31 	bl	8004928 <LCD_RunStringNFCCode>
 80030c6:	e03d      	b.n	8003144 <main+0x2c18>

		}//конец если не режим записи метки NFC
		else{ //если режим записи метки NFC


			if(!b_1secflg){
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <main+0x2bfc>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d12f      	bne.n	8003130 <main+0x2c04>
				LCD_SetCursor ( LCD_CURSOR_2STR );
 80030d0:	20c0      	movs	r0, #192	; 0xc0
 80030d2:	f001 f9b1 	bl	8004438 <LCD_SetCursor>
				LCD_WriteString (uidnfcwrdara );
 80030d6:	4815      	ldr	r0, [pc, #84]	; (800312c <main+0x2c00>)
 80030d8:	f001 fa5e 	bl	8004598 <LCD_WriteString>
 80030dc:	e032      	b.n	8003144 <main+0x2c18>
 80030de:	bf00      	nop
 80030e0:	200002d8 	.word	0x200002d8
 80030e4:	20000168 	.word	0x20000168
 80030e8:	20000324 	.word	0x20000324
 80030ec:	200002f4 	.word	0x200002f4
 80030f0:	2000088c 	.word	0x2000088c
 80030f4:	20000338 	.word	0x20000338
 80030f8:	2000095c 	.word	0x2000095c
 80030fc:	10624dd3 	.word	0x10624dd3
 8003100:	66666667 	.word	0x66666667
 8003104:	20000220 	.word	0x20000220
 8003108:	51eb851f 	.word	0x51eb851f
 800310c:	cccccccd 	.word	0xcccccccd
 8003110:	2000091c 	.word	0x2000091c
 8003114:	200001d0 	.word	0x200001d0
 8003118:	20000608 	.word	0x20000608
 800311c:	20000752 	.word	0x20000752
 8003120:	20000751 	.word	0x20000751
 8003124:	2000076c 	.word	0x2000076c
 8003128:	20000770 	.word	0x20000770
 800312c:	20000020 	.word	0x20000020

			}
			else{
				LCD_SetCursor ( LCD_CURSOR_2STR+u8_cntindex );
 8003130:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <main+0x2db8>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	3b40      	subs	r3, #64	; 0x40
 8003136:	b2db      	uxtb	r3, r3
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f97d 	bl	8004438 <LCD_SetCursor>
				LCD_WriteString (s_space);
 800313e:	486a      	ldr	r0, [pc, #424]	; (80032e8 <main+0x2dbc>)
 8003140:	f001 fa2a 	bl	8004598 <LCD_WriteString>

			}
		}


		if(u8_wrnfcstatus!=0 && b_wrstr1==TRUE){
 8003144:	4b69      	ldr	r3, [pc, #420]	; (80032ec <main+0x2dc0>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01a      	beq.n	8003182 <main+0x2c56>
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <main+0x2dc4>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d116      	bne.n	8003182 <main+0x2c56>
			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8003154:	4867      	ldr	r0, [pc, #412]	; (80032f4 <main+0x2dc8>)
 8003156:	f7fc fff9 	bl	800014c <strlen>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	4864      	ldr	r0, [pc, #400]	; (80032f4 <main+0x2dc8>)
 8003162:	f004 fd15 	bl	8007b90 <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_wrnfc, USB_STATE_LEN );
 8003166:	221a      	movs	r2, #26
 8003168:	4963      	ldr	r1, [pc, #396]	; (80032f8 <main+0x2dcc>)
 800316a:	4862      	ldr	r0, [pc, #392]	; (80032f4 <main+0x2dc8>)
 800316c:	f004 fd2f 	bl	8007bce <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003176:	485f      	ldr	r0, [pc, #380]	; (80032f4 <main+0x2dc8>)
 8003178:	f001 fb42 	bl	8004800 <LCD_RunStringBARCode>
			  b_wrstr1=FALSE;
 800317c:	4b5c      	ldr	r3, [pc, #368]	; (80032f0 <main+0x2dc4>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
		}

		LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 1 );
 8003182:	2201      	movs	r2, #1
 8003184:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003188:	485a      	ldr	r0, [pc, #360]	; (80032f4 <main+0x2dc8>)
 800318a:	f001 fb39 	bl	8004800 <LCD_RunStringBARCode>

		if(u8_wrnfcstatus==9){
 800318e:	4b57      	ldr	r3, [pc, #348]	; (80032ec <main+0x2dc0>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b09      	cmp	r3, #9
 8003194:	f47d ad03 	bne.w	8000b9e <main+0x672>
			PN532_WriteTagtoHex();
 8003198:	f000 fd20 	bl	8003bdc <PN532_WriteTagtoHex>

			//b_hextostr = fourbytes2strhex (&outwrdata[0], &uidhex2pc4b[0]);

			Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 800319c:	4857      	ldr	r0, [pc, #348]	; (80032fc <main+0x2dd0>)
 800319e:	f7fc ffd5 	bl	800014c <strlen>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4619      	mov	r1, r3
 80031a6:	4855      	ldr	r0, [pc, #340]	; (80032fc <main+0x2dd0>)
 80031a8:	f004 fa46 	bl	8007638 <Usart2_SendData>
			Usart2_SendData(outwrdata,sizeof(outwrdata));
 80031ac:	2104      	movs	r1, #4
 80031ae:	4854      	ldr	r0, [pc, #336]	; (8003300 <main+0x2dd4>)
 80031b0:	f004 fa42 	bl	8007638 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 80031b4:	4853      	ldr	r0, [pc, #332]	; (8003304 <main+0x2dd8>)
 80031b6:	f7fc ffc9 	bl	800014c <strlen>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4619      	mov	r1, r3
 80031be:	4851      	ldr	r0, [pc, #324]	; (8003304 <main+0x2dd8>)
 80031c0:	f004 fa3a 	bl	8007638 <Usart2_SendData>

			pn532_wr_stat=PN532_Write_Data(uid,uidLength, 1, outwrdata);
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <main+0x2ddc>)
 80031c6:	7819      	ldrb	r1, [r3, #0]
 80031c8:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <main+0x2dd4>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	484f      	ldr	r0, [pc, #316]	; (800330c <main+0x2de0>)
 80031ce:	f7fd f8fd 	bl	80003cc <PN532_Write_Data>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <main+0x2de4>)
 80031d8:	701a      	strb	r2, [r3, #0]

			switch(pn532_wr_stat){
 80031da:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <main+0x2de4>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d861      	bhi.n	80032a6 <main+0x2d7a>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <main+0x2cbc>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	080031fd 	.word	0x080031fd
 80031ec:	0800321f 	.word	0x0800321f
 80031f0:	08003241 	.word	0x08003241
 80031f4:	08003263 	.word	0x08003263
 80031f8:	08003285 	.word	0x08003285
			case 0:
				Usart2_SendData(s_pc_PN532_info2,strlen(s_pc_PN532_info2));
 80031fc:	4845      	ldr	r0, [pc, #276]	; (8003314 <main+0x2de8>)
 80031fe:	f7fc ffa5 	bl	800014c <strlen>
 8003202:	4603      	mov	r3, r0
 8003204:	4619      	mov	r1, r3
 8003206:	4843      	ldr	r0, [pc, #268]	; (8003314 <main+0x2de8>)
 8003208:	f004 fa16 	bl	8007638 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 800320c:	483d      	ldr	r0, [pc, #244]	; (8003304 <main+0x2dd8>)
 800320e:	f7fc ff9d 	bl	800014c <strlen>
 8003212:	4603      	mov	r3, r0
 8003214:	4619      	mov	r1, r3
 8003216:	483b      	ldr	r0, [pc, #236]	; (8003304 <main+0x2dd8>)
 8003218:	f004 fa0e 	bl	8007638 <Usart2_SendData>
				break;
 800321c:	e043      	b.n	80032a6 <main+0x2d7a>
			case 1:
				Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 800321e:	483e      	ldr	r0, [pc, #248]	; (8003318 <main+0x2dec>)
 8003220:	f7fc ff94 	bl	800014c <strlen>
 8003224:	4603      	mov	r3, r0
 8003226:	4619      	mov	r1, r3
 8003228:	483b      	ldr	r0, [pc, #236]	; (8003318 <main+0x2dec>)
 800322a:	f004 fa05 	bl	8007638 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 800322e:	4835      	ldr	r0, [pc, #212]	; (8003304 <main+0x2dd8>)
 8003230:	f7fc ff8c 	bl	800014c <strlen>
 8003234:	4603      	mov	r3, r0
 8003236:	4619      	mov	r1, r3
 8003238:	4832      	ldr	r0, [pc, #200]	; (8003304 <main+0x2dd8>)
 800323a:	f004 f9fd 	bl	8007638 <Usart2_SendData>
				break;
 800323e:	e032      	b.n	80032a6 <main+0x2d7a>
			case 2:
				Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8003240:	4836      	ldr	r0, [pc, #216]	; (800331c <main+0x2df0>)
 8003242:	f7fc ff83 	bl	800014c <strlen>
 8003246:	4603      	mov	r3, r0
 8003248:	4619      	mov	r1, r3
 800324a:	4834      	ldr	r0, [pc, #208]	; (800331c <main+0x2df0>)
 800324c:	f004 f9f4 	bl	8007638 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8003250:	482c      	ldr	r0, [pc, #176]	; (8003304 <main+0x2dd8>)
 8003252:	f7fc ff7b 	bl	800014c <strlen>
 8003256:	4603      	mov	r3, r0
 8003258:	4619      	mov	r1, r3
 800325a:	482a      	ldr	r0, [pc, #168]	; (8003304 <main+0x2dd8>)
 800325c:	f004 f9ec 	bl	8007638 <Usart2_SendData>
				break;
 8003260:	e021      	b.n	80032a6 <main+0x2d7a>
			case 3:
				Usart2_SendData(s_pc_PN532_err2,strlen(s_pc_PN532_err2));
 8003262:	482f      	ldr	r0, [pc, #188]	; (8003320 <main+0x2df4>)
 8003264:	f7fc ff72 	bl	800014c <strlen>
 8003268:	4603      	mov	r3, r0
 800326a:	4619      	mov	r1, r3
 800326c:	482c      	ldr	r0, [pc, #176]	; (8003320 <main+0x2df4>)
 800326e:	f004 f9e3 	bl	8007638 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8003272:	4824      	ldr	r0, [pc, #144]	; (8003304 <main+0x2dd8>)
 8003274:	f7fc ff6a 	bl	800014c <strlen>
 8003278:	4603      	mov	r3, r0
 800327a:	4619      	mov	r1, r3
 800327c:	4821      	ldr	r0, [pc, #132]	; (8003304 <main+0x2dd8>)
 800327e:	f004 f9db 	bl	8007638 <Usart2_SendData>
				break;
 8003282:	e010      	b.n	80032a6 <main+0x2d7a>
			case 4:
				Usart2_SendData(s_pc_PN532_err3,strlen(s_pc_PN532_err3));
 8003284:	4827      	ldr	r0, [pc, #156]	; (8003324 <main+0x2df8>)
 8003286:	f7fc ff61 	bl	800014c <strlen>
 800328a:	4603      	mov	r3, r0
 800328c:	4619      	mov	r1, r3
 800328e:	4825      	ldr	r0, [pc, #148]	; (8003324 <main+0x2df8>)
 8003290:	f004 f9d2 	bl	8007638 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8003294:	481b      	ldr	r0, [pc, #108]	; (8003304 <main+0x2dd8>)
 8003296:	f7fc ff59 	bl	800014c <strlen>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	4819      	ldr	r0, [pc, #100]	; (8003304 <main+0x2dd8>)
 80032a0:	f004 f9ca 	bl	8007638 <Usart2_SendData>
				break;
 80032a4:	bf00      	nop

			}

			//PN532_WriteID();

			u8_wrnfcstatus=0;
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <main+0x2dc0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]

			   memset(g_sBarCode,0,strlen(g_sBarCode));
 80032ac:	4811      	ldr	r0, [pc, #68]	; (80032f4 <main+0x2dc8>)
 80032ae:	f7fc ff4d 	bl	800014c <strlen>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	2100      	movs	r1, #0
 80032b8:	480e      	ldr	r0, [pc, #56]	; (80032f4 <main+0x2dc8>)
 80032ba:	f004 fc69 	bl	8007b90 <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_scanner_rdy, USB_STATE_LEN );
 80032be:	221a      	movs	r2, #26
 80032c0:	4919      	ldr	r1, [pc, #100]	; (8003328 <main+0x2dfc>)
 80032c2:	480c      	ldr	r0, [pc, #48]	; (80032f4 <main+0x2dc8>)
 80032c4:	f004 fc83 	bl	8007bce <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 80032c8:	2200      	movs	r2, #0
 80032ca:	f44f 7148 	mov.w	r1, #800	; 0x320
 80032ce:	4809      	ldr	r0, [pc, #36]	; (80032f4 <main+0x2dc8>)
 80032d0:	f001 fa96 	bl	8004800 <LCD_RunStringBARCode>


			//LCD_SetCursor ( LCD_CURSOR_1STR );
		//	LCD_WriteString (s_lcd_scanner_rdy );

			LCD_SetCursor ( LCD_CURSOR_2STR );
 80032d4:	20c0      	movs	r0, #192	; 0xc0
 80032d6:	f001 f8af 	bl	8004438 <LCD_SetCursor>
			LCD_WriteString (s_lcd_ready );
 80032da:	4814      	ldr	r0, [pc, #80]	; (800332c <main+0x2e00>)
 80032dc:	f001 f95c 	bl	8004598 <LCD_WriteString>
	while(1){
 80032e0:	f7fd bc5d 	b.w	8000b9e <main+0x672>
 80032e4:	2000075c 	.word	0x2000075c
 80032e8:	200001d0 	.word	0x200001d0
 80032ec:	2000077f 	.word	0x2000077f
 80032f0:	20000780 	.word	0x20000780
 80032f4:	200005d0 	.word	0x200005d0
 80032f8:	200000c8 	.word	0x200000c8
 80032fc:	20000198 	.word	0x20000198
 8003300:	20000760 	.word	0x20000760
 8003304:	20000168 	.word	0x20000168
 8003308:	20000764 	.word	0x20000764
 800330c:	20000754 	.word	0x20000754
 8003310:	20000782 	.word	0x20000782
 8003314:	20000254 	.word	0x20000254
 8003318:	20000270 	.word	0x20000270
 800331c:	200002d8 	.word	0x200002d8
 8003320:	20000294 	.word	0x20000294
 8003324:	200002b0 	.word	0x200002b0
 8003328:	20000034 	.word	0x20000034
 800332c:	20000064 	.word	0x20000064

08003330 <NVIC_EnableIRQ>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2201      	movs	r2, #1
 8003342:	fa02 f103 	lsl.w	r1, r2, r3
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <NVIC_EnableIRQ+0x2c>)
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	e000e100 	.word	0xe000e100

08003360 <LED_Init>:

NVIC_InitTypeDef        NVIC_InitTmr1Structure;
EXTI_InitTypeDef		EXTI_InitExtiStruct;
NVIC_InitTypeDef		NVIC_InitExtiStruct;

void LED_Init(void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0


	/*
	 * EXTI pin configure
	 */
	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );
 8003366:	2101      	movs	r1, #1
 8003368:	2004      	movs	r0, #4
 800336a:	f003 fd25 	bl	8006db8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 800336e:	2302      	movs	r3, #2
 8003370:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8003372:	2310      	movs	r3, #16
 8003374:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
 8003376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4806      	ldr	r0, [pc, #24]	; (800339c <LED_Init+0x3c>)
 8003382:	f003 f985 	bl	8006690 <GPIO_Init>
//#define LED_GPIO_PORT					GPIOA
//#define LED_PIN							GPIO_Pin_12


	GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <LED_Init+0x3c>)
 800338e:	f003 fa54 	bl	800683a <GPIO_WriteBit>
//	NVIC_InitStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitStruct );
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40010800 	.word	0x40010800

080033a0 <BTN_Init>:





void BTN_Init(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	/*
	 * EXTI pin configure
	 */
	BTN_RCC_PERIPH_CLOCK_CMD ( BTN_RCC_GPIO_PORT, ENABLE );
 80033a6:	2101      	movs	r1, #1
 80033a8:	2008      	movs	r0, #8
 80033aa:	f003 fd05 	bl	8006db8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80033ae:	2302      	movs	r3, #2
 80033b0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 80033b2:	2348      	movs	r3, #72	; 0x48
 80033b4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = BTN_PIN;
 80033b6:	2301      	movs	r3, #1
 80033b8:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( BTN_GPIO_PORT, &GPIO_InitStruct );
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4803      	ldr	r0, [pc, #12]	; (80033cc <BTN_Init+0x2c>)
 80033c0:	f003 f966 	bl	8006690 <GPIO_Init>
//	NVIC_InitExtiStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitExtiStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitExtiStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitExtiStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitExtiStruct );
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40010c00 	.word	0x40010c00

080033d0 <BTN_IRQHandler>:



void BTN_IRQHandler ( void ) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus ( BTN_EXTI_LINE ) == SET) {
 80033d4:	2001      	movs	r0, #1
 80033d6:	f003 f933 	bl	8006640 <EXTI_GetFlagStatus>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d134      	bne.n	800344a <BTN_IRQHandler+0x7a>
		if(u8_btnstate==BTN_UNPRESSED){
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <BTN_IRQHandler+0x80>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d117      	bne.n	8003418 <BTN_IRQHandler+0x48>

		  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 80033e8:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <BTN_IRQHandler+0x84>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	70da      	strb	r2, [r3, #3]
		  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <BTN_IRQHandler+0x88>)
 80033f0:	2208      	movs	r2, #8
 80033f2:	715a      	strb	r2, [r3, #5]
		  NVIC_Init ( &NVIC_InitExtiStruct );
 80033f4:	4817      	ldr	r0, [pc, #92]	; (8003454 <BTN_IRQHandler+0x84>)
 80033f6:	f003 f8c1 	bl	800657c <NVIC_Init>
		  cnttimer1=0;
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <BTN_IRQHandler+0x8c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	801a      	strh	r2, [r3, #0]
		  u8_btnstate=BTN_PRESSED;
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <BTN_IRQHandler+0x80>)
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
		  EnableTimer1Interrupt();
 8003406:	f000 f869 	bl	80034dc <EnableTimer1Interrupt>
		  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 1);
 800340a:	2201      	movs	r2, #1
 800340c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003410:	4813      	ldr	r0, [pc, #76]	; (8003460 <BTN_IRQHandler+0x90>)
 8003412:	f003 fa12 	bl	800683a <GPIO_WriteBit>
 8003416:	e015      	b.n	8003444 <BTN_IRQHandler+0x74>
		}
		else{
			//DisableTimer1Interrupt
			  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <BTN_IRQHandler+0x84>)
 800341a:	2200      	movs	r2, #0
 800341c:	70da      	strb	r2, [r3, #3]
			  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <BTN_IRQHandler+0x88>)
 8003420:	220c      	movs	r2, #12
 8003422:	715a      	strb	r2, [r3, #5]
			  NVIC_Init ( &NVIC_InitExtiStruct );
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <BTN_IRQHandler+0x84>)
 8003426:	f003 f8a9 	bl	800657c <NVIC_Init>
			  timer1data=cnttimer1;
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <BTN_IRQHandler+0x8c>)
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <BTN_IRQHandler+0x94>)
 8003430:	801a      	strh	r2, [r3, #0]
			  u8_btnstate=BTN_UNPRESSED;
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <BTN_IRQHandler+0x80>)
 8003434:	2202      	movs	r2, #2
 8003436:	701a      	strb	r2, [r3, #0]
			  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800343e:	4808      	ldr	r0, [pc, #32]	; (8003460 <BTN_IRQHandler+0x90>)
 8003440:	f003 f9fb 	bl	800683a <GPIO_WriteBit>
//		}
//		else{
//			GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
//			b_ledbtnstate=FALSE;
//		}
		EXTI_ClearITPendingBit ( BTN_EXTI_LINE );
 8003444:	2001      	movs	r0, #1
 8003446:	f003 f915 	bl	8006674 <EXTI_ClearITPendingBit>


	}
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000779 	.word	0x20000779
 8003454:	20000b50 	.word	0x20000b50
 8003458:	20000b48 	.word	0x20000b48
 800345c:	20000776 	.word	0x20000776
 8003460:	40010800 	.word	0x40010800
 8003464:	2000077a 	.word	0x2000077a

08003468 <Timer1Init>:


void Timer1Init(void)	{		//	(функция инициализации таймера)
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
TIM_TimeBaseInitTypeDef		TIMER1_InitStruct;


//	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800346e:	2101      	movs	r1, #1
 8003470:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003474:	f003 fca0 	bl	8006db8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );

*/
	TIMER1_InitStruct.TIM_Prescaler=TIMER1_PRESCALER-1;	//предделитель 720-1
 8003478:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800347c:	80bb      	strh	r3, [r7, #4]
	TIMER1_InitStruct.TIM_CounterMode=TIM_CounterMode_Up;	//режим прямого счета
 800347e:	2300      	movs	r3, #0
 8003480:	80fb      	strh	r3, [r7, #6]
	TIMER1_InitStruct.TIM_Period=TIMER1_RELOAD_PERIOD;		//множитель периодов?
 8003482:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003486:	813b      	strh	r3, [r7, #8]
	TIMER1_InitStruct.TIM_ClockDivision=TIM_CKD_DIV1;		//делитель самого таймера(можно не ставить)
 8003488:	2300      	movs	r3, #0
 800348a:	817b      	strh	r3, [r7, #10]
	TIMER1_InitStruct.TIM_RepetitionCounter=0x0000;		//счетчик повторов?
 800348c:	2300      	movs	r3, #0
 800348e:	733b      	strb	r3, [r7, #12]
	TIM_TimeBaseInit(TIM1,&TIMER1_InitStruct);
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	4619      	mov	r1, r3
 8003494:	480f      	ldr	r0, [pc, #60]	; (80034d4 <Timer1Init+0x6c>)
 8003496:	f003 fde1 	bl	800705c <TIM_TimeBaseInit>


	//timer1data=1;
    NVIC_InitTmr1Structure.NVIC_IRQChannel = TIM1_UP_IRQn;
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <Timer1Init+0x70>)
 800349c:	2219      	movs	r2, #25
 800349e:	701a      	strb	r2, [r3, #0]
    NVIC_InitTmr1Structure.NVIC_IRQChannelPreemptionPriority = 0;
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <Timer1Init+0x70>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	705a      	strb	r2, [r3, #1]
    NVIC_InitTmr1Structure.NVIC_IRQChannelSubPriority = 1;
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <Timer1Init+0x70>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	709a      	strb	r2, [r3, #2]
    NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = DISABLE;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <Timer1Init+0x70>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitTmr1Structure);
 80034b2:	4809      	ldr	r0, [pc, #36]	; (80034d8 <Timer1Init+0x70>)
 80034b4:	f003 f862 	bl	800657c <NVIC_Init>

	TIM_ITConfig(TIM1, TIM_IT_Update, DISABLE);
 80034b8:	2200      	movs	r2, #0
 80034ba:	2101      	movs	r1, #1
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <Timer1Init+0x6c>)
 80034be:	f003 fe68 	bl	8007192 <TIM_ITConfig>
	TIM_Cmd(TIM1,DISABLE);
 80034c2:	2100      	movs	r1, #0
 80034c4:	4803      	ldr	r0, [pc, #12]	; (80034d4 <Timer1Init+0x6c>)
 80034c6:	f003 fe45 	bl	8007154 <TIM_Cmd>


	//NVIC_EnableIRQ(TIM1_UP_IRQn);


}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	20000b44 	.word	0x20000b44

080034dc <EnableTimer1Interrupt>:



void EnableTimer1Interrupt()
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
    //NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = ENABLE;
    //NVIC_Init(&NVIC_InitTmr1Structure);
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 80034e0:	2201      	movs	r2, #1
 80034e2:	2101      	movs	r1, #1
 80034e4:	4805      	ldr	r0, [pc, #20]	; (80034fc <EnableTimer1Interrupt+0x20>)
 80034e6:	f003 fe54 	bl	8007192 <TIM_ITConfig>
	TIM_Cmd(TIM1,ENABLE);
 80034ea:	2101      	movs	r1, #1
 80034ec:	4803      	ldr	r0, [pc, #12]	; (80034fc <EnableTimer1Interrupt+0x20>)
 80034ee:	f003 fe31 	bl	8007154 <TIM_Cmd>

    NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034f2:	2019      	movs	r0, #25
 80034f4:	f7ff ff1c 	bl	8003330 <NVIC_EnableIRQ>

}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40012c00 	.word	0x40012c00

08003500 <TIM1_IRQHandler>:




void TIM1_IRQHandler()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
uint8_t u8_cntindex;
//--------------------------------------------------------------------------------------------

 */

	if(TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET){
 8003504:	2101      	movs	r1, #1
 8003506:	4887      	ldr	r0, [pc, #540]	; (8003724 <TIM1_IRQHandler+0x224>)
 8003508:	f003 fe66 	bl	80071d8 <TIM_GetITStatus>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8105 	beq.w	800371e <TIM1_IRQHandler+0x21e>


		if (GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN ) == Bit_RESET) {//если кнопка нажата
 8003514:	2101      	movs	r1, #1
 8003516:	4884      	ldr	r0, [pc, #528]	; (8003728 <TIM1_IRQHandler+0x228>)
 8003518:	f003 f976 	bl	8006808 <GPIO_ReadInputDataBit>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d12d      	bne.n	800357e <TIM1_IRQHandler+0x7e>

			   if (previousState==1){
 8003522:	4b82      	ldr	r3, [pc, #520]	; (800372c <TIM1_IRQHandler+0x22c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d106      	bne.n	8003538 <TIM1_IRQHandler+0x38>
				   u8_btnstate=0;
 800352a:	4b81      	ldr	r3, [pc, #516]	; (8003730 <TIM1_IRQHandler+0x230>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
				   cnttimer1=0;
 8003530:	4b80      	ldr	r3, [pc, #512]	; (8003734 <TIM1_IRQHandler+0x234>)
 8003532:	2200      	movs	r2, #0
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	e0ea      	b.n	800370e <TIM1_IRQHandler+0x20e>

				}
			   else{
				   cnttimer1++;
 8003538:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <TIM1_IRQHandler+0x234>)
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <TIM1_IRQHandler+0x234>)
 8003542:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==60 && u8_wrnfcstatus==0) {
 8003544:	4b7b      	ldr	r3, [pc, #492]	; (8003734 <TIM1_IRQHandler+0x234>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	2b3c      	cmp	r3, #60	; 0x3c
 800354a:	f040 80e0 	bne.w	800370e <TIM1_IRQHandler+0x20e>
 800354e:	4b7a      	ldr	r3, [pc, #488]	; (8003738 <TIM1_IRQHandler+0x238>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 80db 	bne.w	800370e <TIM1_IRQHandler+0x20e>

					   u8_wrnfcstatus=1; b_wrstr1=TRUE;//флаг выдачи первой строки в режиме записи
 8003558:	4b77      	ldr	r3, [pc, #476]	; (8003738 <TIM1_IRQHandler+0x238>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	4b77      	ldr	r3, [pc, #476]	; (800373c <TIM1_IRQHandler+0x23c>)
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
					   u8_cntchar=0; u8_cntindex=0;
 8003564:	4b76      	ldr	r3, [pc, #472]	; (8003740 <TIM1_IRQHandler+0x240>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	4b76      	ldr	r3, [pc, #472]	; (8003744 <TIM1_IRQHandler+0x244>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
					   b_1secflg=FALSE;
 8003570:	4b75      	ldr	r3, [pc, #468]	; (8003748 <TIM1_IRQHandler+0x248>)
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
					   cnttimer1sec=0;
 8003576:	4b75      	ldr	r3, [pc, #468]	; (800374c <TIM1_IRQHandler+0x24c>)
 8003578:	2200      	movs	r2, #0
 800357a:	801a      	strh	r2, [r3, #0]
 800357c:	e0c7      	b.n	800370e <TIM1_IRQHandler+0x20e>
			   }

		}
		else{//если кнопка не нажата

			 if(previousState==0){
 800357e:	4b6b      	ldr	r3, [pc, #428]	; (800372c <TIM1_IRQHandler+0x22c>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d131      	bne.n	80035ea <TIM1_IRQHandler+0xea>
				 u8_btnstate=1;
 8003586:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <TIM1_IRQHandler+0x230>)
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
				 cnttimer1=0;
 800358c:	4b69      	ldr	r3, [pc, #420]	; (8003734 <TIM1_IRQHandler+0x234>)
 800358e:	2200      	movs	r2, #0
 8003590:	801a      	strh	r2, [r3, #0]
				 cnttimer30sec=0;
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <TIM1_IRQHandler+0x250>)
 8003594:	2200      	movs	r2, #0
 8003596:	801a      	strh	r2, [r3, #0]
				 switch (u8_wrnfcstatus){
 8003598:	4b67      	ldr	r3, [pc, #412]	; (8003738 <TIM1_IRQHandler+0x238>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	3b01      	subs	r3, #1
 800359e:	2b07      	cmp	r3, #7
 80035a0:	f200 80b5 	bhi.w	800370e <TIM1_IRQHandler+0x20e>
				 case 4:
				 case 5:
				 case 6:
				 case 7:
				 case 8:
					    u8_cntchar++;
 80035a4:	4b66      	ldr	r3, [pc, #408]	; (8003740 <TIM1_IRQHandler+0x240>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	4b64      	ldr	r3, [pc, #400]	; (8003740 <TIM1_IRQHandler+0x240>)
 80035ae:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar>15) u8_cntchar=0;
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <TIM1_IRQHandler+0x240>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d902      	bls.n	80035be <TIM1_IRQHandler+0xbe>
 80035b8:	4b61      	ldr	r3, [pc, #388]	; (8003740 <TIM1_IRQHandler+0x240>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar<10){
 80035be:	4b60      	ldr	r3, [pc, #384]	; (8003740 <TIM1_IRQHandler+0x240>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	d808      	bhi.n	80035d8 <TIM1_IRQHandler+0xd8>
					       uidnfcwrdara[u8_cntindex]= 48 + u8_cntchar;
 80035c6:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <TIM1_IRQHandler+0x240>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	4a5e      	ldr	r2, [pc, #376]	; (8003744 <TIM1_IRQHandler+0x244>)
 80035cc:	7812      	ldrb	r2, [r2, #0]
 80035ce:	3330      	adds	r3, #48	; 0x30
 80035d0:	b2d9      	uxtb	r1, r3
 80035d2:	4b60      	ldr	r3, [pc, #384]	; (8003754 <TIM1_IRQHandler+0x254>)
 80035d4:	5499      	strb	r1, [r3, r2]
					    }
					    else{
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
					    }
					 break;
 80035d6:	e09a      	b.n	800370e <TIM1_IRQHandler+0x20e>
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <TIM1_IRQHandler+0x240>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4a59      	ldr	r2, [pc, #356]	; (8003744 <TIM1_IRQHandler+0x244>)
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	3337      	adds	r3, #55	; 0x37
 80035e2:	b2d9      	uxtb	r1, r3
 80035e4:	4b5b      	ldr	r3, [pc, #364]	; (8003754 <TIM1_IRQHandler+0x254>)
 80035e6:	5499      	strb	r1, [r3, r2]
					 break;
 80035e8:	e091      	b.n	800370e <TIM1_IRQHandler+0x20e>
				 }

				}

			   else{
				   cnttimer30sec++;
 80035ea:	4b59      	ldr	r3, [pc, #356]	; (8003750 <TIM1_IRQHandler+0x250>)
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	4b57      	ldr	r3, [pc, #348]	; (8003750 <TIM1_IRQHandler+0x250>)
 80035f4:	801a      	strh	r2, [r3, #0]
				   if(cnttimer30sec==600){
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <TIM1_IRQHandler+0x250>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80035fe:	d105      	bne.n	800360c <TIM1_IRQHandler+0x10c>
					   u8_wrnfcstatus=0;
 8003600:	4b4d      	ldr	r3, [pc, #308]	; (8003738 <TIM1_IRQHandler+0x238>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
					   cnttimer30sec=0;
 8003606:	4b52      	ldr	r3, [pc, #328]	; (8003750 <TIM1_IRQHandler+0x250>)
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
				   }


				   cnttimer1sec++;
 800360c:	4b4f      	ldr	r3, [pc, #316]	; (800374c <TIM1_IRQHandler+0x24c>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b4d      	ldr	r3, [pc, #308]	; (800374c <TIM1_IRQHandler+0x24c>)
 8003616:	801a      	strh	r2, [r3, #0]
				   if(cnttimer1sec==10){
 8003618:	4b4c      	ldr	r3, [pc, #304]	; (800374c <TIM1_IRQHandler+0x24c>)
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	2b0a      	cmp	r3, #10
 800361e:	d108      	bne.n	8003632 <TIM1_IRQHandler+0x132>
					   cnttimer1sec=0;
 8003620:	4b4a      	ldr	r3, [pc, #296]	; (800374c <TIM1_IRQHandler+0x24c>)
 8003622:	2200      	movs	r2, #0
 8003624:	801a      	strh	r2, [r3, #0]
					   b_1secflg=~b_1secflg;
 8003626:	4b48      	ldr	r3, [pc, #288]	; (8003748 <TIM1_IRQHandler+0x248>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	43db      	mvns	r3, r3
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <TIM1_IRQHandler+0x248>)
 8003630:	701a      	strb	r2, [r3, #0]
				   }

				   cnttimer1++;
 8003632:	4b40      	ldr	r3, [pc, #256]	; (8003734 <TIM1_IRQHandler+0x234>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <TIM1_IRQHandler+0x234>)
 800363c:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==100 ) {
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <TIM1_IRQHandler+0x234>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d162      	bne.n	800370c <TIM1_IRQHandler+0x20c>
					   switch (u8_wrnfcstatus){
 8003646:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <TIM1_IRQHandler+0x238>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	3b01      	subs	r3, #1
 800364c:	2b07      	cmp	r3, #7
 800364e:	d85e      	bhi.n	800370e <TIM1_IRQHandler+0x20e>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <TIM1_IRQHandler+0x158>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	08003679 	.word	0x08003679
 800365c:	0800368d 	.word	0x0800368d
 8003660:	080036a1 	.word	0x080036a1
 8003664:	080036b5 	.word	0x080036b5
 8003668:	080036c9 	.word	0x080036c9
 800366c:	080036dd 	.word	0x080036dd
 8003670:	080036f1 	.word	0x080036f1
 8003674:	08003705 	.word	0x08003705
					   case 1:
						   u8_wrnfcstatus=2;
 8003678:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <TIM1_IRQHandler+0x238>)
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=1;
 800367e:	4b30      	ldr	r3, [pc, #192]	; (8003740 <TIM1_IRQHandler+0x240>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <TIM1_IRQHandler+0x244>)
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
						   break;
 800368a:	e040      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   case 2:
						   u8_wrnfcstatus=3;
 800368c:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <TIM1_IRQHandler+0x238>)
 800368e:	2203      	movs	r2, #3
 8003690:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=2;
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <TIM1_IRQHandler+0x240>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <TIM1_IRQHandler+0x244>)
 800369a:	2202      	movs	r2, #2
 800369c:	701a      	strb	r2, [r3, #0]
						   break;
 800369e:	e036      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   case 3:
						   u8_wrnfcstatus=4;
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <TIM1_IRQHandler+0x238>)
 80036a2:	2204      	movs	r2, #4
 80036a4:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=3;
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <TIM1_IRQHandler+0x240>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <TIM1_IRQHandler+0x244>)
 80036ae:	2203      	movs	r2, #3
 80036b0:	701a      	strb	r2, [r3, #0]
						   break;
 80036b2:	e02c      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   case 4:
						   u8_wrnfcstatus=5;
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <TIM1_IRQHandler+0x238>)
 80036b6:	2205      	movs	r2, #5
 80036b8:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=4;
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <TIM1_IRQHandler+0x240>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	4b20      	ldr	r3, [pc, #128]	; (8003744 <TIM1_IRQHandler+0x244>)
 80036c2:	2204      	movs	r2, #4
 80036c4:	701a      	strb	r2, [r3, #0]
						   break;
 80036c6:	e022      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   case 5:
						   u8_wrnfcstatus=6;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <TIM1_IRQHandler+0x238>)
 80036ca:	2206      	movs	r2, #6
 80036cc:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=5;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <TIM1_IRQHandler+0x240>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <TIM1_IRQHandler+0x244>)
 80036d6:	2205      	movs	r2, #5
 80036d8:	701a      	strb	r2, [r3, #0]
						   break;
 80036da:	e018      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   case 6:
						   u8_wrnfcstatus=7;
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <TIM1_IRQHandler+0x238>)
 80036de:	2207      	movs	r2, #7
 80036e0:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=6;
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <TIM1_IRQHandler+0x240>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	4b16      	ldr	r3, [pc, #88]	; (8003744 <TIM1_IRQHandler+0x244>)
 80036ea:	2206      	movs	r2, #6
 80036ec:	701a      	strb	r2, [r3, #0]
						   break;
 80036ee:	e00e      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   case 7:
						   u8_wrnfcstatus=8;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <TIM1_IRQHandler+0x238>)
 80036f2:	2208      	movs	r2, #8
 80036f4:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=7;
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <TIM1_IRQHandler+0x240>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <TIM1_IRQHandler+0x244>)
 80036fe:	2207      	movs	r2, #7
 8003700:	701a      	strb	r2, [r3, #0]
						   break;
 8003702:	e004      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   case 8:
					   		u8_wrnfcstatus=9;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <TIM1_IRQHandler+0x238>)
 8003706:	2209      	movs	r2, #9
 8003708:	701a      	strb	r2, [r3, #0]

					   		break;
 800370a:	e000      	b.n	800370e <TIM1_IRQHandler+0x20e>
					   }

				   }
 800370c:	bf00      	nop
			   }

		}

		previousState=u8_btnstate;
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <TIM1_IRQHandler+0x230>)
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <TIM1_IRQHandler+0x22c>)
 8003714:	701a      	strb	r2, [r3, #0]
//	}
//



    TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
 8003716:	2101      	movs	r1, #1
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <TIM1_IRQHandler+0x224>)
 800371a:	f003 fd86 	bl	800722a <TIM_ClearITPendingBit>

	}
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40010c00 	.word	0x40010c00
 800372c:	20000778 	.word	0x20000778
 8003730:	20000779 	.word	0x20000779
 8003734:	20000776 	.word	0x20000776
 8003738:	2000077f 	.word	0x2000077f
 800373c:	20000780 	.word	0x20000780
 8003740:	2000075b 	.word	0x2000075b
 8003744:	2000075c 	.word	0x2000075c
 8003748:	20000770 	.word	0x20000770
 800374c:	20000774 	.word	0x20000774
 8003750:	20000772 	.word	0x20000772
 8003754:	20000020 	.word	0x20000020

08003758 <GetTickCount>:

uint32_t GetTickCount() {
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
	return tick;
 800375c:	4b02      	ldr	r3, [pc, #8]	; (8003768 <GetTickCount+0x10>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	20000b54 	.word	0x20000b54

0800376c <PN532_FirmWareVersion2String>:


void PN532_FirmWareVersion2String(uint32_t version){
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

		 pn_chip=version>>24;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0e1b      	lsrs	r3, r3, #24
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <PN532_FirmWareVersion2String+0x13c>)
 800377c:	701a      	strb	r2, [r3, #0]
		 pn_fw1chip=version>>16;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	b2da      	uxtb	r2, r3
 8003784:	4b49      	ldr	r3, [pc, #292]	; (80038ac <PN532_FirmWareVersion2String+0x140>)
 8003786:	701a      	strb	r2, [r3, #0]
		 pn_fw2chip=version>>8;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4b48      	ldr	r3, [pc, #288]	; (80038b0 <PN532_FirmWareVersion2String+0x144>)
 8003790:	701a      	strb	r2, [r3, #0]
		 pn_suppchip=version&0xFF;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <PN532_FirmWareVersion2String+0x148>)
 8003798:	701a      	strb	r2, [r3, #0]

		 s_pn_nchip[0] = 0x30 + (pn_chip >> 4);
 800379a:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <PN532_FirmWareVersion2String+0x13c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3330      	adds	r3, #48	; 0x30
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <PN532_FirmWareVersion2String+0x14c>)
 80037a8:	701a      	strb	r2, [r3, #0]
		 s_pn_nchip[1] = 0x30 + (pn_chip & 0x0F);
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <PN532_FirmWareVersion2String+0x13c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3330      	adds	r3, #48	; 0x30
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <PN532_FirmWareVersion2String+0x14c>)
 80037ba:	705a      	strb	r2, [r3, #1]

		 s_pn_fw1nchip[0] = 0x30+(pn_fw1chip/100);
 80037bc:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <PN532_FirmWareVersion2String+0x140>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4a3e      	ldr	r2, [pc, #248]	; (80038bc <PN532_FirmWareVersion2String+0x150>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	3330      	adds	r3, #48	; 0x30
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b3c      	ldr	r3, [pc, #240]	; (80038c0 <PN532_FirmWareVersion2String+0x154>)
 80037d0:	701a      	strb	r2, [r3, #0]
		 s_pn_fw1nchip[1] = 0x30+(pn_fw1chip/10%10);
 80037d2:	4b36      	ldr	r3, [pc, #216]	; (80038ac <PN532_FirmWareVersion2String+0x140>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	4a3b      	ldr	r2, [pc, #236]	; (80038c4 <PN532_FirmWareVersion2String+0x158>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <PN532_FirmWareVersion2String+0x158>)
 80037e2:	fba3 1302 	umull	r1, r3, r3, r2
 80037e6:	08d9      	lsrs	r1, r3, #3
 80037e8:	460b      	mov	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3330      	adds	r3, #48	; 0x30
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <PN532_FirmWareVersion2String+0x154>)
 80037fa:	705a      	strb	r2, [r3, #1]
		 s_pn_fw1nchip[2] = 0x30+(pn_fw1chip%10);
 80037fc:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <PN532_FirmWareVersion2String+0x140>)
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <PN532_FirmWareVersion2String+0x158>)
 8003802:	fba3 1302 	umull	r1, r3, r3, r2
 8003806:	08d9      	lsrs	r1, r3, #3
 8003808:	460b      	mov	r3, r1
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3330      	adds	r3, #48	; 0x30
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <PN532_FirmWareVersion2String+0x154>)
 800381a:	709a      	strb	r2, [r3, #2]

		 s_pn_fw2nchip[0] = 0x30+(pn_fw2chip/100);
 800381c:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <PN532_FirmWareVersion2String+0x144>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4a26      	ldr	r2, [pc, #152]	; (80038bc <PN532_FirmWareVersion2String+0x150>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3330      	adds	r3, #48	; 0x30
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <PN532_FirmWareVersion2String+0x15c>)
 8003830:	701a      	strb	r2, [r3, #0]
		 s_pn_fw2nchip[1] = 0x30+(pn_fw2chip/10%10);
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <PN532_FirmWareVersion2String+0x144>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <PN532_FirmWareVersion2String+0x158>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	08db      	lsrs	r3, r3, #3
 800383e:	b2da      	uxtb	r2, r3
 8003840:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <PN532_FirmWareVersion2String+0x158>)
 8003842:	fba3 1302 	umull	r1, r3, r3, r2
 8003846:	08d9      	lsrs	r1, r3, #3
 8003848:	460b      	mov	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3330      	adds	r3, #48	; 0x30
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <PN532_FirmWareVersion2String+0x15c>)
 800385a:	705a      	strb	r2, [r3, #1]
		 s_pn_fw2nchip[2] = 0x30+(pn_fw2chip%10);
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <PN532_FirmWareVersion2String+0x144>)
 800385e:	781a      	ldrb	r2, [r3, #0]
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <PN532_FirmWareVersion2String+0x158>)
 8003862:	fba3 1302 	umull	r1, r3, r3, r2
 8003866:	08d9      	lsrs	r1, r3, #3
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3330      	adds	r3, #48	; 0x30
 8003876:	b2da      	uxtb	r2, r3
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <PN532_FirmWareVersion2String+0x15c>)
 800387a:	709a      	strb	r2, [r3, #2]

		 s_pn_suchip[0] = 0x30 + (pn_suppchip >> 4);
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <PN532_FirmWareVersion2String+0x148>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	b2db      	uxtb	r3, r3
 8003884:	3330      	adds	r3, #48	; 0x30
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <PN532_FirmWareVersion2String+0x160>)
 800388a:	701a      	strb	r2, [r3, #0]
		 s_pn_suchip[1] = 0x30 + (pn_suppchip & 0x0F);
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <PN532_FirmWareVersion2String+0x148>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3330      	adds	r3, #48	; 0x30
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <PN532_FirmWareVersion2String+0x160>)
 800389c:	705a      	strb	r2, [r3, #1]

}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	20000783 	.word	0x20000783
 80038ac:	20000784 	.word	0x20000784
 80038b0:	20000785 	.word	0x20000785
 80038b4:	20000786 	.word	0x20000786
 80038b8:	200001dc 	.word	0x200001dc
 80038bc:	51eb851f 	.word	0x51eb851f
 80038c0:	200001e0 	.word	0x200001e0
 80038c4:	cccccccd 	.word	0xcccccccd
 80038c8:	200001e4 	.word	0x200001e4
 80038cc:	200001e8 	.word	0x200001e8

080038d0 <ValueInterrupToStr>:



void ValueInterrupToStr(){
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
	b_bounce_value[0] = 0x30+(testtimer1/10000%10);
 80038d4:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <ValueInterrupToStr+0xe0>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	4a36      	ldr	r2, [pc, #216]	; (80039b4 <ValueInterrupToStr+0xe4>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0b5b      	lsrs	r3, r3, #13
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <ValueInterrupToStr+0xe8>)
 80038e4:	fba3 1302 	umull	r1, r3, r3, r2
 80038e8:	08d9      	lsrs	r1, r3, #3
 80038ea:	460b      	mov	r3, r1
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3330      	adds	r3, #48	; 0x30
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <ValueInterrupToStr+0xec>)
 80038fe:	701a      	strb	r2, [r3, #0]
	b_bounce_value[1] = 0x30+(testtimer1/1000%10);
 8003900:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <ValueInterrupToStr+0xe0>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <ValueInterrupToStr+0xf0>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	b29a      	uxth	r2, r3
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <ValueInterrupToStr+0xe8>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	08d9      	lsrs	r1, r3, #3
 8003916:	460b      	mov	r3, r1
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	b29b      	uxth	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	3330      	adds	r3, #48	; 0x30
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <ValueInterrupToStr+0xec>)
 800392a:	705a      	strb	r2, [r3, #1]
	b_bounce_value[2] = 0x30+(testtimer1/100%10);
 800392c:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <ValueInterrupToStr+0xe0>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <ValueInterrupToStr+0xf4>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <ValueInterrupToStr+0xe8>)
 800393c:	fba3 1302 	umull	r1, r3, r3, r2
 8003940:	08d9      	lsrs	r1, r3, #3
 8003942:	460b      	mov	r3, r1
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3330      	adds	r3, #48	; 0x30
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <ValueInterrupToStr+0xec>)
 8003956:	709a      	strb	r2, [r3, #2]
	b_bounce_value[3] = 0x30+(testtimer1/10%10);
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <ValueInterrupToStr+0xe0>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <ValueInterrupToStr+0xe8>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	b29a      	uxth	r2, r3
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <ValueInterrupToStr+0xe8>)
 8003968:	fba3 1302 	umull	r1, r3, r3, r2
 800396c:	08d9      	lsrs	r1, r3, #3
 800396e:	460b      	mov	r3, r1
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	b29b      	uxth	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3330      	adds	r3, #48	; 0x30
 800397e:	b2da      	uxtb	r2, r3
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <ValueInterrupToStr+0xec>)
 8003982:	70da      	strb	r2, [r3, #3]
	b_bounce_value[4] = 0x30+(testtimer1%10);
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <ValueInterrupToStr+0xe0>)
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <ValueInterrupToStr+0xe8>)
 800398a:	fba3 1302 	umull	r1, r3, r3, r2
 800398e:	08d9      	lsrs	r1, r3, #3
 8003990:	460b      	mov	r3, r1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	3330      	adds	r3, #48	; 0x30
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <ValueInterrupToStr+0xec>)
 80039a4:	711a      	strb	r2, [r3, #4]

}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	2000077c 	.word	0x2000077c
 80039b4:	d1b71759 	.word	0xd1b71759
 80039b8:	cccccccd 	.word	0xcccccccd
 80039bc:	20000218 	.word	0x20000218
 80039c0:	10624dd3 	.word	0x10624dd3
 80039c4:	51eb851f 	.word	0x51eb851f

080039c8 <fourbytes2strhex>:



bool fourbytes2strhex(uint8_t *indatarray, uint8_t *outstrhex){
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
	uint8_t b=0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73bb      	strb	r3, [r7, #14]
	uint8_t th=0;
 80039da:	2300      	movs	r3, #0
 80039dc:	737b      	strb	r3, [r7, #13]
	uint8_t tl=0;
 80039de:	2300      	movs	r3, #0
 80039e0:	733b      	strb	r3, [r7, #12]

		for ( b=0; b<4; b++){
 80039e2:	2300      	movs	r3, #0
 80039e4:	73bb      	strb	r3, [r7, #14]
 80039e6:	e05a      	b.n	8003a9e <fourbytes2strhex+0xd6>


			th = indatarray[b] >> 4;
 80039e8:	7bbb      	ldrb	r3, [r7, #14]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	737b      	strb	r3, [r7, #13]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 80039f4:	7b7b      	ldrb	r3, [r7, #13]
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d803      	bhi.n	8003a02 <fourbytes2strhex+0x3a>
 80039fa:	7b7b      	ldrb	r3, [r7, #13]
 80039fc:	3330      	adds	r3, #48	; 0x30
 80039fe:	737b      	strb	r3, [r7, #13]
 8003a00:	e008      	b.n	8003a14 <fourbytes2strhex+0x4c>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 8003a02:	7b7b      	ldrb	r3, [r7, #13]
 8003a04:	2b09      	cmp	r3, #9
 8003a06:	d905      	bls.n	8003a14 <fourbytes2strhex+0x4c>
 8003a08:	7b7b      	ldrb	r3, [r7, #13]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d802      	bhi.n	8003a14 <fourbytes2strhex+0x4c>
 8003a0e:	7b7b      	ldrb	r3, [r7, #13]
 8003a10:	3337      	adds	r3, #55	; 0x37
 8003a12:	737b      	strb	r3, [r7, #13]
			}

			tl = indatarray[b]& 0x0F;
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	733b      	strb	r3, [r7, #12]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 8003a22:	7b3b      	ldrb	r3, [r7, #12]
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	d803      	bhi.n	8003a30 <fourbytes2strhex+0x68>
 8003a28:	7b3b      	ldrb	r3, [r7, #12]
 8003a2a:	3330      	adds	r3, #48	; 0x30
 8003a2c:	733b      	strb	r3, [r7, #12]
 8003a2e:	e008      	b.n	8003a42 <fourbytes2strhex+0x7a>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 8003a30:	7b3b      	ldrb	r3, [r7, #12]
 8003a32:	2b09      	cmp	r3, #9
 8003a34:	d905      	bls.n	8003a42 <fourbytes2strhex+0x7a>
 8003a36:	7b3b      	ldrb	r3, [r7, #12]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d802      	bhi.n	8003a42 <fourbytes2strhex+0x7a>
 8003a3c:	7b3b      	ldrb	r3, [r7, #12]
 8003a3e:	3337      	adds	r3, #55	; 0x37
 8003a40:	733b      	strb	r3, [r7, #12]

			}

			outstrhex[i] = '0';	i++;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	2230      	movs	r2, #48	; 0x30
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = 'x';	i++;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	2278      	movs	r2, #120	; 0x78
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = th;  i++;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	4413      	add	r3, r2
 8003a68:	7b7a      	ldrb	r2, [r7, #13]
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = tl;	i++;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	4413      	add	r3, r2
 8003a78:	7b3a      	ldrb	r2, [r7, #12]
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
			//outstrhex[i] = ' '; i++;
			if(i<18){ outstrhex[i] = ' '; i++; }
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	2b11      	cmp	r3, #17
 8003a86:	d807      	bhi.n	8003a98 <fourbytes2strhex+0xd0>
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	2220      	movs	r2, #32
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	3301      	adds	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
		for ( b=0; b<4; b++){
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	73bb      	strb	r3, [r7, #14]
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d9a1      	bls.n	80039e8 <fourbytes2strhex+0x20>


		}
		return 1;
 8003aa4:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <UIDResponse>:



uint32_t UIDResponse(uint8_t *uid,  uint8_t uidLength){
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
	uint32_t result;
	result=0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]

	if(uidLength==4){
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d120      	bne.n	8003b08 <UIDResponse+0x58>

		result = uid[0];
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	60fb      	str	r3, [r7, #12]
		result |= uid[1];
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	60fb      	str	r3, [r7, #12]
		result |= uid[2];
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	60fb      	str	r3, [r7, #12]
		result |= uid[3];
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3303      	adds	r3, #3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
	}
return result;
 8003b08:	68fb      	ldr	r3, [r7, #12]

}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <BytesHex2Str>:


bool BytesHex2Str(uint8_t *indatarray, uint8_t size_array, uint8_t *outstrhex){
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	72fb      	strb	r3, [r7, #11]

	uint8_t i=0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
	uint8_t b=0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75bb      	strb	r3, [r7, #22]
	uint8_t th=0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	757b      	strb	r3, [r7, #21]
	uint8_t tl=0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	753b      	strb	r3, [r7, #20]

		for ( b=0; b<size_array; b++){
 8003b32:	2300      	movs	r3, #0
 8003b34:	75bb      	strb	r3, [r7, #22]
 8003b36:	e047      	b.n	8003bc8 <BytesHex2Str+0xb4>


			th = indatarray[b] >> 4;
 8003b38:	7dbb      	ldrb	r3, [r7, #22]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	757b      	strb	r3, [r7, #21]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 8003b44:	7d7b      	ldrb	r3, [r7, #21]
 8003b46:	2b09      	cmp	r3, #9
 8003b48:	d803      	bhi.n	8003b52 <BytesHex2Str+0x3e>
 8003b4a:	7d7b      	ldrb	r3, [r7, #21]
 8003b4c:	3330      	adds	r3, #48	; 0x30
 8003b4e:	757b      	strb	r3, [r7, #21]
 8003b50:	e008      	b.n	8003b64 <BytesHex2Str+0x50>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 8003b52:	7d7b      	ldrb	r3, [r7, #21]
 8003b54:	2b09      	cmp	r3, #9
 8003b56:	d905      	bls.n	8003b64 <BytesHex2Str+0x50>
 8003b58:	7d7b      	ldrb	r3, [r7, #21]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	d802      	bhi.n	8003b64 <BytesHex2Str+0x50>
 8003b5e:	7d7b      	ldrb	r3, [r7, #21]
 8003b60:	3337      	adds	r3, #55	; 0x37
 8003b62:	757b      	strb	r3, [r7, #21]
			}

			tl = indatarray[b]& 0x0F;
 8003b64:	7dbb      	ldrb	r3, [r7, #22]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	753b      	strb	r3, [r7, #20]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 8003b72:	7d3b      	ldrb	r3, [r7, #20]
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d803      	bhi.n	8003b80 <BytesHex2Str+0x6c>
 8003b78:	7d3b      	ldrb	r3, [r7, #20]
 8003b7a:	3330      	adds	r3, #48	; 0x30
 8003b7c:	753b      	strb	r3, [r7, #20]
 8003b7e:	e008      	b.n	8003b92 <BytesHex2Str+0x7e>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 8003b80:	7d3b      	ldrb	r3, [r7, #20]
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d905      	bls.n	8003b92 <BytesHex2Str+0x7e>
 8003b86:	7d3b      	ldrb	r3, [r7, #20]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d802      	bhi.n	8003b92 <BytesHex2Str+0x7e>
 8003b8c:	7d3b      	ldrb	r3, [r7, #20]
 8003b8e:	3337      	adds	r3, #55	; 0x37
 8003b90:	753b      	strb	r3, [r7, #20]

			}

		//	outstrhex[i] = '0';	i++;
		//	outstrhex[i] = 'x';	i++;
			outstrhex[i] = th;  i++;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	7d7a      	ldrb	r2, [r7, #21]
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
			outstrhex[i] = tl;	i++;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	7d3a      	ldrb	r2, [r7, #20]
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
			//outstrhex[i] = ' '; i++;

			 outstrhex[i] = ' '; i++;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	2220      	movs	r2, #32
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
		for ( b=0; b<size_array; b++){
 8003bc2:	7dbb      	ldrb	r3, [r7, #22]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	75bb      	strb	r3, [r7, #22]
 8003bc8:	7dba      	ldrb	r2, [r7, #22]
 8003bca:	7afb      	ldrb	r3, [r7, #11]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3b3      	bcc.n	8003b38 <BytesHex2Str+0x24>




		}
		return 1;
 8003bd0:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <PN532_WriteTagtoHex>:

void PN532_WriteTagtoHex(){
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
	uint8_t u8_cntindex;
	//--------------------------------------------------------------------------------------------

	 */

	uint8_t k=0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx=0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	71bb      	strb	r3, [r7, #6]
	uint8_t x=0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	717b      	strb	r3, [r7, #5]

	for ( x=0; x<4 ; x++){
 8003bee:	2300      	movs	r3, #0
 8003bf0:	717b      	strb	r3, [r7, #5]
 8003bf2:	e055      	b.n	8003ca0 <PN532_WriteTagtoHex+0xc4>


				//tx = uidnfcwrdara[k];

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8003bfc:	d90a      	bls.n	8003c14 <PN532_WriteTagtoHex+0x38>
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	2b39      	cmp	r3, #57	; 0x39
 8003c06:	d805      	bhi.n	8003c14 <PN532_WriteTagtoHex+0x38>
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	3b30      	subs	r3, #48	; 0x30
 8003c10:	71bb      	strb	r3, [r7, #6]
 8003c12:	e00e      	b.n	8003c32 <PN532_WriteTagtoHex+0x56>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c18:	5cd3      	ldrb	r3, [r2, r3]
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d909      	bls.n	8003c32 <PN532_WriteTagtoHex+0x56>
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c22:	5cd3      	ldrb	r3, [r2, r3]
 8003c24:	2b46      	cmp	r3, #70	; 0x46
 8003c26:	d804      	bhi.n	8003c32 <PN532_WriteTagtoHex+0x56>
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	3b37      	subs	r3, #55	; 0x37
 8003c30:	71bb      	strb	r3, [r7, #6]
				}

				outwrdata[x]=tx<<4;
 8003c32:	797b      	ldrb	r3, [r7, #5]
 8003c34:	79ba      	ldrb	r2, [r7, #6]
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	b2d1      	uxtb	r1, r2
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <PN532_WriteTagtoHex+0xdc>)
 8003c3c:	54d1      	strb	r1, [r2, r3]
				k++;
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	3301      	adds	r3, #1
 8003c42:	71fb      	strb	r3, [r7, #7]

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	2b2f      	cmp	r3, #47	; 0x2f
 8003c4c:	d90a      	bls.n	8003c64 <PN532_WriteTagtoHex+0x88>
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	2b39      	cmp	r3, #57	; 0x39
 8003c56:	d805      	bhi.n	8003c64 <PN532_WriteTagtoHex+0x88>
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c5c:	5cd3      	ldrb	r3, [r2, r3]
 8003c5e:	3b30      	subs	r3, #48	; 0x30
 8003c60:	71bb      	strb	r3, [r7, #6]
 8003c62:	e00e      	b.n	8003c82 <PN532_WriteTagtoHex+0xa6>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c68:	5cd3      	ldrb	r3, [r2, r3]
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d909      	bls.n	8003c82 <PN532_WriteTagtoHex+0xa6>
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	2b46      	cmp	r3, #70	; 0x46
 8003c76:	d804      	bhi.n	8003c82 <PN532_WriteTagtoHex+0xa6>
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <PN532_WriteTagtoHex+0xd8>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	3b37      	subs	r3, #55	; 0x37
 8003c80:	71bb      	strb	r3, [r7, #6]
				}
				outwrdata[x]|=tx;
 8003c82:	797b      	ldrb	r3, [r7, #5]
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <PN532_WriteTagtoHex+0xdc>)
 8003c86:	5cd1      	ldrb	r1, [r2, r3]
 8003c88:	797b      	ldrb	r3, [r7, #5]
 8003c8a:	79ba      	ldrb	r2, [r7, #6]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	b2d1      	uxtb	r1, r2
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <PN532_WriteTagtoHex+0xdc>)
 8003c92:	54d1      	strb	r1, [r2, r3]
				k++;
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	3301      	adds	r3, #1
 8003c98:	71fb      	strb	r3, [r7, #7]
	for ( x=0; x<4 ; x++){
 8003c9a:	797b      	ldrb	r3, [r7, #5]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	717b      	strb	r3, [r7, #5]
 8003ca0:	797b      	ldrb	r3, [r7, #5]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d9a6      	bls.n	8003bf4 <PN532_WriteTagtoHex+0x18>

			}


}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000020 	.word	0x20000020
 8003cb8:	20000760 	.word	0x20000760

08003cbc <spi_gpio_init>:



void spi_gpio_init(void){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  		GPIO_InitStruct;

	SPI_RCC_PORT_CLOCK_CMD ( SPI_RCC_PORT, ENABLE);
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2008      	movs	r0, #8
 8003cc6:	f003 f877 	bl	8006db8 <RCC_APB2PeriphClockCmd>
	SPI_RCC_PERIPH_CLOCK_CMD ( SPI_RCC_APBPORT, ENABLE );
 8003cca:	2101      	movs	r1, #1
 8003ccc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003cd0:	f003 f890 	bl	8006df4 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode =  GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 8003cd8:	2318      	movs	r3, #24
 8003cda:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MOSI_PIN | SPI_SCK_PIN;
 8003cdc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003ce0:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	480e      	ldr	r0, [pc, #56]	; (8003d20 <spi_gpio_init+0x64>)
 8003ce8:	f002 fcd2 	bl	8006690 <GPIO_Init>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 8003cec:	2303      	movs	r3, #3
 8003cee:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;//GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_NSS_PIN | SPI_FLASH_NSS;
 8003cf4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003cf8:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4808      	ldr	r0, [pc, #32]	; (8003d20 <spi_gpio_init+0x64>)
 8003d00:	f002 fcc6 	bl	8006690 <GPIO_Init>


	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;//GPIO_Mode_AF_PP;//GPIO_Mode_IN_FLOATING;//GPIO_Mode_IPU;
 8003d04:	2348      	movs	r3, #72	; 0x48
 8003d06:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MISO_PIN;
 8003d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d0c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 8003d0e:	1d3b      	adds	r3, r7, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4803      	ldr	r0, [pc, #12]	; (8003d20 <spi_gpio_init+0x64>)
 8003d14:	f002 fcbc 	bl	8006690 <GPIO_Init>





}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40010c00 	.word	0x40010c00

08003d24 <bcode_conv_to_flash>:



uint64_t bcode_conv_to_flash(uint32_t rtc_time, char *bar_buff){
 8003d24:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]

	uint8_t s;
	char *pBar = bar_buff;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	613b      	str	r3, [r7, #16]
	if(bar_buff[0] =='\n'){
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b0a      	cmp	r3, #10
 8003d3a:	d102      	bne.n	8003d42 <bcode_conv_to_flash+0x1e>
		*pBar++;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
	}
	for(int i = 0; i < 13; i++){
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e00b      	b.n	8003d60 <bcode_conv_to_flash+0x3c>
		barcode[i] = *pBar++;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	613a      	str	r2, [r7, #16]
 8003d4e:	7819      	ldrb	r1, [r3, #0]
 8003d50:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <bcode_conv_to_flash+0x120>)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	460a      	mov	r2, r1
 8003d58:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 13; i++){
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	ddf0      	ble.n	8003d48 <bcode_conv_to_flash+0x24>
	}

	for(int a=0;a<7;a++){
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	e05e      	b.n	8003e2a <bcode_conv_to_flash+0x106>
		if(a==0){
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d114      	bne.n	8003d9c <bcode_conv_to_flash+0x78>
			s=barcode[a]-0x30;
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <bcode_conv_to_flash+0x120>)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4413      	add	r3, r2
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	3b30      	subs	r3, #48	; 0x30
 8003d7c:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a+1]-0x30;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a2e      	ldr	r2, [pc, #184]	; (8003e44 <bcode_conv_to_flash+0x120>)
 8003d8a:	5cd3      	ldrb	r3, [r2, r3]
 8003d8c:	3b30      	subs	r3, #48	; 0x30
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	b25a      	sxtb	r2, r3
 8003d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	75fb      	strb	r3, [r7, #23]
		}
		if(a>0 && a<=5){
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	dd18      	ble.n	8003dd4 <bcode_conv_to_flash+0xb0>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	dc15      	bgt.n	8003dd4 <bcode_conv_to_flash+0xb0>
			s=barcode[a*2]-0x30;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <bcode_conv_to_flash+0x120>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	3b30      	subs	r3, #48	; 0x30
 8003db2:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a*2+1]-0x30;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <bcode_conv_to_flash+0x120>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	3b30      	subs	r3, #48	; 0x30
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	b25a      	sxtb	r2, r3
 8003dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	75fb      	strb	r3, [r7, #23]
		}
		if(a==6){
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d108      	bne.n	8003dec <bcode_conv_to_flash+0xc8>
			s=barcode[a*2]-0x30;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <bcode_conv_to_flash+0x120>)
 8003de0:	5cd3      	ldrb	r3, [r2, r3]
 8003de2:	3b30      	subs	r3, #48	; 0x30
 8003de4:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	75fb      	strb	r3, [r7, #23]
		}

		bcode<<=8;
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <bcode_conv_to_flash+0x124>)
 8003dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	020b      	lsls	r3, r1, #8
 8003dfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e00:	0202      	lsls	r2, r0, #8
 8003e02:	4911      	ldr	r1, [pc, #68]	; (8003e48 <bcode_conv_to_flash+0x124>)
 8003e04:	e9c1 2300 	strd	r2, r3, [r1]
		bcode|=(uint64_t)s;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	461c      	mov	r4, r3
 8003e0e:	4615      	mov	r5, r2
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <bcode_conv_to_flash+0x124>)
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	ea44 0802 	orr.w	r8, r4, r2
 8003e1a:	ea45 0903 	orr.w	r9, r5, r3
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <bcode_conv_to_flash+0x124>)
 8003e20:	e9c3 8900 	strd	r8, r9, [r3]
	for(int a=0;a<7;a++){
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	dd9d      	ble.n	8003d6c <bcode_conv_to_flash+0x48>

	}


	return bcode;
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <bcode_conv_to_flash+0x124>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]

}
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003e42:	4770      	bx	lr
 8003e44:	200009b8 	.word	0x200009b8
 8003e48:	200009b0 	.word	0x200009b0

08003e4c <data_conv2Flash>:
	nfc_to_flash[0]=rtc_time;
	nfc_to_flash[1]=nfc_tag;
}


void data_conv2Flash(uint32_t cnt_timer, uint64_t data ){
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	e9c7 2300 	strd	r2, r3, [r7]


	data_to_flash[0]=(cnt_timer >> 24) & 0xFF;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	0e1b      	lsrs	r3, r3, #24
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <data_conv2Flash+0xd4>)
 8003e60:	701a      	strb	r2, [r3, #0]
	data_to_flash[1]=(cnt_timer >> 16) & 0xFF;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <data_conv2Flash+0xd4>)
 8003e6a:	705a      	strb	r2, [r3, #1]
	data_to_flash[2]=(cnt_timer >> 8) & 0xFF;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <data_conv2Flash+0xd4>)
 8003e74:	709a      	strb	r2, [r3, #2]
	data_to_flash[3]=cnt_timer & 0xFF;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <data_conv2Flash+0xd4>)
 8003e7c:	70da      	strb	r2, [r3, #3]

	data_to_flash[4]=(data >> 48) & 0xFF;
 8003e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	0c0a      	lsrs	r2, r1, #16
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <data_conv2Flash+0xd4>)
 8003e92:	711a      	strb	r2, [r3, #4]
	data_to_flash[5]=(data >> 40) & 0xFF;
 8003e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	0a0a      	lsrs	r2, r1, #8
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <data_conv2Flash+0xd4>)
 8003ea8:	715a      	strb	r2, [r3, #5]
	data_to_flash[6]=(data >> 32) & 0xFF;
 8003eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	000a      	movs	r2, r1
 8003eb8:	2300      	movs	r3, #0
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <data_conv2Flash+0xd4>)
 8003ebe:	719a      	strb	r2, [r3, #6]
	data_to_flash[7]=(data >> 24) & 0xFF;
 8003ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	0e02      	lsrs	r2, r0, #24
 8003ece:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ed2:	0e0b      	lsrs	r3, r1, #24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <data_conv2Flash+0xd4>)
 8003ed8:	71da      	strb	r2, [r3, #7]
	data_to_flash[8]=(data >> 16) & 0xFF;
 8003eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	0c02      	lsrs	r2, r0, #16
 8003ee8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003eec:	0c0b      	lsrs	r3, r1, #16
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <data_conv2Flash+0xd4>)
 8003ef2:	721a      	strb	r2, [r3, #8]
	data_to_flash[9]=(data >> 8) & 0xFF;
 8003ef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	0a02      	lsrs	r2, r0, #8
 8003f02:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003f06:	0a0b      	lsrs	r3, r1, #8
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <data_conv2Flash+0xd4>)
 8003f0c:	725a      	strb	r2, [r3, #9]
	data_to_flash[10]=data & 0xFF;
 8003f0e:	783a      	ldrb	r2, [r7, #0]
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <data_conv2Flash+0xd4>)
 8003f12:	729a      	strb	r2, [r3, #10]


}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000a04 	.word	0x20000a04

08003f24 <nfc_conv2Flash>:

void nfc_conv2Flash(uint32_t cnt_timer, uint32_t data ){
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]


	nfc_data_2flash[0]=(cnt_timer >> 24) & 0xFF;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0e1b      	lsrs	r3, r3, #24
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f36:	701a      	strb	r2, [r3, #0]
	nfc_data_2flash[1]=(cnt_timer >> 16) & 0xFF;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f40:	705a      	strb	r2, [r3, #1]
	nfc_data_2flash[2]=(cnt_timer >> 8) & 0xFF;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0a1b      	lsrs	r3, r3, #8
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f4a:	709a      	strb	r2, [r3, #2]
	nfc_data_2flash[3]=cnt_timer & 0xFF;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f52:	70da      	strb	r2, [r3, #3]

	nfc_data_2flash[4]=(data >> 24) & 0xFF;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	0e1b      	lsrs	r3, r3, #24
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f5c:	711a      	strb	r2, [r3, #4]
	nfc_data_2flash[5]=(data >> 16) & 0xFF;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f66:	715a      	strb	r2, [r3, #5]
	nfc_data_2flash[6]=(data >> 8) & 0xFF;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f70:	719a      	strb	r2, [r3, #6]
	nfc_data_2flash[7]=data & 0xFF;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <nfc_conv2Flash+0x60>)
 8003f78:	71da      	strb	r2, [r3, #7]


}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	20000a14 	.word	0x20000a14

08003f88 <flash_conv2_timer>:
	uint32_t addr2_wr = (padBuf[0] << 24) | (padBuf[1] << 16) | (padBuf[2] << 8) | padBuf[3];
	return addr2_wr;

}

uint32_t flash_conv2_timer(uint8_t *pdBuf){
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

	uint32_t timer_flash = (pdBuf[0] << 24) | (pdBuf[1] << 16) | (pdBuf[2] << 8) | pdBuf[3];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	061a      	lsls	r2, r3, #24
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	3203      	adds	r2, #3
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
	return timer_flash;
 8003fb4:	68fb      	ldr	r3, [r7, #12]

}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <flash_conv2_bcode>:

void flash_conv2_bcode(){
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0

	fl_bar_buff[0] = (rd_flash_buff[4] >> 4) + 0x30;
 8003fc4:	4b38      	ldr	r3, [pc, #224]	; (80040a8 <flash_conv2_bcode+0xe8>)
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3330      	adds	r3, #48	; 0x30
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <flash_conv2_bcode+0xec>)
 8003fd2:	701a      	strb	r2, [r3, #0]
	fl_bar_buff[1] = (rd_flash_buff[4] & 0x0F) + 0x30;
 8003fd4:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <flash_conv2_bcode+0xe8>)
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	3330      	adds	r3, #48	; 0x30
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4b32      	ldr	r3, [pc, #200]	; (80040ac <flash_conv2_bcode+0xec>)
 8003fe4:	705a      	strb	r2, [r3, #1]
	fl_bar_buff[2] = (rd_flash_buff[5] >> 4) + 0x30;
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <flash_conv2_bcode+0xe8>)
 8003fe8:	795b      	ldrb	r3, [r3, #5]
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3330      	adds	r3, #48	; 0x30
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <flash_conv2_bcode+0xec>)
 8003ff4:	709a      	strb	r2, [r3, #2]
	fl_bar_buff[3] = (rd_flash_buff[5] & 0x0F) + 0x30;
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <flash_conv2_bcode+0xe8>)
 8003ff8:	795b      	ldrb	r3, [r3, #5]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3330      	adds	r3, #48	; 0x30
 8004002:	b2da      	uxtb	r2, r3
 8004004:	4b29      	ldr	r3, [pc, #164]	; (80040ac <flash_conv2_bcode+0xec>)
 8004006:	70da      	strb	r2, [r3, #3]
	fl_bar_buff[4] = (rd_flash_buff[6] >> 4) + 0x30;
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <flash_conv2_bcode+0xe8>)
 800400a:	799b      	ldrb	r3, [r3, #6]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3330      	adds	r3, #48	; 0x30
 8004012:	b2da      	uxtb	r2, r3
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <flash_conv2_bcode+0xec>)
 8004016:	711a      	strb	r2, [r3, #4]
	fl_bar_buff[5] = (rd_flash_buff[6] & 0x0F) + 0x30;
 8004018:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <flash_conv2_bcode+0xe8>)
 800401a:	799b      	ldrb	r3, [r3, #6]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	b2db      	uxtb	r3, r3
 8004022:	3330      	adds	r3, #48	; 0x30
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b21      	ldr	r3, [pc, #132]	; (80040ac <flash_conv2_bcode+0xec>)
 8004028:	715a      	strb	r2, [r3, #5]
	fl_bar_buff[6] = (rd_flash_buff[7] >> 4) + 0x30;
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <flash_conv2_bcode+0xe8>)
 800402c:	79db      	ldrb	r3, [r3, #7]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3330      	adds	r3, #48	; 0x30
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <flash_conv2_bcode+0xec>)
 8004038:	719a      	strb	r2, [r3, #6]
	fl_bar_buff[7] = (rd_flash_buff[7] & 0x0F) + 0x30;
 800403a:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <flash_conv2_bcode+0xe8>)
 800403c:	79db      	ldrb	r3, [r3, #7]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	b2db      	uxtb	r3, r3
 8004044:	3330      	adds	r3, #48	; 0x30
 8004046:	b2da      	uxtb	r2, r3
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <flash_conv2_bcode+0xec>)
 800404a:	71da      	strb	r2, [r3, #7]
	fl_bar_buff[8] = (rd_flash_buff[8] >> 4) + 0x30;
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <flash_conv2_bcode+0xe8>)
 800404e:	7a1b      	ldrb	r3, [r3, #8]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3330      	adds	r3, #48	; 0x30
 8004056:	b2da      	uxtb	r2, r3
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <flash_conv2_bcode+0xec>)
 800405a:	721a      	strb	r2, [r3, #8]
	fl_bar_buff[9] = (rd_flash_buff[8] & 0x0F) + 0x30;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <flash_conv2_bcode+0xe8>)
 800405e:	7a1b      	ldrb	r3, [r3, #8]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	b2db      	uxtb	r3, r3
 8004066:	3330      	adds	r3, #48	; 0x30
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <flash_conv2_bcode+0xec>)
 800406c:	725a      	strb	r2, [r3, #9]
	fl_bar_buff[10] = (rd_flash_buff[9] >> 4) + 0x30;
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <flash_conv2_bcode+0xe8>)
 8004070:	7a5b      	ldrb	r3, [r3, #9]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	b2db      	uxtb	r3, r3
 8004076:	3330      	adds	r3, #48	; 0x30
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <flash_conv2_bcode+0xec>)
 800407c:	729a      	strb	r2, [r3, #10]
	fl_bar_buff[11] = (rd_flash_buff[9] & 0x0F) + 0x30;
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <flash_conv2_bcode+0xe8>)
 8004080:	7a5b      	ldrb	r3, [r3, #9]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	b2db      	uxtb	r3, r3
 8004088:	3330      	adds	r3, #48	; 0x30
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b07      	ldr	r3, [pc, #28]	; (80040ac <flash_conv2_bcode+0xec>)
 800408e:	72da      	strb	r2, [r3, #11]
	fl_bar_buff[12] = (rd_flash_buff[10] >> 4) + 0x30;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <flash_conv2_bcode+0xe8>)
 8004092:	7a9b      	ldrb	r3, [r3, #10]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3330      	adds	r3, #48	; 0x30
 800409a:	b2da      	uxtb	r2, r3
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <flash_conv2_bcode+0xec>)
 800409e:	731a      	strb	r2, [r3, #12]

}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	20000b24 	.word	0x20000b24
 80040ac:	20000b34 	.word	0x20000b34

080040b0 <flash_conv2_uid>:

uint32_t flash_conv2_uid(uint8_t *pdBuf){
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

	uint32_t decuid_flash = (pdBuf[4] << 24) | (pdBuf[5] << 16) | (pdBuf[6] << 8) | pdBuf[7];
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	061a      	lsls	r2, r3, #24
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3305      	adds	r3, #5
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3306      	adds	r3, #6
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	4313      	orrs	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	3207      	adds	r2, #7
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
	return decuid_flash;
 80040de:	68fb      	ldr	r3, [r7, #12]

}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
	...

080040ec <flash_conv2_nfc>:

void flash_conv2_nfc(uint32_t flash_nfc_uid ){
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]


	nfc_uid_arr[0] = 0x30+(flash_nfc_uid/1000000000);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0a5b      	lsrs	r3, r3, #9
 80040f8:	4a5a      	ldr	r2, [pc, #360]	; (8004264 <flash_conv2_nfc+0x178>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	09db      	lsrs	r3, r3, #7
 8004100:	b2db      	uxtb	r3, r3
 8004102:	3330      	adds	r3, #48	; 0x30
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b58      	ldr	r3, [pc, #352]	; (8004268 <flash_conv2_nfc+0x17c>)
 8004108:	701a      	strb	r2, [r3, #0]
	nfc_uid_arr[1] = 0x30+(flash_nfc_uid/100000000%10);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a57      	ldr	r2, [pc, #348]	; (800426c <flash_conv2_nfc+0x180>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0e59      	lsrs	r1, r3, #25
 8004114:	4b56      	ldr	r3, [pc, #344]	; (8004270 <flash_conv2_nfc+0x184>)
 8004116:	fba3 2301 	umull	r2, r3, r3, r1
 800411a:	08da      	lsrs	r2, r3, #3
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	1aca      	subs	r2, r1, r3
 8004126:	b2d3      	uxtb	r3, r2
 8004128:	3330      	adds	r3, #48	; 0x30
 800412a:	b2da      	uxtb	r2, r3
 800412c:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <flash_conv2_nfc+0x17c>)
 800412e:	705a      	strb	r2, [r3, #1]
	nfc_uid_arr[2] = 0x30+(flash_nfc_uid/10000000%10);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a50      	ldr	r2, [pc, #320]	; (8004274 <flash_conv2_nfc+0x188>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	0d99      	lsrs	r1, r3, #22
 800413a:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <flash_conv2_nfc+0x184>)
 800413c:	fba3 2301 	umull	r2, r3, r3, r1
 8004140:	08da      	lsrs	r2, r3, #3
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	1aca      	subs	r2, r1, r3
 800414c:	b2d3      	uxtb	r3, r2
 800414e:	3330      	adds	r3, #48	; 0x30
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b45      	ldr	r3, [pc, #276]	; (8004268 <flash_conv2_nfc+0x17c>)
 8004154:	709a      	strb	r2, [r3, #2]
	nfc_uid_arr[3] = 0x30+(flash_nfc_uid/1000000%10);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a47      	ldr	r2, [pc, #284]	; (8004278 <flash_conv2_nfc+0x18c>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	0c99      	lsrs	r1, r3, #18
 8004160:	4b43      	ldr	r3, [pc, #268]	; (8004270 <flash_conv2_nfc+0x184>)
 8004162:	fba3 2301 	umull	r2, r3, r3, r1
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	1aca      	subs	r2, r1, r3
 8004172:	b2d3      	uxtb	r3, r2
 8004174:	3330      	adds	r3, #48	; 0x30
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <flash_conv2_nfc+0x17c>)
 800417a:	70da      	strb	r2, [r3, #3]
	nfc_uid_arr[4] = 0x30+(flash_nfc_uid/100000%10);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	4a3e      	ldr	r2, [pc, #248]	; (800427c <flash_conv2_nfc+0x190>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	09d9      	lsrs	r1, r3, #7
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <flash_conv2_nfc+0x184>)
 800418a:	fba3 2301 	umull	r2, r3, r3, r1
 800418e:	08da      	lsrs	r2, r3, #3
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	1aca      	subs	r2, r1, r3
 800419a:	b2d3      	uxtb	r3, r2
 800419c:	3330      	adds	r3, #48	; 0x30
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	4b31      	ldr	r3, [pc, #196]	; (8004268 <flash_conv2_nfc+0x17c>)
 80041a2:	711a      	strb	r2, [r3, #4]
	nfc_uid_arr[5] = 0x30+(flash_nfc_uid/10000%10);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a36      	ldr	r2, [pc, #216]	; (8004280 <flash_conv2_nfc+0x194>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	0b59      	lsrs	r1, r3, #13
 80041ae:	4b30      	ldr	r3, [pc, #192]	; (8004270 <flash_conv2_nfc+0x184>)
 80041b0:	fba3 2301 	umull	r2, r3, r3, r1
 80041b4:	08da      	lsrs	r2, r3, #3
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	1aca      	subs	r2, r1, r3
 80041c0:	b2d3      	uxtb	r3, r2
 80041c2:	3330      	adds	r3, #48	; 0x30
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <flash_conv2_nfc+0x17c>)
 80041c8:	715a      	strb	r2, [r3, #5]
	nfc_uid_arr[6] = 0x30+(flash_nfc_uid/1000%10);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <flash_conv2_nfc+0x198>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0999      	lsrs	r1, r3, #6
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <flash_conv2_nfc+0x184>)
 80041d6:	fba3 2301 	umull	r2, r3, r3, r1
 80041da:	08da      	lsrs	r2, r3, #3
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	1aca      	subs	r2, r1, r3
 80041e6:	b2d3      	uxtb	r3, r2
 80041e8:	3330      	adds	r3, #48	; 0x30
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <flash_conv2_nfc+0x17c>)
 80041ee:	719a      	strb	r2, [r3, #6]
	nfc_uid_arr[7] = 0x30+(flash_nfc_uid/100%10);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a25      	ldr	r2, [pc, #148]	; (8004288 <flash_conv2_nfc+0x19c>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	0959      	lsrs	r1, r3, #5
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <flash_conv2_nfc+0x184>)
 80041fc:	fba3 2301 	umull	r2, r3, r3, r1
 8004200:	08da      	lsrs	r2, r3, #3
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	1aca      	subs	r2, r1, r3
 800420c:	b2d3      	uxtb	r3, r2
 800420e:	3330      	adds	r3, #48	; 0x30
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <flash_conv2_nfc+0x17c>)
 8004214:	71da      	strb	r2, [r3, #7]
	nfc_uid_arr[8] = 0x30+(flash_nfc_uid/10%10);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a15      	ldr	r2, [pc, #84]	; (8004270 <flash_conv2_nfc+0x184>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	08d9      	lsrs	r1, r3, #3
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <flash_conv2_nfc+0x184>)
 8004222:	fba3 2301 	umull	r2, r3, r3, r1
 8004226:	08da      	lsrs	r2, r3, #3
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	1aca      	subs	r2, r1, r3
 8004232:	b2d3      	uxtb	r3, r2
 8004234:	3330      	adds	r3, #48	; 0x30
 8004236:	b2da      	uxtb	r2, r3
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <flash_conv2_nfc+0x17c>)
 800423a:	721a      	strb	r2, [r3, #8]
	nfc_uid_arr[9] = 0x30+(flash_nfc_uid%10);
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <flash_conv2_nfc+0x184>)
 8004240:	fba3 2301 	umull	r2, r3, r3, r1
 8004244:	08da      	lsrs	r2, r3, #3
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	1aca      	subs	r2, r1, r3
 8004250:	b2d3      	uxtb	r3, r2
 8004252:	3330      	adds	r3, #48	; 0x30
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4b04      	ldr	r3, [pc, #16]	; (8004268 <flash_conv2_nfc+0x17c>)
 8004258:	725a      	strb	r2, [r3, #9]


}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	00044b83 	.word	0x00044b83
 8004268:	200009f8 	.word	0x200009f8
 800426c:	55e63b89 	.word	0x55e63b89
 8004270:	cccccccd 	.word	0xcccccccd
 8004274:	6b5fca6b 	.word	0x6b5fca6b
 8004278:	431bde83 	.word	0x431bde83
 800427c:	0a7c5ac5 	.word	0x0a7c5ac5
 8004280:	d1b71759 	.word	0xd1b71759
 8004284:	10624dd3 	.word	0x10624dd3
 8004288:	51eb851f 	.word	0x51eb851f

0800428c <TimingDelay_Decrement>:
/**
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement ( void ) {
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00) {
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <TimingDelay_Decrement+0x28>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <TimingDelay_Decrement+0x16>
		TimingDelay--;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <TimingDelay_Decrement+0x28>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <TimingDelay_Decrement+0x28>)
 80042a0:	6013      	str	r3, [r2, #0]
	}
	tick++;
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <TimingDelay_Decrement+0x2c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	4a03      	ldr	r2, [pc, #12]	; (80042b8 <TimingDelay_Decrement+0x2c>)
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	20000530 	.word	0x20000530
 80042b8:	20000b54 	.word	0x20000b54

080042bc <Delay>:
/**
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in milliseconds
 * @retval None
 */
void Delay ( uint32_t nTime ) {
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 80042c4:	4a06      	ldr	r2, [pc, #24]	; (80042e0 <Delay+0x24>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6013      	str	r3, [r2, #0]
	while (TimingDelay != 0);
 80042ca:	bf00      	nop
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <Delay+0x24>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1fb      	bne.n	80042cc <Delay+0x10>
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr
 80042e0:	20000530 	.word	0x20000530

080042e4 <LCD_CtrlLinesConfig>:
}




void LCD_CtrlLinesConfig(void) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
	I2C_InitTypeDef			I2C_InitStruct;

	/*
	 * I2C pins configure
	 */
	LCD_I2C_SCL_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SCL_RCC_PORT, ENABLE );
 80042ea:	2101      	movs	r1, #1
 80042ec:	2008      	movs	r0, #8
 80042ee:	f002 fd63 	bl	8006db8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80042f2:	2302      	movs	r3, #2
 80042f4:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80042f6:	2318      	movs	r3, #24
 80042f8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SCL_PIN;
 80042fa:	2340      	movs	r3, #64	; 0x40
 80042fc:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SCL_GPIO_PORT, &GPIO_InitStruct );
 80042fe:	f107 0314 	add.w	r3, r7, #20
 8004302:	4619      	mov	r1, r3
 8004304:	481a      	ldr	r0, [pc, #104]	; (8004370 <LCD_CtrlLinesConfig+0x8c>)
 8004306:	f002 f9c3 	bl	8006690 <GPIO_Init>

	LCD_I2C_SDA_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SDA_RCC_PORT, ENABLE );
 800430a:	2101      	movs	r1, #1
 800430c:	2008      	movs	r0, #8
 800430e:	f002 fd53 	bl	8006db8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8004312:	2302      	movs	r3, #2
 8004314:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_OD;
 8004316:	231c      	movs	r3, #28
 8004318:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SDA_PIN;
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SDA_GPIO_PORT, &GPIO_InitStruct );
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	4619      	mov	r1, r3
 8004324:	4812      	ldr	r0, [pc, #72]	; (8004370 <LCD_CtrlLinesConfig+0x8c>)
 8004326:	f002 f9b3 	bl	8006690 <GPIO_Init>

	LCD_I2C_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_RCC_APBPORT, ENABLE );
 800432a:	2101      	movs	r1, #1
 800432c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004330:	f002 fd60 	bl	8006df4 <RCC_APB1PeriphClockCmd>

	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8004334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004338:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800433a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800433e:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_ClockSpeed = 50000;
 8004340:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004344:	607b      	str	r3, [r7, #4]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8004346:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800434a:	817b      	strh	r3, [r7, #10]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 800434c:	2300      	movs	r3, #0
 800434e:	813b      	strh	r3, [r7, #8]
	I2C_InitStruct.I2C_OwnAddress1 = 1;
 8004350:	2301      	movs	r3, #1
 8004352:	81bb      	strh	r3, [r7, #12]
	I2C_Init ( LCD_I2C_NUM, &I2C_InitStruct );
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4806      	ldr	r0, [pc, #24]	; (8004374 <LCD_CtrlLinesConfig+0x90>)
 800435a:	f002 fa85 	bl	8006868 <I2C_Init>

	I2C_Cmd ( LCD_I2C_NUM, ENABLE );
 800435e:	2101      	movs	r1, #1
 8004360:	4804      	ldr	r0, [pc, #16]	; (8004374 <LCD_CtrlLinesConfig+0x90>)
 8004362:	f002 fb43 	bl	80069ec <I2C_Cmd>
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40010c00 	.word	0x40010c00
 8004374:	40005400 	.word	0x40005400

08004378 <I2C_SingleRandomWrite>:
  * @param  Addr: register address
  * @param  Data: data to be written to the specific register
  * @retval 0x00 if write operation is OK
  *         0xFF if timeout condition occured (device not connected or bus error).
  */
uint8_t I2C_SingleRandomWrite ( I2C_TypeDef* I2Cx, uint8_t Device, uint8_t Data ) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
 8004384:	4613      	mov	r3, r2
 8004386:	70bb      	strb	r3, [r7, #2]
	uint32_t timeout = TIMEOUT_MAX;
 8004388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438c:	60fb      	str	r3, [r7, #12]

	/* Generate the Start Condition */
	I2C_GenerateSTART ( I2Cx, ENABLE );
 800438e:	2101      	movs	r1, #1
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f002 fb4a 	bl	8006a2a <I2C_GenerateSTART>

	/* Test on I2Cx EV5 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8004396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800439a:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 800439c:	e006      	b.n	80043ac <I2C_SingleRandomWrite+0x34>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	60fa      	str	r2, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <I2C_SingleRandomWrite+0x34>
			return 0xFF;
 80043a8:	23ff      	movs	r3, #255	; 0xff
 80043aa:	e03a      	b.n	8004422 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 80043ac:	491f      	ldr	r1, [pc, #124]	; (800442c <I2C_SingleRandomWrite+0xb4>)
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f002 fba5 	bl	8006afe <I2C_CheckEvent>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f1      	beq.n	800439e <I2C_SingleRandomWrite+0x26>
	}

	/* Send TS selected device slave Address for write */
	I2C_Send7bitAddress ( I2Cx, Device, I2C_Direction_Transmitter );
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	2200      	movs	r2, #0
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f002 fb7f 	bl	8006ac4 <I2C_Send7bitAddress>

	/* Test on I2Cx EV6 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 80043c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ca:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 80043cc:	e006      	b.n	80043dc <I2C_SingleRandomWrite+0x64>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1e5a      	subs	r2, r3, #1
 80043d2:	60fa      	str	r2, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <I2C_SingleRandomWrite+0x64>
			return 0xFF;
 80043d8:	23ff      	movs	r3, #255	; 0xff
 80043da:	e022      	b.n	8004422 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 80043dc:	4914      	ldr	r1, [pc, #80]	; (8004430 <I2C_SingleRandomWrite+0xb8>)
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f002 fb8d 	bl	8006afe <I2C_CheckEvent>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f1      	beq.n	80043ce <I2C_SingleRandomWrite+0x56>
	}

	/* Send Data */
	I2C_SendData ( I2Cx, Data );
 80043ea:	78bb      	ldrb	r3, [r7, #2]
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f002 fb59 	bl	8006aa6 <I2C_SendData>

	/* Test on I2Cx EV8 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 80043f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f8:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80043fa:	e006      	b.n	800440a <I2C_SingleRandomWrite+0x92>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	60fa      	str	r2, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <I2C_SingleRandomWrite+0x92>
			return 0xFF;
 8004406:	23ff      	movs	r3, #255	; 0xff
 8004408:	e00b      	b.n	8004422 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 800440a:	490a      	ldr	r1, [pc, #40]	; (8004434 <I2C_SingleRandomWrite+0xbc>)
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f002 fb76 	bl	8006afe <I2C_CheckEvent>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f1      	beq.n	80043fc <I2C_SingleRandomWrite+0x84>
	}

	/* Send I2Cx STOP Condition */
	I2C_GenerateSTOP ( I2Cx, ENABLE );
 8004418:	2101      	movs	r1, #1
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f002 fb24 	bl	8006a68 <I2C_GenerateSTOP>

	/* If operation is OK, return 0 */
	return 0;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	00030001 	.word	0x00030001
 8004430:	00070080 	.word	0x00070080
 8004434:	00070084 	.word	0x00070084

08004438 <LCD_SetCursor>:
//******************************************************************
void LCD_SetCursor ( uint8_t index ) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
	uint8_t index_hi = index & 0xF0;
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	f023 030f 	bic.w	r3, r3, #15
 8004448:	73fb      	strb	r3, [r7, #15]
	uint8_t index_lo = (index & 0x0F) << 4;
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	f023 0307 	bic.w	r3, r3, #7
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	214e      	movs	r1, #78	; 0x4e
 800445c:	481c      	ldr	r0, [pc, #112]	; (80044d0 <LCD_SetCursor+0x98>)
 800445e:	f7ff ff8b 	bl	8004378 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_hi | LCD_E) & ~LCD_RS & ~LCD_RW );
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800446a:	f023 0305 	bic.w	r3, r3, #5
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	214e      	movs	r1, #78	; 0x4e
 8004474:	4816      	ldr	r0, [pc, #88]	; (80044d0 <LCD_SetCursor+0x98>)
 8004476:	f7ff ff7f 	bl	8004378 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	f023 0307 	bic.w	r3, r3, #7
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	214e      	movs	r1, #78	; 0x4e
 8004486:	4812      	ldr	r0, [pc, #72]	; (80044d0 <LCD_SetCursor+0x98>)
 8004488:	f7ff ff76 	bl	8004378 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800448c:	7bbb      	ldrb	r3, [r7, #14]
 800448e:	f023 0307 	bic.w	r3, r3, #7
 8004492:	b2db      	uxtb	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	214e      	movs	r1, #78	; 0x4e
 8004498:	480d      	ldr	r0, [pc, #52]	; (80044d0 <LCD_SetCursor+0x98>)
 800449a:	f7ff ff6d 	bl	8004378 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_lo | LCD_E) & ~LCD_RS & ~LCD_RW );
 800449e:	7bbb      	ldrb	r3, [r7, #14]
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80044a6:	f023 0305 	bic.w	r3, r3, #5
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	214e      	movs	r1, #78	; 0x4e
 80044b0:	4807      	ldr	r0, [pc, #28]	; (80044d0 <LCD_SetCursor+0x98>)
 80044b2:	f7ff ff61 	bl	8004378 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80044b6:	7bbb      	ldrb	r3, [r7, #14]
 80044b8:	f023 0307 	bic.w	r3, r3, #7
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	214e      	movs	r1, #78	; 0x4e
 80044c2:	4803      	ldr	r0, [pc, #12]	; (80044d0 <LCD_SetCursor+0x98>)
 80044c4:	f7ff ff58 	bl	8004378 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40005400 	.word	0x40005400

080044d4 <LCD_WriteData>:
//******************************************************************
void LCD_WriteData ( uint8_t data ) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_hi = data & 0xF0;
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	f023 030f 	bic.w	r3, r3, #15
 80044e4:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lo = (data & 0x0F) << 4;
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 80044ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f0:	f023 0307 	bic.w	r3, r3, #7
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	f043 0304 	orr.w	r3, r3, #4
 80044fa:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	214e      	movs	r1, #78	; 0x4e
 8004502:	4824      	ldr	r0, [pc, #144]	; (8004594 <LCD_WriteData+0xc0>)
 8004504:	f7ff ff38 	bl	8004378 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi | LCD_E) | LCD_RS) & ~LCD_RW );
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	f043 0306 	orr.w	r3, r3, #6
 800450e:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	214e      	movs	r1, #78	; 0x4e
 800451a:	481e      	ldr	r0, [pc, #120]	; (8004594 <LCD_WriteData+0xc0>)
 800451c:	f7ff ff2c 	bl	8004378 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8004520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004524:	f023 0307 	bic.w	r3, r3, #7
 8004528:	b25b      	sxtb	r3, r3
 800452a:	f043 0304 	orr.w	r3, r3, #4
 800452e:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	214e      	movs	r1, #78	; 0x4e
 8004536:	4817      	ldr	r0, [pc, #92]	; (8004594 <LCD_WriteData+0xc0>)
 8004538:	f7ff ff1e 	bl	8004378 <I2C_SingleRandomWrite>

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 800453c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004540:	f023 0307 	bic.w	r3, r3, #7
 8004544:	b25b      	sxtb	r3, r3
 8004546:	f043 0304 	orr.w	r3, r3, #4
 800454a:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	214e      	movs	r1, #78	; 0x4e
 8004552:	4810      	ldr	r0, [pc, #64]	; (8004594 <LCD_WriteData+0xc0>)
 8004554:	f7ff ff10 	bl	8004378 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo | LCD_E)  | LCD_RS) & ~LCD_RW );
 8004558:	7bbb      	ldrb	r3, [r7, #14]
 800455a:	f043 0306 	orr.w	r3, r3, #6
 800455e:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	214e      	movs	r1, #78	; 0x4e
 800456a:	480a      	ldr	r0, [pc, #40]	; (8004594 <LCD_WriteData+0xc0>)
 800456c:	f7ff ff04 	bl	8004378 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8004570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004574:	f023 0307 	bic.w	r3, r3, #7
 8004578:	b25b      	sxtb	r3, r3
 800457a:	f043 0304 	orr.w	r3, r3, #4
 800457e:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	214e      	movs	r1, #78	; 0x4e
 8004586:	4803      	ldr	r0, [pc, #12]	; (8004594 <LCD_WriteData+0xc0>)
 8004588:	f7ff fef6 	bl	8004378 <I2C_SingleRandomWrite>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40005400 	.word	0x40005400

08004598 <LCD_WriteString>:
//******************************************************************
void LCD_WriteString ( char * str ) {
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < strlen(str); i++) {
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e009      	b.n	80045ba <LCD_WriteString+0x22>
		LCD_WriteData ( str[i] );
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ff90 	bl	80044d4 <LCD_WriteData>
	for (i = 0; i < strlen(str); i++) {
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	3301      	adds	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	7bfc      	ldrb	r4, [r7, #15]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fb fdc5 	bl	800014c <strlen>
 80045c2:	4603      	mov	r3, r0
 80045c4:	429c      	cmp	r4, r3
 80045c6:	d3ee      	bcc.n	80045a6 <LCD_WriteString+0xe>
	}

}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd90      	pop	{r4, r7, pc}
	...

080045d4 <LCD_RunStringDevInfo>:
//******************************************************************
//******************************************************************
void LCD_RunStringDevInfo ( char * str1line,char * str2line, uint32_t delay) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
	char str1Frame[LCD_STR_LEN + 1];
	char str2Frame[LCD_STR_LEN + 1];
	uint8_t i;
	uint8_t cnt;

		tick = GetTickCount();
 80045e0:	f7ff f8ba 	bl	8003758 <GetTickCount>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a7f      	ldr	r2, [pc, #508]	; (80047e4 <LCD_RunStringDevInfo+0x210>)
 80045e8:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 80045ea:	4b7f      	ldr	r3, [pc, #508]	; (80047e8 <LCD_RunStringDevInfo+0x214>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
		cnt=0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr1 = '\0';
 80045f6:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
		*runStr2 = '\0';
 80045fc:	4b7c      	ldr	r3, [pc, #496]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004602:	2300      	movs	r3, #0
 8004604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004608:	e01c      	b.n	8004644 <LCD_RunStringDevInfo+0x70>
			strcat ( runStr1, " " );
 800460a:	4878      	ldr	r0, [pc, #480]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 800460c:	f7fb fd9e 	bl	800014c <strlen>
 8004610:	4603      	mov	r3, r0
 8004612:	461a      	mov	r2, r3
 8004614:	4b75      	ldr	r3, [pc, #468]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 8004616:	4413      	add	r3, r2
 8004618:	4976      	ldr	r1, [pc, #472]	; (80047f4 <LCD_RunStringDevInfo+0x220>)
 800461a:	461a      	mov	r2, r3
 800461c:	460b      	mov	r3, r1
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8004622:	4873      	ldr	r0, [pc, #460]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 8004624:	f7fb fd92 	bl	800014c <strlen>
 8004628:	4603      	mov	r3, r0
 800462a:	461a      	mov	r2, r3
 800462c:	4b70      	ldr	r3, [pc, #448]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 800462e:	4413      	add	r3, r2
 8004630:	4970      	ldr	r1, [pc, #448]	; (80047f4 <LCD_RunStringDevInfo+0x220>)
 8004632:	461a      	mov	r2, r3
 8004634:	460b      	mov	r3, r1
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800463a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800463e:	3301      	adds	r3, #1
 8004640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004648:	2b06      	cmp	r3, #6
 800464a:	d9de      	bls.n	800460a <LCD_RunStringDevInfo+0x36>
		}
		strcat ( runStr1, str1line );
 800464c:	68f9      	ldr	r1, [r7, #12]
 800464e:	4867      	ldr	r0, [pc, #412]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 8004650:	f003 faa6 	bl	8007ba0 <strcat>
		strcat ( runStr2, str2line );
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	4866      	ldr	r0, [pc, #408]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 8004658:	f003 faa2 	bl	8007ba0 <strcat>

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004662:	e01c      	b.n	800469e <LCD_RunStringDevInfo+0xca>
			strcat ( runStr1, " " );
 8004664:	4861      	ldr	r0, [pc, #388]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 8004666:	f7fb fd71 	bl	800014c <strlen>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	4b5f      	ldr	r3, [pc, #380]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 8004670:	4413      	add	r3, r2
 8004672:	4960      	ldr	r1, [pc, #384]	; (80047f4 <LCD_RunStringDevInfo+0x220>)
 8004674:	461a      	mov	r2, r3
 8004676:	460b      	mov	r3, r1
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 800467c:	485c      	ldr	r0, [pc, #368]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 800467e:	f7fb fd65 	bl	800014c <strlen>
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	4b5a      	ldr	r3, [pc, #360]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 8004688:	4413      	add	r3, r2
 800468a:	495a      	ldr	r1, [pc, #360]	; (80047f4 <LCD_RunStringDevInfo+0x220>)
 800468c:	461a      	mov	r2, r3
 800468e:	460b      	mov	r3, r1
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004698:	3301      	adds	r3, #1
 800469a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800469e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d9de      	bls.n	8004664 <LCD_RunStringDevInfo+0x90>
		}

		runStr1Len = strlen ( runStr1 );
 80046a6:	4851      	ldr	r0, [pc, #324]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 80046a8:	f7fb fd50 	bl	800014c <strlen>
 80046ac:	4603      	mov	r3, r0
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <LCD_RunStringDevInfo+0x224>)
 80046b2:	701a      	strb	r2, [r3, #0]
		runStr2Len = strlen ( runStr2 );
 80046b4:	484e      	ldr	r0, [pc, #312]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 80046b6:	f7fb fd49 	bl	800014c <strlen>
 80046ba:	4603      	mov	r3, r0
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <LCD_RunStringDevInfo+0x228>)
 80046c0:	701a      	strb	r2, [r3, #0]

	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 80046c2:	e07a      	b.n	80047ba <LCD_RunStringDevInfo+0x1e6>
		if (GetTickCount() - tick > delay) {
 80046c4:	f7ff f848 	bl	8003758 <GetTickCount>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <LCD_RunStringDevInfo+0x210>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d271      	bcs.n	80047ba <LCD_RunStringDevInfo+0x1e6>
			tick = GetTickCount();
 80046d6:	f7ff f83f 	bl	8003758 <GetTickCount>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a41      	ldr	r2, [pc, #260]	; (80047e4 <LCD_RunStringDevInfo+0x210>)
 80046de:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 80046e0:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <LCD_RunStringDevInfo+0x214>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	4b3f      	ldr	r3, [pc, #252]	; (80047e8 <LCD_RunStringDevInfo+0x214>)
 80046ea:	701a      	strb	r2, [r3, #0]

			if (cnt<(runStr1Len-1)) {
 80046ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <LCD_RunStringDevInfo+0x224>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	429a      	cmp	r2, r3
 80046f8:	da29      	bge.n	800474e <LCD_RunStringDevInfo+0x17a>
			for (i = 0; i < LCD_STR_LEN; i++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004700:	e019      	b.n	8004736 <LCD_RunStringDevInfo+0x162>
				str1Frame[i] = runStr1[(strFrameIndex + i) % runStr1Len];
 8004702:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <LCD_RunStringDevInfo+0x214>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800470c:	4413      	add	r3, r2
 800470e:	4a3a      	ldr	r2, [pc, #232]	; (80047f8 <LCD_RunStringDevInfo+0x224>)
 8004710:	7812      	ldrb	r2, [r2, #0]
 8004712:	fb93 f1f2 	sdiv	r1, r3, r2
 8004716:	fb01 f202 	mul.w	r2, r1, r2
 800471a:	1a9a      	subs	r2, r3, r2
 800471c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004720:	4932      	ldr	r1, [pc, #200]	; (80047ec <LCD_RunStringDevInfo+0x218>)
 8004722:	5c8a      	ldrb	r2, [r1, r2]
 8004724:	3328      	adds	r3, #40	; 0x28
 8004726:	443b      	add	r3, r7
 8004728:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++)
 800472c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004730:	3301      	adds	r3, #1
 8004732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800473a:	2b07      	cmp	r3, #7
 800473c:	d9e1      	bls.n	8004702 <LCD_RunStringDevInfo+0x12e>

			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку строку
 800473e:	2080      	movs	r0, #128	; 0x80
 8004740:	f7ff fe7a 	bl	8004438 <LCD_SetCursor>
			LCD_WriteString ( str1Frame );
 8004744:	f107 031c 	add.w	r3, r7, #28
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff25 	bl	8004598 <LCD_WriteString>
			}

			if (cnt<(runStr2Len-1)){
 800474e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <LCD_RunStringDevInfo+0x228>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	3b01      	subs	r3, #1
 8004758:	429a      	cmp	r2, r3
 800475a:	da29      	bge.n	80047b0 <LCD_RunStringDevInfo+0x1dc>
			for (i = 0; i < LCD_STR_LEN; i++)
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004762:	e019      	b.n	8004798 <LCD_RunStringDevInfo+0x1c4>
				str2Frame[i] = runStr2[(strFrameIndex + i) % runStr2Len];
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <LCD_RunStringDevInfo+0x214>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800476e:	4413      	add	r3, r2
 8004770:	4a22      	ldr	r2, [pc, #136]	; (80047fc <LCD_RunStringDevInfo+0x228>)
 8004772:	7812      	ldrb	r2, [r2, #0]
 8004774:	fb93 f1f2 	sdiv	r1, r3, r2
 8004778:	fb01 f202 	mul.w	r2, r1, r2
 800477c:	1a9a      	subs	r2, r3, r2
 800477e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004782:	491b      	ldr	r1, [pc, #108]	; (80047f0 <LCD_RunStringDevInfo+0x21c>)
 8004784:	5c8a      	ldrb	r2, [r1, r2]
 8004786:	3328      	adds	r3, #40	; 0x28
 8004788:	443b      	add	r3, r7
 800478a:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < LCD_STR_LEN; i++)
 800478e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004792:	3301      	adds	r3, #1
 8004794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800479c:	2b07      	cmp	r3, #7
 800479e:	d9e1      	bls.n	8004764 <LCD_RunStringDevInfo+0x190>

			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 80047a0:	20c0      	movs	r0, #192	; 0xc0
 80047a2:	f7ff fe49 	bl	8004438 <LCD_SetCursor>
			LCD_WriteString ( str2Frame );
 80047a6:	f107 0310 	add.w	r3, r7, #16
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fef4 	bl	8004598 <LCD_WriteString>
			}

			cnt++;
 80047b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047b4:	3301      	adds	r3, #1
 80047b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 80047ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <LCD_RunStringDevInfo+0x224>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	429a      	cmp	r2, r3
 80047c6:	f6ff af7d 	blt.w	80046c4 <LCD_RunStringDevInfo+0xf0>
 80047ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <LCD_RunStringDevInfo+0x228>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	429a      	cmp	r2, r3
 80047d6:	f6ff af75 	blt.w	80046c4 <LCD_RunStringDevInfo+0xf0>
		}

}
 80047da:	bf00      	nop
 80047dc:	bf00      	nop
 80047de:	3728      	adds	r7, #40	; 0x28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000b58 	.word	0x20000b58
 80047e8:	20000b5c 	.word	0x20000b5c
 80047ec:	20000b60 	.word	0x20000b60
 80047f0:	20000bd8 	.word	0x20000bd8
 80047f4:	08008e6c 	.word	0x08008e6c
 80047f8:	20000c4d 	.word	0x20000c4d
 80047fc:	20000c4e 	.word	0x20000c4e

08004800 <LCD_RunStringBARCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера штрих-кодов бегущей строкой в первой строчке LCD
void LCD_RunStringBARCode ( char * str, uint32_t delay, uint8_t start ) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d13f      	bne.n	8004894 <LCD_RunStringBARCode+0x94>
		tick = GetTickCount();
 8004814:	f7fe ffa0 	bl	8003758 <GetTickCount>
 8004818:	4603      	mov	r3, r0
 800481a:	4a3e      	ldr	r2, [pc, #248]	; (8004914 <LCD_RunStringBARCode+0x114>)
 800481c:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 800481e:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <LCD_RunStringBARCode+0x118>)
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 8004824:	4b3d      	ldr	r3, [pc, #244]	; (800491c <LCD_RunStringBARCode+0x11c>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800482a:	2300      	movs	r3, #0
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e00e      	b.n	800484e <LCD_RunStringBARCode+0x4e>
			strcat ( runStr, " " );
 8004830:	483a      	ldr	r0, [pc, #232]	; (800491c <LCD_RunStringBARCode+0x11c>)
 8004832:	f7fb fc8b 	bl	800014c <strlen>
 8004836:	4603      	mov	r3, r0
 8004838:	461a      	mov	r2, r3
 800483a:	4b38      	ldr	r3, [pc, #224]	; (800491c <LCD_RunStringBARCode+0x11c>)
 800483c:	4413      	add	r3, r2
 800483e:	4938      	ldr	r1, [pc, #224]	; (8004920 <LCD_RunStringBARCode+0x120>)
 8004840:	461a      	mov	r2, r3
 8004842:	460b      	mov	r3, r1
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004848:	7ffb      	ldrb	r3, [r7, #31]
 800484a:	3301      	adds	r3, #1
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	7ffb      	ldrb	r3, [r7, #31]
 8004850:	2b06      	cmp	r3, #6
 8004852:	d9ed      	bls.n	8004830 <LCD_RunStringBARCode+0x30>
		}
		strcat ( runStr, str );
 8004854:	68f9      	ldr	r1, [r7, #12]
 8004856:	4831      	ldr	r0, [pc, #196]	; (800491c <LCD_RunStringBARCode+0x11c>)
 8004858:	f003 f9a2 	bl	8007ba0 <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800485c:	2300      	movs	r3, #0
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e00e      	b.n	8004880 <LCD_RunStringBARCode+0x80>
			strcat ( runStr, " " );
 8004862:	482e      	ldr	r0, [pc, #184]	; (800491c <LCD_RunStringBARCode+0x11c>)
 8004864:	f7fb fc72 	bl	800014c <strlen>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <LCD_RunStringBARCode+0x11c>)
 800486e:	4413      	add	r3, r2
 8004870:	492b      	ldr	r1, [pc, #172]	; (8004920 <LCD_RunStringBARCode+0x120>)
 8004872:	461a      	mov	r2, r3
 8004874:	460b      	mov	r3, r1
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800487a:	7ffb      	ldrb	r3, [r7, #31]
 800487c:	3301      	adds	r3, #1
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	7ffb      	ldrb	r3, [r7, #31]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d9ed      	bls.n	8004862 <LCD_RunStringBARCode+0x62>
		}
		runStrLen = strlen ( runStr );
 8004886:	4825      	ldr	r0, [pc, #148]	; (800491c <LCD_RunStringBARCode+0x11c>)
 8004888:	f7fb fc60 	bl	800014c <strlen>
 800488c:	4603      	mov	r3, r0
 800488e:	b2da      	uxtb	r2, r3
 8004890:	4b24      	ldr	r3, [pc, #144]	; (8004924 <LCD_RunStringBARCode+0x124>)
 8004892:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d037      	beq.n	800490c <LCD_RunStringBARCode+0x10c>
		if (GetTickCount() - tick > delay) {
 800489c:	f7fe ff5c 	bl	8003758 <GetTickCount>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <LCD_RunStringBARCode+0x114>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d22e      	bcs.n	800490c <LCD_RunStringBARCode+0x10c>
			tick = GetTickCount();
 80048ae:	f7fe ff53 	bl	8003758 <GetTickCount>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <LCD_RunStringBARCode+0x114>)
 80048b6:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <LCD_RunStringBARCode+0x118>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <LCD_RunStringBARCode+0x118>)
 80048c2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 80048c4:	2300      	movs	r3, #0
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e015      	b.n	80048f6 <LCD_RunStringBARCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <LCD_RunStringBARCode+0x118>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	4413      	add	r3, r2
 80048d4:	4a13      	ldr	r2, [pc, #76]	; (8004924 <LCD_RunStringBARCode+0x124>)
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80048dc:	fb01 f202 	mul.w	r2, r1, r2
 80048e0:	1a9a      	subs	r2, r3, r2
 80048e2:	7ffb      	ldrb	r3, [r7, #31]
 80048e4:	490d      	ldr	r1, [pc, #52]	; (800491c <LCD_RunStringBARCode+0x11c>)
 80048e6:	5c8a      	ldrb	r2, [r1, r2]
 80048e8:	3320      	adds	r3, #32
 80048ea:	443b      	add	r3, r7
 80048ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 80048f0:	7ffb      	ldrb	r3, [r7, #31]
 80048f2:	3301      	adds	r3, #1
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	7ffb      	ldrb	r3, [r7, #31]
 80048f8:	2b07      	cmp	r3, #7
 80048fa:	d9e6      	bls.n	80048ca <LCD_RunStringBARCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку
 80048fc:	2080      	movs	r0, #128	; 0x80
 80048fe:	f7ff fd9b 	bl	8004438 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8004902:	f107 0314 	add.w	r3, r7, #20
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fe46 	bl	8004598 <LCD_WriteString>
		}
	}
}
 800490c:	bf00      	nop
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000c50 	.word	0x20000c50
 8004918:	20000c54 	.word	0x20000c54
 800491c:	20000c58 	.word	0x20000c58
 8004920:	08008e6c 	.word	0x08008e6c
 8004924:	20000c83 	.word	0x20000c83

08004928 <LCD_RunStringNFCCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера NFC бегущей строкой во второй строчке LCD
void LCD_RunStringNFCCode ( char * str, uint32_t delay, uint8_t start ) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d13f      	bne.n	80049bc <LCD_RunStringNFCCode+0x94>
		tick = GetTickCount();
 800493c:	f7fe ff0c 	bl	8003758 <GetTickCount>
 8004940:	4603      	mov	r3, r0
 8004942:	4a3e      	ldr	r2, [pc, #248]	; (8004a3c <LCD_RunStringNFCCode+0x114>)
 8004944:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8004946:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <LCD_RunStringNFCCode+0x118>)
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 800494c:	4b3d      	ldr	r3, [pc, #244]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004952:	2300      	movs	r3, #0
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e00e      	b.n	8004976 <LCD_RunStringNFCCode+0x4e>
			strcat ( runStr, " " );
 8004958:	483a      	ldr	r0, [pc, #232]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 800495a:	f7fb fbf7 	bl	800014c <strlen>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 8004964:	4413      	add	r3, r2
 8004966:	4938      	ldr	r1, [pc, #224]	; (8004a48 <LCD_RunStringNFCCode+0x120>)
 8004968:	461a      	mov	r2, r3
 800496a:	460b      	mov	r3, r1
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	3301      	adds	r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	2b06      	cmp	r3, #6
 800497a:	d9ed      	bls.n	8004958 <LCD_RunStringNFCCode+0x30>
		}
		strcat ( runStr, str );
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	4831      	ldr	r0, [pc, #196]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 8004980:	f003 f90e 	bl	8007ba0 <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004984:	2300      	movs	r3, #0
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e00e      	b.n	80049a8 <LCD_RunStringNFCCode+0x80>
			strcat ( runStr, " " );
 800498a:	482e      	ldr	r0, [pc, #184]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 800498c:	f7fb fbde 	bl	800014c <strlen>
 8004990:	4603      	mov	r3, r0
 8004992:	461a      	mov	r2, r3
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 8004996:	4413      	add	r3, r2
 8004998:	492b      	ldr	r1, [pc, #172]	; (8004a48 <LCD_RunStringNFCCode+0x120>)
 800499a:	461a      	mov	r2, r3
 800499c:	460b      	mov	r3, r1
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80049a2:	7ffb      	ldrb	r3, [r7, #31]
 80049a4:	3301      	adds	r3, #1
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	7ffb      	ldrb	r3, [r7, #31]
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d9ed      	bls.n	800498a <LCD_RunStringNFCCode+0x62>
		}
		runStrLen = strlen ( runStr );
 80049ae:	4825      	ldr	r0, [pc, #148]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 80049b0:	f7fb fbcc 	bl	800014c <strlen>
 80049b4:	4603      	mov	r3, r0
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <LCD_RunStringNFCCode+0x124>)
 80049ba:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d037      	beq.n	8004a34 <LCD_RunStringNFCCode+0x10c>
		if (GetTickCount() - tick > delay) {
 80049c4:	f7fe fec8 	bl	8003758 <GetTickCount>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <LCD_RunStringNFCCode+0x114>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d22e      	bcs.n	8004a34 <LCD_RunStringNFCCode+0x10c>
			tick = GetTickCount();
 80049d6:	f7fe febf 	bl	8003758 <GetTickCount>
 80049da:	4603      	mov	r3, r0
 80049dc:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <LCD_RunStringNFCCode+0x114>)
 80049de:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <LCD_RunStringNFCCode+0x118>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <LCD_RunStringNFCCode+0x118>)
 80049ea:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 80049ec:	2300      	movs	r3, #0
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e015      	b.n	8004a1e <LCD_RunStringNFCCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <LCD_RunStringNFCCode+0x118>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	7ffb      	ldrb	r3, [r7, #31]
 80049fa:	4413      	add	r3, r2
 80049fc:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <LCD_RunStringNFCCode+0x124>)
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a04:	fb01 f202 	mul.w	r2, r1, r2
 8004a08:	1a9a      	subs	r2, r3, r2
 8004a0a:	7ffb      	ldrb	r3, [r7, #31]
 8004a0c:	490d      	ldr	r1, [pc, #52]	; (8004a44 <LCD_RunStringNFCCode+0x11c>)
 8004a0e:	5c8a      	ldrb	r2, [r1, r2]
 8004a10:	3320      	adds	r3, #32
 8004a12:	443b      	add	r3, r7
 8004a14:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	7ffb      	ldrb	r3, [r7, #31]
 8004a20:	2b07      	cmp	r3, #7
 8004a22:	d9e6      	bls.n	80049f2 <LCD_RunStringNFCCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8004a24:	20c0      	movs	r0, #192	; 0xc0
 8004a26:	f7ff fd07 	bl	8004438 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fdb2 	bl	8004598 <LCD_WriteString>
		}
	}
}
 8004a34:	bf00      	nop
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000c84 	.word	0x20000c84
 8004a40:	20000c88 	.word	0x20000c88
 8004a44:	20000c8c 	.word	0x20000c8c
 8004a48:	08008e6c 	.word	0x08008e6c
 8004a4c:	20000cb7 	.word	0x20000cb7

08004a50 <LCD_Init>:
//******************************************************************

void LCD_Init(void) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
	uint8_t i;

	LCD_CtrlLinesConfig();
 8004a56:	f7ff fc45 	bl	80042e4 <LCD_CtrlLinesConfig>

	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	71fb      	strb	r3, [r7, #7]
 8004a5e:	e02d      	b.n	8004abc <LCD_Init+0x6c>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <LCD_Init+0x94>)
 8004a64:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	214e      	movs	r1, #78	; 0x4e
 8004a6e:	481e      	ldr	r0, [pc, #120]	; (8004ae8 <LCD_Init+0x98>)
 8004a70:	f7ff fc82 	bl	8004378 <I2C_SingleRandomWrite>
		Delay(10);
 8004a74:	200a      	movs	r0, #10
 8004a76:	f7ff fc21 	bl	80042bc <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) | LCD_E) & ~LCD_RS & ~LCD_RW );
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <LCD_Init+0x94>)
 8004a7e:	5cd3      	ldrb	r3, [r2, r3]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	f043 0302 	orr.w	r3, r3, #2
 8004a88:	b25b      	sxtb	r3, r3
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	214e      	movs	r1, #78	; 0x4e
 8004a90:	4815      	ldr	r0, [pc, #84]	; (8004ae8 <LCD_Init+0x98>)
 8004a92:	f7ff fc71 	bl	8004378 <I2C_SingleRandomWrite>
		Delay(10);
 8004a96:	200a      	movs	r0, #10
 8004a98:	f7ff fc10 	bl	80042bc <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <LCD_Init+0x94>)
 8004aa0:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	214e      	movs	r1, #78	; 0x4e
 8004aaa:	480f      	ldr	r0, [pc, #60]	; (8004ae8 <LCD_Init+0x98>)
 8004aac:	f7ff fc64 	bl	8004378 <I2C_SingleRandomWrite>
		Delay(10);
 8004ab0:	200a      	movs	r0, #10
 8004ab2:	f7ff fc03 	bl	80042bc <Delay>
	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	71fb      	strb	r3, [r7, #7]
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	2b0b      	cmp	r3, #11
 8004ac0:	d9ce      	bls.n	8004a60 <LCD_Init+0x10>
	}
	/*
	 * Очистка дисплея
	 */
	LCD_SetCursor ( LCD_CURSOR_1STR );
 8004ac2:	2080      	movs	r0, #128	; 0x80
 8004ac4:	f7ff fcb8 	bl	8004438 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8004ac8:	4808      	ldr	r0, [pc, #32]	; (8004aec <LCD_Init+0x9c>)
 8004aca:	f7ff fd65 	bl	8004598 <LCD_WriteString>
	LCD_SetCursor ( LCD_CURSOR_2STR );
 8004ace:	20c0      	movs	r0, #192	; 0xc0
 8004ad0:	f7ff fcb2 	bl	8004438 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8004ad4:	4805      	ldr	r0, [pc, #20]	; (8004aec <LCD_Init+0x9c>)
 8004ad6:	f7ff fd5f 	bl	8004598 <LCD_WriteString>
	//LCD_WriteString ( "SUM:               " );
	/*
	 * Отображение на дисплее текущей суммы
	 */
	//LCD_DisplaySum();
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000484 	.word	0x20000484
 8004ae8:	40005400 	.word	0x40005400
 8004aec:	08008e70 	.word	0x08008e70

08004af0 <PN532_Delay>:
int8_t _uid[7];      // ISO14443A uid
int8_t _uidLen;      // uid len
int8_t _key[6];      // Mifare Classic key
int8_t _inListedTag; // Tg number of inlisted tag.

void PN532_Delay(uint32_t cntdelay){
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	while(cntdelay--){};
 8004af8:	bf00      	nop
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1fa      	bne.n	8004afa <PN532_Delay+0xa>
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <PN532_WakeUp>:
//******************************************************************************
bool PN532_WakeUp(void){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0

/*
    uint8_t packet[21];
    uint8_t *p = packet;
*/
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8004b14:	2200      	movs	r2, #0
 8004b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b1a:	4807      	ldr	r0, [pc, #28]	; (8004b38 <PN532_WakeUp+0x28>)
 8004b1c:	f001 fe8d 	bl	800683a <GPIO_WriteBit>
	 Delay(10);
 8004b20:	200a      	movs	r0, #10
 8004b22:	f7ff fbcb 	bl	80042bc <Delay>
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004b26:	2201      	movs	r2, #1
 8004b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b2c:	4802      	ldr	r0, [pc, #8]	; (8004b38 <PN532_WakeUp+0x28>)
 8004b2e:	f001 fe84 	bl	800683a <GPIO_WriteBit>
    ///-----------------------------------------------------------------------------


	 PN532_write( packet,21);
*/
	  return TRUE;
 8004b32:	2301      	movs	r3, #1

}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40010c00 	.word	0x40010c00

08004b3c <PN532_setPassiveActivationRetries>:
                          after mxRetries

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_setPassiveActivationRetries(uint8_t maxRetries) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
  pn532_packetbuffer[0] = PN532_COMMAND_RFCONFIGURATION;
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <PN532_setPassiveActivationRetries+0x48>)
 8004b48:	2232      	movs	r2, #50	; 0x32
 8004b4a:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 5;    // Config item 5 (MaxRetries)
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <PN532_setPassiveActivationRetries+0x48>)
 8004b4e:	2205      	movs	r2, #5
 8004b50:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = 0xFF; // MxRtyATR (default = 0xFF)
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <PN532_setPassiveActivationRetries+0x48>)
 8004b54:	22ff      	movs	r2, #255	; 0xff
 8004b56:	709a      	strb	r2, [r3, #2]
  pn532_packetbuffer[3] = 0x01; // MxRtyPSL (default = 0x01)
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <PN532_setPassiveActivationRetries+0x48>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	70da      	strb	r2, [r3, #3]
  pn532_packetbuffer[4] = maxRetries;
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <PN532_setPassiveActivationRetries+0x48>)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	7113      	strb	r3, [r2, #4]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 5,1000))
 8004b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b68:	2105      	movs	r1, #5
 8004b6a:	4806      	ldr	r0, [pc, #24]	; (8004b84 <PN532_setPassiveActivationRetries+0x48>)
 8004b6c:	f000 f900 	bl	8004d70 <PN532_sendCommandCheckAck>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <PN532_setPassiveActivationRetries+0x3e>
  { return 0x0;} // no ACK
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <PN532_setPassiveActivationRetries+0x40>

  return 1;
 8004b7a:	2301      	movs	r3, #1
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000cd0 	.word	0x20000cd0

08004b88 <PN532_readPassiveTargetID>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readPassiveTargetID(uint8_t cardbaudrate, uint8_t *uid,
                                         uint8_t *uidLength, uint16_t timeout) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	81bb      	strh	r3, [r7, #12]
  pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <PN532_readPassiveTargetID+0x54>)
 8004b9e:	224a      	movs	r2, #74	; 0x4a
 8004ba0:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 1; // max 1 cards at once (we can set this to 2 later)
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <PN532_readPassiveTargetID+0x54>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = cardbaudrate;
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <PN532_readPassiveTargetID+0x54>)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	7093      	strb	r3, [r2, #2]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)) {
 8004bae:	89bb      	ldrh	r3, [r7, #12]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2103      	movs	r1, #3
 8004bb4:	4809      	ldr	r0, [pc, #36]	; (8004bdc <PN532_readPassiveTargetID+0x54>)
 8004bb6:	f000 f8db 	bl	8004d70 <PN532_sendCommandCheckAck>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <PN532_readPassiveTargetID+0x3c>
    return 0x0; // no cards read
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e007      	b.n	8004bd4 <PN532_readPassiveTargetID+0x4c>
  }
  //Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
 //Задержка внутри PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)
 //Для чтения ID карты задежка не менее 10 мс обязательна!
     Delay(20);
 8004bc4:	2014      	movs	r0, #20
 8004bc6:	f7ff fb79 	bl	80042bc <Delay>
/*
  // wait for a card to enter the field (only possible with I2C)
  if (!waitready(timeout)) {
    return 0x0;   }
*/
  return PN532_readDetectedPassiveTargetID(uid, uidLength);
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	68b8      	ldr	r0, [r7, #8]
 8004bce:	f000 f807 	bl	8004be0 <PN532_readDetectedPassiveTargetID>
 8004bd2:	4603      	mov	r3, r0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000cd0 	.word	0x20000cd0

08004be0 <PN532_readDetectedPassiveTargetID>:
                          length of the card's UID.

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readDetectedPassiveTargetID(uint8_t *uid, uint8_t *uidLength) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  // read data packet
  PN532_readdata(pn532_readbuffer, 19, 0x00);
 8004bea:	2200      	movs	r2, #0
 8004bec:	2113      	movs	r1, #19
 8004bee:	4819      	ldr	r0, [pc, #100]	; (8004c54 <PN532_readDetectedPassiveTargetID+0x74>)
 8004bf0:	f000 f9c6 	bl	8004f80 <PN532_readdata>
  PN532DEBUGPRINT.print(F("Found "));
  PN532DEBUGPRINT.print(pn532_packetbuffer[7], DEC);
  PN532DEBUGPRINT.println(F(" tags"));
#endif
*/
  if (pn532_readbuffer[7] != 1)
 8004bf4:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <PN532_readDetectedPassiveTargetID+0x74>)
 8004bf6:	79db      	ldrb	r3, [r3, #7]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <PN532_readDetectedPassiveTargetID+0x20>
    return FALSE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e024      	b.n	8004c4a <PN532_readDetectedPassiveTargetID+0x6a>

  uint16_t sens_res = pn532_readbuffer[9];
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <PN532_readDetectedPassiveTargetID+0x74>)
 8004c02:	7a5b      	ldrb	r3, [r3, #9]
 8004c04:	81bb      	strh	r3, [r7, #12]
  sens_res <<= 8;
 8004c06:	89bb      	ldrh	r3, [r7, #12]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	81bb      	strh	r3, [r7, #12]
  sens_res |= pn532_readbuffer[10];
 8004c0c:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <PN532_readDetectedPassiveTargetID+0x74>)
 8004c0e:	7a9b      	ldrb	r3, [r3, #10]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	89bb      	ldrh	r3, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	81bb      	strh	r3, [r7, #12]
  PN532DEBUGPRINT.print(F("SAK: 0x"));
  PN532DEBUGPRINT.println(pn532_packetbuffer[11], HEX);
#endif
*/
  /* Card appears to be Mifare Classic */
  *uidLength = pn532_readbuffer[12];
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <PN532_readDetectedPassiveTargetID+0x74>)
 8004c1a:	7b1a      	ldrb	r2, [r3, #12]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	701a      	strb	r2, [r3, #0]
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.print(F("UID:"));
#endif
*/
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]
 8004c24:	e00b      	b.n	8004c3e <PN532_readDetectedPassiveTargetID+0x5e>
    uid[i] = pn532_readbuffer[13 + i];
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	f103 020d 	add.w	r2, r3, #13
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	440b      	add	r3, r1
 8004c32:	4908      	ldr	r1, [pc, #32]	; (8004c54 <PN532_readDetectedPassiveTargetID+0x74>)
 8004c34:	5c8a      	ldrb	r2, [r1, r2]
 8004c36:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <PN532_readDetectedPassiveTargetID+0x74>)
 8004c40:	7b1b      	ldrb	r3, [r3, #12]
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3ee      	bcc.n	8004c26 <PN532_readDetectedPassiveTargetID+0x46>
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.println();
#endif
*/
  return TRUE;
 8004c48:	2301      	movs	r3, #1
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000d10 	.word	0x20000d10

08004c58 <PN532_SAMConfig>:

//******************************************************************************
bool PN532_SAMConfig(void){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0

            return this.ExecuteCmd(cmd);
        }
 *
 */
	 pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <PN532_SAMConfig+0x50>)
 8004c5e:	2214      	movs	r2, #20
 8004c60:	701a      	strb	r2, [r3, #0]
	 pn532_packetbuffer[1] = 0x01;//0x01;
 8004c62:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <PN532_SAMConfig+0x50>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	705a      	strb	r2, [r3, #1]
	 pn532_packetbuffer[2] = 0x14;
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <PN532_SAMConfig+0x50>)
 8004c6a:	2214      	movs	r2, #20
 8004c6c:	709a      	strb	r2, [r3, #2]
	 pn532_packetbuffer[3] = 0x00;//не использоать прерывания
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <PN532_SAMConfig+0x50>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	70da      	strb	r2, [r3, #3]

	  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,500)) {
 8004c74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c78:	2104      	movs	r1, #4
 8004c7a:	480b      	ldr	r0, [pc, #44]	; (8004ca8 <PN532_SAMConfig+0x50>)
 8004c7c:	f000 f878 	bl	8004d70 <PN532_sendCommandCheckAck>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <PN532_SAMConfig+0x32>
	    return 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e00b      	b.n	8004ca2 <PN532_SAMConfig+0x4a>

//Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);
// read data packet
	  PN532_readdata(pn532_readbuffer, 9, 0xFF);
 8004c8a:	22ff      	movs	r2, #255	; 0xff
 8004c8c:	2109      	movs	r1, #9
 8004c8e:	4807      	ldr	r0, [pc, #28]	; (8004cac <PN532_SAMConfig+0x54>)
 8004c90:	f000 f976 	bl	8004f80 <PN532_readdata>
	  	    }
*/
	    //int offset = 6;
	    //pn532_packetbuffer[offset] == 0x15

return (pn532_readbuffer[6] == 0x15);
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <PN532_SAMConfig+0x54>)
 8004c96:	799b      	ldrb	r3, [r3, #6]
 8004c98:	2b15      	cmp	r3, #21
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000cd0 	.word	0x20000cd0
 8004cac:	20000d10 	.word	0x20000d10

08004cb0 <PN532_getFirmwareVersion>:
    Checks the firmware version of the PN5xx chip

    @returns  The chip's firmware version and ID
*/
/******************************************************************************/
 uint32_t PN532_getFirmwareVersion(void) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 uint32_t response;
 const uint8_t pn532response_firmwarevers[] = {0x00, 0x00, 0xFF, 0x06, 0xFA, 0xD5};
 8004cb6:	4a2b      	ldr	r2, [pc, #172]	; (8004d64 <PN532_getFirmwareVersion+0xb4>)
 8004cb8:	463b      	mov	r3, r7
 8004cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cbe:	6018      	str	r0, [r3, #0]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	8019      	strh	r1, [r3, #0]

  pn532_packetbuffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <PN532_getFirmwareVersion+0xb8>)
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 1,500)) {
 8004cca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4825      	ldr	r0, [pc, #148]	; (8004d68 <PN532_getFirmwareVersion+0xb8>)
 8004cd2:	f000 f84d 	bl	8004d70 <PN532_sendCommandCheckAck>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <PN532_getFirmwareVersion+0x30>
    return 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e03c      	b.n	8004d5a <PN532_getFirmwareVersion+0xaa>

//Нужна задержка после выполнения подтверждения готовности!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);

   PN532_readdata(pn532_readbuffer, 13, 0xFF);
 8004ce0:	22ff      	movs	r2, #255	; 0xff
 8004ce2:	210d      	movs	r1, #13
 8004ce4:	4821      	ldr	r0, [pc, #132]	; (8004d6c <PN532_getFirmwareVersion+0xbc>)
 8004ce6:	f000 f94b 	bl	8004f80 <PN532_readdata>
	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	    }
*/
   //сравнение полученных первых шести байт с массивом правильных данных
   //если сдержимое не одинаковое, от выход с ошибкой;
	if (0 != memcmp((char *)pn532_readbuffer, (char *)pn532response_firmwarevers, 6))
 8004cea:	463b      	mov	r3, r7
 8004cec:	2206      	movs	r2, #6
 8004cee:	4619      	mov	r1, r3
 8004cf0:	481e      	ldr	r0, [pc, #120]	; (8004d6c <PN532_getFirmwareVersion+0xbc>)
 8004cf2:	f002 ff15 	bl	8007b20 <memcmp>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <PN532_getFirmwareVersion+0x50>
	   { return 0; }
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e02c      	b.n	8004d5a <PN532_getFirmwareVersion+0xaa>

  int offset = 7;
 8004d00:	2307      	movs	r3, #7
 8004d02:	60fb      	str	r3, [r7, #12]

  response = pn532_readbuffer[offset++];
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	60fa      	str	r2, [r7, #12]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <PN532_getFirmwareVersion+0xbc>)
 8004d0c:	5cd3      	ldrb	r3, [r2, r3]
 8004d0e:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	60fa      	str	r2, [r7, #12]
 8004d1c:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <PN532_getFirmwareVersion+0xbc>)
 8004d1e:	5cd3      	ldrb	r3, [r2, r3]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	60fa      	str	r2, [r7, #12]
 8004d34:	4a0d      	ldr	r2, [pc, #52]	; (8004d6c <PN532_getFirmwareVersion+0xbc>)
 8004d36:	5cd3      	ldrb	r3, [r2, r3]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	60fa      	str	r2, [r7, #12]
 8004d4c:	4a07      	ldr	r2, [pc, #28]	; (8004d6c <PN532_getFirmwareVersion+0xbc>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]

  return response;
 8004d58:	68bb      	ldr	r3, [r7, #8]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	08008e84 	.word	0x08008e84
 8004d68:	20000cd0 	.word	0x20000cd0
 8004d6c:	20000d10 	.word	0x20000d10

08004d70 <PN532_sendCommandCheckAck>:
     @returns  1 if everything is OK, 0 if timeout occured before an
               ACK was recieved
 */
 /**************************************************************************/

 bool PN532_sendCommandCheckAck(uint8_t *cmd, uint8_t cmdlen, uint16_t timeout) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	803b      	strh	r3, [r7, #0]

	 PN532_writecommand(cmd, cmdlen);
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f81b 	bl	8004dc0 <PN532_writecommand>

#endif
//------------------------------------------------------------------------------
*/
//Ожидание и чтение байта готовности (0x01)
   if (!PN532_waitready(timeout)) {
 8004d8a:	883b      	ldrh	r3, [r7, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fa91 	bl	80052b4 <PN532_waitready>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <PN532_sendCommandCheckAck+0x2c>
	  return FALSE; }
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e00d      	b.n	8004db8 <PN532_sendCommandCheckAck+0x48>

//Нужна задержка после выполнения подтверждения готовности!!!!!
   PN532_Delay(100);
 8004d9c:	2064      	movs	r0, #100	; 0x64
 8004d9e:	f7ff fea7 	bl	8004af0 <PN532_Delay>
  	}
  #endif
//------------------------------------------------------------------------------
*/
// чтение подтверждения
  if (!PN532_readack()) {  return FALSE;  }
 8004da2:	f000 f95f 	bl	8005064 <PN532_readack>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <PN532_sendCommandCheckAck+0x40>
 8004dac:	2300      	movs	r3, #0
 8004dae:	e003      	b.n	8004db8 <PN532_sendCommandCheckAck+0x48>

   // For SPI only wait for the chip to be ready again.
   // This is unnecessary with I2C.
  PN532_Delay(100);
 8004db0:	2064      	movs	r0, #100	; 0x64
 8004db2:	f7ff fe9d 	bl	8004af0 <PN532_Delay>

//Delay(2);
 //  if (!PN532_waitready(timeout)) {  return FALSE;}
//Delay(1);

   return TRUE; // ack'd command
 8004db6:	2301      	movs	r3, #1

 }
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <PN532_writecommand>:

     @param  cmd       Pointer to the command buffer
     @param  cmdlen    Command length in bytes
 */
 /**************************************************************************/
 void PN532_writecommand(uint8_t *cmd, uint8_t cmdlen) {
 8004dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dc4:	b089      	sub	sp, #36	; 0x24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	70fb      	strb	r3, [r7, #3]
 8004dce:	466b      	mov	r3, sp
 8004dd0:	461e      	mov	r6, r3

     uint8_t checksum;
     uint8_t packet[8 + cmdlen];
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f103 0108 	add.w	r1, r3, #8
 8004dd8:	1e4b      	subs	r3, r1, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	460a      	mov	r2, r1
 8004dde:	2300      	movs	r3, #0
 8004de0:	4690      	mov	r8, r2
 8004de2:	4699      	mov	r9, r3
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004df4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004df8:	460a      	mov	r2, r1
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	461d      	mov	r5, r3
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	00eb      	lsls	r3, r5, #3
 8004e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e0e:	00e2      	lsls	r2, r4, #3
 8004e10:	460b      	mov	r3, r1
 8004e12:	3307      	adds	r3, #7
 8004e14:	08db      	lsrs	r3, r3, #3
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	ebad 0d03 	sub.w	sp, sp, r3
 8004e1c:	466b      	mov	r3, sp
 8004e1e:	3300      	adds	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
     uint8_t *p = packet;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	61bb      	str	r3, [r7, #24]
     cmdlen++;
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	70fb      	strb	r3, [r7, #3]

     p[0] = PN532_SPI_DATAWRITE;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
     p++;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	3301      	adds	r3, #1
 8004e36:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_PREAMBLE;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
     p++;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE1;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
     p++;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE2;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	701a      	strb	r2, [r3, #0]
     p++;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61bb      	str	r3, [r7, #24]
     checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
 8004e5c:	23ff      	movs	r3, #255	; 0xff
 8004e5e:	75fb      	strb	r3, [r7, #23]

     p[0] = cmdlen;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	701a      	strb	r2, [r3, #0]
     p++;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	61bb      	str	r3, [r7, #24]
     p[0] = ~cmdlen + 1;
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	425b      	negs	r3, r3
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	701a      	strb	r2, [r3, #0]
     p++;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_HOSTTOPN532;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	22d4      	movs	r2, #212	; 0xd4
 8004e80:	701a      	strb	r2, [r3, #0]
     p++;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61bb      	str	r3, [r7, #24]
     checksum += PN532_HOSTTOPN532;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	3b2c      	subs	r3, #44	; 0x2c
 8004e8c:	75fb      	strb	r3, [r7, #23]

     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 8004e8e:	2300      	movs	r3, #0
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e012      	b.n	8004eba <PN532_writecommand+0xfa>
       p[0] = cmd[i];
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	701a      	strb	r2, [r3, #0]
       p++;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
       checksum += cmd[i];
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	781a      	ldrb	r2, [r3, #0]
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	75fb      	strb	r3, [r7, #23]
     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 8004eb4:	7ffb      	ldrb	r3, [r7, #31]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	7ffa      	ldrb	r2, [r7, #31]
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	dbe7      	blt.n	8004e94 <PN532_writecommand+0xd4>
     }

     p[0] = ~checksum;
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	701a      	strb	r2, [r3, #0]
     p++;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_POSTAMBLE;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
     p++;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61bb      	str	r3, [r7, #24]
//		USART_SendData(USART2_NUM,0x0D);
//		while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
#endif
//-----------------------------------------------------------------------------

     PN532_write( packet, 8 + cmdlen);
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f806 	bl	8004ef8 <PN532_write>
 8004eec:	46b5      	mov	sp, r6

 }
 8004eee:	bf00      	nop
 8004ef0:	3724      	adds	r7, #36	; 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004ef8 <PN532_write>:
/******************************************************************************/
 void PN532_write( uint8_t *buffer, size_t len) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу
    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8004f02:	bf00      	nop
 8004f04:	2102      	movs	r1, #2
 8004f06:	481c      	ldr	r0, [pc, #112]	; (8004f78 <PN532_write+0x80>)
 8004f08:	f002 f88c 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f8      	beq.n	8004f04 <PN532_write+0xc>

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8004f12:	2200      	movs	r2, #0
 8004f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f18:	4818      	ldr	r0, [pc, #96]	; (8004f7c <PN532_write+0x84>)
 8004f1a:	f001 fc8e 	bl	800683a <GPIO_WriteBit>

	  //PN532_Delay(100);
	  Delay(2);
 8004f1e:	2002      	movs	r0, #2
 8004f20:	f7ff f9cc 	bl	80042bc <Delay>
	for (size_t i = 0; i < len; i++) {
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e017      	b.n	8004f5a <PN532_write+0x62>

		SPI_I2S_SendData(SPI2,buffer[i]);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	4619      	mov	r1, r3
 8004f36:	4810      	ldr	r0, [pc, #64]	; (8004f78 <PN532_write+0x80>)
 8004f38:	f002 f81c 	bl	8006f74 <SPI_I2S_SendData>

	    PN532_Delay(400);
 8004f3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004f40:	f7ff fdd6 	bl	8004af0 <PN532_Delay>

	    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET){};  // ждём пока данные уйдут
 8004f44:	bf00      	nop
 8004f46:	2102      	movs	r1, #2
 8004f48:	480b      	ldr	r0, [pc, #44]	; (8004f78 <PN532_write+0x80>)
 8004f4a:	f002 f86b 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f8      	beq.n	8004f46 <PN532_write+0x4e>
	for (size_t i = 0; i < len; i++) {
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d3e3      	bcc.n	8004f2a <PN532_write+0x32>

     }

//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004f62:	2201      	movs	r2, #1
 8004f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f68:	4804      	ldr	r0, [pc, #16]	; (8004f7c <PN532_write+0x84>)
 8004f6a:	f001 fc66 	bl	800683a <GPIO_WriteBit>


 }
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40003800 	.word	0x40003800
 8004f7c:	40010c00 	.word	0x40010c00

08004f80 <PN532_readdata>:

     @param  rd_buff      Pointer to the buffer where data will be written
     @param  len_rd_buff         Number of bytes to be read
 */
 /**************************************************************************/
 void PN532_readdata(uint8_t *rd_buff, uint8_t len_rd_buff,uint16_t sendvalue) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	803b      	strh	r3, [r7, #0]
      //uint8_t cmd = PN532_SPI_DATAREAD;
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8004f90:	2200      	movs	r2, #0
 8004f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f96:	4831      	ldr	r0, [pc, #196]	; (800505c <PN532_readdata+0xdc>)
 8004f98:	f001 fc4f 	bl	800683a <GPIO_WriteBit>

    // PN532_Delay(100);
     Delay(2);
 8004f9c:	2002      	movs	r0, #2
 8004f9e:	f7ff f98d 	bl	80042bc <Delay>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8004fa2:	bf00      	nop
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	482e      	ldr	r0, [pc, #184]	; (8005060 <PN532_readdata+0xe0>)
 8004fa8:	f002 f83c 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f8      	beq.n	8004fa4 <PN532_readdata+0x24>
	   SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	482a      	ldr	r0, [pc, #168]	; (8005060 <PN532_readdata+0xe0>)
 8004fb6:	f001 ffdd 	bl	8006f74 <SPI_I2S_SendData>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8004fba:	bf00      	nop
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4828      	ldr	r0, [pc, #160]	; (8005060 <PN532_readdata+0xe0>)
 8004fc0:	f002 f830 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f8      	beq.n	8004fbc <PN532_readdata+0x3c>
	   while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8004fca:	bf00      	nop
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4824      	ldr	r0, [pc, #144]	; (8005060 <PN532_readdata+0xe0>)
 8004fd0:	f002 f828 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f8      	beq.n	8004fcc <PN532_readdata+0x4c>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 8004fda:	4821      	ldr	r0, [pc, #132]	; (8005060 <PN532_readdata+0xe0>)
 8004fdc:	f001 ffd8 	bl	8006f90 <SPI_I2S_ReceiveData>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73bb      	strb	r3, [r7, #14]

	   // чтение
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]
 8004fe8:	e029      	b.n	800503e <PN532_readdata+0xbe>
	         PN532_Delay(400);
 8004fea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004fee:	f7ff fd7f 	bl	8004af0 <PN532_Delay>

	    	 SPI_I2S_SendData(SPI2, sendvalue);
 8004ff2:	883b      	ldrh	r3, [r7, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	481a      	ldr	r0, [pc, #104]	; (8005060 <PN532_readdata+0xe0>)
 8004ff8:	f001 ffbc 	bl	8006f74 <SPI_I2S_SendData>

	         PN532_Delay(400);
 8004ffc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005000:	f7ff fd76 	bl	8004af0 <PN532_Delay>

			 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8005004:	bf00      	nop
 8005006:	2102      	movs	r1, #2
 8005008:	4815      	ldr	r0, [pc, #84]	; (8005060 <PN532_readdata+0xe0>)
 800500a:	f002 f80b 	bl	8007024 <SPI_I2S_GetFlagStatus>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f8      	beq.n	8005006 <PN532_readdata+0x86>

	    	 while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появтся
 8005014:	bf00      	nop
 8005016:	2101      	movs	r1, #1
 8005018:	4811      	ldr	r0, [pc, #68]	; (8005060 <PN532_readdata+0xe0>)
 800501a:	f002 f803 	bl	8007024 <SPI_I2S_GetFlagStatus>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f8      	beq.n	8005016 <PN532_readdata+0x96>

	    	 rd_buff[i] =SPI_I2S_ReceiveData(SPI2);
 8005024:	480e      	ldr	r0, [pc, #56]	; (8005060 <PN532_readdata+0xe0>)
 8005026:	f001 ffb3 	bl	8006f90 <SPI_I2S_ReceiveData>
 800502a:	4603      	mov	r3, r0
 800502c:	4619      	mov	r1, r3
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	b2ca      	uxtb	r2, r1
 8005036:	701a      	strb	r2, [r3, #0]
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	3301      	adds	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
 800503e:	7bfa      	ldrb	r2, [r7, #15]
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	429a      	cmp	r2, r3
 8005044:	d3d1      	bcc.n	8004fea <PN532_readdata+0x6a>


//	 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу


	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN, 1);
 8005046:	2201      	movs	r2, #1
 8005048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800504c:	4803      	ldr	r0, [pc, #12]	; (800505c <PN532_readdata+0xdc>)
 800504e:	f001 fbf4 	bl	800683a <GPIO_WriteBit>
	    	USART_SendData(USART2_NUM,rd_buff[i]);
	    }
#endif
//------------------------------------------------------------------------------

}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40010c00 	.word	0x40010c00
 8005060:	40003800 	.word	0x40003800

08005064 <PN532_readack>:
 /**************************************************************************/
 /*!
     @brief  Tries to read the SPI or I2C ACK signal
 */
 /**************************************************************************/
 bool PN532_readack() {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0

	 const uint8_t pn532ack[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00};
 800506a:	4a3f      	ldr	r2, [pc, #252]	; (8005168 <PN532_readack+0x104>)
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005074:	6018      	str	r0, [r3, #0]
 8005076:	3304      	adds	r3, #4
 8005078:	8019      	strh	r1, [r3, #0]
	 uint8_t ackbuff[6];
	 //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 0
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 800507a:	2200      	movs	r2, #0
 800507c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005080:	483a      	ldr	r0, [pc, #232]	; (800516c <PN532_readack+0x108>)
 8005082:	f001 fbda 	bl	800683a <GPIO_WriteBit>

	 //PN532_Delay(100);
	 Delay(2);
 8005086:	2002      	movs	r0, #2
 8005088:	f7ff f918 	bl	80042bc <Delay>
//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800508c:	bf00      	nop
 800508e:	2102      	movs	r1, #2
 8005090:	4837      	ldr	r0, [pc, #220]	; (8005170 <PN532_readack+0x10c>)
 8005092:	f001 ffc7 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f8      	beq.n	800508e <PN532_readack+0x2a>

	  SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 800509c:	2103      	movs	r1, #3
 800509e:	4834      	ldr	r0, [pc, #208]	; (8005170 <PN532_readack+0x10c>)
 80050a0:	f001 ff68 	bl	8006f74 <SPI_I2S_SendData>
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80050a4:	bf00      	nop
 80050a6:	2102      	movs	r1, #2
 80050a8:	4831      	ldr	r0, [pc, #196]	; (8005170 <PN532_readack+0x10c>)
 80050aa:	f001 ffbb 	bl	8007024 <SPI_I2S_GetFlagStatus>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f8      	beq.n	80050a6 <PN532_readack+0x42>

//Читаем данные, чтобы очистить приемный буфер иначе там данные от байта готовности!!????(непонятно!)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80050b4:	bf00      	nop
 80050b6:	2101      	movs	r1, #1
 80050b8:	482d      	ldr	r0, [pc, #180]	; (8005170 <PN532_readack+0x10c>)
 80050ba:	f001 ffb3 	bl	8007024 <SPI_I2S_GetFlagStatus>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f8      	beq.n	80050b6 <PN532_readack+0x52>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 80050c4:	482a      	ldr	r0, [pc, #168]	; (8005170 <PN532_readack+0x10c>)
 80050c6:	f001 ff63 	bl	8006f90 <SPI_I2S_ReceiveData>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73bb      	strb	r3, [r7, #14]

//Читаем 6 байт пакета подтверждения
	  for (uint8_t i = 0; i < 6; i++) {
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
 80050d2:	e02f      	b.n	8005134 <PN532_readack+0xd0>

		  PN532_Delay(100);
 80050d4:	2064      	movs	r0, #100	; 0x64
 80050d6:	f7ff fd0b 	bl	8004af0 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80050da:	bf00      	nop
 80050dc:	2102      	movs	r1, #2
 80050de:	4824      	ldr	r0, [pc, #144]	; (8005170 <PN532_readack+0x10c>)
 80050e0:	f001 ffa0 	bl	8007024 <SPI_I2S_GetFlagStatus>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f8      	beq.n	80050dc <PN532_readack+0x78>
	      SPI_I2S_SendData(SPI2, 0x00);
 80050ea:	2100      	movs	r1, #0
 80050ec:	4820      	ldr	r0, [pc, #128]	; (8005170 <PN532_readack+0x10c>)
 80050ee:	f001 ff41 	bl	8006f74 <SPI_I2S_SendData>

	      PN532_Delay(100);
 80050f2:	2064      	movs	r0, #100	; 0x64
 80050f4:	f7ff fcfc 	bl	8004af0 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80050f8:	bf00      	nop
 80050fa:	2102      	movs	r1, #2
 80050fc:	481c      	ldr	r0, [pc, #112]	; (8005170 <PN532_readack+0x10c>)
 80050fe:	f001 ff91 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f8      	beq.n	80050fa <PN532_readack+0x96>
    	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8005108:	bf00      	nop
 800510a:	2101      	movs	r1, #1
 800510c:	4818      	ldr	r0, [pc, #96]	; (8005170 <PN532_readack+0x10c>)
 800510e:	f001 ff89 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f8      	beq.n	800510a <PN532_readack+0xa6>
	      ackbuff[i] =SPI_I2S_ReceiveData(SPI2);
 8005118:	4815      	ldr	r0, [pc, #84]	; (8005170 <PN532_readack+0x10c>)
 800511a:	f001 ff39 	bl	8006f90 <SPI_I2S_ReceiveData>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	3310      	adds	r3, #16
 8005128:	443b      	add	r3, r7
 800512a:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for (uint8_t i = 0; i < 6; i++) {
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	3301      	adds	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d9cc      	bls.n	80050d4 <PN532_readack+0x70>

	     }

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	    GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800513a:	2201      	movs	r2, #1
 800513c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005140:	480a      	ldr	r0, [pc, #40]	; (800516c <PN532_readack+0x108>)
 8005142:	f001 fb7a 	bl	800683a <GPIO_WriteBit>
//------------------------------------------------------------------------------

//сравнение полученных  шести байт с массивом правильных данных
//если сдержимое не одинаковое, от выход с ошибкой;
//проверка подтверждения (ack)
   return (0 == memcmp((char *)ackbuff, (char *)pn532ack, sizeof(pn532ack)));
 8005146:	f107 0108 	add.w	r1, r7, #8
 800514a:	463b      	mov	r3, r7
 800514c:	2206      	movs	r2, #6
 800514e:	4618      	mov	r0, r3
 8005150:	f002 fce6 	bl	8007b20 <memcmp>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3

}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	08008e8c 	.word	0x08008e8c
 800516c:	40010c00 	.word	0x40010c00
 8005170:	40003800 	.word	0x40003800

08005174 <PN532_isready>:
 /**************************************************************************/
 /*!
     @brief  Return true if the PN532 is ready with a response.
 */
 /**************************************************************************/
 bool PN532_isready() {
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
     uint8_t reply;
// 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 800517a:	bf00      	nop
 800517c:	2102      	movs	r1, #2
 800517e:	4849      	ldr	r0, [pc, #292]	; (80052a4 <PN532_isready+0x130>)
 8005180:	f001 ff50 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f8      	beq.n	800517c <PN532_isready+0x8>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить принимающий регистр (не понятно зачем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 800518a:	bf00      	nop
 800518c:	2101      	movs	r1, #1
 800518e:	4845      	ldr	r0, [pc, #276]	; (80052a4 <PN532_isready+0x130>)
 8005190:	f001 ff48 	bl	8007024 <SPI_I2S_GetFlagStatus>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f8      	beq.n	800518c <PN532_isready+0x18>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 800519a:	4842      	ldr	r0, [pc, #264]	; (80052a4 <PN532_isready+0x130>)
 800519c:	f001 fef8 	bl	8006f90 <SPI_I2S_ReceiveData>
 80051a0:	4603      	mov	r3, r0
 80051a2:	4619      	mov	r1, r3
 80051a4:	4b40      	ldr	r3, [pc, #256]	; (80052a8 <PN532_isready+0x134>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	b2c9      	uxtb	r1, r1
 80051ac:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <PN532_isready+0x138>)
 80051ae:	5499      	strb	r1, [r3, r2]
	  rl++;
 80051b0:	4b3d      	ldr	r3, [pc, #244]	; (80052a8 <PN532_isready+0x134>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <PN532_isready+0x134>)
 80051ba:	701a      	strb	r2, [r3, #0]
//NSS устанавливаем в 0
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 80051bc:	2200      	movs	r2, #0
 80051be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051c2:	483b      	ldr	r0, [pc, #236]	; (80052b0 <PN532_isready+0x13c>)
 80051c4:	f001 fb39 	bl	800683a <GPIO_WriteBit>

	    //PN532_Delay(100);
	    Delay(2);
 80051c8:	2002      	movs	r0, #2
 80051ca:	f7ff f877 	bl	80042bc <Delay>
	  SPI_I2S_SendData(SPI2, PN532_SPI_STATREAD);//посылка команды чтения байта состояния
 80051ce:	2102      	movs	r1, #2
 80051d0:	4834      	ldr	r0, [pc, #208]	; (80052a4 <PN532_isready+0x130>)
 80051d2:	f001 fecf 	bl	8006f74 <SPI_I2S_SendData>

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80051d6:	bf00      	nop
 80051d8:	2102      	movs	r1, #2
 80051da:	4832      	ldr	r0, [pc, #200]	; (80052a4 <PN532_isready+0x130>)
 80051dc:	f001 ff22 	bl	8007024 <SPI_I2S_GetFlagStatus>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f8      	beq.n	80051d8 <PN532_isready+0x64>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить примнающий регистр (не понятно зачем)
//Получается, что нужно прочитать 2 раза приемный буфер, что бы потом получить корретные данные
//при посылке байта и чтении данных после его передачи (странно!!! установленно опытным путем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80051e6:	bf00      	nop
 80051e8:	2101      	movs	r1, #1
 80051ea:	482e      	ldr	r0, [pc, #184]	; (80052a4 <PN532_isready+0x130>)
 80051ec:	f001 ff1a 	bl	8007024 <SPI_I2S_GetFlagStatus>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f8      	beq.n	80051e8 <PN532_isready+0x74>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 80051f6:	482b      	ldr	r0, [pc, #172]	; (80052a4 <PN532_isready+0x130>)
 80051f8:	f001 feca 	bl	8006f90 <SPI_I2S_ReceiveData>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4619      	mov	r1, r3
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <PN532_isready+0x134>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	b2c9      	uxtb	r1, r1
 8005208:	4b28      	ldr	r3, [pc, #160]	; (80052ac <PN532_isready+0x138>)
 800520a:	5499      	strb	r1, [r3, r2]
	  rl++;
 800520c:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <PN532_isready+0x134>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	b2da      	uxtb	r2, r3
 8005214:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <PN532_isready+0x134>)
 8005216:	701a      	strb	r2, [r3, #0]

	     PN532_Delay(400);
 8005218:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800521c:	f7ff fc68 	bl	8004af0 <PN532_Delay>

      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8005220:	bf00      	nop
 8005222:	2102      	movs	r1, #2
 8005224:	481f      	ldr	r0, [pc, #124]	; (80052a4 <PN532_isready+0x130>)
 8005226:	f001 fefd 	bl	8007024 <SPI_I2S_GetFlagStatus>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f8      	beq.n	8005222 <PN532_isready+0xae>

	  SPI_I2S_SendData(SPI2, 0XFF);//посылка "пустышки", чтобы забрать байт состояния
 8005230:	21ff      	movs	r1, #255	; 0xff
 8005232:	481c      	ldr	r0, [pc, #112]	; (80052a4 <PN532_isready+0x130>)
 8005234:	f001 fe9e 	bl	8006f74 <SPI_I2S_SendData>

	     PN532_Delay(400);
 8005238:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800523c:	f7ff fc58 	bl	8004af0 <PN532_Delay>

   	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8005240:	bf00      	nop
 8005242:	2102      	movs	r1, #2
 8005244:	4817      	ldr	r0, [pc, #92]	; (80052a4 <PN532_isready+0x130>)
 8005246:	f001 feed 	bl	8007024 <SPI_I2S_GetFlagStatus>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f8      	beq.n	8005242 <PN532_isready+0xce>

	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {};  // ждём пока данные появятся
 8005250:	bf00      	nop
 8005252:	2101      	movs	r1, #1
 8005254:	4813      	ldr	r0, [pc, #76]	; (80052a4 <PN532_isready+0x130>)
 8005256:	f001 fee5 	bl	8007024 <SPI_I2S_GetFlagStatus>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f8      	beq.n	8005252 <PN532_isready+0xde>

	  reply = SPI_I2S_ReceiveData(SPI2);
 8005260:	4810      	ldr	r0, [pc, #64]	; (80052a4 <PN532_isready+0x130>)
 8005262:	f001 fe95 	bl	8006f90 <SPI_I2S_ReceiveData>
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 1
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800526a:	2201      	movs	r2, #1
 800526c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005270:	480f      	ldr	r0, [pc, #60]	; (80052b0 <PN532_isready+0x13c>)
 8005272:	f001 fae2 	bl	800683a <GPIO_WriteBit>

	   replybuff[rl]=reply;
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <PN532_isready+0x134>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <PN532_isready+0x138>)
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	5453      	strb	r3, [r2, r1]
       rl++;
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <PN532_isready+0x134>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	b2da      	uxtb	r2, r3
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <PN532_isready+0x134>)
 800528c:	701a      	strb	r2, [r3, #0]

       //USART_SendData(USART2_NUM,reply);

// Проверка ответа с байтом готовности (0x01);
     return reply == PN532_SPI_READY;
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	2b01      	cmp	r3, #1
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3


 }
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40003800 	.word	0x40003800
 80052a8:	20000ccc 	.word	0x20000ccc
 80052ac:	20000cb8 	.word	0x20000cb8
 80052b0:	40010c00 	.word	0x40010c00

080052b4 <PN532_waitready>:
     @brief  Waits until the PN532 is ready.

     @param  timeout   Timeout before giving up
 */
 /**************************************************************************/
 bool PN532_waitready(uint16_t timeout) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	80fb      	strh	r3, [r7, #6]
   uint16_t timer = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	81fb      	strh	r3, [r7, #14]

   Delay(5);
 80052c2:	2005      	movs	r0, #5
 80052c4:	f7fe fffa 	bl	80042bc <Delay>
   timer += 5;
 80052c8:	89fb      	ldrh	r3, [r7, #14]
 80052ca:	3305      	adds	r3, #5
 80052cc:	81fb      	strh	r3, [r7, #14]
   //USART_SendData(USART2_NUM,0xFF);

   while (!PN532_isready()) {
 80052ce:	e00e      	b.n	80052ee <PN532_waitready+0x3a>
     if (timeout != 0) {
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <PN532_waitready+0x34>
       timer += 5;
 80052d6:	89fb      	ldrh	r3, [r7, #14]
 80052d8:	3305      	adds	r3, #5
 80052da:	81fb      	strh	r3, [r7, #14]
       if (timer > timeout) {
 80052dc:	89fa      	ldrh	r2, [r7, #14]
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d901      	bls.n	80052e8 <PN532_waitready+0x34>
         return FALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e008      	b.n	80052fa <PN532_waitready+0x46>
       }
     }
     Delay(5);
 80052e8:	2005      	movs	r0, #5
 80052ea:	f7fe ffe7 	bl	80042bc <Delay>
   while (!PN532_isready()) {
 80052ee:	f7ff ff41 	bl	8005174 <PN532_isready>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0eb      	beq.n	80052d0 <PN532_waitready+0x1c>
   }
   return TRUE;
 80052f8:	2301      	movs	r3, #1
 }
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <PN532_mifareclassic_AuthenticateBlock>:
 /**************************************************************************/
 uint8_t PN532_mifareclassic_AuthenticateBlock(uint8_t *uid,
                                                         uint8_t uidLen,
                                                         uint32_t blockNumber,
                                                         uint8_t keyNumber,
                                                         uint8_t *keyData) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	461a      	mov	r2, r3
 8005310:	460b      	mov	r3, r1
 8005312:	72fb      	strb	r3, [r7, #11]
 8005314:	4613      	mov	r3, r2
 8005316:	72bb      	strb	r3, [r7, #10]
   // uint8_t len;
   uint8_t i;

   // Hang on to the key and uid data
   memcpy(_key, keyData, 6);
 8005318:	4b2f      	ldr	r3, [pc, #188]	; (80053d8 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	6810      	ldr	r0, [r2, #0]
 800531e:	6018      	str	r0, [r3, #0]
 8005320:	8892      	ldrh	r2, [r2, #4]
 8005322:	809a      	strh	r2, [r3, #4]
   memcpy(_uid, uid, uidLen);
 8005324:	7afb      	ldrb	r3, [r7, #11]
 8005326:	461a      	mov	r2, r3
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	482c      	ldr	r0, [pc, #176]	; (80053dc <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 800532c:	f002 fc08 	bl	8007b40 <memcpy>
   _uidLen = uidLen;
 8005330:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8005336:	701a      	strb	r2, [r3, #0]
   PN532DEBUGPRINT.print(F(": "));
   Adafruit_PN532::PrintHex(_key, 6);
 #endif
*/
   // Prepare the authentication command //
   pn532_packetbuffer[0] =
 8005338:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800533a:	2240      	movs	r2, #64	; 0x40
 800533c:	701a      	strb	r2, [r3, #0]
       PN532_COMMAND_INDATAEXCHANGE; /* Data Exchange Header */
   pn532_packetbuffer[1] = 1;        /* Max card numbers */
 800533e:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8005340:	2201      	movs	r2, #1
 8005342:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
 8005344:	7abb      	ldrb	r3, [r7, #10]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <PN532_mifareclassic_AuthenticateBlock+0x4a>
 800534a:	2261      	movs	r2, #97	; 0x61
 800534c:	e000      	b.n	8005350 <PN532_mifareclassic_AuthenticateBlock+0x4c>
 800534e:	2260      	movs	r2, #96	; 0x60
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8005352:	709a      	strb	r2, [r3, #2]
   //pn532_packetbuffer[2] = 0x61;
   pn532_packetbuffer[3] =
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800535a:	70da      	strb	r2, [r3, #3]
       blockNumber; /* Block Number (1K = 0..63, 4K = 0..255 */
   memcpy(pn532_packetbuffer + 4, _key, 6);
 800535c:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <PN532_mifareclassic_AuthenticateBlock+0xe4>)
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 8005360:	6810      	ldr	r0, [r2, #0]
 8005362:	6018      	str	r0, [r3, #0]
 8005364:	8892      	ldrh	r2, [r2, #4]
 8005366:	809a      	strh	r2, [r3, #4]
   for (i = 0; i < _uidLen; i++) {
 8005368:	2300      	movs	r3, #0
 800536a:	75fb      	strb	r3, [r7, #23]
 800536c:	e00a      	b.n	8005384 <PN532_mifareclassic_AuthenticateBlock+0x80>
     pn532_packetbuffer[10 + i] = _uid[i]; /* 4 byte card ID */
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 8005372:	56d2      	ldrsb	r2, [r2, r3]
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	330a      	adds	r3, #10
 8005378:	b2d1      	uxtb	r1, r2
 800537a:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800537c:	54d1      	strb	r1, [r2, r3]
   for (i = 0; i < _uidLen; i++) {
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	3301      	adds	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8005388:	f992 2000 	ldrsb.w	r2, [r2]
 800538c:	4293      	cmp	r3, r2
 800538e:	dbee      	blt.n	800536e <PN532_mifareclassic_AuthenticateBlock+0x6a>
  	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
  	    	USART_SendData(USART2_NUM,pn532_packetbuffer[i]);
  	    }
*/

   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 10 + _uidLen,100))
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8005392:	f993 3000 	ldrsb.w	r3, [r3]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	330a      	adds	r3, #10
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2264      	movs	r2, #100	; 0x64
 800539e:	4619      	mov	r1, r3
 80053a0:	4810      	ldr	r0, [pc, #64]	; (80053e4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 80053a2:	f7ff fce5 	bl	8004d70 <PN532_sendCommandCheckAck>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <PN532_mifareclassic_AuthenticateBlock+0xac>
     return 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e00e      	b.n	80053ce <PN532_mifareclassic_AuthenticateBlock+0xca>
   Delay(10);
 80053b0:	200a      	movs	r0, #10
 80053b2:	f7fe ff83 	bl	80042bc <Delay>
   // Read the response packet
   PN532_readdata(pn532_readbuffer, 12,0xFF);
 80053b6:	22ff      	movs	r2, #255	; 0xff
 80053b8:	210c      	movs	r1, #12
 80053ba:	480c      	ldr	r0, [pc, #48]	; (80053ec <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 80053bc:	f7ff fde0 	bl	8004f80 <PN532_readdata>
*/
   // check if the response is valid and we are authenticated???
   // for an auth success it should be bytes 5-7: 0xD5 0x41 0x00
   // Mifare auth error is technically byte 7: 0x14 but anything other and 0x00
   // is not good
   if (pn532_readbuffer[7] != 0x00) {
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 80053c2:	79db      	ldrb	r3, [r3, #7]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <PN532_mifareclassic_AuthenticateBlock+0xc8>
	   for (uint8_t i = 0; i < 12; i++) {
	 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
	 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	 	    }
 #endif
     return 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <PN532_mifareclassic_AuthenticateBlock+0xca>
   }

   return 1;
 80053cc:	2301      	movs	r3, #1
 }
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000d58 	.word	0x20000d58
 80053dc:	20000d50 	.word	0x20000d50
 80053e0:	20000d57 	.word	0x20000d57
 80053e4:	20000cd0 	.word	0x20000cd0
 80053e8:	20000cd4 	.word	0x20000cd4
 80053ec:	20000d10 	.word	0x20000d10

080053f0 <PN532_mifareclassic_ReadDataBlock>:
                           retrieved data (if any)
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_ReadDataBlock(uint8_t blockNumber,
                                                     uint8_t *data) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	6039      	str	r1, [r7, #0]
 80053fa:	71fb      	strb	r3, [r7, #7]
 //  PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));
   //PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 80053fc:	4b17      	ldr	r3, [pc, #92]	; (800545c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80053fe:	2240      	movs	r2, #64	; 0x40
 8005400:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;               /* Card number */
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8005404:	2201      	movs	r2, #1
 8005406:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_READ; /* Mifare Read command = 0x30 */
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 800540a:	2230      	movs	r2, #48	; 0x30
 800540c:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] = blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
 800540e:	4a13      	ldr	r2, [pc, #76]	; (800545c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	70d3      	strb	r3, [r2, #3]

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,100)) {
 8005414:	2264      	movs	r2, #100	; 0x64
 8005416:	2104      	movs	r1, #4
 8005418:	4810      	ldr	r0, [pc, #64]	; (800545c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 800541a:	f7ff fca9 	bl	8004d70 <PN532_sendCommandCheckAck>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <PN532_mifareclassic_ReadDataBlock+0x38>
 #ifdef MIFAREDEBUG
   //  PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
 #endif
     return 0;
 8005424:	2300      	movs	r3, #0
 8005426:	e014      	b.n	8005452 <PN532_mifareclassic_ReadDataBlock+0x62>
   }
Delay(10);
 8005428:	200a      	movs	r0, #10
 800542a:	f7fe ff47 	bl	80042bc <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 800542e:	22ff      	movs	r2, #255	; 0xff
 8005430:	211a      	movs	r1, #26
 8005432:	480b      	ldr	r0, [pc, #44]	; (8005460 <PN532_mifareclassic_ReadDataBlock+0x70>)
 8005434:	f7ff fda4 	bl	8004f80 <PN532_readdata>

   /* If byte 8 isn't 0x00 we probably have an error */
   if (pn532_readbuffer[7] != 0x00) {
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <PN532_mifareclassic_ReadDataBlock+0x70>)
 800543a:	79db      	ldrb	r3, [r3, #7]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <PN532_mifareclassic_ReadDataBlock+0x54>
 #ifdef MIFAREDEBUG
  //   PN532DEBUGPRINT.println(F("Unexpected response"));
    // Adafruit_PN532::PrintHexChar(pn532_packetbuffer, 26);
 #endif
     return 0;
 8005440:	2300      	movs	r3, #0
 8005442:	e006      	b.n	8005452 <PN532_mifareclassic_ReadDataBlock+0x62>
   }

   /* Copy the 16 data bytes to the output buffer        */
   /* Block content starts at byte 9 of a valid response */
   memcpy(data, pn532_readbuffer + 8, 16);
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <PN532_mifareclassic_ReadDataBlock+0x74>)
 8005446:	2210      	movs	r2, #16
 8005448:	4619      	mov	r1, r3
 800544a:	6838      	ldr	r0, [r7, #0]
 800544c:	f002 fb78 	bl	8007b40 <memcpy>
  // PN532DEBUGPRINT.print(F("Block "));
  // PN532DEBUGPRINT.println(blockNumber);
  // Adafruit_PN532::PrintHexChar(data, 16);
 #endif

   return 1;
 8005450:	2301      	movs	r3, #1
 }
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000cd0 	.word	0x20000cd0
 8005460:	20000d10 	.word	0x20000d10
 8005464:	20000d18 	.word	0x20000d18

08005468 <PN532_mifareclassic_WriteDataBlock>:
     @param  data          The byte array that contains the data to write.
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_WriteDataBlock(uint8_t blockNumber,
                                                      uint8_t *data) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	6039      	str	r1, [r7, #0]
 8005472:	71fb      	strb	r3, [r7, #7]
  // PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));
  // PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the first command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;                /* Card number */
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <PN532_mifareclassic_WriteDataBlock+0x64>)
 800547c:	2201      	movs	r2, #1
 800547e:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_WRITE; /* Mifare Write command = 0xA0 */
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8005482:	22a0      	movs	r2, #160	; 0xa0
 8005484:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] =
 8005486:	4a11      	ldr	r2, [pc, #68]	; (80054cc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	70d3      	strb	r3, [r2, #3]
       blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
   memcpy(pn532_packetbuffer + 4, data, 16); /* Data Payload */
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <PN532_mifareclassic_WriteDataBlock+0x68>)
 800548e:	2210      	movs	r2, #16
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f002 fb54 	bl	8007b40 <memcpy>

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 20,100)) {
 8005498:	2264      	movs	r2, #100	; 0x64
 800549a:	2114      	movs	r1, #20
 800549c:	480b      	ldr	r0, [pc, #44]	; (80054cc <PN532_mifareclassic_WriteDataBlock+0x64>)
 800549e:	f7ff fc67 	bl	8004d70 <PN532_sendCommandCheckAck>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <PN532_mifareclassic_WriteDataBlock+0x44>
 #ifdef MIFAREDEBUG
 //    PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
 #endif
     return 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e00b      	b.n	80054c4 <PN532_mifareclassic_WriteDataBlock+0x5c>
   }
   Delay(10);
 80054ac:	200a      	movs	r0, #10
 80054ae:	f7fe ff05 	bl	80042bc <Delay>
   Delay(10);
 80054b2:	200a      	movs	r0, #10
 80054b4:	f7fe ff02 	bl	80042bc <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 80054b8:	22ff      	movs	r2, #255	; 0xff
 80054ba:	211a      	movs	r1, #26
 80054bc:	4805      	ldr	r0, [pc, #20]	; (80054d4 <PN532_mifareclassic_WriteDataBlock+0x6c>)
 80054be:	f7ff fd5f 	bl	8004f80 <PN532_readdata>
   for (uint8_t i = 0; i < 26; i++) {
 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
 	    }
*/
   return 1;
 80054c2:	2301      	movs	r3, #1
 }
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000cd0 	.word	0x20000cd0
 80054d0:	20000cd4 	.word	0x20000cd4
 80054d4:	20000d10 	.word	0x20000d10

080054d8 <PN532_Read_Data>:

 /**************************************************************************/
 uint8_t PN532_Read_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data)
 {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08e      	sub	sp, #56	; 0x38
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	72fb      	strb	r3, [r7, #11]
 80054e6:	4613      	mov	r3, r2
 80054e8:	72bb      	strb	r3, [r7, #10]
 	uint8_t success=0;	// Flag to check if there was an error with the PN532
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 80054f0:	4a20      	ldr	r2, [pc, #128]	; (8005574 <PN532_Read_Data+0x9c>)
 80054f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054fa:	6018      	str	r0, [r3, #0]
 80054fc:	3304      	adds	r3, #4
 80054fe:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

 	bool authenticated = FALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 	uint8_t blockBuffer[16];                  // Buffer to store block contents
 	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 8005506:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <PN532_Read_Data+0xa0>)
 8005508:	f107 0310 	add.w	r3, r7, #16
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	4611      	mov	r1, r2
 8005510:	8019      	strh	r1, [r3, #0]
 8005512:	3302      	adds	r3, #2
 8005514:	0c12      	lsrs	r2, r2, #16
 8005516:	701a      	strb	r2, [r3, #0]
 static char s_pc_PN532_err1[]="Authentication failed for sector";
 static char s_pc_PN532_err4[]="Unable to read data block";


 //success = PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB);
 	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8005518:	7af9      	ldrb	r1, [r7, #11]
 800551a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2301      	movs	r3, #1
 8005522:	2200      	movs	r2, #0
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff feed 	bl	8005304 <PN532_mifareclassic_AuthenticateBlock>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <PN532_Read_Data+0x64>
 	        {
 	          return res_excep=1;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005536:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800553a:	e016      	b.n	800556a <PN532_Read_Data+0x92>
 	        }

 	       if(!(res_excep=PN532_mifareclassic_ReadDataBlock(blockNumber, data)))
 800553c:	7abb      	ldrb	r3, [r7, #10]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ff55 	bl	80053f0 <PN532_mifareclassic_ReadDataBlock>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800554c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <PN532_Read_Data+0x88>
 	       {
 	          return res_excep=2;
 8005554:	2302      	movs	r3, #2
 8005556:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800555a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800555e:	e004      	b.n	800556a <PN532_Read_Data+0x92>
 	       }else return res_excep=0;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005566:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 }
 800556a:	4618      	mov	r0, r3
 800556c:	3730      	adds	r7, #48	; 0x30
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	08008ec8 	.word	0x08008ec8
 8005578:	08008ed0 	.word	0x08008ed0

0800557c <RTC_INIT>:
#include "rtc.h"



void RTC_INIT(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
	if((RCC->BDCR & RCC_BDCR_RTCEN) != RCC_BDCR_RTCEN){		// проверка работы часов, если не включены, то инициализировать
 8005580:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <RTC_INIT+0xf4>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558c:	d06c      	beq.n	8005668 <RTC_INIT+0xec>
		RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 800558e:	4b38      	ldr	r3, [pc, #224]	; (8005670 <RTC_INIT+0xf4>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	4a37      	ldr	r2, [pc, #220]	; (8005670 <RTC_INIT+0xf4>)
 8005594:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8005598:	61d3      	str	r3, [r2, #28]
		PWR->CR |= PWR_CR_DBP;		// разрешение доступа к Backup области
 800559a:	4b36      	ldr	r3, [pc, #216]	; (8005674 <RTC_INIT+0xf8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a35      	ldr	r2, [pc, #212]	; (8005674 <RTC_INIT+0xf8>)
 80055a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a4:	6013      	str	r3, [r2, #0]
		RCC->BDCR |= RCC_BDCR_BDRST;	// сброс Backup области
 80055a6:	4b32      	ldr	r3, [pc, #200]	; (8005670 <RTC_INIT+0xf4>)
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	4a31      	ldr	r2, [pc, #196]	; (8005670 <RTC_INIT+0xf4>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b0:	6213      	str	r3, [r2, #32]
		RCC->BDCR &= ~RCC_BDCR_BDRST;
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <RTC_INIT+0xf4>)
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	4a2e      	ldr	r2, [pc, #184]	; (8005670 <RTC_INIT+0xf4>)
 80055b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055bc:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_LSE;	// выбор LSE источника (кварц 32768) и подача тактирования
 80055be:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <RTC_INIT+0xf4>)
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	4a2b      	ldr	r2, [pc, #172]	; (8005670 <RTC_INIT+0xf4>)
 80055c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80055c8:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_LSEON;
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <RTC_INIT+0xf4>)
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	4a28      	ldr	r2, [pc, #160]	; (8005670 <RTC_INIT+0xf4>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	6213      	str	r3, [r2, #32]
		while((RCC->BDCR&RCC_BDCR_LSEON) != RCC_BDCR_LSEON){}	// ожидание включения
 80055d6:	bf00      	nop
 80055d8:	4b25      	ldr	r3, [pc, #148]	; (8005670 <RTC_INIT+0xf4>)
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d1f9      	bne.n	80055d8 <RTC_INIT+0x5c>
		BKP->RTCCR |= 3;	// калибровка RTC
 80055e4:	4b24      	ldr	r3, [pc, #144]	; (8005678 <RTC_INIT+0xfc>)
 80055e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4a23      	ldr	r2, [pc, #140]	; (8005678 <RTC_INIT+0xfc>)
 80055ec:	f043 0303 	orr.w	r3, r3, #3
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8593      	strh	r3, [r2, #44]	; 0x2c
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// проверка на конец изменений регистров RTC
 80055f4:	bf00      	nop
 80055f6:	4b21      	ldr	r3, [pc, #132]	; (800567c <RTC_INIT+0x100>)
 80055f8:	889b      	ldrh	r3, [r3, #4]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f8      	beq.n	80055f6 <RTC_INIT+0x7a>
		RTC->CRL |= RTC_CRL_CNF;		// разрешение записи в регистры RTC
 8005604:	4b1d      	ldr	r3, [pc, #116]	; (800567c <RTC_INIT+0x100>)
 8005606:	889b      	ldrh	r3, [r3, #4]
 8005608:	b29b      	uxth	r3, r3
 800560a:	4a1c      	ldr	r2, [pc, #112]	; (800567c <RTC_INIT+0x100>)
 800560c:	f043 0310 	orr.w	r3, r3, #16
 8005610:	b29b      	uxth	r3, r3
 8005612:	8093      	strh	r3, [r2, #4]
		RTC->PRLL = 0x7FFF;		// настройка делителя на 32768
 8005614:	4b19      	ldr	r3, [pc, #100]	; (800567c <RTC_INIT+0x100>)
 8005616:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800561a:	819a      	strh	r2, [r3, #12]
		RTC->CRL &= ~RTC_CRL_CNF;	// запрет записи в регистры RTC
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <RTC_INIT+0x100>)
 800561e:	889b      	ldrh	r3, [r3, #4]
 8005620:	b29b      	uxth	r3, r3
 8005622:	4a16      	ldr	r2, [pc, #88]	; (800567c <RTC_INIT+0x100>)
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	b29b      	uxth	r3, r3
 800562a:	8093      	strh	r3, [r2, #4]
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// ожидание конца записи
 800562c:	bf00      	nop
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <RTC_INIT+0x100>)
 8005630:	889b      	ldrh	r3, [r3, #4]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f8      	beq.n	800562e <RTC_INIT+0xb2>
		RTC->CRL &= (uint16_t)~RTC_CRL_CNF;		//синхронизация RTC
 800563c:	4b0f      	ldr	r3, [pc, #60]	; (800567c <RTC_INIT+0x100>)
 800563e:	889b      	ldrh	r3, [r3, #4]
 8005640:	b29b      	uxth	r3, r3
 8005642:	4a0e      	ldr	r2, [pc, #56]	; (800567c <RTC_INIT+0x100>)
 8005644:	f023 0310 	bic.w	r3, r3, #16
 8005648:	b29b      	uxth	r3, r3
 800564a:	8093      	strh	r3, [r2, #4]
		while((RTC->CRL&RTC_CRL_RSF) != RTC_CRL_RSF){}	// ожидание синхронизации
 800564c:	bf00      	nop
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <RTC_INIT+0x100>)
 8005650:	889b      	ldrh	r3, [r3, #4]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d1f8      	bne.n	800564e <RTC_INIT+0xd2>
		PWR->CR &= ~(PWR_CR_DBP);	// запрет доступа к Backup области
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <RTC_INIT+0xf8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a04      	ldr	r2, [pc, #16]	; (8005674 <RTC_INIT+0xf8>)
 8005662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005666:	6013      	str	r3, [r2, #0]

	}
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
 8005678:	40006c00 	.word	0x40006c00
 800567c:	40002800 	.word	0x40002800

08005680 <RTC_GET_COUNTER>:


uint32_t RTC_GET_COUNTER(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
	return (uint32_t)((RTC->CNTH << 16) | RTC->CNTL);	// получение значения счетчика
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <RTC_GET_COUNTER+0x1c>)
 8005686:	8b1b      	ldrh	r3, [r3, #24]
 8005688:	b29b      	uxth	r3, r3
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	4a03      	ldr	r2, [pc, #12]	; (800569c <RTC_GET_COUNTER+0x1c>)
 800568e:	8b92      	ldrh	r2, [r2, #28]
 8005690:	b292      	uxth	r2, r2
 8005692:	4313      	orrs	r3, r2
}
 8005694:	4618      	mov	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr
 800569c:	40002800 	.word	0x40002800

080056a0 <RTC_SET_COUNTER>:

void RTC_SET_COUNTER(uint32_t count)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 80056a8:	4b1f      	ldr	r3, [pc, #124]	; (8005728 <RTC_SET_COUNTER+0x88>)
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <RTC_SET_COUNTER+0x88>)
 80056ae:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 80056b2:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;	// разрешение доступа к Backup области
 80056b4:	4b1d      	ldr	r3, [pc, #116]	; (800572c <RTC_SET_COUNTER+0x8c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <RTC_SET_COUNTER+0x8c>)
 80056ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056be:	6013      	str	r3, [r2, #0]
	while(!(RTC->CRL & RTC_CRL_RTOFF)); // проверка конца изменения регистров RTC
 80056c0:	bf00      	nop
 80056c2:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <RTC_SET_COUNTER+0x90>)
 80056c4:	889b      	ldrh	r3, [r3, #4]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f8      	beq.n	80056c2 <RTC_SET_COUNTER+0x22>
	RTC->CRL |= RTC_CRL_CNF;	// разрешение записи в регистры RTC
 80056d0:	4b17      	ldr	r3, [pc, #92]	; (8005730 <RTC_SET_COUNTER+0x90>)
 80056d2:	889b      	ldrh	r3, [r3, #4]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <RTC_SET_COUNTER+0x90>)
 80056d8:	f043 0310 	orr.w	r3, r3, #16
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8093      	strh	r3, [r2, #4]
	RTC->CNTH = count >> 16;	// запись нового значения счетного регистра
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0c1a      	lsrs	r2, r3, #16
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <RTC_SET_COUNTER+0x90>)
 80056e6:	b292      	uxth	r2, r2
 80056e8:	831a      	strh	r2, [r3, #24]
	RTC->CNTL = count;
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <RTC_SET_COUNTER+0x90>)
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	b292      	uxth	r2, r2
 80056f0:	839a      	strh	r2, [r3, #28]
	RTC->CRL &= ~RTC_CRL_CNF;		// запрет записи в регистры RTC
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <RTC_SET_COUNTER+0x90>)
 80056f4:	889b      	ldrh	r3, [r3, #4]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <RTC_SET_COUNTER+0x90>)
 80056fa:	f023 0310 	bic.w	r3, r3, #16
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8093      	strh	r3, [r2, #4]
	while(!(RTC->CRL & RTC_CRL_RTOFF));	// ожидание конца записи
 8005702:	bf00      	nop
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <RTC_SET_COUNTER+0x90>)
 8005706:	889b      	ldrh	r3, [r3, #4]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f8      	beq.n	8005704 <RTC_SET_COUNTER+0x64>
	PWR->CR &= ~PWR_CR_DBP;		// запрет доступа к Backup области
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <RTC_SET_COUNTER+0x8c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a05      	ldr	r2, [pc, #20]	; (800572c <RTC_SET_COUNTER+0x8c>)
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	6013      	str	r3, [r2, #0]

}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr
 8005728:	40021000 	.word	0x40021000
 800572c:	40007000 	.word	0x40007000
 8005730:	40002800 	.word	0x40002800

08005734 <timer_to_cal>:
#include "rtc_time.h"

void timer_to_cal (unsigned long timer, rtc_cal * rtc_time)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	char b;
	char c;
	char d;
	unsigned long time;

	time = timer%SEC_A_DAY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a65      	ldr	r2, [pc, #404]	; (80058d8 <timer_to_cal+0x1a4>)
 8005742:	fba2 1203 	umull	r1, r2, r2, r3
 8005746:	0c12      	lsrs	r2, r2, #16
 8005748:	4964      	ldr	r1, [pc, #400]	; (80058dc <timer_to_cal+0x1a8>)
 800574a:	fb01 f202 	mul.w	r2, r1, r2
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	617b      	str	r3, [r7, #20]
	a = ((timer+43200)/(86400>>1)) + (2440587<<1) + 1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8005758:	33c0      	adds	r3, #192	; 0xc0
 800575a:	4a5f      	ldr	r2, [pc, #380]	; (80058d8 <timer_to_cal+0x1a4>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	0bda      	lsrs	r2, r3, #15
 8005762:	4b5f      	ldr	r3, [pc, #380]	; (80058e0 <timer_to_cal+0x1ac>)
 8005764:	4413      	add	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
	a>>=1;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	613b      	str	r3, [r7, #16]
	rtc_time->wday = a%7;
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4b5c      	ldr	r3, [pc, #368]	; (80058e4 <timer_to_cal+0x1b0>)
 8005772:	fba3 1302 	umull	r1, r3, r3, r2
 8005776:	1ad1      	subs	r1, r2, r3
 8005778:	0849      	lsrs	r1, r1, #1
 800577a:	440b      	add	r3, r1
 800577c:	0899      	lsrs	r1, r3, #2
 800577e:	460b      	mov	r3, r1
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	1a5b      	subs	r3, r3, r1
 8005784:	1ad1      	subs	r1, r2, r3
 8005786:	b2ca      	uxtb	r2, r1
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	725a      	strb	r2, [r3, #9]
	a+=32044;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8005792:	332c      	adds	r3, #44	; 0x2c
 8005794:	613b      	str	r3, [r7, #16]
	b=(4*a+3)/146097;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	3303      	adds	r3, #3
 800579c:	4a52      	ldr	r2, [pc, #328]	; (80058e8 <timer_to_cal+0x1b4>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	0bdb      	lsrs	r3, r3, #15
 80057a4:	73fb      	strb	r3, [r7, #15]
	a=a-(146097*b)/4;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	4a50      	ldr	r2, [pc, #320]	; (80058ec <timer_to_cal+0x1b8>)
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	da00      	bge.n	80057b4 <timer_to_cal+0x80>
 80057b2:	3303      	adds	r3, #3
 80057b4:	109b      	asrs	r3, r3, #2
 80057b6:	461a      	mov	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
	c=(4*a+3)/1461;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	3303      	adds	r3, #3
 80057c4:	4a4a      	ldr	r2, [pc, #296]	; (80058f0 <timer_to_cal+0x1bc>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	09db      	lsrs	r3, r3, #7
 80057cc:	73bb      	strb	r3, [r7, #14]
	a=a-(1461*c)/4;
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	f240 52b5 	movw	r2, #1461	; 0x5b5
 80057d4:	fb02 f303 	mul.w	r3, r2, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	da00      	bge.n	80057de <timer_to_cal+0xaa>
 80057dc:	3303      	adds	r3, #3
 80057de:	109b      	asrs	r3, r3, #2
 80057e0:	461a      	mov	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
	d=(5*a+2)/153;
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	3302      	adds	r3, #2
 80057f2:	4a40      	ldr	r2, [pc, #256]	; (80058f4 <timer_to_cal+0x1c0>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	09db      	lsrs	r3, r3, #7
 80057fa:	737b      	strb	r3, [r7, #13]
	rtc_time->mday=a-(153*d+2)/5+1;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	b2d9      	uxtb	r1, r3
 8005800:	7b7a      	ldrb	r2, [r7, #13]
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4413      	add	r3, r2
 8005808:	011a      	lsls	r2, r3, #4
 800580a:	4413      	add	r3, r2
 800580c:	3302      	adds	r3, #2
 800580e:	4a3a      	ldr	r2, [pc, #232]	; (80058f8 <timer_to_cal+0x1c4>)
 8005810:	fb82 0203 	smull	r0, r2, r2, r3
 8005814:	1052      	asrs	r2, r2, #1
 8005816:	17db      	asrs	r3, r3, #31
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	1acb      	subs	r3, r1, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	3301      	adds	r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	715a      	strb	r2, [r3, #5]
	rtc_time->mon=d+3-12*(d/10);
 8005828:	7b7b      	ldrb	r3, [r7, #13]
 800582a:	4a34      	ldr	r2, [pc, #208]	; (80058fc <timer_to_cal+0x1c8>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	08db      	lsrs	r3, r3, #3
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	b2da      	uxtb	r2, r3
 800583e:	7b7b      	ldrb	r3, [r7, #13]
 8005840:	4413      	add	r3, r2
 8005842:	b2db      	uxtb	r3, r3
 8005844:	3303      	adds	r3, #3
 8005846:	b2da      	uxtb	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	711a      	strb	r2, [r3, #4]
	rtc_time->year=100*b+c-4800+(d/10);
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2264      	movs	r2, #100	; 0x64
 8005850:	fb03 f202 	mul.w	r2, r3, r2
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	4413      	add	r3, r2
 8005858:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 800585c:	7b7a      	ldrb	r2, [r7, #13]
 800585e:	4927      	ldr	r1, [pc, #156]	; (80058fc <timer_to_cal+0x1c8>)
 8005860:	fba1 1202 	umull	r1, r2, r1, r2
 8005864:	08d2      	lsrs	r2, r2, #3
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	441a      	add	r2, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	601a      	str	r2, [r3, #0]
	rtc_time->hour=time/3600;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <timer_to_cal+0x1cc>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	0adb      	lsrs	r3, r3, #11
 8005878:	b2da      	uxtb	r2, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	719a      	strb	r2, [r3, #6]
	rtc_time->min=(time%3600)/60;
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4b1f      	ldr	r3, [pc, #124]	; (8005900 <timer_to_cal+0x1cc>)
 8005882:	fba3 1302 	umull	r1, r3, r3, r2
 8005886:	0adb      	lsrs	r3, r3, #11
 8005888:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <timer_to_cal+0x1d0>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	b2da      	uxtb	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	71da      	strb	r2, [r3, #7]
	rtc_time->sec=(time%3600)%60;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4a17      	ldr	r2, [pc, #92]	; (8005900 <timer_to_cal+0x1cc>)
 80058a4:	fba2 1203 	umull	r1, r2, r2, r3
 80058a8:	0ad2      	lsrs	r2, r2, #11
 80058aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80058ae:	fb01 f202 	mul.w	r2, r1, r2
 80058b2:	1a9a      	subs	r2, r3, r2
 80058b4:	4b13      	ldr	r3, [pc, #76]	; (8005904 <timer_to_cal+0x1d0>)
 80058b6:	fba3 1302 	umull	r1, r3, r3, r2
 80058ba:	0959      	lsrs	r1, r3, #5
 80058bc:	460b      	mov	r3, r1
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	1a5b      	subs	r3, r3, r1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	1ad1      	subs	r1, r2, r3
 80058c6:	b2ca      	uxtb	r2, r1
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	721a      	strb	r2, [r3, #8]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	c22e4507 	.word	0xc22e4507
 80058dc:	00015180 	.word	0x00015180
 80058e0:	004a7b17 	.word	0x004a7b17
 80058e4:	24924925 	.word	0x24924925
 80058e8:	396b06bd 	.word	0x396b06bd
 80058ec:	00023ab1 	.word	0x00023ab1
 80058f0:	166db073 	.word	0x166db073
 80058f4:	d62b80d7 	.word	0xd62b80d7
 80058f8:	66666667 	.word	0x66666667
 80058fc:	cccccccd 	.word	0xcccccccd
 8005900:	91a2b3c5 	.word	0x91a2b3c5
 8005904:	88888889 	.word	0x88888889

08005908 <cal_to_timer>:

unsigned long cal_to_timer (rtc_cal * rtc_time)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	int y;
	char m;
	unsigned long Uday;
	unsigned long time;

	a=((14-rtc_time->mon)/12);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	791b      	ldrb	r3, [r3, #4]
 8005914:	f1c3 030e 	rsb	r3, r3, #14
 8005918:	4a35      	ldr	r2, [pc, #212]	; (80059f0 <cal_to_timer+0xe8>)
 800591a:	fb82 1203 	smull	r1, r2, r2, r3
 800591e:	1052      	asrs	r2, r2, #1
 8005920:	17db      	asrs	r3, r3, #31
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	77fb      	strb	r3, [r7, #31]
	y=rtc_time->year+4800-a;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
 800592e:	7ffb      	ldrb	r3, [r7, #31]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	61bb      	str	r3, [r7, #24]
	m=rtc_time->mon+(12*a)-3;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	791a      	ldrb	r2, [r3, #4]
 8005938:	7ffb      	ldrb	r3, [r7, #31]
 800593a:	4619      	mov	r1, r3
 800593c:	0049      	lsls	r1, r1, #1
 800593e:	440b      	add	r3, r1
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	b2db      	uxtb	r3, r3
 8005944:	4413      	add	r3, r2
 8005946:	b2db      	uxtb	r3, r3
 8005948:	3b03      	subs	r3, #3
 800594a:	75fb      	strb	r3, [r7, #23]
	Uday=(rtc_time->mday+((153*m+2)/5)+365*y+(y/4)-(y/100)+(y/400)-32045)-2440588;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	795b      	ldrb	r3, [r3, #5]
 8005950:	4619      	mov	r1, r3
 8005952:	7dfa      	ldrb	r2, [r7, #23]
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	011a      	lsls	r2, r3, #4
 800595c:	4413      	add	r3, r2
 800595e:	3302      	adds	r3, #2
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <cal_to_timer+0xec>)
 8005962:	fb82 0203 	smull	r0, r2, r2, r3
 8005966:	1052      	asrs	r2, r2, #1
 8005968:	17db      	asrs	r3, r3, #31
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	18ca      	adds	r2, r1, r3
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f240 116d 	movw	r1, #365	; 0x16d
 8005974:	fb01 f303 	mul.w	r3, r1, r3
 8005978:	441a      	add	r2, r3
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	da00      	bge.n	8005982 <cal_to_timer+0x7a>
 8005980:	3303      	adds	r3, #3
 8005982:	109b      	asrs	r3, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	491b      	ldr	r1, [pc, #108]	; (80059f8 <cal_to_timer+0xf0>)
 800598a:	fb81 0103 	smull	r0, r1, r1, r3
 800598e:	1149      	asrs	r1, r1, #5
 8005990:	17db      	asrs	r3, r3, #31
 8005992:	1a5b      	subs	r3, r3, r1
 8005994:	441a      	add	r2, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	4917      	ldr	r1, [pc, #92]	; (80059f8 <cal_to_timer+0xf0>)
 800599a:	fb81 0103 	smull	r0, r1, r1, r3
 800599e:	11c9      	asrs	r1, r1, #7
 80059a0:	17db      	asrs	r3, r3, #31
 80059a2:	1acb      	subs	r3, r1, r3
 80059a4:	441a      	add	r2, r3
 80059a6:	4b15      	ldr	r3, [pc, #84]	; (80059fc <cal_to_timer+0xf4>)
 80059a8:	4413      	add	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
	time=Uday*86400;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <cal_to_timer+0xf8>)
 80059b0:	fb02 f303 	mul.w	r3, r2, r3
 80059b4:	60fb      	str	r3, [r7, #12]
	time+=rtc_time->sec+rtc_time->min*60+rtc_time->hour*3600;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7a1b      	ldrb	r3, [r3, #8]
 80059ba:	4619      	mov	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	79db      	ldrb	r3, [r3, #7]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4613      	mov	r3, r2
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	18ca      	adds	r2, r1, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	799b      	ldrb	r3, [r3, #6]
 80059d0:	4619      	mov	r1, r3
 80059d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
	return time;
 80059e4:	68fb      	ldr	r3, [r7, #12]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3724      	adds	r7, #36	; 0x24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	2aaaaaab 	.word	0x2aaaaaab
 80059f4:	66666667 	.word	0x66666667
 80059f8:	51eb851f 	.word	0x51eb851f
 80059fc:	ffda4547 	.word	0xffda4547
 8005a00:	00015180 	.word	0x00015180

08005a04 <convert_time_from_android>:

uint8_t convert_time_from_android(rtc_cal *rtc_time, char *date){
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b096      	sub	sp, #88	; 0x58
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]

	//*xxx*yyyy-MM-dd HH:mm:ss

	uint8_t res_date = DATE_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int s;
	char buf[64];

	char *p_rtc = date;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	653b      	str	r3, [r7, #80]	; 0x50

	*p_rtc++;
 8005a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8005a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a20:	3301      	adds	r3, #1
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8005a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a26:	3301      	adds	r3, #1
 8005a28:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8005a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8005a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a32:	3301      	adds	r3, #1
 8005a34:	653b      	str	r3, [r7, #80]	; 0x50

	for(s = 0; s < 4; s++){
 8005a36:	2300      	movs	r3, #0
 8005a38:	657b      	str	r3, [r7, #84]	; 0x54
 8005a3a:	e00c      	b.n	8005a56 <convert_time_from_android+0x52>
		buf[s] = *p_rtc++;
 8005a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	653a      	str	r2, [r7, #80]	; 0x50
 8005a42:	7819      	ldrb	r1, [r3, #0]
 8005a44:	f107 020c 	add.w	r2, r7, #12
 8005a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4a:	4413      	add	r3, r2
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 4; s++){
 8005a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a52:	3301      	adds	r3, #1
 8005a54:	657b      	str	r3, [r7, #84]	; 0x54
 8005a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	ddef      	ble.n	8005a3c <convert_time_from_android+0x38>
	}
	rtc_time->year=atoi(buf);
 8005a5c:	f107 030c 	add.w	r3, r7, #12
 8005a60:	4618      	mov	r0, r3
 8005a62:	f002 f82f 	bl	8007ac4 <atoi>
 8005a66:	4602      	mov	r2, r0
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]
			if(rtc_time->year == 0 || rtc_time->year < 1980)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <convert_time_from_android+0x7c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	dc05      	bgt.n	8005a8c <convert_time_from_android+0x88>
				return res_date = INCORRECT_YEAR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005a86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005a8a:	e0f4      	b.n	8005c76 <convert_time_from_android+0x272>
	*p_rtc++;
 8005a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8e:	3301      	adds	r3, #1
 8005a90:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fa fb58 	bl	800014c <strlen>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	f107 030c 	add.w	r3, r7, #12
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f002 f873 	bl	8007b90 <memset>
	for(s = 0; s < 2; s++){
 8005aaa:	2300      	movs	r3, #0
 8005aac:	657b      	str	r3, [r7, #84]	; 0x54
 8005aae:	e00c      	b.n	8005aca <convert_time_from_android+0xc6>
		buf[s] = *p_rtc++;
 8005ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	653a      	str	r2, [r7, #80]	; 0x50
 8005ab6:	7819      	ldrb	r1, [r3, #0]
 8005ab8:	f107 020c 	add.w	r2, r7, #12
 8005abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abe:	4413      	add	r3, r2
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8005aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	ddef      	ble.n	8005ab0 <convert_time_from_android+0xac>
	}
	rtc_time->mon=(char)atoi(buf);
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 fff5 	bl	8007ac4 <atoi>
 8005ada:	4603      	mov	r3, r0
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	711a      	strb	r2, [r3, #4]
			if(rtc_time->mon == 0 || rtc_time->mon > 12)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	791b      	ldrb	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <convert_time_from_android+0xee>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	791b      	ldrb	r3, [r3, #4]
 8005aee:	2b0c      	cmp	r3, #12
 8005af0:	d905      	bls.n	8005afe <convert_time_from_android+0xfa>
					return res_date = INCORRECT_MONTH;
 8005af2:	2302      	movs	r3, #2
 8005af4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005af8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005afc:	e0bb      	b.n	8005c76 <convert_time_from_android+0x272>
	*p_rtc++;
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	3301      	adds	r3, #1
 8005b02:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005b04:	f107 030c 	add.w	r3, r7, #12
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fa fb1f 	bl	800014c <strlen>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	f107 030c 	add.w	r3, r7, #12
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f002 f83a 	bl	8007b90 <memset>
	for(s = 0; s < 2; s++){
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b20:	e00c      	b.n	8005b3c <convert_time_from_android+0x138>
		buf[s] = *p_rtc++;
 8005b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	653a      	str	r2, [r7, #80]	; 0x50
 8005b28:	7819      	ldrb	r1, [r3, #0]
 8005b2a:	f107 020c 	add.w	r2, r7, #12
 8005b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b30:	4413      	add	r3, r2
 8005b32:	460a      	mov	r2, r1
 8005b34:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8005b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b38:	3301      	adds	r3, #1
 8005b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	ddef      	ble.n	8005b22 <convert_time_from_android+0x11e>
	}
	rtc_time->mday=(char)atoi(buf);
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 ffbc 	bl	8007ac4 <atoi>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	715a      	strb	r2, [r3, #5]
			if(rtc_time->mday == 0 || rtc_time->mday > 31)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	795b      	ldrb	r3, [r3, #5]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <convert_time_from_android+0x160>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	795b      	ldrb	r3, [r3, #5]
 8005b60:	2b1f      	cmp	r3, #31
 8005b62:	d905      	bls.n	8005b70 <convert_time_from_android+0x16c>
					return res_date = INCORRECT_DAY;
 8005b64:	2303      	movs	r3, #3
 8005b66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005b6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005b6e:	e082      	b.n	8005c76 <convert_time_from_android+0x272>
	*p_rtc++;
 8005b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b72:	3301      	adds	r3, #1
 8005b74:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005b76:	f107 030c 	add.w	r3, r7, #12
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fa fae6 	bl	800014c <strlen>
 8005b80:	4602      	mov	r2, r0
 8005b82:	f107 030c 	add.w	r3, r7, #12
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f002 f801 	bl	8007b90 <memset>
	for(s = 0; s < 2; s++){
 8005b8e:	2300      	movs	r3, #0
 8005b90:	657b      	str	r3, [r7, #84]	; 0x54
 8005b92:	e00c      	b.n	8005bae <convert_time_from_android+0x1aa>
		buf[s] = *p_rtc++;
 8005b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	653a      	str	r2, [r7, #80]	; 0x50
 8005b9a:	7819      	ldrb	r1, [r3, #0]
 8005b9c:	f107 020c 	add.w	r2, r7, #12
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba2:	4413      	add	r3, r2
 8005ba4:	460a      	mov	r2, r1
 8005ba6:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8005ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005baa:	3301      	adds	r3, #1
 8005bac:	657b      	str	r3, [r7, #84]	; 0x54
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	ddef      	ble.n	8005b94 <convert_time_from_android+0x190>
	}
	rtc_time->hour=(char)atoi(buf);
 8005bb4:	f107 030c 	add.w	r3, r7, #12
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 ff83 	bl	8007ac4 <atoi>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	719a      	strb	r2, [r3, #6]
	*p_rtc++;
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	3301      	adds	r3, #1
 8005bca:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005bcc:	f107 030c 	add.w	r3, r7, #12
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fa fabb 	bl	800014c <strlen>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 ffd6 	bl	8007b90 <memset>
	for(s = 0; s < 2; s++){
 8005be4:	2300      	movs	r3, #0
 8005be6:	657b      	str	r3, [r7, #84]	; 0x54
 8005be8:	e00c      	b.n	8005c04 <convert_time_from_android+0x200>
		buf[s] = *p_rtc++;
 8005bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	653a      	str	r2, [r7, #80]	; 0x50
 8005bf0:	7819      	ldrb	r1, [r3, #0]
 8005bf2:	f107 020c 	add.w	r2, r7, #12
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf8:	4413      	add	r3, r2
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8005bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c00:	3301      	adds	r3, #1
 8005c02:	657b      	str	r3, [r7, #84]	; 0x54
 8005c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	ddef      	ble.n	8005bea <convert_time_from_android+0x1e6>
	}
	rtc_time->min=(char)atoi(buf);
 8005c0a:	f107 030c 	add.w	r3, r7, #12
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 ff58 	bl	8007ac4 <atoi>
 8005c14:	4603      	mov	r3, r0
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	71da      	strb	r2, [r3, #7]
	*p_rtc++;
 8005c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1e:	3301      	adds	r3, #1
 8005c20:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005c22:	f107 030c 	add.w	r3, r7, #12
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fa fa90 	bl	800014c <strlen>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 ffab 	bl	8007b90 <memset>
	for(s = 0; s < 2; s++){
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c3e:	e00c      	b.n	8005c5a <convert_time_from_android+0x256>
		buf[s] = *p_rtc++;
 8005c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	653a      	str	r2, [r7, #80]	; 0x50
 8005c46:	7819      	ldrb	r1, [r3, #0]
 8005c48:	f107 020c 	add.w	r2, r7, #12
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4e:	4413      	add	r3, r2
 8005c50:	460a      	mov	r2, r1
 8005c52:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8005c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c56:	3301      	adds	r3, #1
 8005c58:	657b      	str	r3, [r7, #84]	; 0x54
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	ddef      	ble.n	8005c40 <convert_time_from_android+0x23c>
	}
	rtc_time->sec=(char)atoi(buf);
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 ff2d 	bl	8007ac4 <atoi>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	721a      	strb	r2, [r3, #8]

	return res_date;
 8005c72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
//	if(date[])

}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3758      	adds	r7, #88	; 0x58
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <Write_data_2Flash>:


}


void Write_data_2Flash(uint32_t addr, uint16_t cnt_flash, uint8_t* pBuf){
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	817b      	strh	r3, [r7, #10]

	wr_en = spiFlash_wrtEnbl();
 8005c8e:	f000 fbc5 	bl	800641c <spiFlash_wrtEnbl>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <Write_data_2Flash+0x98>)
 8005c98:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005c9a:	2005      	movs	r0, #5
 8005c9c:	f000 fb8c 	bl	80063b8 <spiFlash_readStatus>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <Write_data_2Flash+0x9c>)
 8005ca6:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005ca8:	2035      	movs	r0, #53	; 0x35
 8005caa:	f000 fb85 	bl	80063b8 <spiFlash_readStatus>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <Write_data_2Flash+0xa0>)
 8005cb4:	801a      	strh	r2, [r3, #0]
		if(stat_reg1!=2){
 8005cb6:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <Write_data_2Flash+0x9c>)
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d027      	beq.n	8005d0e <Write_data_2Flash+0x8e>
			wr_stat_en = spiFlash_wrtStatReg();
 8005cbe:	f000 fbd9 	bl	8006474 <spiFlash_wrtStatReg>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b17      	ldr	r3, [pc, #92]	; (8005d24 <Write_data_2Flash+0xa4>)
 8005cc8:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005cca:	2005      	movs	r0, #5
 8005ccc:	f000 fb74 	bl	80063b8 <spiFlash_readStatus>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <Write_data_2Flash+0x9c>)
 8005cd6:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005cd8:	2035      	movs	r0, #53	; 0x35
 8005cda:	f000 fb6d 	bl	80063b8 <spiFlash_readStatus>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <Write_data_2Flash+0xa0>)
 8005ce4:	801a      	strh	r2, [r3, #0]
			wr_en = spiFlash_wrtEnbl();
 8005ce6:	f000 fb99 	bl	800641c <spiFlash_wrtEnbl>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <Write_data_2Flash+0x98>)
 8005cf0:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005cf2:	2005      	movs	r0, #5
 8005cf4:	f000 fb60 	bl	80063b8 <spiFlash_readStatus>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <Write_data_2Flash+0x9c>)
 8005cfe:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005d00:	2035      	movs	r0, #53	; 0x35
 8005d02:	f000 fb59 	bl	80063b8 <spiFlash_readStatus>
 8005d06:	4603      	mov	r3, r0
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <Write_data_2Flash+0xa0>)
 8005d0c:	801a      	strh	r2, [r3, #0]
						}



}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000d64 	.word	0x20000d64
 8005d1c:	20000d60 	.word	0x20000d60
 8005d20:	20000d62 	.word	0x20000d62
 8005d24:	20000d65 	.word	0x20000d65

08005d28 <Set_Cnt_to_Flash>:
	wr_stat_en = spiFlash_wrtStatReg();
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
}

void Set_Cnt_to_Flash(uint32_t addr, uint16_t cnt_flash, uint8_t* pBuf){
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	460b      	mov	r3, r1
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	817b      	strh	r3, [r7, #10]

	wr_en = spiFlash_wrtEnbl();
 8005d36:	f000 fb71 	bl	800641c <spiFlash_wrtEnbl>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4b2a      	ldr	r3, [pc, #168]	; (8005de8 <Set_Cnt_to_Flash+0xc0>)
 8005d40:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005d42:	2005      	movs	r0, #5
 8005d44:	f000 fb38 	bl	80063b8 <spiFlash_readStatus>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	4b27      	ldr	r3, [pc, #156]	; (8005dec <Set_Cnt_to_Flash+0xc4>)
 8005d4e:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005d50:	2035      	movs	r0, #53	; 0x35
 8005d52:	f000 fb31 	bl	80063b8 <spiFlash_readStatus>
 8005d56:	4603      	mov	r3, r0
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <Set_Cnt_to_Flash+0xc8>)
 8005d5c:	801a      	strh	r2, [r3, #0]
		if(stat_reg1!=2){
 8005d5e:	4b23      	ldr	r3, [pc, #140]	; (8005dec <Set_Cnt_to_Flash+0xc4>)
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d027      	beq.n	8005db6 <Set_Cnt_to_Flash+0x8e>
			wr_stat_en = spiFlash_wrtStatReg();
 8005d66:	f000 fb85 	bl	8006474 <spiFlash_wrtStatReg>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <Set_Cnt_to_Flash+0xcc>)
 8005d70:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005d72:	2005      	movs	r0, #5
 8005d74:	f000 fb20 	bl	80063b8 <spiFlash_readStatus>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <Set_Cnt_to_Flash+0xc4>)
 8005d7e:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005d80:	2035      	movs	r0, #53	; 0x35
 8005d82:	f000 fb19 	bl	80063b8 <spiFlash_readStatus>
 8005d86:	4603      	mov	r3, r0
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <Set_Cnt_to_Flash+0xc8>)
 8005d8c:	801a      	strh	r2, [r3, #0]
			wr_en = spiFlash_wrtEnbl();
 8005d8e:	f000 fb45 	bl	800641c <spiFlash_wrtEnbl>
 8005d92:	4603      	mov	r3, r0
 8005d94:	461a      	mov	r2, r3
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <Set_Cnt_to_Flash+0xc0>)
 8005d98:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005d9a:	2005      	movs	r0, #5
 8005d9c:	f000 fb0c 	bl	80063b8 <spiFlash_readStatus>
 8005da0:	4603      	mov	r3, r0
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	4b11      	ldr	r3, [pc, #68]	; (8005dec <Set_Cnt_to_Flash+0xc4>)
 8005da6:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005da8:	2035      	movs	r0, #53	; 0x35
 8005daa:	f000 fb05 	bl	80063b8 <spiFlash_readStatus>
 8005dae:	4603      	mov	r3, r0
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <Set_Cnt_to_Flash+0xc8>)
 8005db4:	801a      	strh	r2, [r3, #0]
						}
	spiFlash_write(addr, cnt_flash, pBuf);
 8005db6:	897b      	ldrh	r3, [r7, #10]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fa9d 	bl	80062fc <spiFlash_write>
	do {
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005dc2:	2005      	movs	r0, #5
 8005dc4:	f000 faf8 	bl	80063b8 <spiFlash_readStatus>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	4b07      	ldr	r3, [pc, #28]	; (8005dec <Set_Cnt_to_Flash+0xc4>)
 8005dce:	801a      	strh	r2, [r3, #0]
	} while (stat_reg1 & 0x01 );
 8005dd0:	4b06      	ldr	r3, [pc, #24]	; (8005dec <Set_Cnt_to_Flash+0xc4>)
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f2      	bne.n	8005dc2 <Set_Cnt_to_Flash+0x9a>
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000d64 	.word	0x20000d64
 8005dec:	20000d60 	.word	0x20000d60
 8005df0:	20000d62 	.word	0x20000d62
 8005df4:	20000d65 	.word	0x20000d65

08005df8 <Safe_Flash_Erase>:

void Safe_Flash_Erase(uint32_t erase_addr){
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	wr_en = spiFlash_wrtEnbl();
 8005e00:	f000 fb0c 	bl	800641c <spiFlash_wrtEnbl>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	4b2a      	ldr	r3, [pc, #168]	; (8005eb4 <Safe_Flash_Erase+0xbc>)
 8005e0a:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005e0c:	2005      	movs	r0, #5
 8005e0e:	f000 fad3 	bl	80063b8 <spiFlash_readStatus>
 8005e12:	4603      	mov	r3, r0
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <Safe_Flash_Erase+0xc0>)
 8005e18:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005e1a:	2035      	movs	r0, #53	; 0x35
 8005e1c:	f000 facc 	bl	80063b8 <spiFlash_readStatus>
 8005e20:	4603      	mov	r3, r0
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <Safe_Flash_Erase+0xc4>)
 8005e26:	801a      	strh	r2, [r3, #0]
	if(stat_reg1!=2){
 8005e28:	4b23      	ldr	r3, [pc, #140]	; (8005eb8 <Safe_Flash_Erase+0xc0>)
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d027      	beq.n	8005e80 <Safe_Flash_Erase+0x88>
		wr_stat_en = spiFlash_wrtStatReg();
 8005e30:	f000 fb20 	bl	8006474 <spiFlash_wrtStatReg>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <Safe_Flash_Erase+0xc8>)
 8005e3a:	701a      	strb	r2, [r3, #0]
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005e3c:	2005      	movs	r0, #5
 8005e3e:	f000 fabb 	bl	80063b8 <spiFlash_readStatus>
 8005e42:	4603      	mov	r3, r0
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <Safe_Flash_Erase+0xc0>)
 8005e48:	801a      	strh	r2, [r3, #0]
		stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005e4a:	2035      	movs	r0, #53	; 0x35
 8005e4c:	f000 fab4 	bl	80063b8 <spiFlash_readStatus>
 8005e50:	4603      	mov	r3, r0
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <Safe_Flash_Erase+0xc4>)
 8005e56:	801a      	strh	r2, [r3, #0]
		wr_en = spiFlash_wrtEnbl();
 8005e58:	f000 fae0 	bl	800641c <spiFlash_wrtEnbl>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <Safe_Flash_Erase+0xbc>)
 8005e62:	701a      	strb	r2, [r3, #0]
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005e64:	2005      	movs	r0, #5
 8005e66:	f000 faa7 	bl	80063b8 <spiFlash_readStatus>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <Safe_Flash_Erase+0xc0>)
 8005e70:	801a      	strh	r2, [r3, #0]
		stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005e72:	2035      	movs	r0, #53	; 0x35
 8005e74:	f000 faa0 	bl	80063b8 <spiFlash_readStatus>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <Safe_Flash_Erase+0xc4>)
 8005e7e:	801a      	strh	r2, [r3, #0]
	}

	res_erase = spiFlash_eraseSector(erase_addr);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb27 	bl	80064d4 <spiFlash_eraseSector>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <Safe_Flash_Erase+0xcc>)
 8005e8c:	701a      	strb	r2, [r3, #0]
	do {
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005e8e:	2005      	movs	r0, #5
 8005e90:	f000 fa92 	bl	80063b8 <spiFlash_readStatus>
 8005e94:	4603      	mov	r3, r0
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <Safe_Flash_Erase+0xc0>)
 8005e9a:	801a      	strh	r2, [r3, #0]
	} while (stat_reg1 & 0x01 );
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <Safe_Flash_Erase+0xc0>)
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f2      	bne.n	8005e8e <Safe_Flash_Erase+0x96>
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000d64 	.word	0x20000d64
 8005eb8:	20000d60 	.word	0x20000d60
 8005ebc:	20000d62 	.word	0x20000d62
 8005ec0:	20000d65 	.word	0x20000d65
 8005ec4:	20000964 	.word	0x20000964

08005ec8 <NVIC_EnableIRQ>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	f003 031f 	and.w	r3, r3, #31
 8005ed8:	2201      	movs	r2, #1
 8005eda:	fa02 f103 	lsl.w	r1, r2, r3
 8005ede:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <NVIC_EnableIRQ+0x2c>)
 8005ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr
 8005ef4:	e000e100 	.word	0xe000e100

08005ef8 <NVIC_DisableIRQ>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	2201      	movs	r2, #1
 8005f0a:	fa02 f103 	lsl.w	r1, r2, r3
 8005f0e:	4a06      	ldr	r2, [pc, #24]	; (8005f28 <NVIC_DisableIRQ+0x30>)
 8005f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	3320      	adds	r3, #32
 8005f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	e000e100 	.word	0xe000e100

08005f2c <NVIC_SetPriority>:
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	6039      	str	r1, [r7, #0]
 8005f36:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8005f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da0b      	bge.n	8005f58 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	490c      	ldr	r1, [pc, #48]	; (8005f78 <NVIC_SetPriority+0x4c>)
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	3b04      	subs	r3, #4
 8005f4e:	0112      	lsls	r2, r2, #4
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	440b      	add	r3, r1
 8005f54:	761a      	strb	r2, [r3, #24]
}
 8005f56:	e009      	b.n	8005f6c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4907      	ldr	r1, [pc, #28]	; (8005f7c <NVIC_SetPriority+0x50>)
 8005f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f62:	0112      	lsls	r2, r2, #4
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	440b      	add	r3, r1
 8005f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000ed00 	.word	0xe000ed00
 8005f7c:	e000e100 	.word	0xe000e100

08005f80 <PN532_SPIInit>:

volatile uint8_t SpiActive;					// флаг активной передачи



void PN532_SPIInit(void){
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0

	SpiActive = 1;
 8005f86:	4b20      	ldr	r3, [pc, #128]	; (8006008 <PN532_SPIInit+0x88>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]



//------------------------------------------------------------------------------
	//SPI_StructInit( &SPI_PN532_InitStruct);
	SPI_Cmd(SPI2, DISABLE);
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	481f      	ldr	r0, [pc, #124]	; (800600c <PN532_SPIInit+0x8c>)
 8005f90:	f000 ffa1 	bl	8006ed6 <SPI_Cmd>
	NVIC_DisableIRQ(SPI2_IRQn);
 8005f94:	2024      	movs	r0, #36	; 0x24
 8005f96:	f7ff ffaf 	bl	8005ef8 <NVIC_DisableIRQ>

	/* Initialize the SPI_Direction member */
	SPI_PN532_InitStruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_PN532_InitStruct.SPI_Mode = SPI_Mode_Master;
 8005f9e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fa2:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_PN532_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_PN532_InitStruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_PN532_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8005fac:	2300      	movs	r3, #0
 8005fae:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_PN532_InitStruct.SPI_NSS = SPI_NSS_Hard;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_PN532_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 8005fb4:	2338      	movs	r3, #56	; 0x38
 8005fb6:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_PN532_InitStruct.SPI_FirstBit = SPI_FirstBit_LSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_PN532_InitStruct.SPI_CRCPolynomial = 7;
 8005fbc:	2307      	movs	r3, #7
 8005fbe:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_PN532_InitStruct);
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4811      	ldr	r0, [pc, #68]	; (800600c <PN532_SPIInit+0x8c>)
 8005fc6:	f000 ff43 	bl	8006e50 <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, DISABLE );
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2160      	movs	r1, #96	; 0x60
 8005fce:	480f      	ldr	r0, [pc, #60]	; (800600c <PN532_SPIInit+0x8c>)
 8005fd0:	f000 ffa0 	bl	8006f14 <SPI_I2S_ITConfig>

	SPI_CalculateCRC ( SPI2, DISABLE);
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	480d      	ldr	r0, [pc, #52]	; (800600c <PN532_SPIInit+0x8c>)
 8005fd8:	f001 f805 	bl	8006fe6 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fe2:	480b      	ldr	r0, [pc, #44]	; (8006010 <PN532_SPIInit+0x90>)
 8005fe4:	f000 fc29 	bl	800683a <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4808      	ldr	r0, [pc, #32]	; (800600c <PN532_SPIInit+0x8c>)
 8005fec:	f000 ffdc 	bl	8006fa8 <SPI_SSOutputCmd>
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/

	SPI_Cmd(SPI2, ENABLE);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4806      	ldr	r0, [pc, #24]	; (800600c <PN532_SPIInit+0x8c>)
 8005ff4:	f000 ff6f 	bl	8006ed6 <SPI_Cmd>

	SpiActive = 0;
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <PN532_SPIInit+0x88>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]

}
 8005ffe:	bf00      	nop
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000d76 	.word	0x20000d76
 800600c:	40003800 	.word	0x40003800
 8006010:	40010c00 	.word	0x40010c00

08006014 <SPI_Send_Recv>:
	return SPI_OK;
}


void SPI_Send_Recv(uint8_t *buf_tx, uint8_t *buf_rx, uint16_t len)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
	SpiActive = 1;
 8006022:	4b16      	ldr	r3, [pc, #88]	; (800607c <SPI_Send_Recv+0x68>)
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]

	pBufTx = buf_tx;
 8006028:	4a15      	ldr	r2, [pc, #84]	; (8006080 <SPI_Send_Recv+0x6c>)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6013      	str	r3, [r2, #0]
	pBufRx = buf_rx;
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <SPI_Send_Recv+0x70>)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6013      	str	r3, [r2, #0]
	usBufPosRx = 0;
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <SPI_Send_Recv+0x74>)
 8006036:	2200      	movs	r2, #0
 8006038:	801a      	strh	r2, [r3, #0]
	usBufPosTx = 1;
 800603a:	4b14      	ldr	r3, [pc, #80]	; (800608c <SPI_Send_Recv+0x78>)
 800603c:	2201      	movs	r2, #1
 800603e:	801a      	strh	r2, [r3, #0]
	usBufCnt = len;
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <SPI_Send_Recv+0x7c>)
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	8013      	strh	r3, [r2, #0]

	while (!(SPI2->SR & SPI_SR_TXE)); //ожидание установки 1 в TXE(окончание передачи)
 8006046:	bf00      	nop
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <SPI_Send_Recv+0x80>)
 800604a:	891b      	ldrh	r3, [r3, #8]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f8      	beq.n	8006048 <SPI_Send_Recv+0x34>
	if (pBufTx)
 8006056:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <SPI_Send_Recv+0x6c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <SPI_Send_Recv+0x56>
		*(uint8_t*)&SPI2->DR = *pBufTx;
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <SPI_Send_Recv+0x6c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <SPI_Send_Recv+0x84>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	7013      	strb	r3, [r2, #0]
	//_SPI->DR = 5;
	else
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
//	while(SpiActive);
}
 8006068:	e002      	b.n	8006070 <SPI_Send_Recv+0x5c>
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <SPI_Send_Recv+0x84>)
 800606c:	22ff      	movs	r2, #255	; 0xff
 800606e:	701a      	strb	r2, [r3, #0]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20000d76 	.word	0x20000d76
 8006080:	20000d68 	.word	0x20000d68
 8006084:	20000d6c 	.word	0x20000d6c
 8006088:	20000d70 	.word	0x20000d70
 800608c:	20000d72 	.word	0x20000d72
 8006090:	20000d74 	.word	0x20000d74
 8006094:	40003800 	.word	0x40003800
 8006098:	4000380c 	.word	0x4000380c

0800609c <SpiSendRecvFlash>:


void SpiSendRecvFlash(uint8_t **a_buf_tx, uint8_t **a_buf_rx, uint16_t *a_buf_len, uint8_t cnt)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < cnt; i++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]
 80060ae:	e01a      	b.n	80060e6 <SpiSendRecvFlash+0x4a>
			{

				SPI_Send_Recv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f7ff ffa0 	bl	8006014 <SPI_Send_Recv>

				while(SpiActive);
 80060d4:	bf00      	nop
 80060d6:	4b08      	ldr	r3, [pc, #32]	; (80060f8 <SpiSendRecvFlash+0x5c>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1fa      	bne.n	80060d6 <SpiSendRecvFlash+0x3a>
			for (uint8_t i = 0; i < cnt; i++)
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	3301      	adds	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]
 80060e6:	7dfa      	ldrb	r2, [r7, #23]
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d3e0      	bcc.n	80060b0 <SpiSendRecvFlash+0x14>
			}
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20000d76 	.word	0x20000d76

080060fc <SPI2_IRQHandler>:

}


void SPI2_IRQHandler(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
	{
		volatile uint8_t ucByte = *(uint8_t*)&SPI2->DR;
 8006102:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <SPI2_IRQHandler+0x84>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	71fb      	strb	r3, [r7, #7]

		if (pBufRx)
 8006108:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <SPI2_IRQHandler+0x88>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <SPI2_IRQHandler+0x24>
			pBufRx[usBufPosRx] = ucByte;
 8006110:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <SPI2_IRQHandler+0x88>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <SPI2_IRQHandler+0x8c>)
 8006116:	8812      	ldrh	r2, [r2, #0]
 8006118:	4413      	add	r3, r2
 800611a:	79fa      	ldrb	r2, [r7, #7]
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
	}

	{
		if (usBufPosTx < usBufCnt)
 8006120:	4b1a      	ldr	r3, [pc, #104]	; (800618c <SPI2_IRQHandler+0x90>)
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <SPI2_IRQHandler+0x94>)
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d215      	bcs.n	8006158 <SPI2_IRQHandler+0x5c>
		{
			if (pBufTx)
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <SPI2_IRQHandler+0x98>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <SPI2_IRQHandler+0x4a>
				*(uint8_t*)&SPI2->DR = pBufTx[usBufPosTx];
 8006134:	4b17      	ldr	r3, [pc, #92]	; (8006194 <SPI2_IRQHandler+0x98>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <SPI2_IRQHandler+0x90>)
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	4413      	add	r3, r2
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <SPI2_IRQHandler+0x84>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	7013      	strb	r3, [r2, #0]
 8006144:	e002      	b.n	800614c <SPI2_IRQHandler+0x50>
			else
				*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 8006146:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <SPI2_IRQHandler+0x84>)
 8006148:	22ff      	movs	r2, #255	; 0xff
 800614a:	701a      	strb	r2, [r3, #0]

			usBufPosTx++;
 800614c:	4b0f      	ldr	r3, [pc, #60]	; (800618c <SPI2_IRQHandler+0x90>)
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	4b0d      	ldr	r3, [pc, #52]	; (800618c <SPI2_IRQHandler+0x90>)
 8006156:	801a      	strh	r2, [r3, #0]
	/*	else{
			GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		}*/
	}

	if (++usBufPosRx >= usBufCnt)
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <SPI2_IRQHandler+0x8c>)
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <SPI2_IRQHandler+0x8c>)
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	4b08      	ldr	r3, [pc, #32]	; (8006188 <SPI2_IRQHandler+0x8c>)
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	4b09      	ldr	r3, [pc, #36]	; (8006190 <SPI2_IRQHandler+0x94>)
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d302      	bcc.n	8006176 <SPI2_IRQHandler+0x7a>
	{
		SpiActive = 0;
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <SPI2_IRQHandler+0x9c>)
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
	//	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		//SPI_ON_READY_ISR_CB(0);
	}

}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	4000380c 	.word	0x4000380c
 8006184:	20000d6c 	.word	0x20000d6c
 8006188:	20000d70 	.word	0x20000d70
 800618c:	20000d72 	.word	0x20000d72
 8006190:	20000d74 	.word	0x20000d74
 8006194:	20000d68 	.word	0x20000d68
 8006198:	20000d76 	.word	0x20000d76

0800619c <SPI_FLASH_CONFIG>:



void SPI_FLASH_CONFIG(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80061a2:	2201      	movs	r2, #1
 80061a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061a8:	4825      	ldr	r0, [pc, #148]	; (8006240 <SPI_FLASH_CONFIG+0xa4>)
 80061aa:	f000 fb46 	bl	800683a <GPIO_WriteBit>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80061ae:	2201      	movs	r2, #1
 80061b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061b4:	4822      	ldr	r0, [pc, #136]	; (8006240 <SPI_FLASH_CONFIG+0xa4>)
 80061b6:	f000 fb40 	bl	800683a <GPIO_WriteBit>
//	SPI2->CR1 |= SPI_CR1_SPE;


	SPI_InitTypeDef			SPI_FLASH_Initstruct;

	SPI_Cmd(SPI2, DISABLE);
 80061ba:	2100      	movs	r1, #0
 80061bc:	4821      	ldr	r0, [pc, #132]	; (8006244 <SPI_FLASH_CONFIG+0xa8>)
 80061be:	f000 fe8a 	bl	8006ed6 <SPI_Cmd>
//	NVIC_DisableIRQ(SPI2_IRQn);

	/* Initialize the SPI_Direction member */
	SPI_FLASH_Initstruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 80061c2:	2300      	movs	r3, #0
 80061c4:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_FLASH_Initstruct.SPI_Mode = SPI_Mode_Master;
 80061c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061ca:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_FLASH_Initstruct.SPI_DataSize = SPI_DataSize_8b;
 80061cc:	2300      	movs	r3, #0
 80061ce:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_FLASH_Initstruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 80061d0:	2300      	movs	r3, #0
 80061d2:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_FLASH_Initstruct.SPI_CPHA = SPI_CPHA_1Edge;
 80061d4:	2300      	movs	r3, #0
 80061d6:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_FLASH_Initstruct.SPI_NSS = SPI_NSS_Soft;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 80061d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061dc:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_FLASH_Initstruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 80061de:	2338      	movs	r3, #56	; 0x38
 80061e0:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_FLASH_Initstruct.SPI_FirstBit = SPI_FirstBit_MSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 80061e2:	2300      	movs	r3, #0
 80061e4:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_FLASH_Initstruct.SPI_CRCPolynomial = 7;
 80061e6:	2307      	movs	r3, #7
 80061e8:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_FLASH_Initstruct);
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4815      	ldr	r0, [pc, #84]	; (8006244 <SPI_FLASH_CONFIG+0xa8>)
 80061f0:	f000 fe2e 	bl	8006e50 <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);

	SPI_CalculateCRC ( SPI2, DISABLE);
 80061f4:	2100      	movs	r1, #0
 80061f6:	4813      	ldr	r0, [pc, #76]	; (8006244 <SPI_FLASH_CONFIG+0xa8>)
 80061f8:	f000 fef5 	bl	8006fe6 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80061fc:	2201      	movs	r2, #1
 80061fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006202:	480f      	ldr	r0, [pc, #60]	; (8006240 <SPI_FLASH_CONFIG+0xa4>)
 8006204:	f000 fb19 	bl	800683a <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8006208:	2101      	movs	r1, #1
 800620a:	480e      	ldr	r0, [pc, #56]	; (8006244 <SPI_FLASH_CONFIG+0xa8>)
 800620c:	f000 fecc 	bl	8006fa8 <SPI_SSOutputCmd>
	uint32_t tmpreg = 0;
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, ENABLE );
 8006210:	2201      	movs	r2, #1
 8006212:	2160      	movs	r1, #96	; 0x60
 8006214:	480b      	ldr	r0, [pc, #44]	; (8006244 <SPI_FLASH_CONFIG+0xa8>)
 8006216:	f000 fe7d 	bl	8006f14 <SPI_I2S_ITConfig>
	NVIC_SetPriority(SPI2_IRQn, 3);
 800621a:	2103      	movs	r1, #3
 800621c:	2024      	movs	r0, #36	; 0x24
 800621e:	f7ff fe85 	bl	8005f2c <NVIC_SetPriority>
	NVIC_EnableIRQ(SPI2_IRQn);
 8006222:	2024      	movs	r0, #36	; 0x24
 8006224:	f7ff fe50 	bl	8005ec8 <NVIC_EnableIRQ>



	SPI_Cmd(SPI2, ENABLE);
 8006228:	2101      	movs	r1, #1
 800622a:	4806      	ldr	r0, [pc, #24]	; (8006244 <SPI_FLASH_CONFIG+0xa8>)
 800622c:	f000 fe53 	bl	8006ed6 <SPI_Cmd>

	SpiActive = 0;
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <SPI_FLASH_CONFIG+0xac>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init ( &NVIC_InitStruct );
*/


}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40010c00 	.word	0x40010c00
 8006244:	40003800 	.word	0x40003800
 8006248:	20000d76 	.word	0x20000d76

0800624c <spiFlash_Read>:

extern volatile uint8_t SpiActive;


void spiFlash_Read( uint32_t dwAddrRead, uint16_t bCnt, uint8_t* pBuf )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	460b      	mov	r3, r1
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	817b      	strh	r3, [r7, #10]
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800625a:	2201      	movs	r2, #1
 800625c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006260:	4820      	ldr	r0, [pc, #128]	; (80062e4 <spiFlash_Read+0x98>)
 8006262:	f000 faea 	bl	800683a <GPIO_WriteBit>
	buf_txrx[0] = CMD_READ_DATA;
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <spiFlash_Read+0x9c>)
 8006268:	2203      	movs	r2, #3
 800626a:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrRead >> 16);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	0c1b      	lsrs	r3, r3, #16
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <spiFlash_Read+0x9c>)
 8006274:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrRead >> 8);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	b2da      	uxtb	r2, r3
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <spiFlash_Read+0x9c>)
 800627e:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrRead >> 0);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	b2da      	uxtb	r2, r3
 8006284:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <spiFlash_Read+0x9c>)
 8006286:	70da      	strb	r2, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 8006288:	4b18      	ldr	r3, [pc, #96]	; (80062ec <spiFlash_Read+0xa0>)
 800628a:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <spiFlash_Read+0x9c>)
 800628c:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 800628e:	4b18      	ldr	r3, [pc, #96]	; (80062f0 <spiFlash_Read+0xa4>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 4;
 8006294:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <spiFlash_Read+0xa8>)
 8006296:	2204      	movs	r2, #4
 8006298:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = NULL;
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <spiFlash_Read+0xa0>)
 800629c:	2200      	movs	r2, #0
 800629e:	605a      	str	r2, [r3, #4]
	a_buf_rx[1] = pBuf;
 80062a0:	4a13      	ldr	r2, [pc, #76]	; (80062f0 <spiFlash_Read+0xa4>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6053      	str	r3, [r2, #4]
	a_buf_len[1] = bCnt;
 80062a6:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <spiFlash_Read+0xa8>)
 80062a8:	897b      	ldrh	r3, [r7, #10]
 80062aa:	8053      	strh	r3, [r2, #2]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 80062ac:	2200      	movs	r2, #0
 80062ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062b2:	480c      	ldr	r0, [pc, #48]	; (80062e4 <spiFlash_Read+0x98>)
 80062b4:	f000 fac1 	bl	800683a <GPIO_WriteBit>

	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 80062b8:	2302      	movs	r3, #2
 80062ba:	4a0e      	ldr	r2, [pc, #56]	; (80062f4 <spiFlash_Read+0xa8>)
 80062bc:	490c      	ldr	r1, [pc, #48]	; (80062f0 <spiFlash_Read+0xa4>)
 80062be:	480b      	ldr	r0, [pc, #44]	; (80062ec <spiFlash_Read+0xa0>)
 80062c0:	f7ff feec 	bl	800609c <SpiSendRecvFlash>
	while(SpiActive);
 80062c4:	bf00      	nop
 80062c6:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <spiFlash_Read+0xac>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1fa      	bne.n	80062c6 <spiFlash_Read+0x7a>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80062d0:	2201      	movs	r2, #1
 80062d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d6:	4803      	ldr	r0, [pc, #12]	; (80062e4 <spiFlash_Read+0x98>)
 80062d8:	f000 faaf 	bl	800683a <GPIO_WriteBit>

}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40010c00 	.word	0x40010c00
 80062e8:	20000d8c 	.word	0x20000d8c
 80062ec:	20000d78 	.word	0x20000d78
 80062f0:	20000d80 	.word	0x20000d80
 80062f4:	20000d88 	.word	0x20000d88
 80062f8:	20000d76 	.word	0x20000d76

080062fc <spiFlash_write>:

uint8_t spiFlash_write( uint32_t dwAddrWrite, uint16_t bCnt, uint8_t* pBuf )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	460b      	mov	r3, r1
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	817b      	strh	r3, [r7, #10]
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 800630a:	230a      	movs	r3, #10
 800630c:	75fb      	strb	r3, [r7, #23]
	uint16_t i;
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800630e:	2201      	movs	r2, #1
 8006310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006314:	4822      	ldr	r0, [pc, #136]	; (80063a0 <spiFlash_write+0xa4>)
 8006316:	f000 fa90 	bl	800683a <GPIO_WriteBit>
	buf_txrx[0] = CMD_PAGE_PROGRAMM;
 800631a:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <spiFlash_write+0xa8>)
 800631c:	2202      	movs	r2, #2
 800631e:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrWrite >> 16);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	b2da      	uxtb	r2, r3
 8006326:	4b1f      	ldr	r3, [pc, #124]	; (80063a4 <spiFlash_write+0xa8>)
 8006328:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrWrite >> 8);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	b2da      	uxtb	r2, r3
 8006330:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <spiFlash_write+0xa8>)
 8006332:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrWrite >> 0);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <spiFlash_write+0xa8>)
 800633a:	70da      	strb	r2, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 800633c:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <spiFlash_write+0xac>)
 800633e:	4a19      	ldr	r2, [pc, #100]	; (80063a4 <spiFlash_write+0xa8>)
 8006340:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 8006342:	4b1a      	ldr	r3, [pc, #104]	; (80063ac <spiFlash_write+0xb0>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 4;
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <spiFlash_write+0xb4>)
 800634a:	2204      	movs	r2, #4
 800634c:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = pBuf;
 800634e:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <spiFlash_write+0xac>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6053      	str	r3, [r2, #4]
	a_buf_rx[1] = NULL;
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <spiFlash_write+0xb0>)
 8006356:	2200      	movs	r2, #0
 8006358:	605a      	str	r2, [r3, #4]
	a_buf_len[1] = bCnt;
 800635a:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <spiFlash_write+0xb4>)
 800635c:	897b      	ldrh	r3, [r7, #10]
 800635e:	8053      	strh	r3, [r2, #2]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8006360:	2200      	movs	r2, #0
 8006362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006366:	480e      	ldr	r0, [pc, #56]	; (80063a0 <spiFlash_write+0xa4>)
 8006368:	f000 fa67 	bl	800683a <GPIO_WriteBit>

	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 800636c:	2302      	movs	r3, #2
 800636e:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <spiFlash_write+0xb4>)
 8006370:	490e      	ldr	r1, [pc, #56]	; (80063ac <spiFlash_write+0xb0>)
 8006372:	480d      	ldr	r0, [pc, #52]	; (80063a8 <spiFlash_write+0xac>)
 8006374:	f7ff fe92 	bl	800609c <SpiSendRecvFlash>
	while(SpiActive);
 8006378:	bf00      	nop
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <spiFlash_write+0xb8>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1fa      	bne.n	800637a <spiFlash_write+0x7e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8006384:	2201      	movs	r2, #1
 8006386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800638a:	4805      	ldr	r0, [pc, #20]	; (80063a0 <spiFlash_write+0xa4>)
 800638c:	f000 fa55 	bl	800683a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	75fb      	strb	r3, [r7, #23]

	return res;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40010c00 	.word	0x40010c00
 80063a4:	20000d8c 	.word	0x20000d8c
 80063a8:	20000d78 	.word	0x20000d78
 80063ac:	20000d80 	.word	0x20000d80
 80063b0:	20000d88 	.word	0x20000d88
 80063b4:	20000d76 	.word	0x20000d76

080063b8 <spiFlash_readStatus>:

uint8_t spiFlash_readStatus( uint8_t cmd )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
	uint8_t bRegStatus;
//	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
	spi_buf_tx[0] = cmd;
 80063c2:	4a12      	ldr	r2, [pc, #72]	; (800640c <spiFlash_readStatus+0x54>)
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	7013      	strb	r3, [r2, #0]
	spi_buf_tx[1] = 0xff;
 80063c8:	4b10      	ldr	r3, [pc, #64]	; (800640c <spiFlash_readStatus+0x54>)
 80063ca:	22ff      	movs	r2, #255	; 0xff
 80063cc:	705a      	strb	r2, [r3, #1]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 80063ce:	2200      	movs	r2, #0
 80063d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063d4:	480e      	ldr	r0, [pc, #56]	; (8006410 <spiFlash_readStatus+0x58>)
 80063d6:	f000 fa30 	bl	800683a <GPIO_WriteBit>

	SPI_Send_Recv(spi_buf_tx, spi_buf_rx, 2);
 80063da:	2202      	movs	r2, #2
 80063dc:	490d      	ldr	r1, [pc, #52]	; (8006414 <spiFlash_readStatus+0x5c>)
 80063de:	480b      	ldr	r0, [pc, #44]	; (800640c <spiFlash_readStatus+0x54>)
 80063e0:	f7ff fe18 	bl	8006014 <SPI_Send_Recv>
	while(SpiActive);
 80063e4:	bf00      	nop
 80063e6:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <spiFlash_readStatus+0x60>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1fa      	bne.n	80063e6 <spiFlash_readStatus+0x2e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80063f0:	2201      	movs	r2, #1
 80063f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063f6:	4806      	ldr	r0, [pc, #24]	; (8006410 <spiFlash_readStatus+0x58>)
 80063f8:	f000 fa1f 	bl	800683a <GPIO_WriteBit>

	bRegStatus = spi_buf_rx[1];
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <spiFlash_readStatus+0x5c>)
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	73fb      	strb	r3, [r7, #15]


	return bRegStatus;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000d94 	.word	0x20000d94
 8006410:	40010c00 	.word	0x40010c00
 8006414:	20000db4 	.word	0x20000db4
 8006418:	20000d76 	.word	0x20000d76

0800641c <spiFlash_wrtEnbl>:

uint8_t spiFlash_wrtEnbl()
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 8006422:	230a      	movs	r3, #10
 8006424:	71fb      	strb	r3, [r7, #7]
	//GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);

	buf_txrx[0] = CMD_WRITE_ENABLE;
 8006426:	4b10      	ldr	r3, [pc, #64]	; (8006468 <spiFlash_wrtEnbl+0x4c>)
 8006428:	2206      	movs	r2, #6
 800642a:	701a      	strb	r2, [r3, #0]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 800642c:	2200      	movs	r2, #0
 800642e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006432:	480e      	ldr	r0, [pc, #56]	; (800646c <spiFlash_wrtEnbl+0x50>)
 8006434:	f000 fa01 	bl	800683a <GPIO_WriteBit>
	SPI_Send_Recv(buf_txrx, NULL, 1);
 8006438:	2201      	movs	r2, #1
 800643a:	2100      	movs	r1, #0
 800643c:	480a      	ldr	r0, [pc, #40]	; (8006468 <spiFlash_wrtEnbl+0x4c>)
 800643e:	f7ff fde9 	bl	8006014 <SPI_Send_Recv>
	while(SpiActive);
 8006442:	bf00      	nop
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <spiFlash_wrtEnbl+0x54>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1fa      	bne.n	8006444 <spiFlash_wrtEnbl+0x28>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800644e:	2201      	movs	r2, #1
 8006450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006454:	4805      	ldr	r0, [pc, #20]	; (800646c <spiFlash_wrtEnbl+0x50>)
 8006456:	f000 f9f0 	bl	800683a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	71fb      	strb	r3, [r7, #7]

	return res;
 800645e:	79fb      	ldrb	r3, [r7, #7]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20000d8c 	.word	0x20000d8c
 800646c:	40010c00 	.word	0x40010c00
 8006470:	20000d76 	.word	0x20000d76

08006474 <spiFlash_wrtStatReg>:


uint8_t spiFlash_wrtStatReg()
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 800647a:	230a      	movs	r3, #10
 800647c:	71fb      	strb	r3, [r7, #7]
	//GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);

	buf_txrx[0] = CMD_WRITE_STATUS_REGISTER;
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <spiFlash_wrtStatReg+0x54>)
 8006480:	2201      	movs	r2, #1
 8006482:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = NULL;
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <spiFlash_wrtStatReg+0x54>)
 8006486:	2200      	movs	r2, #0
 8006488:	705a      	strb	r2, [r3, #1]
	//buf_txrx[2] = 0xff;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 800648a:	2200      	movs	r2, #0
 800648c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006490:	480e      	ldr	r0, [pc, #56]	; (80064cc <spiFlash_wrtStatReg+0x58>)
 8006492:	f000 f9d2 	bl	800683a <GPIO_WriteBit>
	SPI_Send_Recv(buf_txrx, NULL, 2);
 8006496:	2202      	movs	r2, #2
 8006498:	2100      	movs	r1, #0
 800649a:	480b      	ldr	r0, [pc, #44]	; (80064c8 <spiFlash_wrtStatReg+0x54>)
 800649c:	f7ff fdba 	bl	8006014 <SPI_Send_Recv>
	while(SpiActive);
 80064a0:	bf00      	nop
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <spiFlash_wrtStatReg+0x5c>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1fa      	bne.n	80064a2 <spiFlash_wrtStatReg+0x2e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80064ac:	2201      	movs	r2, #1
 80064ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064b2:	4806      	ldr	r0, [pc, #24]	; (80064cc <spiFlash_wrtStatReg+0x58>)
 80064b4:	f000 f9c1 	bl	800683a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	71fb      	strb	r3, [r7, #7]

	return res;
 80064bc:	79fb      	ldrb	r3, [r7, #7]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000d8c 	.word	0x20000d8c
 80064cc:	40010c00 	.word	0x40010c00
 80064d0:	20000d76 	.word	0x20000d76

080064d4 <spiFlash_eraseSector>:
	return result;
}


uint8_t spiFlash_eraseSector( uint32_t dwSectAddr )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 80064dc:	230a      	movs	r3, #10
 80064de:	73fb      	strb	r3, [r7, #15]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80064e0:	2201      	movs	r2, #1
 80064e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064e6:	4819      	ldr	r0, [pc, #100]	; (800654c <spiFlash_eraseSector+0x78>)
 80064e8:	f000 f9a7 	bl	800683a <GPIO_WriteBit>

	buf_txrx[0] = CMD_ERASE_4KB;
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <spiFlash_eraseSector+0x7c>)
 80064ee:	2220      	movs	r2, #32
 80064f0:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwSectAddr >> 16);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	4b15      	ldr	r3, [pc, #84]	; (8006550 <spiFlash_eraseSector+0x7c>)
 80064fa:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwSectAddr >> 8);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	b2da      	uxtb	r2, r3
 8006502:	4b13      	ldr	r3, [pc, #76]	; (8006550 <spiFlash_eraseSector+0x7c>)
 8006504:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwSectAddr >> 0);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4b11      	ldr	r3, [pc, #68]	; (8006550 <spiFlash_eraseSector+0x7c>)
 800650c:	70da      	strb	r2, [r3, #3]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 800650e:	2200      	movs	r2, #0
 8006510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006514:	480d      	ldr	r0, [pc, #52]	; (800654c <spiFlash_eraseSector+0x78>)
 8006516:	f000 f990 	bl	800683a <GPIO_WriteBit>

	SPI_Send_Recv(buf_txrx, NULL, 4);
 800651a:	2204      	movs	r2, #4
 800651c:	2100      	movs	r1, #0
 800651e:	480c      	ldr	r0, [pc, #48]	; (8006550 <spiFlash_eraseSector+0x7c>)
 8006520:	f7ff fd78 	bl	8006014 <SPI_Send_Recv>
	while(SpiActive){};
 8006524:	bf00      	nop
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <spiFlash_eraseSector+0x80>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1fa      	bne.n	8006526 <spiFlash_eraseSector+0x52>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8006530:	2201      	movs	r2, #1
 8006532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006536:	4805      	ldr	r0, [pc, #20]	; (800654c <spiFlash_eraseSector+0x78>)
 8006538:	f000 f97f 	bl	800683a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]

	return res;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40010c00 	.word	0x40010c00
 8006550:	20000d8c 	.word	0x20000d8c
 8006554:	20000d76 	.word	0x20000d76

08006558 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8006560:	4a05      	ldr	r2, [pc, #20]	; (8006578 <NVIC_PriorityGroupConfig+0x20>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656c:	60d3      	str	r3, [r2, #12]
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr
 8006578:	e000ed00 	.word	0xe000ed00

0800657c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	230f      	movs	r3, #15
 800658e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d03a      	beq.n	800660e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006598:	4b27      	ldr	r3, [pc, #156]	; (8006638 <NVIC_Init+0xbc>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	43db      	mvns	r3, r3
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f1c3 0304 	rsb	r3, r3, #4
 80065ac:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	fa22 f303 	lsr.w	r3, r2, r3
 80065b6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	461a      	mov	r2, r3
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	789b      	ldrb	r3, [r3, #2]
 80065ca:	461a      	mov	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4013      	ands	r3, r2
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80065dc:	4a17      	ldr	r2, [pc, #92]	; (800663c <NVIC_Init+0xc0>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	b2c9      	uxtb	r1, r1
 80065e6:	4413      	add	r3, r2
 80065e8:	460a      	mov	r2, r1
 80065ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80065f6:	4911      	ldr	r1, [pc, #68]	; (800663c <NVIC_Init+0xc0>)
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	0952      	lsrs	r2, r2, #5
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006602:	2201      	movs	r2, #1
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006608:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800660c:	e00f      	b.n	800662e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006616:	4909      	ldr	r1, [pc, #36]	; (800663c <NVIC_Init+0xc0>)
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	7812      	ldrb	r2, [r2, #0]
 800661c:	0952      	lsrs	r2, r2, #5
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006622:	2201      	movs	r2, #1
 8006624:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006626:	f100 0320 	add.w	r3, r0, #32
 800662a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr
 8006638:	e000ed00 	.word	0xe000ed00
 800663c:	e000e100 	.word	0xe000e100

08006640 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800664c:	4b08      	ldr	r3, [pc, #32]	; (8006670 <EXTI_GetFlagStatus+0x30>)
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4013      	ands	r3, r2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
 800665c:	e001      	b.n	8006662 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40010400 	.word	0x40010400

08006674 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800667c:	4a03      	ldr	r2, [pc, #12]	; (800668c <EXTI_ClearITPendingBit+0x18>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6153      	str	r3, [r2, #20]
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr
 800668c:	40010400 	.word	0x40010400

08006690 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006690:	b480      	push	{r7}
 8006692:	b089      	sub	sp, #36	; 0x24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800669a:	2300      	movs	r3, #0
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	2300      	movs	r3, #0
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	78db      	ldrb	r3, [r3, #3]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <GPIO_Init+0x44>
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	789b      	ldrb	r3, [r3, #2]
 80066cc:	461a      	mov	r2, r3
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d044      	beq.n	8006768 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e038      	b.n	800675c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80066ea:	2201      	movs	r2, #1
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4013      	ands	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	429a      	cmp	r2, r3
 8006706:	d126      	bne.n	8006756 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800670e:	220f      	movs	r2, #15
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	43db      	mvns	r3, r3
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4013      	ands	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	2b28      	cmp	r3, #40	; 0x28
 8006736:	d105      	bne.n	8006744 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8006738:	2201      	movs	r2, #1
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	409a      	lsls	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	615a      	str	r2, [r3, #20]
 8006742:	e008      	b.n	8006756 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	78db      	ldrb	r3, [r3, #3]
 8006748:	2b48      	cmp	r3, #72	; 0x48
 800674a:	d104      	bne.n	8006756 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800674c:	2201      	movs	r2, #1
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	409a      	lsls	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	3301      	adds	r3, #1
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b07      	cmp	r3, #7
 8006760:	d9c3      	bls.n	80066ea <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	2bff      	cmp	r3, #255	; 0xff
 800676e:	d946      	bls.n	80067fe <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e03a      	b.n	80067f2 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	3308      	adds	r3, #8
 8006780:	2201      	movs	r2, #1
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4013      	ands	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	429a      	cmp	r2, r3
 800679a:	d127      	bne.n	80067ec <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80067a2:	220f      	movs	r2, #15
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	43db      	mvns	r3, r3
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4013      	ands	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	78db      	ldrb	r3, [r3, #3]
 80067c8:	2b28      	cmp	r3, #40	; 0x28
 80067ca:	d105      	bne.n	80067d8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	3308      	adds	r3, #8
 80067d0:	2201      	movs	r2, #1
 80067d2:	409a      	lsls	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	78db      	ldrb	r3, [r3, #3]
 80067dc:	2b48      	cmp	r3, #72	; 0x48
 80067de:	d105      	bne.n	80067ec <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	3308      	adds	r3, #8
 80067e4:	2201      	movs	r2, #1
 80067e6:	409a      	lsls	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b07      	cmp	r3, #7
 80067f6:	d9c1      	bls.n	800677c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	605a      	str	r2, [r3, #4]
  }
}
 80067fe:	bf00      	nop
 8006800:	3724      	adds	r7, #36	; 0x24
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr

08006808 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	887b      	ldrh	r3, [r7, #2]
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
 8006828:	e001      	b.n	800682e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	807b      	strh	r3, [r7, #2]
 8006846:	4613      	mov	r3, r2
 8006848:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 800684a:	787b      	ldrb	r3, [r7, #1]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006850:	887a      	ldrh	r2, [r7, #2]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8006856:	e002      	b.n	800685e <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8006858:	887a      	ldrh	r2, [r7, #2]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	615a      	str	r2, [r3, #20]
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006876:	2300      	movs	r3, #0
 8006878:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800687a:	2304      	movs	r3, #4
 800687c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800687e:	4b57      	ldr	r3, [pc, #348]	; (80069dc <I2C_Init+0x174>)
 8006880:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	889b      	ldrh	r3, [r3, #4]
 8006886:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8006888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800688a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800688e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8006890:	f107 0308 	add.w	r3, r7, #8
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f9d9 	bl	8006c4c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4a4f      	ldr	r2, [pc, #316]	; (80069e0 <I2C_Init+0x178>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	0c9b      	lsrs	r3, r3, #18
 80068a8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80068aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ae:	4313      	orrs	r3, r2
 80068b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068b6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a44      	ldr	r2, [pc, #272]	; (80069e4 <I2C_Init+0x17c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d815      	bhi.n	8006902 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80068e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d801      	bhi.n	80068ee <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80068ea:	2304      	movs	r3, #4
 80068ec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80068ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f2:	4313      	orrs	r3, r2
 80068f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80068f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068f8:	3301      	adds	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	841a      	strh	r2, [r3, #32]
 8006900:	e040      	b.n	8006984 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	88db      	ldrh	r3, [r3, #6]
 8006906:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800690a:	4293      	cmp	r3, r2
 800690c:	d109      	bne.n	8006922 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4413      	add	r3, r2
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	fbb2 f3f3 	udiv	r3, r2, r3
 800691e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006920:	e00e      	b.n	8006940 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009a      	lsls	r2, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8006938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800693a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800693e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8006940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800694a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8006952:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006954:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006956:	4313      	orrs	r3, r2
 8006958:	b29b      	uxth	r3, r3
 800695a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006962:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8006964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <I2C_Init+0x180>)
 8006970:	fb82 1203 	smull	r1, r2, r2, r3
 8006974:	1192      	asrs	r2, r2, #6
 8006976:	17db      	asrs	r3, r3, #31
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	b29b      	uxth	r3, r3
 800697c:	3301      	adds	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006988:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80069a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069a2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80069a6:	f023 0302 	bic.w	r3, r3, #2
 80069aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	889a      	ldrh	r2, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	895b      	ldrh	r3, [r3, #10]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069ba:	4313      	orrs	r3, r2
 80069bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069c2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	899a      	ldrh	r2, [r3, #12]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	891b      	ldrh	r3, [r3, #8]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	811a      	strh	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	007a1200 	.word	0x007a1200
 80069e0:	431bde83 	.word	0x431bde83
 80069e4:	000186a0 	.word	0x000186a0
 80069e8:	10624dd3 	.word	0x10624dd3

080069ec <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8006a0e:	e007      	b.n	8006a20 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	801a      	strh	r2, [r3, #0]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8006a4c:	e007      	b.n	8006a5e <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	801a      	strh	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8006a8a:	e007      	b.n	8006a9c <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	801a      	strh	r2, [r3, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr

08006aa6 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	821a      	strh	r2, [r3, #16]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8006ad4:	78bb      	ldrb	r3, [r7, #2]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	70fb      	strb	r3, [r7, #3]
 8006ae2:	e003      	b.n	8006aec <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	821a      	strh	r2, [r3, #16]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b087      	sub	sp, #28
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	2300      	movs	r3, #0
 8006b12:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8006b14:	2300      	movs	r3, #0
 8006b16:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8a9b      	ldrh	r3, [r3, #20]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8b1b      	ldrh	r3, [r3, #24]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b38:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d102      	bne.n	8006b4c <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
 8006b4a:	e001      	b.n	8006b50 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8006b64:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a12      	ldr	r2, [pc, #72]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6e:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8006b70:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0f      	ldr	r2, [pc, #60]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7a:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b82:	d004      	beq.n	8006b8e <RCC_HSEConfig+0x32>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b8a:	d007      	beq.n	8006b9c <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8006b8c:	e00d      	b.n	8006baa <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a08      	ldr	r2, [pc, #32]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b98:	6013      	str	r3, [r2, #0]
      break;
 8006b9a:	e006      	b.n	8006baa <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a04      	ldr	r2, [pc, #16]	; (8006bb4 <RCC_HSEConfig+0x58>)
 8006ba2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8006ba6:	6013      	str	r3, [r2, #0]
      break;
 8006ba8:	bf00      	nop
  }
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	40021000 	.word	0x40021000

08006bb8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]

  tmpreg = RCC->CFGR;
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <RCC_PLLConfig+0x38>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006be0:	4a03      	ldr	r2, [pc, #12]	; (8006bf0 <RCC_PLLConfig+0x38>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6053      	str	r3, [r2, #4]
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr
 8006bf0:	40021000 	.word	0x40021000

08006bf4 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8006bfe:	4a04      	ldr	r2, [pc, #16]	; (8006c10 <RCC_PLLCmd+0x1c>)
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	6013      	str	r3, [r2, #0]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	42420060 	.word	0x42420060

08006c14 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
  tmpreg = RCC->CFGR;
 8006c20:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <RCC_SYSCLKConfig+0x34>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f023 0303 	bic.w	r3, r3, #3
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006c36:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <RCC_SYSCLKConfig+0x34>)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6053      	str	r3, [r2, #4]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000

08006c4c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	2300      	movs	r3, #0
 8006c62:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8006c64:	4b4f      	ldr	r3, [pc, #316]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f003 030c 	and.w	r3, r3, #12
 8006c6c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d011      	beq.n	8006c98 <RCC_GetClocksFreq+0x4c>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d83a      	bhi.n	8006cf0 <RCC_GetClocksFreq+0xa4>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <RCC_GetClocksFreq+0x3c>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d004      	beq.n	8006c90 <RCC_GetClocksFreq+0x44>
 8006c86:	e033      	b.n	8006cf0 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a47      	ldr	r2, [pc, #284]	; (8006da8 <RCC_GetClocksFreq+0x15c>)
 8006c8c:	601a      	str	r2, [r3, #0]
      break;
 8006c8e:	e033      	b.n	8006cf8 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a45      	ldr	r2, [pc, #276]	; (8006da8 <RCC_GetClocksFreq+0x15c>)
 8006c94:	601a      	str	r2, [r3, #0]
      break;
 8006c96:	e02f      	b.n	8006cf8 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8006c98:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006ca0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8006ca2:	4b40      	ldr	r3, [pc, #256]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006caa:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	0c9b      	lsrs	r3, r3, #18
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4a3b      	ldr	r2, [pc, #236]	; (8006dac <RCC_GetClocksFreq+0x160>)
 8006cbe:	fb03 f202 	mul.w	r2, r3, r2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8006cc6:	e017      	b.n	8006cf8 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8006cc8:	4b36      	ldr	r3, [pc, #216]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d006      	beq.n	8006ce2 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4a35      	ldr	r2, [pc, #212]	; (8006dac <RCC_GetClocksFreq+0x160>)
 8006cd8:	fb03 f202 	mul.w	r2, r3, r2
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
      break;
 8006ce0:	e00a      	b.n	8006cf8 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4a30      	ldr	r2, [pc, #192]	; (8006da8 <RCC_GetClocksFreq+0x15c>)
 8006ce6:	fb03 f202 	mul.w	r2, r3, r2
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
      break;
 8006cee:	e003      	b.n	8006cf8 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a2d      	ldr	r2, [pc, #180]	; (8006da8 <RCC_GetClocksFreq+0x15c>)
 8006cf4:	601a      	str	r2, [r3, #0]
      break;
 8006cf6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d00:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	091b      	lsrs	r3, r3, #4
 8006d06:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8006d08:	4a29      	ldr	r2, [pc, #164]	; (8006db0 <RCC_GetClocksFreq+0x164>)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	40da      	lsrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8006d20:	4b20      	ldr	r3, [pc, #128]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d28:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	0a1b      	lsrs	r3, r3, #8
 8006d2e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8006d30:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <RCC_GetClocksFreq+0x164>)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	40da      	lsrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8006d48:	4b16      	ldr	r3, [pc, #88]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006d50:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	0adb      	lsrs	r3, r3, #11
 8006d56:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8006d58:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <RCC_GetClocksFreq+0x164>)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	40da      	lsrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <RCC_GetClocksFreq+0x158>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d78:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	0b9b      	lsrs	r3, r3, #14
 8006d7e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8006d80:	4a0c      	ldr	r2, [pc, #48]	; (8006db4 <RCC_GetClocksFreq+0x168>)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4413      	add	r3, r2
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	611a      	str	r2, [r3, #16]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr
 8006da4:	40021000 	.word	0x40021000
 8006da8:	007a1200 	.word	0x007a1200
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	20000490 	.word	0x20000490
 8006db4:	200004a0 	.word	0x200004a0

08006db8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d006      	beq.n	8006dd8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <RCC_APB2PeriphClockCmd+0x38>)
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	4908      	ldr	r1, [pc, #32]	; (8006df0 <RCC_APB2PeriphClockCmd+0x38>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8006dd6:	e006      	b.n	8006de6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <RCC_APB2PeriphClockCmd+0x38>)
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	43db      	mvns	r3, r3
 8006de0:	4903      	ldr	r1, [pc, #12]	; (8006df0 <RCC_APB2PeriphClockCmd+0x38>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	618b      	str	r3, [r1, #24]
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	40021000 	.word	0x40021000

08006df4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <RCC_APB1PeriphClockCmd+0x38>)
 8006e08:	69da      	ldr	r2, [r3, #28]
 8006e0a:	4908      	ldr	r1, [pc, #32]	; (8006e2c <RCC_APB1PeriphClockCmd+0x38>)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8006e12:	e006      	b.n	8006e22 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <RCC_APB1PeriphClockCmd+0x38>)
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	4903      	ldr	r1, [pc, #12]	; (8006e2c <RCC_APB1PeriphClockCmd+0x38>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	61cb      	str	r3, [r1, #28]
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	40021000 	.word	0x40021000

08006e30 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8006e3a:	4a04      	ldr	r2, [pc, #16]	; (8006e4c <RCC_ClockSecuritySystemCmd+0x1c>)
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	6013      	str	r3, [r2, #0]
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	4242004c 	.word	0x4242004c

08006e50 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8006e64:	89fb      	ldrh	r3, [r7, #14]
 8006e66:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8006e6a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	881a      	ldrh	r2, [r3, #0]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	885b      	ldrh	r3, [r3, #2]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006e84:	4313      	orrs	r3, r2
 8006e86:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006e94:	4313      	orrs	r3, r2
 8006e96:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	89fb      	ldrh	r3, [r7, #14]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	89fa      	ldrh	r2, [r7, #14]
 8006eb2:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8b9b      	ldrh	r3, [r3, #28]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	8a1a      	ldrh	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	821a      	strh	r2, [r3, #16]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8006ef8:	e007      	b.n	8006f0a <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	801a      	strh	r2, [r3, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
 8006f20:	4613      	mov	r3, r2
 8006f22:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8006f24:	2300      	movs	r3, #0
 8006f26:	81fb      	strh	r3, [r7, #14]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	2201      	movs	r2, #1
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8006f3e:	78bb      	ldrb	r3, [r7, #2]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	889b      	ldrh	r3, [r3, #4]
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	89bb      	ldrh	r3, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8006f54:	e009      	b.n	8006f6a <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	889b      	ldrh	r3, [r3, #4]
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	89bb      	ldrh	r3, [r7, #12]
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	4013      	ands	r3, r2
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	809a      	strh	r2, [r3, #4]
}
 8006f6a:	bf00      	nop
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	887a      	ldrh	r2, [r7, #2]
 8006f84:	819a      	strh	r2, [r3, #12]
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	899b      	ldrh	r3, [r3, #12]
 8006f9c:	b29b      	uxth	r3, r3
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	889b      	ldrh	r3, [r3, #4]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f043 0304 	orr.w	r3, r3, #4
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8006fca:	e007      	b.n	8006fdc <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	889b      	ldrh	r3, [r3, #4]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f023 0304 	bic.w	r3, r3, #4
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	809a      	strh	r2, [r3, #4]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
  }
}
 8007008:	e007      	b.n	800701a <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= CR1_CRCEN_Reset;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	801a      	strh	r2, [r3, #0]
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	891b      	ldrh	r3, [r3, #8]
 8007038:	b29a      	uxth	r2, r3
 800703a:	887b      	ldrh	r3, [r7, #2]
 800703c:	4013      	ands	r3, r2
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
 8007048:	e001      	b.n	800704e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr
	...

0800705c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	81fb      	strh	r3, [r7, #14]

  tmpcr1 = TIMx->CR1;  
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a2e      	ldr	r2, [pc, #184]	; (800712c <TIM_TimeBaseInit+0xd0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d013      	beq.n	80070a0 <TIM_TimeBaseInit+0x44>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a2d      	ldr	r2, [pc, #180]	; (8007130 <TIM_TimeBaseInit+0xd4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00f      	beq.n	80070a0 <TIM_TimeBaseInit+0x44>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007086:	d00b      	beq.n	80070a0 <TIM_TimeBaseInit+0x44>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a2a      	ldr	r2, [pc, #168]	; (8007134 <TIM_TimeBaseInit+0xd8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d007      	beq.n	80070a0 <TIM_TimeBaseInit+0x44>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a29      	ldr	r2, [pc, #164]	; (8007138 <TIM_TimeBaseInit+0xdc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d003      	beq.n	80070a0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a28      	ldr	r2, [pc, #160]	; (800713c <TIM_TimeBaseInit+0xe0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d108      	bne.n	80070b2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	885a      	ldrh	r2, [r3, #2]
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a22      	ldr	r2, [pc, #136]	; (8007140 <TIM_TimeBaseInit+0xe4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00c      	beq.n	80070d4 <TIM_TimeBaseInit+0x78>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a21      	ldr	r2, [pc, #132]	; (8007144 <TIM_TimeBaseInit+0xe8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d008      	beq.n	80070d4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	88da      	ldrh	r2, [r3, #6]
 80070ce:	89fb      	ldrh	r3, [r7, #14]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	89fa      	ldrh	r2, [r7, #14]
 80070d8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	889a      	ldrh	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	881a      	ldrh	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a0f      	ldr	r2, [pc, #60]	; (800712c <TIM_TimeBaseInit+0xd0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00f      	beq.n	8007112 <TIM_TimeBaseInit+0xb6>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a0e      	ldr	r2, [pc, #56]	; (8007130 <TIM_TimeBaseInit+0xd4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00b      	beq.n	8007112 <TIM_TimeBaseInit+0xb6>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a12      	ldr	r2, [pc, #72]	; (8007148 <TIM_TimeBaseInit+0xec>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d007      	beq.n	8007112 <TIM_TimeBaseInit+0xb6>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a11      	ldr	r2, [pc, #68]	; (800714c <TIM_TimeBaseInit+0xf0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d003      	beq.n	8007112 <TIM_TimeBaseInit+0xb6>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a10      	ldr	r2, [pc, #64]	; (8007150 <TIM_TimeBaseInit+0xf4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d104      	bne.n	800711c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	7a1b      	ldrb	r3, [r3, #8]
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	829a      	strh	r2, [r3, #20]
}
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr
 800712c:	40012c00 	.word	0x40012c00
 8007130:	40013400 	.word	0x40013400
 8007134:	40000400 	.word	0x40000400
 8007138:	40000800 	.word	0x40000800
 800713c:	40000c00 	.word	0x40000c00
 8007140:	40001000 	.word	0x40001000
 8007144:	40001400 	.word	0x40001400
 8007148:	40014000 	.word	0x40014000
 800714c:	40014400 	.word	0x40014400
 8007150:	40014800 	.word	0x40014800

08007154 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8007176:	e007      	b.n	8007188 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	801a      	strh	r2, [r3, #0]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr

08007192 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	807b      	strh	r3, [r7, #2]
 800719e:	4613      	mov	r3, r2
 80071a0:	707b      	strb	r3, [r7, #1]
  if (NewState != DISABLE)
 80071a2:	787b      	ldrb	r3, [r7, #1]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	899b      	ldrh	r3, [r3, #12]
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	887b      	ldrh	r3, [r7, #2]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80071b8:	e009      	b.n	80071ce <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	899b      	ldrh	r3, [r3, #12]
 80071be:	b29a      	uxth	r2, r3
 80071c0:	887b      	ldrh	r3, [r7, #2]
 80071c2:	43db      	mvns	r3, r3
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4013      	ands	r3, r2
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	819a      	strh	r2, [r3, #12]
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80071e4:	2300      	movs	r3, #0
 80071e6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	81bb      	strh	r3, [r7, #12]
 80071ec:	2300      	movs	r3, #0
 80071ee:	817b      	strh	r3, [r7, #10]
   
  itstatus = TIMx->SR & TIM_IT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8a1b      	ldrh	r3, [r3, #16]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	887b      	ldrh	r3, [r7, #2]
 80071f8:	4013      	ands	r3, r2
 80071fa:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	899b      	ldrh	r3, [r3, #12]
 8007200:	b29a      	uxth	r2, r3
 8007202:	887b      	ldrh	r3, [r7, #2]
 8007204:	4013      	ands	r3, r2
 8007206:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8007208:	89bb      	ldrh	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <TIM_GetITStatus+0x42>
 800720e:	897b      	ldrh	r3, [r7, #10]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
 8007218:	e001      	b.n	800721e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr

0800722a <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	807b      	strh	r3, [r7, #2]
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8007236:	887b      	ldrh	r3, [r7, #2]
 8007238:	43db      	mvns	r3, r3
 800723a:	b29a      	uxth	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	821a      	strh	r2, [r3, #16]
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
	...

0800724c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	; 0x30
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8007256:	2300      	movs	r3, #0
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800725a:	2300      	movs	r3, #0
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8007262:	2300      	movs	r3, #0
 8007264:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  usartxbase = (uint32_t)USARTx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8a1b      	ldrh	r3, [r3, #16]
 8007272:	b29b      	uxth	r3, r3
 8007274:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8007276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007278:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800727c:	4013      	ands	r3, r2
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	88db      	ldrh	r3, [r3, #6]
 8007284:	461a      	mov	r2, r3
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	4313      	orrs	r3, r2
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	b29a      	uxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	899b      	ldrh	r3, [r3, #12]
 8007298:	b29b      	uxth	r3, r3
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800729c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80072a2:	4013      	ands	r3, r2
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	889a      	ldrh	r2, [r3, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	891b      	ldrh	r3, [r3, #8]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80072b6:	4313      	orrs	r3, r2
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	461a      	mov	r2, r3
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	4313      	orrs	r3, r2
 80072c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8a9b      	ldrh	r3, [r3, #20]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80072d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80072d8:	4013      	ands	r3, r2
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	899b      	ldrh	r3, [r3, #12]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	4313      	orrs	r3, r2
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80072f0:	f107 0308 	add.w	r3, r7, #8
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fca9 	bl	8006c4c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	4a2e      	ldr	r2, [pc, #184]	; (80073b8 <USART_Init+0x16c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d102      	bne.n	8007308 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 8007306:	e001      	b.n	800730c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	899b      	ldrh	r3, [r3, #12]
 8007310:	b29b      	uxth	r3, r3
 8007312:	b21b      	sxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	da0c      	bge.n	8007332 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8007318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009a      	lsls	r2, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
 8007330:	e00b      	b.n	800734a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8007332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009a      	lsls	r2, r3, #2
 800733c:	441a      	add	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <USART_Init+0x170>)
 800734e:	fba2 2303 	umull	r2, r3, r2, r3
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	091b      	lsrs	r3, r3, #4
 800735c:	2264      	movs	r2, #100	; 0x64
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	899b      	ldrh	r3, [r3, #12]
 800736c:	b29b      	uxth	r3, r3
 800736e:	b21b      	sxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	da0c      	bge.n	800738e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	3332      	adds	r3, #50	; 0x32
 800737a:	4a10      	ldr	r2, [pc, #64]	; (80073bc <USART_Init+0x170>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007388:	4313      	orrs	r3, r2
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738c:	e00b      	b.n	80073a6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	3332      	adds	r3, #50	; 0x32
 8007394:	4a09      	ldr	r2, [pc, #36]	; (80073bc <USART_Init+0x170>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a2:	4313      	orrs	r3, r2
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	811a      	strh	r2, [r3, #8]
}
 80073ae:	bf00      	nop
 80073b0:	3730      	adds	r7, #48	; 0x30
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	40013800 	.word	0x40013800
 80073bc:	51eb851f 	.word	0x51eb851f

080073c0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d008      	beq.n	80073e4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	899b      	ldrh	r3, [r3, #12]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073dc:	b29a      	uxth	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80073e2:	e007      	b.n	80073f4 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	899b      	ldrh	r3, [r3, #12]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	819a      	strh	r2, [r3, #12]
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr

080073fe <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80073fe:	b480      	push	{r7}
 8007400:	b087      	sub	sp, #28
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	807b      	strh	r3, [r7, #2]
 800740a:	4613      	mov	r3, r2
 800740c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]
  /* The CTS interrupt is not available for UART4 and UART5 */
  
  usartxbase = (uint32_t)USARTx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	b2db      	uxtb	r3, r3
 800742a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800742c:	887b      	ldrh	r3, [r7, #2]
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8007434:	2201      	movs	r2, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d103      	bne.n	800744c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	330c      	adds	r3, #12
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	e009      	b.n	8007460 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d103      	bne.n	800745a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3310      	adds	r3, #16
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e002      	b.n	8007460 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	3314      	adds	r3, #20
 800745e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8007460:	787b      	ldrb	r3, [r7, #1]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d006      	beq.n	8007474 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	6819      	ldr	r1, [r3, #0]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8007472:	e006      	b.n	8007482 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	6819      	ldr	r1, [r3, #0]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	43da      	mvns	r2, r3
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	400a      	ands	r2, r1
 8007480:	601a      	str	r2, [r3, #0]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8007498:	887b      	ldrh	r3, [r7, #2]
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	b29a      	uxth	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	809a      	strh	r2, [r3, #4]
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr

080074ae <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	889b      	ldrh	r3, [r3, #4]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c0:	b29b      	uxth	r3, r3
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr

080074cc <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
  /* The CTS flag is not available for UART4 and UART5 */
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	887b      	ldrh	r3, [r7, #2]
 80074e4:	4013      	ands	r3, r2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80074ec:	2301      	movs	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	e001      	b.n	80074f6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800750e:	2300      	movs	r3, #0
 8007510:	81fb      	strh	r3, [r7, #14]
 8007512:	2300      	movs	r3, #0
 8007514:	81bb      	strh	r3, [r7, #12]
  
  bitpos = USART_IT >> 0x08;
 8007516:	887b      	ldrh	r3, [r7, #2]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800751c:	89fb      	ldrh	r3, [r7, #14]
 800751e:	2201      	movs	r2, #1
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8007526:	89bb      	ldrh	r3, [r7, #12]
 8007528:	43db      	mvns	r3, r3
 800752a:	b29a      	uxth	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	801a      	strh	r2, [r3, #0]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
	...

0800753c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800753c:	480c      	ldr	r0, [pc, #48]	; (8007570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800753e:	490d      	ldr	r1, [pc, #52]	; (8007574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007540:	4a0d      	ldr	r2, [pc, #52]	; (8007578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007544:	e002      	b.n	800754c <LoopCopyDataInit>

08007546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800754a:	3304      	adds	r3, #4

0800754c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800754c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800754e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007550:	d3f9      	bcc.n	8007546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007552:	4a0a      	ldr	r2, [pc, #40]	; (800757c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007554:	4c0a      	ldr	r4, [pc, #40]	; (8007580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007558:	e001      	b.n	800755e <LoopFillZerobss>

0800755a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800755a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800755c:	3204      	adds	r2, #4

0800755e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800755e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007560:	d3fb      	bcc.n	800755a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007562:	f7f8 fdfb 	bl	800015c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007566:	f000 fab7 	bl	8007ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800756a:	f7f8 ffdf 	bl	800052c <main>
  bx lr
 800756e:	4770      	bx	lr
  ldr r0, =_sdata
 8007570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007574:	20000508 	.word	0x20000508
  ldr r2, =_sidata
 8007578:	08009124 	.word	0x08009124
  ldr r2, =_sbss
 800757c:	20000508 	.word	0x20000508
  ldr r4, =_ebss
 8007580:	20000ec8 	.word	0x20000ec8

08007584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007584:	e7fe      	b.n	8007584 <ADC1_2_IRQHandler>
	...

08007588 <Usart2Init>:
static int g_iEnd = 0;

int flag_usart = 0;

//USART2 для передачи на компьютер
void Usart2Init(void) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART2_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART2 initialization: PA2 - USART2_TX, PA3 - USART2_RX */

	USART2_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_PORT, ENABLE );
 800758e:	2101      	movs	r1, #1
 8007590:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007594:	f7ff fc2e 	bl	8006df4 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8007598:	2302      	movs	r3, #2
 800759a:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 800759c:	2318      	movs	r3, #24
 800759e:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_TX_PIN;
 80075a0:	2304      	movs	r3, #4
 80075a2:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	4619      	mov	r1, r3
 80075aa:	4821      	ldr	r0, [pc, #132]	; (8007630 <Usart2Init+0xa8>)
 80075ac:	f7ff f870 	bl	8006690 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 80075b0:	2348      	movs	r3, #72	; 0x48
 80075b2:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_RX_PIN;
 80075b4:	2308      	movs	r3, #8
 80075b6:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 80075b8:	f107 0314 	add.w	r3, r7, #20
 80075bc:	4619      	mov	r1, r3
 80075be:	481c      	ldr	r0, [pc, #112]	; (8007630 <Usart2Init+0xa8>)
 80075c0:	f7ff f866 	bl	8006690 <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_APBPORT, ENABLE );
 80075c4:	2101      	movs	r1, #1
 80075c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80075ca:	f7ff fbf5 	bl	8006db8 <RCC_APB2PeriphClockCmd>

	USART2_InitStruct.USART_BaudRate = 9600;//для работы с SPI2 только эта скорость подходит
 80075ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80075d2:	607b      	str	r3, [r7, #4]
	USART2_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80075d4:	2300      	movs	r3, #0
 80075d6:	823b      	strh	r3, [r7, #16]
	USART2_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80075d8:	230c      	movs	r3, #12
 80075da:	81fb      	strh	r3, [r7, #14]
	USART2_InitStruct.USART_Parity = USART_Parity_No;
 80075dc:	2300      	movs	r3, #0
 80075de:	81bb      	strh	r3, [r7, #12]
	USART2_InitStruct.USART_StopBits = USART_StopBits_1;
 80075e0:	2300      	movs	r3, #0
 80075e2:	817b      	strh	r3, [r7, #10]
	USART2_InitStruct.USART_WordLength = USART_WordLength_8b;
 80075e4:	2300      	movs	r3, #0
 80075e6:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART2_NUM, &USART2_InitStruct );
 80075e8:	1d3b      	adds	r3, r7, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4811      	ldr	r0, [pc, #68]	; (8007634 <Usart2Init+0xac>)
 80075ee:	f7ff fe2d 	bl	800724c <USART_Init>

	USART_Cmd ( USART2_NUM, ENABLE );
 80075f2:	2101      	movs	r1, #1
 80075f4:	480f      	ldr	r0, [pc, #60]	; (8007634 <Usart2Init+0xac>)
 80075f6:	f7ff fee3 	bl	80073c0 <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 80075fa:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80075fe:	f7fe ffab 	bl	8006558 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQ;
 8007602:	2326      	movs	r3, #38	; 0x26
 8007604:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8007606:	2301      	movs	r3, #1
 8007608:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8007612:	463b      	mov	r3, r7
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe ffb1 	bl	800657c <NVIC_Init>

	USART_ITConfig ( USART2_NUM, USART_IT_RXNE, ENABLE );
 800761a:	2201      	movs	r2, #1
 800761c:	f240 5125 	movw	r1, #1317	; 0x525
 8007620:	4804      	ldr	r0, [pc, #16]	; (8007634 <Usart2Init+0xac>)
 8007622:	f7ff feec 	bl	80073fe <USART_ITConfig>

}
 8007626:	bf00      	nop
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40010800 	.word	0x40010800
 8007634:	40004400 	.word	0x40004400

08007638 <Usart2_SendData>:
//******************************************************************


//******************************************************************
void Usart2_SendData (char* strcmd, int sz_cmd){
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
//Передача на копьютер до символа окончания строки (0x00).
	for(int ik=0;ik<sz_cmd;ik++){
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	e013      	b.n	8007670 <Usart2_SendData+0x38>
	    //if(strcmd[ik]!=0x00){
 		  while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE) == RESET){}
 8007648:	bf00      	nop
 800764a:	2180      	movs	r1, #128	; 0x80
 800764c:	480d      	ldr	r0, [pc, #52]	; (8007684 <Usart2_SendData+0x4c>)
 800764e:	f7ff ff3d 	bl	80074cc <USART_GetFlagStatus>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0f8      	beq.n	800764a <Usart2_SendData+0x12>
		  USART_SendData(USART2_NUM, strcmd[ik]);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	4807      	ldr	r0, [pc, #28]	; (8007684 <Usart2_SendData+0x4c>)
 8007666:	f7ff ff11 	bl	800748c <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	dbe7      	blt.n	8007648 <Usart2_SendData+0x10>
	    //}
	}

}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	40004400 	.word	0x40004400

08007688 <SCAN_UsartInit>:

//******************************************************************
//******************************************************************
void SCAN_UsartInit(void) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART1 initialization: PA9 - USART1_TX, PA10 - USART1_RX */

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_PORT, ENABLE );
 800768e:	2101      	movs	r1, #1
 8007690:	2004      	movs	r0, #4
 8007692:	f7ff fb91 	bl	8006db8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8007696:	2302      	movs	r3, #2
 8007698:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 800769a:	2318      	movs	r3, #24
 800769c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_TX_PIN;
 800769e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a2:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	4619      	mov	r1, r3
 80076aa:	4821      	ldr	r0, [pc, #132]	; (8007730 <SCAN_UsartInit+0xa8>)
 80076ac:	f7fe fff0 	bl	8006690 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 80076b0:	2348      	movs	r3, #72	; 0x48
 80076b2:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_RX_PIN;
 80076b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b8:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 80076ba:	f107 0314 	add.w	r3, r7, #20
 80076be:	4619      	mov	r1, r3
 80076c0:	481b      	ldr	r0, [pc, #108]	; (8007730 <SCAN_UsartInit+0xa8>)
 80076c2:	f7fe ffe5 	bl	8006690 <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_APBPORT, ENABLE );
 80076c6:	2101      	movs	r1, #1
 80076c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80076cc:	f7ff fb74 	bl	8006db8 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 9600;
 80076d0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80076d4:	607b      	str	r3, [r7, #4]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80076d6:	2300      	movs	r3, #0
 80076d8:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80076da:	230c      	movs	r3, #12
 80076dc:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 80076de:	2300      	movs	r3, #0
 80076e0:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80076e2:	2300      	movs	r3, #0
 80076e4:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80076e6:	2300      	movs	r3, #0
 80076e8:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART_NUM, &USART_InitStruct );
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4811      	ldr	r0, [pc, #68]	; (8007734 <SCAN_UsartInit+0xac>)
 80076f0:	f7ff fdac 	bl	800724c <USART_Init>

	USART_Cmd ( USART_NUM, ENABLE );
 80076f4:	2101      	movs	r1, #1
 80076f6:	480f      	ldr	r0, [pc, #60]	; (8007734 <SCAN_UsartInit+0xac>)
 80076f8:	f7ff fe62 	bl	80073c0 <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 80076fc:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8007700:	f7fe ff2a 	bl	8006558 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART_IRQ;
 8007704:	2325      	movs	r3, #37	; 0x25
 8007706:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8007708:	2301      	movs	r3, #1
 800770a:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8007714:	463b      	mov	r3, r7
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe ff30 	bl	800657c <NVIC_Init>

	USART_ITConfig ( USART_NUM, USART_IT_RXNE, ENABLE );
 800771c:	2201      	movs	r2, #1
 800771e:	f240 5125 	movw	r1, #1317	; 0x525
 8007722:	4804      	ldr	r0, [pc, #16]	; (8007734 <SCAN_UsartInit+0xac>)
 8007724:	f7ff fe6b 	bl	80073fe <USART_ITConfig>
}
 8007728:	bf00      	nop
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40010800 	.word	0x40010800
 8007734:	40013800 	.word	0x40013800

08007738 <SCAN_SendCMD>:



void SCAN_SendCMD (char* strcmd,int sz_cmd){
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]

	for(int ik=0;ik<sz_cmd;ik++){
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	e013      	b.n	8007770 <SCAN_SendCMD+0x38>

		 while (READ_BIT(USART_NUM->SR, USART_SR_TXE) != (USART_SR_TXE)) {}
 8007748:	bf00      	nop
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <SCAN_SendCMD+0x4c>)
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	b29b      	uxth	r3, r3
 8007750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	d1f8      	bne.n	800774a <SCAN_SendCMD+0x12>

		USART_SendData(USART_NUM, strcmd[ik]);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	4619      	mov	r1, r3
 8007764:	4807      	ldr	r0, [pc, #28]	; (8007784 <SCAN_SendCMD+0x4c>)
 8007766:	f7ff fe91 	bl	800748c <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	dbe7      	blt.n	8007748 <SCAN_SendCMD+0x10>
	}


}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40013800 	.word	0x40013800

08007788 <USART_NUM_IRQHandler>:

void USART_NUM_IRQHandler ( void ) {
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus ( USART_NUM, USART_FLAG_RXNE ) == SET) {
 800778c:	2120      	movs	r1, #32
 800778e:	4824      	ldr	r0, [pc, #144]	; (8007820 <USART_NUM_IRQHandler+0x98>)
 8007790:	f7ff fe9c 	bl	80074cc <USART_GetFlagStatus>
 8007794:	4603      	mov	r3, r0
 8007796:	2b01      	cmp	r3, #1
 8007798:	d13f      	bne.n	800781a <USART_NUM_IRQHandler+0x92>
		if(b_getversion){
 800779a:	4b22      	ldr	r3, [pc, #136]	; (8007824 <USART_NUM_IRQHandler+0x9c>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01e      	beq.n	80077e0 <USART_NUM_IRQHandler+0x58>

			USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 80077a2:	f240 5125 	movw	r1, #1317	; 0x525
 80077a6:	481e      	ldr	r0, [pc, #120]	; (8007820 <USART_NUM_IRQHandler+0x98>)
 80077a8:	f7ff feab 	bl	8007502 <USART_ClearITPendingBit>
			ScanerVersion [ cntbyteversion++ ] = USART_ReceiveData ( USART_NUM );
 80077ac:	481c      	ldr	r0, [pc, #112]	; (8007820 <USART_NUM_IRQHandler+0x98>)
 80077ae:	f7ff fe7e 	bl	80074ae <USART_ReceiveData>
 80077b2:	4603      	mov	r3, r0
 80077b4:	4618      	mov	r0, r3
 80077b6:	4b1c      	ldr	r3, [pc, #112]	; (8007828 <USART_NUM_IRQHandler+0xa0>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	b2d1      	uxtb	r1, r2
 80077be:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <USART_NUM_IRQHandler+0xa0>)
 80077c0:	7011      	strb	r1, [r2, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	b2c1      	uxtb	r1, r0
 80077c6:	4b19      	ldr	r3, [pc, #100]	; (800782c <USART_NUM_IRQHandler+0xa4>)
 80077c8:	5499      	strb	r1, [r3, r2]
			if (cntbyteversion>71){
 80077ca:	4b17      	ldr	r3, [pc, #92]	; (8007828 <USART_NUM_IRQHandler+0xa0>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b47      	cmp	r3, #71	; 0x47
 80077d0:	d923      	bls.n	800781a <USART_NUM_IRQHandler+0x92>
				b_getversion=DISABLE;
 80077d2:	4b14      	ldr	r3, [pc, #80]	; (8007824 <USART_NUM_IRQHandler+0x9c>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
				cntbyteversion=0;
 80077d8:	4b13      	ldr	r3, [pc, #76]	; (8007828 <USART_NUM_IRQHandler+0xa0>)
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
		g_iEnd %= QUEUE_LEN;
		}
	}
}
 80077de:	e01c      	b.n	800781a <USART_NUM_IRQHandler+0x92>
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 80077e0:	f240 5125 	movw	r1, #1317	; 0x525
 80077e4:	480e      	ldr	r0, [pc, #56]	; (8007820 <USART_NUM_IRQHandler+0x98>)
 80077e6:	f7ff fe8c 	bl	8007502 <USART_ClearITPendingBit>
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
 80077ea:	480d      	ldr	r0, [pc, #52]	; (8007820 <USART_NUM_IRQHandler+0x98>)
 80077ec:	f7ff fe5f 	bl	80074ae <USART_ReceiveData>
 80077f0:	4603      	mov	r3, r0
 80077f2:	4618      	mov	r0, r3
 80077f4:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <USART_NUM_IRQHandler+0xa8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	490d      	ldr	r1, [pc, #52]	; (8007830 <USART_NUM_IRQHandler+0xa8>)
 80077fc:	600a      	str	r2, [r1, #0]
 80077fe:	b2c1      	uxtb	r1, r0
 8007800:	4a0c      	ldr	r2, [pc, #48]	; (8007834 <USART_NUM_IRQHandler+0xac>)
 8007802:	54d1      	strb	r1, [r2, r3]
		g_iEnd %= QUEUE_LEN;
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <USART_NUM_IRQHandler+0xa8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	425a      	negs	r2, r3
 800780a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800780e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007812:	bf58      	it	pl
 8007814:	4253      	negpl	r3, r2
 8007816:	4a06      	ldr	r2, [pc, #24]	; (8007830 <USART_NUM_IRQHandler+0xa8>)
 8007818:	6013      	str	r3, [r2, #0]
}
 800781a:	bf00      	nop
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40013800 	.word	0x40013800
 8007824:	20000640 	.word	0x20000640
 8007828:	20000dd4 	.word	0x20000dd4
 800782c:	20000dd8 	.word	0x20000dd8
 8007830:	20000eac 	.word	0x20000eac
 8007834:	20000e68 	.word	0x20000e68

08007838 <FIFO_GetNextData>:




ErrorStatus FIFO_GetNextData ( char * pResult ) {
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]

	if ( g_iBegin != g_iEnd ) {
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <FIFO_GetNextData+0x50>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4b10      	ldr	r3, [pc, #64]	; (800788c <FIFO_GetNextData+0x54>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d015      	beq.n	800787c <FIFO_GetNextData+0x44>
		*pResult = g_aInputQueue [ g_iBegin++ ];
 8007850:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <FIFO_GetNextData+0x50>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	490c      	ldr	r1, [pc, #48]	; (8007888 <FIFO_GetNextData+0x50>)
 8007858:	600a      	str	r2, [r1, #0]
 800785a:	4a0d      	ldr	r2, [pc, #52]	; (8007890 <FIFO_GetNextData+0x58>)
 800785c:	5cd2      	ldrb	r2, [r2, r3]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	701a      	strb	r2, [r3, #0]
		g_iBegin %= QUEUE_LEN;
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <FIFO_GetNextData+0x50>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	425a      	negs	r2, r3
 8007868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800786c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007870:	bf58      	it	pl
 8007872:	4253      	negpl	r3, r2
 8007874:	4a04      	ldr	r2, [pc, #16]	; (8007888 <FIFO_GetNextData+0x50>)
 8007876:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr
 8007888:	20000ea8 	.word	0x20000ea8
 800788c:	20000eac 	.word	0x20000eac
 8007890:	20000e68 	.word	0x20000e68

08007894 <Date_GetNextDate>:



ErrorStatus Date_GetNextDate(char *dResult ){
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
	if(date_iBegin != date_iEnd){
 80078a0:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <Date_GetNextDate+0x50>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <Date_GetNextDate+0x54>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d015      	beq.n	80078d8 <Date_GetNextDate+0x44>
		*dResult = date_InputQueue[date_iBegin++];
 80078ac:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <Date_GetNextDate+0x50>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	490c      	ldr	r1, [pc, #48]	; (80078e4 <Date_GetNextDate+0x50>)
 80078b4:	600a      	str	r2, [r1, #0]
 80078b6:	4a0d      	ldr	r2, [pc, #52]	; (80078ec <Date_GetNextDate+0x58>)
 80078b8:	5cd2      	ldrb	r2, [r2, r3]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	701a      	strb	r2, [r3, #0]
		date_iBegin %= DATE_LEN;
 80078be:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <Date_GetNextDate+0x50>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	425a      	negs	r2, r3
 80078c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80078cc:	bf58      	it	pl
 80078ce:	4253      	negpl	r3, r2
 80078d0:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <Date_GetNextDate+0x50>)
 80078d2:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr
 80078e4:	20000e60 	.word	0x20000e60
 80078e8:	20000e64 	.word	0x20000e64
 80078ec:	20000e20 	.word	0x20000e20

080078f0 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus ( USART2_NUM, USART_FLAG_RXNE) == SET){
 80078f4:	2120      	movs	r1, #32
 80078f6:	4814      	ldr	r0, [pc, #80]	; (8007948 <USART2_IRQHandler+0x58>)
 80078f8:	f7ff fde8 	bl	80074cc <USART_GetFlagStatus>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d11f      	bne.n	8007942 <USART2_IRQHandler+0x52>
		flag_usart = 1;
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <USART2_IRQHandler+0x5c>)
 8007904:	2201      	movs	r2, #1
 8007906:	601a      	str	r2, [r3, #0]
		USART_ClearITPendingBit(USART2_NUM, USART_IT_RXNE);
 8007908:	f240 5125 	movw	r1, #1317	; 0x525
 800790c:	480e      	ldr	r0, [pc, #56]	; (8007948 <USART2_IRQHandler+0x58>)
 800790e:	f7ff fdf8 	bl	8007502 <USART_ClearITPendingBit>
		date_InputQueue [ date_iEnd++ ] = USART_ReceiveData(USART2_NUM);
 8007912:	480d      	ldr	r0, [pc, #52]	; (8007948 <USART2_IRQHandler+0x58>)
 8007914:	f7ff fdcb 	bl	80074ae <USART_ReceiveData>
 8007918:	4603      	mov	r3, r0
 800791a:	4618      	mov	r0, r3
 800791c:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <USART2_IRQHandler+0x60>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	490b      	ldr	r1, [pc, #44]	; (8007950 <USART2_IRQHandler+0x60>)
 8007924:	600a      	str	r2, [r1, #0]
 8007926:	b2c1      	uxtb	r1, r0
 8007928:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <USART2_IRQHandler+0x64>)
 800792a:	54d1      	strb	r1, [r2, r3]
		date_iEnd %= DATE_LEN;
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <USART2_IRQHandler+0x60>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	425a      	negs	r2, r3
 8007932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007936:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800793a:	bf58      	it	pl
 800793c:	4253      	negpl	r3, r2
 800793e:	4a04      	ldr	r2, [pc, #16]	; (8007950 <USART2_IRQHandler+0x60>)
 8007940:	6013      	str	r3, [r2, #0]

	}
}
 8007942:	bf00      	nop
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40004400 	.word	0x40004400
 800794c:	20000eb0 	.word	0x20000eb0
 8007950:	20000e64 	.word	0x20000e64
 8007954:	20000e20 	.word	0x20000e20

08007958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	return 1;
 800795c:	2301      	movs	r3, #1
}
 800795e:	4618      	mov	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr

08007966 <_kill>:

int _kill(int pid, int sig)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007970:	f000 f8ac 	bl	8007acc <__errno>
 8007974:	4603      	mov	r3, r0
 8007976:	2216      	movs	r2, #22
 8007978:	601a      	str	r2, [r3, #0]
	return -1;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <_exit>:

void _exit (int status)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800798e:	f04f 31ff 	mov.w	r1, #4294967295
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff ffe7 	bl	8007966 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007998:	e7fe      	b.n	8007998 <_exit+0x12>

0800799a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	e00a      	b.n	80079c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80079ac:	f3af 8000 	nop.w
 80079b0:	4601      	mov	r1, r0
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	60ba      	str	r2, [r7, #8]
 80079b8:	b2ca      	uxtb	r2, r1
 80079ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	3301      	adds	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	dbf0      	blt.n	80079ac <_read+0x12>
	}

return len;
 80079ca:	687b      	ldr	r3, [r7, #4]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079e0:	2300      	movs	r3, #0
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	e009      	b.n	80079fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	60ba      	str	r2, [r7, #8]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3301      	adds	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	dbf1      	blt.n	80079e6 <_write+0x12>
	}
	return len;
 8007a02:	687b      	ldr	r3, [r7, #4]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <_close>:

int _close(int file)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	return -1;
 8007a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr

08007a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a32:	605a      	str	r2, [r3, #4]
	return 0;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr

08007a40 <_isatty>:

int _isatty(int file)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	return 1;
 8007a48:	2301      	movs	r3, #1
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bc80      	pop	{r7}
 8007a52:	4770      	bx	lr

08007a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr

08007a6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a74:	4b11      	ldr	r3, [pc, #68]	; (8007abc <_sbrk+0x50>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <_sbrk+0x16>
		heap_end = &end;
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <_sbrk+0x50>)
 8007a7e:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <_sbrk+0x54>)
 8007a80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a82:	4b0e      	ldr	r3, [pc, #56]	; (8007abc <_sbrk+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <_sbrk+0x50>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	466a      	mov	r2, sp
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d907      	bls.n	8007aa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a96:	f000 f819 	bl	8007acc <__errno>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	220c      	movs	r2, #12
 8007a9e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa4:	e006      	b.n	8007ab4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <_sbrk+0x50>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	4a03      	ldr	r2, [pc, #12]	; (8007abc <_sbrk+0x50>)
 8007ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000eb4 	.word	0x20000eb4
 8007ac0:	20000ec8 	.word	0x20000ec8

08007ac4 <atoi>:
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	f000 b9b0 	b.w	8007e2c <strtol>

08007acc <__errno>:
 8007acc:	4b01      	ldr	r3, [pc, #4]	; (8007ad4 <__errno+0x8>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	200004a4 	.word	0x200004a4

08007ad8 <__libc_init_array>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	2600      	movs	r6, #0
 8007adc:	4d0c      	ldr	r5, [pc, #48]	; (8007b10 <__libc_init_array+0x38>)
 8007ade:	4c0d      	ldr	r4, [pc, #52]	; (8007b14 <__libc_init_array+0x3c>)
 8007ae0:	1b64      	subs	r4, r4, r5
 8007ae2:	10a4      	asrs	r4, r4, #2
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	d109      	bne.n	8007afc <__libc_init_array+0x24>
 8007ae8:	f001 f9aa 	bl	8008e40 <_init>
 8007aec:	2600      	movs	r6, #0
 8007aee:	4d0a      	ldr	r5, [pc, #40]	; (8007b18 <__libc_init_array+0x40>)
 8007af0:	4c0a      	ldr	r4, [pc, #40]	; (8007b1c <__libc_init_array+0x44>)
 8007af2:	1b64      	subs	r4, r4, r5
 8007af4:	10a4      	asrs	r4, r4, #2
 8007af6:	42a6      	cmp	r6, r4
 8007af8:	d105      	bne.n	8007b06 <__libc_init_array+0x2e>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b00:	4798      	blx	r3
 8007b02:	3601      	adds	r6, #1
 8007b04:	e7ee      	b.n	8007ae4 <__libc_init_array+0xc>
 8007b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0a:	4798      	blx	r3
 8007b0c:	3601      	adds	r6, #1
 8007b0e:	e7f2      	b.n	8007af6 <__libc_init_array+0x1e>
 8007b10:	0800911c 	.word	0x0800911c
 8007b14:	0800911c 	.word	0x0800911c
 8007b18:	0800911c 	.word	0x0800911c
 8007b1c:	08009120 	.word	0x08009120

08007b20 <memcmp>:
 8007b20:	b510      	push	{r4, lr}
 8007b22:	3901      	subs	r1, #1
 8007b24:	4402      	add	r2, r0
 8007b26:	4290      	cmp	r0, r2
 8007b28:	d101      	bne.n	8007b2e <memcmp+0xe>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e005      	b.n	8007b3a <memcmp+0x1a>
 8007b2e:	7803      	ldrb	r3, [r0, #0]
 8007b30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d001      	beq.n	8007b3c <memcmp+0x1c>
 8007b38:	1b18      	subs	r0, r3, r4
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	e7f2      	b.n	8007b26 <memcmp+0x6>

08007b40 <memcpy>:
 8007b40:	440a      	add	r2, r1
 8007b42:	4291      	cmp	r1, r2
 8007b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b48:	d100      	bne.n	8007b4c <memcpy+0xc>
 8007b4a:	4770      	bx	lr
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b58:	d1f9      	bne.n	8007b4e <memcpy+0xe>
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <memmove>:
 8007b5c:	4288      	cmp	r0, r1
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	eb01 0402 	add.w	r4, r1, r2
 8007b64:	d902      	bls.n	8007b6c <memmove+0x10>
 8007b66:	4284      	cmp	r4, r0
 8007b68:	4623      	mov	r3, r4
 8007b6a:	d807      	bhi.n	8007b7c <memmove+0x20>
 8007b6c:	1e43      	subs	r3, r0, #1
 8007b6e:	42a1      	cmp	r1, r4
 8007b70:	d008      	beq.n	8007b84 <memmove+0x28>
 8007b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b7a:	e7f8      	b.n	8007b6e <memmove+0x12>
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	4402      	add	r2, r0
 8007b80:	428a      	cmp	r2, r1
 8007b82:	d100      	bne.n	8007b86 <memmove+0x2a>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b8e:	e7f7      	b.n	8007b80 <memmove+0x24>

08007b90 <memset>:
 8007b90:	4603      	mov	r3, r0
 8007b92:	4402      	add	r2, r0
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d100      	bne.n	8007b9a <memset+0xa>
 8007b98:	4770      	bx	lr
 8007b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9e:	e7f9      	b.n	8007b94 <memset+0x4>

08007ba0 <strcat>:
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	7814      	ldrb	r4, [r2, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	3201      	adds	r2, #1
 8007baa:	2c00      	cmp	r4, #0
 8007bac:	d1fa      	bne.n	8007ba4 <strcat+0x4>
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bb8:	2a00      	cmp	r2, #0
 8007bba:	d1f9      	bne.n	8007bb0 <strcat+0x10>
 8007bbc:	bd10      	pop	{r4, pc}

08007bbe <strcpy>:
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bc4:	f803 2b01 	strb.w	r2, [r3], #1
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	d1f9      	bne.n	8007bc0 <strcpy+0x2>
 8007bcc:	4770      	bx	lr

08007bce <strlcpy>:
 8007bce:	460b      	mov	r3, r1
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	b162      	cbz	r2, 8007bee <strlcpy+0x20>
 8007bd4:	3a01      	subs	r2, #1
 8007bd6:	d008      	beq.n	8007bea <strlcpy+0x1c>
 8007bd8:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007bdc:	f800 4b01 	strb.w	r4, [r0], #1
 8007be0:	2c00      	cmp	r4, #0
 8007be2:	d1f7      	bne.n	8007bd4 <strlcpy+0x6>
 8007be4:	1a58      	subs	r0, r3, r1
 8007be6:	3801      	subs	r0, #1
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	2200      	movs	r2, #0
 8007bec:	7002      	strb	r2, [r0, #0]
 8007bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	d1fb      	bne.n	8007bee <strlcpy+0x20>
 8007bf6:	e7f5      	b.n	8007be4 <strlcpy+0x16>

08007bf8 <strncat>:
 8007bf8:	b530      	push	{r4, r5, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	7825      	ldrb	r5, [r4, #0]
 8007bfe:	4623      	mov	r3, r4
 8007c00:	3401      	adds	r4, #1
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	d1fa      	bne.n	8007bfc <strncat+0x4>
 8007c06:	3a01      	subs	r2, #1
 8007c08:	d304      	bcc.n	8007c14 <strncat+0x1c>
 8007c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c0e:	f803 4b01 	strb.w	r4, [r3], #1
 8007c12:	b904      	cbnz	r4, 8007c16 <strncat+0x1e>
 8007c14:	bd30      	pop	{r4, r5, pc}
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	d1f5      	bne.n	8007c06 <strncat+0xe>
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	e7f3      	b.n	8007c06 <strncat+0xe>

08007c1e <strpbrk>:
 8007c1e:	b570      	push	{r4, r5, r6, lr}
 8007c20:	4603      	mov	r3, r0
 8007c22:	7800      	ldrb	r0, [r0, #0]
 8007c24:	b190      	cbz	r0, 8007c4c <strpbrk+0x2e>
 8007c26:	460c      	mov	r4, r1
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007c2e:	b14d      	cbz	r5, 8007c44 <strpbrk+0x26>
 8007c30:	460a      	mov	r2, r1
 8007c32:	e001      	b.n	8007c38 <strpbrk+0x1a>
 8007c34:	42ae      	cmp	r6, r5
 8007c36:	d009      	beq.n	8007c4c <strpbrk+0x2e>
 8007c38:	4614      	mov	r4, r2
 8007c3a:	f812 6b01 	ldrb.w	r6, [r2], #1
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	d1f8      	bne.n	8007c34 <strpbrk+0x16>
 8007c42:	e7f1      	b.n	8007c28 <strpbrk+0xa>
 8007c44:	7823      	ldrb	r3, [r4, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bf08      	it	eq
 8007c4a:	2000      	moveq	r0, #0
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}

08007c4e <strstr>:
 8007c4e:	780a      	ldrb	r2, [r1, #0]
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	b96a      	cbnz	r2, 8007c70 <strstr+0x22>
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d109      	bne.n	8007c6e <strstr+0x20>
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0f6      	beq.n	8007c54 <strstr+0x6>
 8007c66:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007c6a:	429e      	cmp	r6, r3
 8007c6c:	d0f7      	beq.n	8007c5e <strstr+0x10>
 8007c6e:	3001      	adds	r0, #1
 8007c70:	7803      	ldrb	r3, [r0, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1ef      	bne.n	8007c56 <strstr+0x8>
 8007c76:	4618      	mov	r0, r3
 8007c78:	e7ec      	b.n	8007c54 <strstr+0x6>
	...

08007c7c <strtok>:
 8007c7c:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <strtok+0x5c>)
 8007c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c82:	681f      	ldr	r7, [r3, #0]
 8007c84:	4605      	mov	r5, r0
 8007c86:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007c88:	460e      	mov	r6, r1
 8007c8a:	b9ec      	cbnz	r4, 8007cc8 <strtok+0x4c>
 8007c8c:	2050      	movs	r0, #80	; 0x50
 8007c8e:	f000 f907 	bl	8007ea0 <malloc>
 8007c92:	4602      	mov	r2, r0
 8007c94:	65b8      	str	r0, [r7, #88]	; 0x58
 8007c96:	b920      	cbnz	r0, 8007ca2 <strtok+0x26>
 8007c98:	2157      	movs	r1, #87	; 0x57
 8007c9a:	4b10      	ldr	r3, [pc, #64]	; (8007cdc <strtok+0x60>)
 8007c9c:	4810      	ldr	r0, [pc, #64]	; (8007ce0 <strtok+0x64>)
 8007c9e:	f000 f8cf 	bl	8007e40 <__assert_func>
 8007ca2:	e9c0 4400 	strd	r4, r4, [r0]
 8007ca6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007caa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007cae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007cb2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007cb6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007cba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007cbe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007cc2:	6184      	str	r4, [r0, #24]
 8007cc4:	7704      	strb	r4, [r0, #28]
 8007cc6:	6244      	str	r4, [r0, #36]	; 0x24
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd4:	f000 b806 	b.w	8007ce4 <__strtok_r>
 8007cd8:	200004a4 	.word	0x200004a4
 8007cdc:	08008ed8 	.word	0x08008ed8
 8007ce0:	08008eef 	.word	0x08008eef

08007ce4 <__strtok_r>:
 8007ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce6:	b908      	cbnz	r0, 8007cec <__strtok_r+0x8>
 8007ce8:	6810      	ldr	r0, [r2, #0]
 8007cea:	b188      	cbz	r0, 8007d10 <__strtok_r+0x2c>
 8007cec:	4604      	mov	r4, r0
 8007cee:	460f      	mov	r7, r1
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007cf6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007cfa:	b91e      	cbnz	r6, 8007d04 <__strtok_r+0x20>
 8007cfc:	b965      	cbnz	r5, 8007d18 <__strtok_r+0x34>
 8007cfe:	4628      	mov	r0, r5
 8007d00:	6015      	str	r5, [r2, #0]
 8007d02:	e005      	b.n	8007d10 <__strtok_r+0x2c>
 8007d04:	42b5      	cmp	r5, r6
 8007d06:	d1f6      	bne.n	8007cf6 <__strtok_r+0x12>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f0      	bne.n	8007cee <__strtok_r+0xa>
 8007d0c:	6014      	str	r4, [r2, #0]
 8007d0e:	7003      	strb	r3, [r0, #0]
 8007d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d12:	461c      	mov	r4, r3
 8007d14:	e00c      	b.n	8007d30 <__strtok_r+0x4c>
 8007d16:	b915      	cbnz	r5, 8007d1e <__strtok_r+0x3a>
 8007d18:	460e      	mov	r6, r1
 8007d1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d1e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d22:	42ab      	cmp	r3, r5
 8007d24:	d1f7      	bne.n	8007d16 <__strtok_r+0x32>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0f3      	beq.n	8007d12 <__strtok_r+0x2e>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d30:	6014      	str	r4, [r2, #0]
 8007d32:	e7ed      	b.n	8007d10 <__strtok_r+0x2c>

08007d34 <_strtol_l.constprop.0>:
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	d001      	beq.n	8007d42 <_strtol_l.constprop.0+0xe>
 8007d3e:	2b24      	cmp	r3, #36	; 0x24
 8007d40:	d906      	bls.n	8007d50 <_strtol_l.constprop.0+0x1c>
 8007d42:	f7ff fec3 	bl	8007acc <__errno>
 8007d46:	2316      	movs	r3, #22
 8007d48:	6003      	str	r3, [r0, #0]
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d50:	460d      	mov	r5, r1
 8007d52:	4f35      	ldr	r7, [pc, #212]	; (8007e28 <_strtol_l.constprop.0+0xf4>)
 8007d54:	4628      	mov	r0, r5
 8007d56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d5a:	5de6      	ldrb	r6, [r4, r7]
 8007d5c:	f016 0608 	ands.w	r6, r6, #8
 8007d60:	d1f8      	bne.n	8007d54 <_strtol_l.constprop.0+0x20>
 8007d62:	2c2d      	cmp	r4, #45	; 0x2d
 8007d64:	d12f      	bne.n	8007dc6 <_strtol_l.constprop.0+0x92>
 8007d66:	2601      	movs	r6, #1
 8007d68:	782c      	ldrb	r4, [r5, #0]
 8007d6a:	1c85      	adds	r5, r0, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d057      	beq.n	8007e20 <_strtol_l.constprop.0+0xec>
 8007d70:	2b10      	cmp	r3, #16
 8007d72:	d109      	bne.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007d74:	2c30      	cmp	r4, #48	; 0x30
 8007d76:	d107      	bne.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007d78:	7828      	ldrb	r0, [r5, #0]
 8007d7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007d7e:	2858      	cmp	r0, #88	; 0x58
 8007d80:	d149      	bne.n	8007e16 <_strtol_l.constprop.0+0xe2>
 8007d82:	2310      	movs	r3, #16
 8007d84:	786c      	ldrb	r4, [r5, #1]
 8007d86:	3502      	adds	r5, #2
 8007d88:	2700      	movs	r7, #0
 8007d8a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007d8e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007d92:	fbbe f9f3 	udiv	r9, lr, r3
 8007d96:	4638      	mov	r0, r7
 8007d98:	fb03 ea19 	mls	sl, r3, r9, lr
 8007d9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007da0:	f1bc 0f09 	cmp.w	ip, #9
 8007da4:	d814      	bhi.n	8007dd0 <_strtol_l.constprop.0+0x9c>
 8007da6:	4664      	mov	r4, ip
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	dd22      	ble.n	8007df2 <_strtol_l.constprop.0+0xbe>
 8007dac:	2f00      	cmp	r7, #0
 8007dae:	db1d      	blt.n	8007dec <_strtol_l.constprop.0+0xb8>
 8007db0:	4581      	cmp	r9, r0
 8007db2:	d31b      	bcc.n	8007dec <_strtol_l.constprop.0+0xb8>
 8007db4:	d101      	bne.n	8007dba <_strtol_l.constprop.0+0x86>
 8007db6:	45a2      	cmp	sl, r4
 8007db8:	db18      	blt.n	8007dec <_strtol_l.constprop.0+0xb8>
 8007dba:	2701      	movs	r7, #1
 8007dbc:	fb00 4003 	mla	r0, r0, r3, r4
 8007dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dc4:	e7ea      	b.n	8007d9c <_strtol_l.constprop.0+0x68>
 8007dc6:	2c2b      	cmp	r4, #43	; 0x2b
 8007dc8:	bf04      	itt	eq
 8007dca:	782c      	ldrbeq	r4, [r5, #0]
 8007dcc:	1c85      	addeq	r5, r0, #2
 8007dce:	e7cd      	b.n	8007d6c <_strtol_l.constprop.0+0x38>
 8007dd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007dd4:	f1bc 0f19 	cmp.w	ip, #25
 8007dd8:	d801      	bhi.n	8007dde <_strtol_l.constprop.0+0xaa>
 8007dda:	3c37      	subs	r4, #55	; 0x37
 8007ddc:	e7e4      	b.n	8007da8 <_strtol_l.constprop.0+0x74>
 8007dde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007de2:	f1bc 0f19 	cmp.w	ip, #25
 8007de6:	d804      	bhi.n	8007df2 <_strtol_l.constprop.0+0xbe>
 8007de8:	3c57      	subs	r4, #87	; 0x57
 8007dea:	e7dd      	b.n	8007da8 <_strtol_l.constprop.0+0x74>
 8007dec:	f04f 37ff 	mov.w	r7, #4294967295
 8007df0:	e7e6      	b.n	8007dc0 <_strtol_l.constprop.0+0x8c>
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	da07      	bge.n	8007e06 <_strtol_l.constprop.0+0xd2>
 8007df6:	2322      	movs	r3, #34	; 0x22
 8007df8:	4670      	mov	r0, lr
 8007dfa:	f8c8 3000 	str.w	r3, [r8]
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	d0a4      	beq.n	8007d4c <_strtol_l.constprop.0+0x18>
 8007e02:	1e69      	subs	r1, r5, #1
 8007e04:	e005      	b.n	8007e12 <_strtol_l.constprop.0+0xde>
 8007e06:	b106      	cbz	r6, 8007e0a <_strtol_l.constprop.0+0xd6>
 8007e08:	4240      	negs	r0, r0
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	d09e      	beq.n	8007d4c <_strtol_l.constprop.0+0x18>
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	d1f7      	bne.n	8007e02 <_strtol_l.constprop.0+0xce>
 8007e12:	6011      	str	r1, [r2, #0]
 8007e14:	e79a      	b.n	8007d4c <_strtol_l.constprop.0+0x18>
 8007e16:	2430      	movs	r4, #48	; 0x30
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1b5      	bne.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	e7b3      	b.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007e20:	2c30      	cmp	r4, #48	; 0x30
 8007e22:	d0a9      	beq.n	8007d78 <_strtol_l.constprop.0+0x44>
 8007e24:	230a      	movs	r3, #10
 8007e26:	e7af      	b.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007e28:	08008f89 	.word	0x08008f89

08007e2c <strtol>:
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	460a      	mov	r2, r1
 8007e30:	4601      	mov	r1, r0
 8007e32:	4802      	ldr	r0, [pc, #8]	; (8007e3c <strtol+0x10>)
 8007e34:	6800      	ldr	r0, [r0, #0]
 8007e36:	f7ff bf7d 	b.w	8007d34 <_strtol_l.constprop.0>
 8007e3a:	bf00      	nop
 8007e3c:	200004a4 	.word	0x200004a4

08007e40 <__assert_func>:
 8007e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e42:	4614      	mov	r4, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <__assert_func+0x2c>)
 8007e48:	4605      	mov	r5, r0
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68d8      	ldr	r0, [r3, #12]
 8007e4e:	b14c      	cbz	r4, 8007e64 <__assert_func+0x24>
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <__assert_func+0x30>)
 8007e52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e56:	9100      	str	r1, [sp, #0]
 8007e58:	462b      	mov	r3, r5
 8007e5a:	4906      	ldr	r1, [pc, #24]	; (8007e74 <__assert_func+0x34>)
 8007e5c:	f000 f80e 	bl	8007e7c <fiprintf>
 8007e60:	f000 fcc0 	bl	80087e4 <abort>
 8007e64:	4b04      	ldr	r3, [pc, #16]	; (8007e78 <__assert_func+0x38>)
 8007e66:	461c      	mov	r4, r3
 8007e68:	e7f3      	b.n	8007e52 <__assert_func+0x12>
 8007e6a:	bf00      	nop
 8007e6c:	200004a4 	.word	0x200004a4
 8007e70:	08008f4c 	.word	0x08008f4c
 8007e74:	08008f59 	.word	0x08008f59
 8007e78:	08008f87 	.word	0x08008f87

08007e7c <fiprintf>:
 8007e7c:	b40e      	push	{r1, r2, r3}
 8007e7e:	b503      	push	{r0, r1, lr}
 8007e80:	4601      	mov	r1, r0
 8007e82:	ab03      	add	r3, sp, #12
 8007e84:	4805      	ldr	r0, [pc, #20]	; (8007e9c <fiprintf+0x20>)
 8007e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	f000 f913 	bl	80080b8 <_vfiprintf_r>
 8007e92:	b002      	add	sp, #8
 8007e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e98:	b003      	add	sp, #12
 8007e9a:	4770      	bx	lr
 8007e9c:	200004a4 	.word	0x200004a4

08007ea0 <malloc>:
 8007ea0:	4b02      	ldr	r3, [pc, #8]	; (8007eac <malloc+0xc>)
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	f000 b86b 	b.w	8007f80 <_malloc_r>
 8007eaa:	bf00      	nop
 8007eac:	200004a4 	.word	0x200004a4

08007eb0 <_free_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	2900      	cmp	r1, #0
 8007eb6:	d040      	beq.n	8007f3a <_free_r+0x8a>
 8007eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ebc:	1f0c      	subs	r4, r1, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfb8      	it	lt
 8007ec2:	18e4      	addlt	r4, r4, r3
 8007ec4:	f000 fec0 	bl	8008c48 <__malloc_lock>
 8007ec8:	4a1c      	ldr	r2, [pc, #112]	; (8007f3c <_free_r+0x8c>)
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	b933      	cbnz	r3, 8007edc <_free_r+0x2c>
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed8:	f000 bebc 	b.w	8008c54 <__malloc_unlock>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d908      	bls.n	8007ef2 <_free_r+0x42>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	1821      	adds	r1, r4, r0
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf01      	itttt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	1809      	addeq	r1, r1, r0
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	e7ed      	b.n	8007ece <_free_r+0x1e>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b10b      	cbz	r3, 8007efc <_free_r+0x4c>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d9fa      	bls.n	8007ef2 <_free_r+0x42>
 8007efc:	6811      	ldr	r1, [r2, #0]
 8007efe:	1850      	adds	r0, r2, r1
 8007f00:	42a0      	cmp	r0, r4
 8007f02:	d10b      	bne.n	8007f1c <_free_r+0x6c>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	4401      	add	r1, r0
 8007f08:	1850      	adds	r0, r2, r1
 8007f0a:	4283      	cmp	r3, r0
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	d1e0      	bne.n	8007ed2 <_free_r+0x22>
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	4401      	add	r1, r0
 8007f16:	6011      	str	r1, [r2, #0]
 8007f18:	6053      	str	r3, [r2, #4]
 8007f1a:	e7da      	b.n	8007ed2 <_free_r+0x22>
 8007f1c:	d902      	bls.n	8007f24 <_free_r+0x74>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	e7d6      	b.n	8007ed2 <_free_r+0x22>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	1821      	adds	r1, r4, r0
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf01      	itttt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	1809      	addeq	r1, r1, r0
 8007f32:	6021      	streq	r1, [r4, #0]
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6054      	str	r4, [r2, #4]
 8007f38:	e7cb      	b.n	8007ed2 <_free_r+0x22>
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000eb8 	.word	0x20000eb8

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0e      	ldr	r6, [pc, #56]	; (8007f7c <sbrk_aligned+0x3c>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f000 fb7a 	bl	8008644 <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 fb75 	bl	8008644 <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d00a      	beq.n	8007f74 <sbrk_aligned+0x34>
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d007      	beq.n	8007f78 <sbrk_aligned+0x38>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 fb6a 	bl	8008644 <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d101      	bne.n	8007f78 <sbrk_aligned+0x38>
 8007f74:	f04f 34ff 	mov.w	r4, #4294967295
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	20000ebc 	.word	0x20000ebc

08007f80 <_malloc_r>:
 8007f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4607      	mov	r7, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d905      	bls.n	8007fa8 <_malloc_r+0x28>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa8:	4e2e      	ldr	r6, [pc, #184]	; (8008064 <_malloc_r+0xe4>)
 8007faa:	f000 fe4d 	bl	8008c48 <__malloc_lock>
 8007fae:	6833      	ldr	r3, [r6, #0]
 8007fb0:	461c      	mov	r4, r3
 8007fb2:	bb34      	cbnz	r4, 8008002 <_malloc_r+0x82>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f7ff ffc2 	bl	8007f40 <sbrk_aligned>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	d14d      	bne.n	800805e <_malloc_r+0xde>
 8007fc2:	6834      	ldr	r4, [r6, #0]
 8007fc4:	4626      	mov	r6, r4
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	d140      	bne.n	800804c <_malloc_r+0xcc>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4638      	mov	r0, r7
 8007fd0:	eb04 0803 	add.w	r8, r4, r3
 8007fd4:	f000 fb36 	bl	8008644 <_sbrk_r>
 8007fd8:	4580      	cmp	r8, r0
 8007fda:	d13a      	bne.n	8008052 <_malloc_r+0xd2>
 8007fdc:	6821      	ldr	r1, [r4, #0]
 8007fde:	3503      	adds	r5, #3
 8007fe0:	1a6d      	subs	r5, r5, r1
 8007fe2:	f025 0503 	bic.w	r5, r5, #3
 8007fe6:	3508      	adds	r5, #8
 8007fe8:	2d0c      	cmp	r5, #12
 8007fea:	bf38      	it	cc
 8007fec:	250c      	movcc	r5, #12
 8007fee:	4638      	mov	r0, r7
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7ff ffa5 	bl	8007f40 <sbrk_aligned>
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d02b      	beq.n	8008052 <_malloc_r+0xd2>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	442b      	add	r3, r5
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	e00e      	b.n	8008020 <_malloc_r+0xa0>
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	1b52      	subs	r2, r2, r5
 8008006:	d41e      	bmi.n	8008046 <_malloc_r+0xc6>
 8008008:	2a0b      	cmp	r2, #11
 800800a:	d916      	bls.n	800803a <_malloc_r+0xba>
 800800c:	1961      	adds	r1, r4, r5
 800800e:	42a3      	cmp	r3, r4
 8008010:	6025      	str	r5, [r4, #0]
 8008012:	bf18      	it	ne
 8008014:	6059      	strne	r1, [r3, #4]
 8008016:	6863      	ldr	r3, [r4, #4]
 8008018:	bf08      	it	eq
 800801a:	6031      	streq	r1, [r6, #0]
 800801c:	5162      	str	r2, [r4, r5]
 800801e:	604b      	str	r3, [r1, #4]
 8008020:	4638      	mov	r0, r7
 8008022:	f104 060b 	add.w	r6, r4, #11
 8008026:	f000 fe15 	bl	8008c54 <__malloc_unlock>
 800802a:	f026 0607 	bic.w	r6, r6, #7
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	1af2      	subs	r2, r6, r3
 8008032:	d0b6      	beq.n	8007fa2 <_malloc_r+0x22>
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	50a3      	str	r3, [r4, r2]
 8008038:	e7b3      	b.n	8007fa2 <_malloc_r+0x22>
 800803a:	6862      	ldr	r2, [r4, #4]
 800803c:	42a3      	cmp	r3, r4
 800803e:	bf0c      	ite	eq
 8008040:	6032      	streq	r2, [r6, #0]
 8008042:	605a      	strne	r2, [r3, #4]
 8008044:	e7ec      	b.n	8008020 <_malloc_r+0xa0>
 8008046:	4623      	mov	r3, r4
 8008048:	6864      	ldr	r4, [r4, #4]
 800804a:	e7b2      	b.n	8007fb2 <_malloc_r+0x32>
 800804c:	4634      	mov	r4, r6
 800804e:	6876      	ldr	r6, [r6, #4]
 8008050:	e7b9      	b.n	8007fc6 <_malloc_r+0x46>
 8008052:	230c      	movs	r3, #12
 8008054:	4638      	mov	r0, r7
 8008056:	603b      	str	r3, [r7, #0]
 8008058:	f000 fdfc 	bl	8008c54 <__malloc_unlock>
 800805c:	e7a1      	b.n	8007fa2 <_malloc_r+0x22>
 800805e:	6025      	str	r5, [r4, #0]
 8008060:	e7de      	b.n	8008020 <_malloc_r+0xa0>
 8008062:	bf00      	nop
 8008064:	20000eb8 	.word	0x20000eb8

08008068 <__sfputc_r>:
 8008068:	6893      	ldr	r3, [r2, #8]
 800806a:	b410      	push	{r4}
 800806c:	3b01      	subs	r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	6093      	str	r3, [r2, #8]
 8008072:	da07      	bge.n	8008084 <__sfputc_r+0x1c>
 8008074:	6994      	ldr	r4, [r2, #24]
 8008076:	42a3      	cmp	r3, r4
 8008078:	db01      	blt.n	800807e <__sfputc_r+0x16>
 800807a:	290a      	cmp	r1, #10
 800807c:	d102      	bne.n	8008084 <__sfputc_r+0x1c>
 800807e:	bc10      	pop	{r4}
 8008080:	f000 baf0 	b.w	8008664 <__swbuf_r>
 8008084:	6813      	ldr	r3, [r2, #0]
 8008086:	1c58      	adds	r0, r3, #1
 8008088:	6010      	str	r0, [r2, #0]
 800808a:	7019      	strb	r1, [r3, #0]
 800808c:	4608      	mov	r0, r1
 800808e:	bc10      	pop	{r4}
 8008090:	4770      	bx	lr

08008092 <__sfputs_r>:
 8008092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	4614      	mov	r4, r2
 800809a:	18d5      	adds	r5, r2, r3
 800809c:	42ac      	cmp	r4, r5
 800809e:	d101      	bne.n	80080a4 <__sfputs_r+0x12>
 80080a0:	2000      	movs	r0, #0
 80080a2:	e007      	b.n	80080b4 <__sfputs_r+0x22>
 80080a4:	463a      	mov	r2, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ac:	f7ff ffdc 	bl	8008068 <__sfputc_r>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d1f3      	bne.n	800809c <__sfputs_r+0xa>
 80080b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080b8 <_vfiprintf_r>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	460d      	mov	r5, r1
 80080be:	4614      	mov	r4, r2
 80080c0:	4698      	mov	r8, r3
 80080c2:	4606      	mov	r6, r0
 80080c4:	b09d      	sub	sp, #116	; 0x74
 80080c6:	b118      	cbz	r0, 80080d0 <_vfiprintf_r+0x18>
 80080c8:	6983      	ldr	r3, [r0, #24]
 80080ca:	b90b      	cbnz	r3, 80080d0 <_vfiprintf_r+0x18>
 80080cc:	f000 fca8 	bl	8008a20 <__sinit>
 80080d0:	4b89      	ldr	r3, [pc, #548]	; (80082f8 <_vfiprintf_r+0x240>)
 80080d2:	429d      	cmp	r5, r3
 80080d4:	d11b      	bne.n	800810e <_vfiprintf_r+0x56>
 80080d6:	6875      	ldr	r5, [r6, #4]
 80080d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080da:	07d9      	lsls	r1, r3, #31
 80080dc:	d405      	bmi.n	80080ea <_vfiprintf_r+0x32>
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	059a      	lsls	r2, r3, #22
 80080e2:	d402      	bmi.n	80080ea <_vfiprintf_r+0x32>
 80080e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080e6:	f000 fd39 	bl	8008b5c <__retarget_lock_acquire_recursive>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	071b      	lsls	r3, r3, #28
 80080ee:	d501      	bpl.n	80080f4 <_vfiprintf_r+0x3c>
 80080f0:	692b      	ldr	r3, [r5, #16]
 80080f2:	b9eb      	cbnz	r3, 8008130 <_vfiprintf_r+0x78>
 80080f4:	4629      	mov	r1, r5
 80080f6:	4630      	mov	r0, r6
 80080f8:	f000 fb06 	bl	8008708 <__swsetup_r>
 80080fc:	b1c0      	cbz	r0, 8008130 <_vfiprintf_r+0x78>
 80080fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008100:	07dc      	lsls	r4, r3, #31
 8008102:	d50e      	bpl.n	8008122 <_vfiprintf_r+0x6a>
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	b01d      	add	sp, #116	; 0x74
 800810a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810e:	4b7b      	ldr	r3, [pc, #492]	; (80082fc <_vfiprintf_r+0x244>)
 8008110:	429d      	cmp	r5, r3
 8008112:	d101      	bne.n	8008118 <_vfiprintf_r+0x60>
 8008114:	68b5      	ldr	r5, [r6, #8]
 8008116:	e7df      	b.n	80080d8 <_vfiprintf_r+0x20>
 8008118:	4b79      	ldr	r3, [pc, #484]	; (8008300 <_vfiprintf_r+0x248>)
 800811a:	429d      	cmp	r5, r3
 800811c:	bf08      	it	eq
 800811e:	68f5      	ldreq	r5, [r6, #12]
 8008120:	e7da      	b.n	80080d8 <_vfiprintf_r+0x20>
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	0598      	lsls	r0, r3, #22
 8008126:	d4ed      	bmi.n	8008104 <_vfiprintf_r+0x4c>
 8008128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800812a:	f000 fd18 	bl	8008b5e <__retarget_lock_release_recursive>
 800812e:	e7e9      	b.n	8008104 <_vfiprintf_r+0x4c>
 8008130:	2300      	movs	r3, #0
 8008132:	9309      	str	r3, [sp, #36]	; 0x24
 8008134:	2320      	movs	r3, #32
 8008136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800813a:	2330      	movs	r3, #48	; 0x30
 800813c:	f04f 0901 	mov.w	r9, #1
 8008140:	f8cd 800c 	str.w	r8, [sp, #12]
 8008144:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008304 <_vfiprintf_r+0x24c>
 8008148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800814c:	4623      	mov	r3, r4
 800814e:	469a      	mov	sl, r3
 8008150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008154:	b10a      	cbz	r2, 800815a <_vfiprintf_r+0xa2>
 8008156:	2a25      	cmp	r2, #37	; 0x25
 8008158:	d1f9      	bne.n	800814e <_vfiprintf_r+0x96>
 800815a:	ebba 0b04 	subs.w	fp, sl, r4
 800815e:	d00b      	beq.n	8008178 <_vfiprintf_r+0xc0>
 8008160:	465b      	mov	r3, fp
 8008162:	4622      	mov	r2, r4
 8008164:	4629      	mov	r1, r5
 8008166:	4630      	mov	r0, r6
 8008168:	f7ff ff93 	bl	8008092 <__sfputs_r>
 800816c:	3001      	adds	r0, #1
 800816e:	f000 80aa 	beq.w	80082c6 <_vfiprintf_r+0x20e>
 8008172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008174:	445a      	add	r2, fp
 8008176:	9209      	str	r2, [sp, #36]	; 0x24
 8008178:	f89a 3000 	ldrb.w	r3, [sl]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 80a2 	beq.w	80082c6 <_vfiprintf_r+0x20e>
 8008182:	2300      	movs	r3, #0
 8008184:	f04f 32ff 	mov.w	r2, #4294967295
 8008188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800818c:	f10a 0a01 	add.w	sl, sl, #1
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	9307      	str	r3, [sp, #28]
 8008194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008198:	931a      	str	r3, [sp, #104]	; 0x68
 800819a:	4654      	mov	r4, sl
 800819c:	2205      	movs	r2, #5
 800819e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a2:	4858      	ldr	r0, [pc, #352]	; (8008304 <_vfiprintf_r+0x24c>)
 80081a4:	f000 fd42 	bl	8008c2c <memchr>
 80081a8:	9a04      	ldr	r2, [sp, #16]
 80081aa:	b9d8      	cbnz	r0, 80081e4 <_vfiprintf_r+0x12c>
 80081ac:	06d1      	lsls	r1, r2, #27
 80081ae:	bf44      	itt	mi
 80081b0:	2320      	movmi	r3, #32
 80081b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b6:	0713      	lsls	r3, r2, #28
 80081b8:	bf44      	itt	mi
 80081ba:	232b      	movmi	r3, #43	; 0x2b
 80081bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c0:	f89a 3000 	ldrb.w	r3, [sl]
 80081c4:	2b2a      	cmp	r3, #42	; 0x2a
 80081c6:	d015      	beq.n	80081f4 <_vfiprintf_r+0x13c>
 80081c8:	4654      	mov	r4, sl
 80081ca:	2000      	movs	r0, #0
 80081cc:	f04f 0c0a 	mov.w	ip, #10
 80081d0:	9a07      	ldr	r2, [sp, #28]
 80081d2:	4621      	mov	r1, r4
 80081d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d8:	3b30      	subs	r3, #48	; 0x30
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d94e      	bls.n	800827c <_vfiprintf_r+0x1c4>
 80081de:	b1b0      	cbz	r0, 800820e <_vfiprintf_r+0x156>
 80081e0:	9207      	str	r2, [sp, #28]
 80081e2:	e014      	b.n	800820e <_vfiprintf_r+0x156>
 80081e4:	eba0 0308 	sub.w	r3, r0, r8
 80081e8:	fa09 f303 	lsl.w	r3, r9, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	46a2      	mov	sl, r4
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	e7d2      	b.n	800819a <_vfiprintf_r+0xe2>
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	1d19      	adds	r1, r3, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	9103      	str	r1, [sp, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	bfbb      	ittet	lt
 8008200:	425b      	neglt	r3, r3
 8008202:	f042 0202 	orrlt.w	r2, r2, #2
 8008206:	9307      	strge	r3, [sp, #28]
 8008208:	9307      	strlt	r3, [sp, #28]
 800820a:	bfb8      	it	lt
 800820c:	9204      	strlt	r2, [sp, #16]
 800820e:	7823      	ldrb	r3, [r4, #0]
 8008210:	2b2e      	cmp	r3, #46	; 0x2e
 8008212:	d10c      	bne.n	800822e <_vfiprintf_r+0x176>
 8008214:	7863      	ldrb	r3, [r4, #1]
 8008216:	2b2a      	cmp	r3, #42	; 0x2a
 8008218:	d135      	bne.n	8008286 <_vfiprintf_r+0x1ce>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	3402      	adds	r4, #2
 800821e:	1d1a      	adds	r2, r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	9203      	str	r2, [sp, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfb8      	it	lt
 8008228:	f04f 33ff 	movlt.w	r3, #4294967295
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008308 <_vfiprintf_r+0x250>
 8008232:	2203      	movs	r2, #3
 8008234:	4650      	mov	r0, sl
 8008236:	7821      	ldrb	r1, [r4, #0]
 8008238:	f000 fcf8 	bl	8008c2c <memchr>
 800823c:	b140      	cbz	r0, 8008250 <_vfiprintf_r+0x198>
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	eba0 000a 	sub.w	r0, r0, sl
 8008244:	fa03 f000 	lsl.w	r0, r3, r0
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	3401      	adds	r4, #1
 800824c:	4303      	orrs	r3, r0
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008254:	2206      	movs	r2, #6
 8008256:	482d      	ldr	r0, [pc, #180]	; (800830c <_vfiprintf_r+0x254>)
 8008258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800825c:	f000 fce6 	bl	8008c2c <memchr>
 8008260:	2800      	cmp	r0, #0
 8008262:	d03f      	beq.n	80082e4 <_vfiprintf_r+0x22c>
 8008264:	4b2a      	ldr	r3, [pc, #168]	; (8008310 <_vfiprintf_r+0x258>)
 8008266:	bb1b      	cbnz	r3, 80082b0 <_vfiprintf_r+0x1f8>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	3307      	adds	r3, #7
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	3308      	adds	r3, #8
 8008272:	9303      	str	r3, [sp, #12]
 8008274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008276:	443b      	add	r3, r7
 8008278:	9309      	str	r3, [sp, #36]	; 0x24
 800827a:	e767      	b.n	800814c <_vfiprintf_r+0x94>
 800827c:	460c      	mov	r4, r1
 800827e:	2001      	movs	r0, #1
 8008280:	fb0c 3202 	mla	r2, ip, r2, r3
 8008284:	e7a5      	b.n	80081d2 <_vfiprintf_r+0x11a>
 8008286:	2300      	movs	r3, #0
 8008288:	f04f 0c0a 	mov.w	ip, #10
 800828c:	4619      	mov	r1, r3
 800828e:	3401      	adds	r4, #1
 8008290:	9305      	str	r3, [sp, #20]
 8008292:	4620      	mov	r0, r4
 8008294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008298:	3a30      	subs	r2, #48	; 0x30
 800829a:	2a09      	cmp	r2, #9
 800829c:	d903      	bls.n	80082a6 <_vfiprintf_r+0x1ee>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c5      	beq.n	800822e <_vfiprintf_r+0x176>
 80082a2:	9105      	str	r1, [sp, #20]
 80082a4:	e7c3      	b.n	800822e <_vfiprintf_r+0x176>
 80082a6:	4604      	mov	r4, r0
 80082a8:	2301      	movs	r3, #1
 80082aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ae:	e7f0      	b.n	8008292 <_vfiprintf_r+0x1da>
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	462a      	mov	r2, r5
 80082b6:	4630      	mov	r0, r6
 80082b8:	4b16      	ldr	r3, [pc, #88]	; (8008314 <_vfiprintf_r+0x25c>)
 80082ba:	a904      	add	r1, sp, #16
 80082bc:	f3af 8000 	nop.w
 80082c0:	4607      	mov	r7, r0
 80082c2:	1c78      	adds	r0, r7, #1
 80082c4:	d1d6      	bne.n	8008274 <_vfiprintf_r+0x1bc>
 80082c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082c8:	07d9      	lsls	r1, r3, #31
 80082ca:	d405      	bmi.n	80082d8 <_vfiprintf_r+0x220>
 80082cc:	89ab      	ldrh	r3, [r5, #12]
 80082ce:	059a      	lsls	r2, r3, #22
 80082d0:	d402      	bmi.n	80082d8 <_vfiprintf_r+0x220>
 80082d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082d4:	f000 fc43 	bl	8008b5e <__retarget_lock_release_recursive>
 80082d8:	89ab      	ldrh	r3, [r5, #12]
 80082da:	065b      	lsls	r3, r3, #25
 80082dc:	f53f af12 	bmi.w	8008104 <_vfiprintf_r+0x4c>
 80082e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082e2:	e711      	b.n	8008108 <_vfiprintf_r+0x50>
 80082e4:	ab03      	add	r3, sp, #12
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	462a      	mov	r2, r5
 80082ea:	4630      	mov	r0, r6
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <_vfiprintf_r+0x25c>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	f000 f882 	bl	80083f8 <_printf_i>
 80082f4:	e7e4      	b.n	80082c0 <_vfiprintf_r+0x208>
 80082f6:	bf00      	nop
 80082f8:	080090dc 	.word	0x080090dc
 80082fc:	080090fc 	.word	0x080090fc
 8008300:	080090bc 	.word	0x080090bc
 8008304:	08009089 	.word	0x08009089
 8008308:	0800908f 	.word	0x0800908f
 800830c:	08009093 	.word	0x08009093
 8008310:	00000000 	.word	0x00000000
 8008314:	08008093 	.word	0x08008093

08008318 <_printf_common>:
 8008318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	4616      	mov	r6, r2
 800831e:	4699      	mov	r9, r3
 8008320:	688a      	ldr	r2, [r1, #8]
 8008322:	690b      	ldr	r3, [r1, #16]
 8008324:	4607      	mov	r7, r0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfb8      	it	lt
 800832a:	4613      	movlt	r3, r2
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008332:	460c      	mov	r4, r1
 8008334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008338:	b10a      	cbz	r2, 800833e <_printf_common+0x26>
 800833a:	3301      	adds	r3, #1
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	0699      	lsls	r1, r3, #26
 8008342:	bf42      	ittt	mi
 8008344:	6833      	ldrmi	r3, [r6, #0]
 8008346:	3302      	addmi	r3, #2
 8008348:	6033      	strmi	r3, [r6, #0]
 800834a:	6825      	ldr	r5, [r4, #0]
 800834c:	f015 0506 	ands.w	r5, r5, #6
 8008350:	d106      	bne.n	8008360 <_printf_common+0x48>
 8008352:	f104 0a19 	add.w	sl, r4, #25
 8008356:	68e3      	ldr	r3, [r4, #12]
 8008358:	6832      	ldr	r2, [r6, #0]
 800835a:	1a9b      	subs	r3, r3, r2
 800835c:	42ab      	cmp	r3, r5
 800835e:	dc28      	bgt.n	80083b2 <_printf_common+0x9a>
 8008360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008364:	1e13      	subs	r3, r2, #0
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	bf18      	it	ne
 800836a:	2301      	movne	r3, #1
 800836c:	0692      	lsls	r2, r2, #26
 800836e:	d42d      	bmi.n	80083cc <_printf_common+0xb4>
 8008370:	4649      	mov	r1, r9
 8008372:	4638      	mov	r0, r7
 8008374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d020      	beq.n	80083c0 <_printf_common+0xa8>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	68e5      	ldr	r5, [r4, #12]
 8008382:	f003 0306 	and.w	r3, r3, #6
 8008386:	2b04      	cmp	r3, #4
 8008388:	bf18      	it	ne
 800838a:	2500      	movne	r5, #0
 800838c:	6832      	ldr	r2, [r6, #0]
 800838e:	f04f 0600 	mov.w	r6, #0
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	bf08      	it	eq
 8008396:	1aad      	subeq	r5, r5, r2
 8008398:	6922      	ldr	r2, [r4, #16]
 800839a:	bf08      	it	eq
 800839c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083a0:	4293      	cmp	r3, r2
 80083a2:	bfc4      	itt	gt
 80083a4:	1a9b      	subgt	r3, r3, r2
 80083a6:	18ed      	addgt	r5, r5, r3
 80083a8:	341a      	adds	r4, #26
 80083aa:	42b5      	cmp	r5, r6
 80083ac:	d11a      	bne.n	80083e4 <_printf_common+0xcc>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e008      	b.n	80083c4 <_printf_common+0xac>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4652      	mov	r2, sl
 80083b6:	4649      	mov	r1, r9
 80083b8:	4638      	mov	r0, r7
 80083ba:	47c0      	blx	r8
 80083bc:	3001      	adds	r0, #1
 80083be:	d103      	bne.n	80083c8 <_printf_common+0xb0>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	3501      	adds	r5, #1
 80083ca:	e7c4      	b.n	8008356 <_printf_common+0x3e>
 80083cc:	2030      	movs	r0, #48	; 0x30
 80083ce:	18e1      	adds	r1, r4, r3
 80083d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083da:	4422      	add	r2, r4
 80083dc:	3302      	adds	r3, #2
 80083de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e2:	e7c5      	b.n	8008370 <_printf_common+0x58>
 80083e4:	2301      	movs	r3, #1
 80083e6:	4622      	mov	r2, r4
 80083e8:	4649      	mov	r1, r9
 80083ea:	4638      	mov	r0, r7
 80083ec:	47c0      	blx	r8
 80083ee:	3001      	adds	r0, #1
 80083f0:	d0e6      	beq.n	80083c0 <_printf_common+0xa8>
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7d9      	b.n	80083aa <_printf_common+0x92>
	...

080083f8 <_printf_i>:
 80083f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	7e0f      	ldrb	r7, [r1, #24]
 80083fe:	4691      	mov	r9, r2
 8008400:	2f78      	cmp	r7, #120	; 0x78
 8008402:	4680      	mov	r8, r0
 8008404:	460c      	mov	r4, r1
 8008406:	469a      	mov	sl, r3
 8008408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800840a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800840e:	d807      	bhi.n	8008420 <_printf_i+0x28>
 8008410:	2f62      	cmp	r7, #98	; 0x62
 8008412:	d80a      	bhi.n	800842a <_printf_i+0x32>
 8008414:	2f00      	cmp	r7, #0
 8008416:	f000 80d9 	beq.w	80085cc <_printf_i+0x1d4>
 800841a:	2f58      	cmp	r7, #88	; 0x58
 800841c:	f000 80a4 	beq.w	8008568 <_printf_i+0x170>
 8008420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008428:	e03a      	b.n	80084a0 <_printf_i+0xa8>
 800842a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800842e:	2b15      	cmp	r3, #21
 8008430:	d8f6      	bhi.n	8008420 <_printf_i+0x28>
 8008432:	a101      	add	r1, pc, #4	; (adr r1, 8008438 <_printf_i+0x40>)
 8008434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008438:	08008491 	.word	0x08008491
 800843c:	080084a5 	.word	0x080084a5
 8008440:	08008421 	.word	0x08008421
 8008444:	08008421 	.word	0x08008421
 8008448:	08008421 	.word	0x08008421
 800844c:	08008421 	.word	0x08008421
 8008450:	080084a5 	.word	0x080084a5
 8008454:	08008421 	.word	0x08008421
 8008458:	08008421 	.word	0x08008421
 800845c:	08008421 	.word	0x08008421
 8008460:	08008421 	.word	0x08008421
 8008464:	080085b3 	.word	0x080085b3
 8008468:	080084d5 	.word	0x080084d5
 800846c:	08008595 	.word	0x08008595
 8008470:	08008421 	.word	0x08008421
 8008474:	08008421 	.word	0x08008421
 8008478:	080085d5 	.word	0x080085d5
 800847c:	08008421 	.word	0x08008421
 8008480:	080084d5 	.word	0x080084d5
 8008484:	08008421 	.word	0x08008421
 8008488:	08008421 	.word	0x08008421
 800848c:	0800859d 	.word	0x0800859d
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	602a      	str	r2, [r5, #0]
 8008498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0a4      	b.n	80085ee <_printf_i+0x1f6>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	6829      	ldr	r1, [r5, #0]
 80084a8:	0606      	lsls	r6, r0, #24
 80084aa:	f101 0304 	add.w	r3, r1, #4
 80084ae:	d50a      	bpl.n	80084c6 <_printf_i+0xce>
 80084b0:	680e      	ldr	r6, [r1, #0]
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	da03      	bge.n	80084c0 <_printf_i+0xc8>
 80084b8:	232d      	movs	r3, #45	; 0x2d
 80084ba:	4276      	negs	r6, r6
 80084bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c0:	230a      	movs	r3, #10
 80084c2:	485e      	ldr	r0, [pc, #376]	; (800863c <_printf_i+0x244>)
 80084c4:	e019      	b.n	80084fa <_printf_i+0x102>
 80084c6:	680e      	ldr	r6, [r1, #0]
 80084c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084cc:	602b      	str	r3, [r5, #0]
 80084ce:	bf18      	it	ne
 80084d0:	b236      	sxthne	r6, r6
 80084d2:	e7ef      	b.n	80084b4 <_printf_i+0xbc>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	6820      	ldr	r0, [r4, #0]
 80084d8:	1d19      	adds	r1, r3, #4
 80084da:	6029      	str	r1, [r5, #0]
 80084dc:	0601      	lsls	r1, r0, #24
 80084de:	d501      	bpl.n	80084e4 <_printf_i+0xec>
 80084e0:	681e      	ldr	r6, [r3, #0]
 80084e2:	e002      	b.n	80084ea <_printf_i+0xf2>
 80084e4:	0646      	lsls	r6, r0, #25
 80084e6:	d5fb      	bpl.n	80084e0 <_printf_i+0xe8>
 80084e8:	881e      	ldrh	r6, [r3, #0]
 80084ea:	2f6f      	cmp	r7, #111	; 0x6f
 80084ec:	bf0c      	ite	eq
 80084ee:	2308      	moveq	r3, #8
 80084f0:	230a      	movne	r3, #10
 80084f2:	4852      	ldr	r0, [pc, #328]	; (800863c <_printf_i+0x244>)
 80084f4:	2100      	movs	r1, #0
 80084f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084fa:	6865      	ldr	r5, [r4, #4]
 80084fc:	2d00      	cmp	r5, #0
 80084fe:	bfa8      	it	ge
 8008500:	6821      	ldrge	r1, [r4, #0]
 8008502:	60a5      	str	r5, [r4, #8]
 8008504:	bfa4      	itt	ge
 8008506:	f021 0104 	bicge.w	r1, r1, #4
 800850a:	6021      	strge	r1, [r4, #0]
 800850c:	b90e      	cbnz	r6, 8008512 <_printf_i+0x11a>
 800850e:	2d00      	cmp	r5, #0
 8008510:	d04d      	beq.n	80085ae <_printf_i+0x1b6>
 8008512:	4615      	mov	r5, r2
 8008514:	fbb6 f1f3 	udiv	r1, r6, r3
 8008518:	fb03 6711 	mls	r7, r3, r1, r6
 800851c:	5dc7      	ldrb	r7, [r0, r7]
 800851e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008522:	4637      	mov	r7, r6
 8008524:	42bb      	cmp	r3, r7
 8008526:	460e      	mov	r6, r1
 8008528:	d9f4      	bls.n	8008514 <_printf_i+0x11c>
 800852a:	2b08      	cmp	r3, #8
 800852c:	d10b      	bne.n	8008546 <_printf_i+0x14e>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	07de      	lsls	r6, r3, #31
 8008532:	d508      	bpl.n	8008546 <_printf_i+0x14e>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	6861      	ldr	r1, [r4, #4]
 8008538:	4299      	cmp	r1, r3
 800853a:	bfde      	ittt	le
 800853c:	2330      	movle	r3, #48	; 0x30
 800853e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008546:	1b52      	subs	r2, r2, r5
 8008548:	6122      	str	r2, [r4, #16]
 800854a:	464b      	mov	r3, r9
 800854c:	4621      	mov	r1, r4
 800854e:	4640      	mov	r0, r8
 8008550:	f8cd a000 	str.w	sl, [sp]
 8008554:	aa03      	add	r2, sp, #12
 8008556:	f7ff fedf 	bl	8008318 <_printf_common>
 800855a:	3001      	adds	r0, #1
 800855c:	d14c      	bne.n	80085f8 <_printf_i+0x200>
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	b004      	add	sp, #16
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	4834      	ldr	r0, [pc, #208]	; (800863c <_printf_i+0x244>)
 800856a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800856e:	6829      	ldr	r1, [r5, #0]
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	f851 6b04 	ldr.w	r6, [r1], #4
 8008576:	6029      	str	r1, [r5, #0]
 8008578:	061d      	lsls	r5, r3, #24
 800857a:	d514      	bpl.n	80085a6 <_printf_i+0x1ae>
 800857c:	07df      	lsls	r7, r3, #31
 800857e:	bf44      	itt	mi
 8008580:	f043 0320 	orrmi.w	r3, r3, #32
 8008584:	6023      	strmi	r3, [r4, #0]
 8008586:	b91e      	cbnz	r6, 8008590 <_printf_i+0x198>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	f023 0320 	bic.w	r3, r3, #32
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	2310      	movs	r3, #16
 8008592:	e7af      	b.n	80084f4 <_printf_i+0xfc>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	f043 0320 	orr.w	r3, r3, #32
 800859a:	6023      	str	r3, [r4, #0]
 800859c:	2378      	movs	r3, #120	; 0x78
 800859e:	4828      	ldr	r0, [pc, #160]	; (8008640 <_printf_i+0x248>)
 80085a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085a4:	e7e3      	b.n	800856e <_printf_i+0x176>
 80085a6:	0659      	lsls	r1, r3, #25
 80085a8:	bf48      	it	mi
 80085aa:	b2b6      	uxthmi	r6, r6
 80085ac:	e7e6      	b.n	800857c <_printf_i+0x184>
 80085ae:	4615      	mov	r5, r2
 80085b0:	e7bb      	b.n	800852a <_printf_i+0x132>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	6826      	ldr	r6, [r4, #0]
 80085b6:	1d18      	adds	r0, r3, #4
 80085b8:	6961      	ldr	r1, [r4, #20]
 80085ba:	6028      	str	r0, [r5, #0]
 80085bc:	0635      	lsls	r5, r6, #24
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	d501      	bpl.n	80085c6 <_printf_i+0x1ce>
 80085c2:	6019      	str	r1, [r3, #0]
 80085c4:	e002      	b.n	80085cc <_printf_i+0x1d4>
 80085c6:	0670      	lsls	r0, r6, #25
 80085c8:	d5fb      	bpl.n	80085c2 <_printf_i+0x1ca>
 80085ca:	8019      	strh	r1, [r3, #0]
 80085cc:	2300      	movs	r3, #0
 80085ce:	4615      	mov	r5, r2
 80085d0:	6123      	str	r3, [r4, #16]
 80085d2:	e7ba      	b.n	800854a <_printf_i+0x152>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	2100      	movs	r1, #0
 80085d8:	1d1a      	adds	r2, r3, #4
 80085da:	602a      	str	r2, [r5, #0]
 80085dc:	681d      	ldr	r5, [r3, #0]
 80085de:	6862      	ldr	r2, [r4, #4]
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 fb23 	bl	8008c2c <memchr>
 80085e6:	b108      	cbz	r0, 80085ec <_printf_i+0x1f4>
 80085e8:	1b40      	subs	r0, r0, r5
 80085ea:	6060      	str	r0, [r4, #4]
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	2300      	movs	r3, #0
 80085f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f6:	e7a8      	b.n	800854a <_printf_i+0x152>
 80085f8:	462a      	mov	r2, r5
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	47d0      	blx	sl
 8008602:	3001      	adds	r0, #1
 8008604:	d0ab      	beq.n	800855e <_printf_i+0x166>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	079b      	lsls	r3, r3, #30
 800860a:	d413      	bmi.n	8008634 <_printf_i+0x23c>
 800860c:	68e0      	ldr	r0, [r4, #12]
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	4298      	cmp	r0, r3
 8008612:	bfb8      	it	lt
 8008614:	4618      	movlt	r0, r3
 8008616:	e7a4      	b.n	8008562 <_printf_i+0x16a>
 8008618:	2301      	movs	r3, #1
 800861a:	4632      	mov	r2, r6
 800861c:	4649      	mov	r1, r9
 800861e:	4640      	mov	r0, r8
 8008620:	47d0      	blx	sl
 8008622:	3001      	adds	r0, #1
 8008624:	d09b      	beq.n	800855e <_printf_i+0x166>
 8008626:	3501      	adds	r5, #1
 8008628:	68e3      	ldr	r3, [r4, #12]
 800862a:	9903      	ldr	r1, [sp, #12]
 800862c:	1a5b      	subs	r3, r3, r1
 800862e:	42ab      	cmp	r3, r5
 8008630:	dcf2      	bgt.n	8008618 <_printf_i+0x220>
 8008632:	e7eb      	b.n	800860c <_printf_i+0x214>
 8008634:	2500      	movs	r5, #0
 8008636:	f104 0619 	add.w	r6, r4, #25
 800863a:	e7f5      	b.n	8008628 <_printf_i+0x230>
 800863c:	0800909a 	.word	0x0800909a
 8008640:	080090ab 	.word	0x080090ab

08008644 <_sbrk_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	2300      	movs	r3, #0
 8008648:	4d05      	ldr	r5, [pc, #20]	; (8008660 <_sbrk_r+0x1c>)
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7ff fa0c 	bl	8007a6c <_sbrk>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_sbrk_r+0x1a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_sbrk_r+0x1a>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	20000ec4 	.word	0x20000ec4

08008664 <__swbuf_r>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	460e      	mov	r6, r1
 8008668:	4614      	mov	r4, r2
 800866a:	4605      	mov	r5, r0
 800866c:	b118      	cbz	r0, 8008676 <__swbuf_r+0x12>
 800866e:	6983      	ldr	r3, [r0, #24]
 8008670:	b90b      	cbnz	r3, 8008676 <__swbuf_r+0x12>
 8008672:	f000 f9d5 	bl	8008a20 <__sinit>
 8008676:	4b21      	ldr	r3, [pc, #132]	; (80086fc <__swbuf_r+0x98>)
 8008678:	429c      	cmp	r4, r3
 800867a:	d12b      	bne.n	80086d4 <__swbuf_r+0x70>
 800867c:	686c      	ldr	r4, [r5, #4]
 800867e:	69a3      	ldr	r3, [r4, #24]
 8008680:	60a3      	str	r3, [r4, #8]
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	071a      	lsls	r2, r3, #28
 8008686:	d52f      	bpl.n	80086e8 <__swbuf_r+0x84>
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	b36b      	cbz	r3, 80086e8 <__swbuf_r+0x84>
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	b2f6      	uxtb	r6, r6
 8008692:	1ac0      	subs	r0, r0, r3
 8008694:	6963      	ldr	r3, [r4, #20]
 8008696:	4637      	mov	r7, r6
 8008698:	4283      	cmp	r3, r0
 800869a:	dc04      	bgt.n	80086a6 <__swbuf_r+0x42>
 800869c:	4621      	mov	r1, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f92a 	bl	80088f8 <_fflush_r>
 80086a4:	bb30      	cbnz	r0, 80086f4 <__swbuf_r+0x90>
 80086a6:	68a3      	ldr	r3, [r4, #8]
 80086a8:	3001      	adds	r0, #1
 80086aa:	3b01      	subs	r3, #1
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	6022      	str	r2, [r4, #0]
 80086b4:	701e      	strb	r6, [r3, #0]
 80086b6:	6963      	ldr	r3, [r4, #20]
 80086b8:	4283      	cmp	r3, r0
 80086ba:	d004      	beq.n	80086c6 <__swbuf_r+0x62>
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	07db      	lsls	r3, r3, #31
 80086c0:	d506      	bpl.n	80086d0 <__swbuf_r+0x6c>
 80086c2:	2e0a      	cmp	r6, #10
 80086c4:	d104      	bne.n	80086d0 <__swbuf_r+0x6c>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4628      	mov	r0, r5
 80086ca:	f000 f915 	bl	80088f8 <_fflush_r>
 80086ce:	b988      	cbnz	r0, 80086f4 <__swbuf_r+0x90>
 80086d0:	4638      	mov	r0, r7
 80086d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <__swbuf_r+0x9c>)
 80086d6:	429c      	cmp	r4, r3
 80086d8:	d101      	bne.n	80086de <__swbuf_r+0x7a>
 80086da:	68ac      	ldr	r4, [r5, #8]
 80086dc:	e7cf      	b.n	800867e <__swbuf_r+0x1a>
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <__swbuf_r+0xa0>)
 80086e0:	429c      	cmp	r4, r3
 80086e2:	bf08      	it	eq
 80086e4:	68ec      	ldreq	r4, [r5, #12]
 80086e6:	e7ca      	b.n	800867e <__swbuf_r+0x1a>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f80c 	bl	8008708 <__swsetup_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0cb      	beq.n	800868c <__swbuf_r+0x28>
 80086f4:	f04f 37ff 	mov.w	r7, #4294967295
 80086f8:	e7ea      	b.n	80086d0 <__swbuf_r+0x6c>
 80086fa:	bf00      	nop
 80086fc:	080090dc 	.word	0x080090dc
 8008700:	080090fc 	.word	0x080090fc
 8008704:	080090bc 	.word	0x080090bc

08008708 <__swsetup_r>:
 8008708:	4b32      	ldr	r3, [pc, #200]	; (80087d4 <__swsetup_r+0xcc>)
 800870a:	b570      	push	{r4, r5, r6, lr}
 800870c:	681d      	ldr	r5, [r3, #0]
 800870e:	4606      	mov	r6, r0
 8008710:	460c      	mov	r4, r1
 8008712:	b125      	cbz	r5, 800871e <__swsetup_r+0x16>
 8008714:	69ab      	ldr	r3, [r5, #24]
 8008716:	b913      	cbnz	r3, 800871e <__swsetup_r+0x16>
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f981 	bl	8008a20 <__sinit>
 800871e:	4b2e      	ldr	r3, [pc, #184]	; (80087d8 <__swsetup_r+0xd0>)
 8008720:	429c      	cmp	r4, r3
 8008722:	d10f      	bne.n	8008744 <__swsetup_r+0x3c>
 8008724:	686c      	ldr	r4, [r5, #4]
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800872c:	0719      	lsls	r1, r3, #28
 800872e:	d42c      	bmi.n	800878a <__swsetup_r+0x82>
 8008730:	06dd      	lsls	r5, r3, #27
 8008732:	d411      	bmi.n	8008758 <__swsetup_r+0x50>
 8008734:	2309      	movs	r3, #9
 8008736:	6033      	str	r3, [r6, #0]
 8008738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e03e      	b.n	80087c2 <__swsetup_r+0xba>
 8008744:	4b25      	ldr	r3, [pc, #148]	; (80087dc <__swsetup_r+0xd4>)
 8008746:	429c      	cmp	r4, r3
 8008748:	d101      	bne.n	800874e <__swsetup_r+0x46>
 800874a:	68ac      	ldr	r4, [r5, #8]
 800874c:	e7eb      	b.n	8008726 <__swsetup_r+0x1e>
 800874e:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <__swsetup_r+0xd8>)
 8008750:	429c      	cmp	r4, r3
 8008752:	bf08      	it	eq
 8008754:	68ec      	ldreq	r4, [r5, #12]
 8008756:	e7e6      	b.n	8008726 <__swsetup_r+0x1e>
 8008758:	0758      	lsls	r0, r3, #29
 800875a:	d512      	bpl.n	8008782 <__swsetup_r+0x7a>
 800875c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800875e:	b141      	cbz	r1, 8008772 <__swsetup_r+0x6a>
 8008760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008764:	4299      	cmp	r1, r3
 8008766:	d002      	beq.n	800876e <__swsetup_r+0x66>
 8008768:	4630      	mov	r0, r6
 800876a:	f7ff fba1 	bl	8007eb0 <_free_r>
 800876e:	2300      	movs	r3, #0
 8008770:	6363      	str	r3, [r4, #52]	; 0x34
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	2300      	movs	r3, #0
 800877c:	6063      	str	r3, [r4, #4]
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	f043 0308 	orr.w	r3, r3, #8
 8008788:	81a3      	strh	r3, [r4, #12]
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	b94b      	cbnz	r3, 80087a2 <__swsetup_r+0x9a>
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008798:	d003      	beq.n	80087a2 <__swsetup_r+0x9a>
 800879a:	4621      	mov	r1, r4
 800879c:	4630      	mov	r0, r6
 800879e:	f000 fa05 	bl	8008bac <__smakebuf_r>
 80087a2:	89a0      	ldrh	r0, [r4, #12]
 80087a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a8:	f010 0301 	ands.w	r3, r0, #1
 80087ac:	d00a      	beq.n	80087c4 <__swsetup_r+0xbc>
 80087ae:	2300      	movs	r3, #0
 80087b0:	60a3      	str	r3, [r4, #8]
 80087b2:	6963      	ldr	r3, [r4, #20]
 80087b4:	425b      	negs	r3, r3
 80087b6:	61a3      	str	r3, [r4, #24]
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	b943      	cbnz	r3, 80087ce <__swsetup_r+0xc6>
 80087bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087c0:	d1ba      	bne.n	8008738 <__swsetup_r+0x30>
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	0781      	lsls	r1, r0, #30
 80087c6:	bf58      	it	pl
 80087c8:	6963      	ldrpl	r3, [r4, #20]
 80087ca:	60a3      	str	r3, [r4, #8]
 80087cc:	e7f4      	b.n	80087b8 <__swsetup_r+0xb0>
 80087ce:	2000      	movs	r0, #0
 80087d0:	e7f7      	b.n	80087c2 <__swsetup_r+0xba>
 80087d2:	bf00      	nop
 80087d4:	200004a4 	.word	0x200004a4
 80087d8:	080090dc 	.word	0x080090dc
 80087dc:	080090fc 	.word	0x080090fc
 80087e0:	080090bc 	.word	0x080090bc

080087e4 <abort>:
 80087e4:	2006      	movs	r0, #6
 80087e6:	b508      	push	{r3, lr}
 80087e8:	f000 fa62 	bl	8008cb0 <raise>
 80087ec:	2001      	movs	r0, #1
 80087ee:	f7ff f8ca 	bl	8007986 <_exit>
	...

080087f4 <__sflush_r>:
 80087f4:	898a      	ldrh	r2, [r1, #12]
 80087f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f8:	4605      	mov	r5, r0
 80087fa:	0710      	lsls	r0, r2, #28
 80087fc:	460c      	mov	r4, r1
 80087fe:	d457      	bmi.n	80088b0 <__sflush_r+0xbc>
 8008800:	684b      	ldr	r3, [r1, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	dc04      	bgt.n	8008810 <__sflush_r+0x1c>
 8008806:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	dc01      	bgt.n	8008810 <__sflush_r+0x1c>
 800880c:	2000      	movs	r0, #0
 800880e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008812:	2e00      	cmp	r6, #0
 8008814:	d0fa      	beq.n	800880c <__sflush_r+0x18>
 8008816:	2300      	movs	r3, #0
 8008818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800881c:	682f      	ldr	r7, [r5, #0]
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	d032      	beq.n	8008888 <__sflush_r+0x94>
 8008822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	075a      	lsls	r2, r3, #29
 8008828:	d505      	bpl.n	8008836 <__sflush_r+0x42>
 800882a:	6863      	ldr	r3, [r4, #4]
 800882c:	1ac0      	subs	r0, r0, r3
 800882e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008830:	b10b      	cbz	r3, 8008836 <__sflush_r+0x42>
 8008832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008834:	1ac0      	subs	r0, r0, r3
 8008836:	2300      	movs	r3, #0
 8008838:	4602      	mov	r2, r0
 800883a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800883c:	4628      	mov	r0, r5
 800883e:	6a21      	ldr	r1, [r4, #32]
 8008840:	47b0      	blx	r6
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	d106      	bne.n	8008856 <__sflush_r+0x62>
 8008848:	6829      	ldr	r1, [r5, #0]
 800884a:	291d      	cmp	r1, #29
 800884c:	d82c      	bhi.n	80088a8 <__sflush_r+0xb4>
 800884e:	4a29      	ldr	r2, [pc, #164]	; (80088f4 <__sflush_r+0x100>)
 8008850:	40ca      	lsrs	r2, r1
 8008852:	07d6      	lsls	r6, r2, #31
 8008854:	d528      	bpl.n	80088a8 <__sflush_r+0xb4>
 8008856:	2200      	movs	r2, #0
 8008858:	6062      	str	r2, [r4, #4]
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	04d9      	lsls	r1, r3, #19
 800885e:	6022      	str	r2, [r4, #0]
 8008860:	d504      	bpl.n	800886c <__sflush_r+0x78>
 8008862:	1c42      	adds	r2, r0, #1
 8008864:	d101      	bne.n	800886a <__sflush_r+0x76>
 8008866:	682b      	ldr	r3, [r5, #0]
 8008868:	b903      	cbnz	r3, 800886c <__sflush_r+0x78>
 800886a:	6560      	str	r0, [r4, #84]	; 0x54
 800886c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800886e:	602f      	str	r7, [r5, #0]
 8008870:	2900      	cmp	r1, #0
 8008872:	d0cb      	beq.n	800880c <__sflush_r+0x18>
 8008874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008878:	4299      	cmp	r1, r3
 800887a:	d002      	beq.n	8008882 <__sflush_r+0x8e>
 800887c:	4628      	mov	r0, r5
 800887e:	f7ff fb17 	bl	8007eb0 <_free_r>
 8008882:	2000      	movs	r0, #0
 8008884:	6360      	str	r0, [r4, #52]	; 0x34
 8008886:	e7c2      	b.n	800880e <__sflush_r+0x1a>
 8008888:	6a21      	ldr	r1, [r4, #32]
 800888a:	2301      	movs	r3, #1
 800888c:	4628      	mov	r0, r5
 800888e:	47b0      	blx	r6
 8008890:	1c41      	adds	r1, r0, #1
 8008892:	d1c7      	bne.n	8008824 <__sflush_r+0x30>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0c4      	beq.n	8008824 <__sflush_r+0x30>
 800889a:	2b1d      	cmp	r3, #29
 800889c:	d001      	beq.n	80088a2 <__sflush_r+0xae>
 800889e:	2b16      	cmp	r3, #22
 80088a0:	d101      	bne.n	80088a6 <__sflush_r+0xb2>
 80088a2:	602f      	str	r7, [r5, #0]
 80088a4:	e7b2      	b.n	800880c <__sflush_r+0x18>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	e7ae      	b.n	800880e <__sflush_r+0x1a>
 80088b0:	690f      	ldr	r7, [r1, #16]
 80088b2:	2f00      	cmp	r7, #0
 80088b4:	d0aa      	beq.n	800880c <__sflush_r+0x18>
 80088b6:	0793      	lsls	r3, r2, #30
 80088b8:	bf18      	it	ne
 80088ba:	2300      	movne	r3, #0
 80088bc:	680e      	ldr	r6, [r1, #0]
 80088be:	bf08      	it	eq
 80088c0:	694b      	ldreq	r3, [r1, #20]
 80088c2:	1bf6      	subs	r6, r6, r7
 80088c4:	600f      	str	r7, [r1, #0]
 80088c6:	608b      	str	r3, [r1, #8]
 80088c8:	2e00      	cmp	r6, #0
 80088ca:	dd9f      	ble.n	800880c <__sflush_r+0x18>
 80088cc:	4633      	mov	r3, r6
 80088ce:	463a      	mov	r2, r7
 80088d0:	4628      	mov	r0, r5
 80088d2:	6a21      	ldr	r1, [r4, #32]
 80088d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80088d8:	47e0      	blx	ip
 80088da:	2800      	cmp	r0, #0
 80088dc:	dc06      	bgt.n	80088ec <__sflush_r+0xf8>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	e790      	b.n	800880e <__sflush_r+0x1a>
 80088ec:	4407      	add	r7, r0
 80088ee:	1a36      	subs	r6, r6, r0
 80088f0:	e7ea      	b.n	80088c8 <__sflush_r+0xd4>
 80088f2:	bf00      	nop
 80088f4:	20400001 	.word	0x20400001

080088f8 <_fflush_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	690b      	ldr	r3, [r1, #16]
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	b913      	cbnz	r3, 8008908 <_fflush_r+0x10>
 8008902:	2500      	movs	r5, #0
 8008904:	4628      	mov	r0, r5
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	b118      	cbz	r0, 8008912 <_fflush_r+0x1a>
 800890a:	6983      	ldr	r3, [r0, #24]
 800890c:	b90b      	cbnz	r3, 8008912 <_fflush_r+0x1a>
 800890e:	f000 f887 	bl	8008a20 <__sinit>
 8008912:	4b14      	ldr	r3, [pc, #80]	; (8008964 <_fflush_r+0x6c>)
 8008914:	429c      	cmp	r4, r3
 8008916:	d11b      	bne.n	8008950 <_fflush_r+0x58>
 8008918:	686c      	ldr	r4, [r5, #4]
 800891a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0ef      	beq.n	8008902 <_fflush_r+0xa>
 8008922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008924:	07d0      	lsls	r0, r2, #31
 8008926:	d404      	bmi.n	8008932 <_fflush_r+0x3a>
 8008928:	0599      	lsls	r1, r3, #22
 800892a:	d402      	bmi.n	8008932 <_fflush_r+0x3a>
 800892c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800892e:	f000 f915 	bl	8008b5c <__retarget_lock_acquire_recursive>
 8008932:	4628      	mov	r0, r5
 8008934:	4621      	mov	r1, r4
 8008936:	f7ff ff5d 	bl	80087f4 <__sflush_r>
 800893a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800893c:	4605      	mov	r5, r0
 800893e:	07da      	lsls	r2, r3, #31
 8008940:	d4e0      	bmi.n	8008904 <_fflush_r+0xc>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	059b      	lsls	r3, r3, #22
 8008946:	d4dd      	bmi.n	8008904 <_fflush_r+0xc>
 8008948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800894a:	f000 f908 	bl	8008b5e <__retarget_lock_release_recursive>
 800894e:	e7d9      	b.n	8008904 <_fflush_r+0xc>
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <_fflush_r+0x70>)
 8008952:	429c      	cmp	r4, r3
 8008954:	d101      	bne.n	800895a <_fflush_r+0x62>
 8008956:	68ac      	ldr	r4, [r5, #8]
 8008958:	e7df      	b.n	800891a <_fflush_r+0x22>
 800895a:	4b04      	ldr	r3, [pc, #16]	; (800896c <_fflush_r+0x74>)
 800895c:	429c      	cmp	r4, r3
 800895e:	bf08      	it	eq
 8008960:	68ec      	ldreq	r4, [r5, #12]
 8008962:	e7da      	b.n	800891a <_fflush_r+0x22>
 8008964:	080090dc 	.word	0x080090dc
 8008968:	080090fc 	.word	0x080090fc
 800896c:	080090bc 	.word	0x080090bc

08008970 <std>:
 8008970:	2300      	movs	r3, #0
 8008972:	b510      	push	{r4, lr}
 8008974:	4604      	mov	r4, r0
 8008976:	e9c0 3300 	strd	r3, r3, [r0]
 800897a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800897e:	6083      	str	r3, [r0, #8]
 8008980:	8181      	strh	r1, [r0, #12]
 8008982:	6643      	str	r3, [r0, #100]	; 0x64
 8008984:	81c2      	strh	r2, [r0, #14]
 8008986:	6183      	str	r3, [r0, #24]
 8008988:	4619      	mov	r1, r3
 800898a:	2208      	movs	r2, #8
 800898c:	305c      	adds	r0, #92	; 0x5c
 800898e:	f7ff f8ff 	bl	8007b90 <memset>
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <std+0x38>)
 8008994:	6224      	str	r4, [r4, #32]
 8008996:	6263      	str	r3, [r4, #36]	; 0x24
 8008998:	4b04      	ldr	r3, [pc, #16]	; (80089ac <std+0x3c>)
 800899a:	62a3      	str	r3, [r4, #40]	; 0x28
 800899c:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <std+0x40>)
 800899e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <std+0x44>)
 80089a2:	6323      	str	r3, [r4, #48]	; 0x30
 80089a4:	bd10      	pop	{r4, pc}
 80089a6:	bf00      	nop
 80089a8:	08008ce9 	.word	0x08008ce9
 80089ac:	08008d0b 	.word	0x08008d0b
 80089b0:	08008d43 	.word	0x08008d43
 80089b4:	08008d67 	.word	0x08008d67

080089b8 <_cleanup_r>:
 80089b8:	4901      	ldr	r1, [pc, #4]	; (80089c0 <_cleanup_r+0x8>)
 80089ba:	f000 b8af 	b.w	8008b1c <_fwalk_reent>
 80089be:	bf00      	nop
 80089c0:	080088f9 	.word	0x080088f9

080089c4 <__sfmoreglue>:
 80089c4:	2268      	movs	r2, #104	; 0x68
 80089c6:	b570      	push	{r4, r5, r6, lr}
 80089c8:	1e4d      	subs	r5, r1, #1
 80089ca:	4355      	muls	r5, r2
 80089cc:	460e      	mov	r6, r1
 80089ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089d2:	f7ff fad5 	bl	8007f80 <_malloc_r>
 80089d6:	4604      	mov	r4, r0
 80089d8:	b140      	cbz	r0, 80089ec <__sfmoreglue+0x28>
 80089da:	2100      	movs	r1, #0
 80089dc:	e9c0 1600 	strd	r1, r6, [r0]
 80089e0:	300c      	adds	r0, #12
 80089e2:	60a0      	str	r0, [r4, #8]
 80089e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089e8:	f7ff f8d2 	bl	8007b90 <memset>
 80089ec:	4620      	mov	r0, r4
 80089ee:	bd70      	pop	{r4, r5, r6, pc}

080089f0 <__sfp_lock_acquire>:
 80089f0:	4801      	ldr	r0, [pc, #4]	; (80089f8 <__sfp_lock_acquire+0x8>)
 80089f2:	f000 b8b3 	b.w	8008b5c <__retarget_lock_acquire_recursive>
 80089f6:	bf00      	nop
 80089f8:	20000ec1 	.word	0x20000ec1

080089fc <__sfp_lock_release>:
 80089fc:	4801      	ldr	r0, [pc, #4]	; (8008a04 <__sfp_lock_release+0x8>)
 80089fe:	f000 b8ae 	b.w	8008b5e <__retarget_lock_release_recursive>
 8008a02:	bf00      	nop
 8008a04:	20000ec1 	.word	0x20000ec1

08008a08 <__sinit_lock_acquire>:
 8008a08:	4801      	ldr	r0, [pc, #4]	; (8008a10 <__sinit_lock_acquire+0x8>)
 8008a0a:	f000 b8a7 	b.w	8008b5c <__retarget_lock_acquire_recursive>
 8008a0e:	bf00      	nop
 8008a10:	20000ec2 	.word	0x20000ec2

08008a14 <__sinit_lock_release>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__sinit_lock_release+0x8>)
 8008a16:	f000 b8a2 	b.w	8008b5e <__retarget_lock_release_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000ec2 	.word	0x20000ec2

08008a20 <__sinit>:
 8008a20:	b510      	push	{r4, lr}
 8008a22:	4604      	mov	r4, r0
 8008a24:	f7ff fff0 	bl	8008a08 <__sinit_lock_acquire>
 8008a28:	69a3      	ldr	r3, [r4, #24]
 8008a2a:	b11b      	cbz	r3, 8008a34 <__sinit+0x14>
 8008a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a30:	f7ff bff0 	b.w	8008a14 <__sinit_lock_release>
 8008a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a38:	6523      	str	r3, [r4, #80]	; 0x50
 8008a3a:	4b13      	ldr	r3, [pc, #76]	; (8008a88 <__sinit+0x68>)
 8008a3c:	4a13      	ldr	r2, [pc, #76]	; (8008a8c <__sinit+0x6c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	bf08      	it	eq
 8008a46:	2301      	moveq	r3, #1
 8008a48:	4620      	mov	r0, r4
 8008a4a:	bf08      	it	eq
 8008a4c:	61a3      	streq	r3, [r4, #24]
 8008a4e:	f000 f81f 	bl	8008a90 <__sfp>
 8008a52:	6060      	str	r0, [r4, #4]
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 f81b 	bl	8008a90 <__sfp>
 8008a5a:	60a0      	str	r0, [r4, #8]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 f817 	bl	8008a90 <__sfp>
 8008a62:	2200      	movs	r2, #0
 8008a64:	2104      	movs	r1, #4
 8008a66:	60e0      	str	r0, [r4, #12]
 8008a68:	6860      	ldr	r0, [r4, #4]
 8008a6a:	f7ff ff81 	bl	8008970 <std>
 8008a6e:	2201      	movs	r2, #1
 8008a70:	2109      	movs	r1, #9
 8008a72:	68a0      	ldr	r0, [r4, #8]
 8008a74:	f7ff ff7c 	bl	8008970 <std>
 8008a78:	2202      	movs	r2, #2
 8008a7a:	2112      	movs	r1, #18
 8008a7c:	68e0      	ldr	r0, [r4, #12]
 8008a7e:	f7ff ff77 	bl	8008970 <std>
 8008a82:	2301      	movs	r3, #1
 8008a84:	61a3      	str	r3, [r4, #24]
 8008a86:	e7d1      	b.n	8008a2c <__sinit+0xc>
 8008a88:	08008ed4 	.word	0x08008ed4
 8008a8c:	080089b9 	.word	0x080089b9

08008a90 <__sfp>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	4607      	mov	r7, r0
 8008a94:	f7ff ffac 	bl	80089f0 <__sfp_lock_acquire>
 8008a98:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <__sfp+0x84>)
 8008a9a:	681e      	ldr	r6, [r3, #0]
 8008a9c:	69b3      	ldr	r3, [r6, #24]
 8008a9e:	b913      	cbnz	r3, 8008aa6 <__sfp+0x16>
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff ffbd 	bl	8008a20 <__sinit>
 8008aa6:	3648      	adds	r6, #72	; 0x48
 8008aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	d503      	bpl.n	8008ab8 <__sfp+0x28>
 8008ab0:	6833      	ldr	r3, [r6, #0]
 8008ab2:	b30b      	cbz	r3, 8008af8 <__sfp+0x68>
 8008ab4:	6836      	ldr	r6, [r6, #0]
 8008ab6:	e7f7      	b.n	8008aa8 <__sfp+0x18>
 8008ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008abc:	b9d5      	cbnz	r5, 8008af4 <__sfp+0x64>
 8008abe:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <__sfp+0x88>)
 8008ac0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ac4:	60e3      	str	r3, [r4, #12]
 8008ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8008ac8:	f000 f847 	bl	8008b5a <__retarget_lock_init_recursive>
 8008acc:	f7ff ff96 	bl	80089fc <__sfp_lock_release>
 8008ad0:	2208      	movs	r2, #8
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008adc:	6025      	str	r5, [r4, #0]
 8008ade:	61a5      	str	r5, [r4, #24]
 8008ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ae4:	f7ff f854 	bl	8007b90 <memset>
 8008ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008af0:	4620      	mov	r0, r4
 8008af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af4:	3468      	adds	r4, #104	; 0x68
 8008af6:	e7d9      	b.n	8008aac <__sfp+0x1c>
 8008af8:	2104      	movs	r1, #4
 8008afa:	4638      	mov	r0, r7
 8008afc:	f7ff ff62 	bl	80089c4 <__sfmoreglue>
 8008b00:	4604      	mov	r4, r0
 8008b02:	6030      	str	r0, [r6, #0]
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1d5      	bne.n	8008ab4 <__sfp+0x24>
 8008b08:	f7ff ff78 	bl	80089fc <__sfp_lock_release>
 8008b0c:	230c      	movs	r3, #12
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	e7ee      	b.n	8008af0 <__sfp+0x60>
 8008b12:	bf00      	nop
 8008b14:	08008ed4 	.word	0x08008ed4
 8008b18:	ffff0001 	.word	0xffff0001

08008b1c <_fwalk_reent>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	4606      	mov	r6, r0
 8008b22:	4688      	mov	r8, r1
 8008b24:	2700      	movs	r7, #0
 8008b26:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8008b32:	d505      	bpl.n	8008b40 <_fwalk_reent+0x24>
 8008b34:	6824      	ldr	r4, [r4, #0]
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	d1f7      	bne.n	8008b2a <_fwalk_reent+0xe>
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b40:	89ab      	ldrh	r3, [r5, #12]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d907      	bls.n	8008b56 <_fwalk_reent+0x3a>
 8008b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	d003      	beq.n	8008b56 <_fwalk_reent+0x3a>
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4630      	mov	r0, r6
 8008b52:	47c0      	blx	r8
 8008b54:	4307      	orrs	r7, r0
 8008b56:	3568      	adds	r5, #104	; 0x68
 8008b58:	e7e9      	b.n	8008b2e <_fwalk_reent+0x12>

08008b5a <__retarget_lock_init_recursive>:
 8008b5a:	4770      	bx	lr

08008b5c <__retarget_lock_acquire_recursive>:
 8008b5c:	4770      	bx	lr

08008b5e <__retarget_lock_release_recursive>:
 8008b5e:	4770      	bx	lr

08008b60 <__swhatbuf_r>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	460e      	mov	r6, r1
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	4614      	mov	r4, r2
 8008b6a:	2900      	cmp	r1, #0
 8008b6c:	461d      	mov	r5, r3
 8008b6e:	b096      	sub	sp, #88	; 0x58
 8008b70:	da08      	bge.n	8008b84 <__swhatbuf_r+0x24>
 8008b72:	2200      	movs	r2, #0
 8008b74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b78:	602a      	str	r2, [r5, #0]
 8008b7a:	061a      	lsls	r2, r3, #24
 8008b7c:	d410      	bmi.n	8008ba0 <__swhatbuf_r+0x40>
 8008b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b82:	e00e      	b.n	8008ba2 <__swhatbuf_r+0x42>
 8008b84:	466a      	mov	r2, sp
 8008b86:	f000 f915 	bl	8008db4 <_fstat_r>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	dbf1      	blt.n	8008b72 <__swhatbuf_r+0x12>
 8008b8e:	9a01      	ldr	r2, [sp, #4]
 8008b90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b98:	425a      	negs	r2, r3
 8008b9a:	415a      	adcs	r2, r3
 8008b9c:	602a      	str	r2, [r5, #0]
 8008b9e:	e7ee      	b.n	8008b7e <__swhatbuf_r+0x1e>
 8008ba0:	2340      	movs	r3, #64	; 0x40
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	b016      	add	sp, #88	; 0x58
 8008ba8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bac <__smakebuf_r>:
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb0:	079d      	lsls	r5, r3, #30
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	d507      	bpl.n	8008bc8 <__smakebuf_r+0x1c>
 8008bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	b002      	add	sp, #8
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	466a      	mov	r2, sp
 8008bca:	ab01      	add	r3, sp, #4
 8008bcc:	f7ff ffc8 	bl	8008b60 <__swhatbuf_r>
 8008bd0:	9900      	ldr	r1, [sp, #0]
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff f9d3 	bl	8007f80 <_malloc_r>
 8008bda:	b948      	cbnz	r0, 8008bf0 <__smakebuf_r+0x44>
 8008bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d4ef      	bmi.n	8008bc4 <__smakebuf_r+0x18>
 8008be4:	f023 0303 	bic.w	r3, r3, #3
 8008be8:	f043 0302 	orr.w	r3, r3, #2
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	e7e3      	b.n	8008bb8 <__smakebuf_r+0xc>
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <__smakebuf_r+0x7c>)
 8008bf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	6020      	str	r0, [r4, #0]
 8008bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	9b00      	ldr	r3, [sp, #0]
 8008c00:	6120      	str	r0, [r4, #16]
 8008c02:	6163      	str	r3, [r4, #20]
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	b15b      	cbz	r3, 8008c20 <__smakebuf_r+0x74>
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c0e:	f000 f8e3 	bl	8008dd8 <_isatty_r>
 8008c12:	b128      	cbz	r0, 8008c20 <__smakebuf_r+0x74>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	89a0      	ldrh	r0, [r4, #12]
 8008c22:	4305      	orrs	r5, r0
 8008c24:	81a5      	strh	r5, [r4, #12]
 8008c26:	e7cd      	b.n	8008bc4 <__smakebuf_r+0x18>
 8008c28:	080089b9 	.word	0x080089b9

08008c2c <memchr>:
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	b2c9      	uxtb	r1, r1
 8008c32:	4402      	add	r2, r0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	d101      	bne.n	8008c3e <memchr+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e003      	b.n	8008c46 <memchr+0x1a>
 8008c3e:	7804      	ldrb	r4, [r0, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	428c      	cmp	r4, r1
 8008c44:	d1f6      	bne.n	8008c34 <memchr+0x8>
 8008c46:	bd10      	pop	{r4, pc}

08008c48 <__malloc_lock>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__malloc_lock+0x8>)
 8008c4a:	f7ff bf87 	b.w	8008b5c <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	20000ec0 	.word	0x20000ec0

08008c54 <__malloc_unlock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__malloc_unlock+0x8>)
 8008c56:	f7ff bf82 	b.w	8008b5e <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	20000ec0 	.word	0x20000ec0

08008c60 <_raise_r>:
 8008c60:	291f      	cmp	r1, #31
 8008c62:	b538      	push	{r3, r4, r5, lr}
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	d904      	bls.n	8008c74 <_raise_r+0x14>
 8008c6a:	2316      	movs	r3, #22
 8008c6c:	6003      	str	r3, [r0, #0]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c76:	b112      	cbz	r2, 8008c7e <_raise_r+0x1e>
 8008c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c7c:	b94b      	cbnz	r3, 8008c92 <_raise_r+0x32>
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 f830 	bl	8008ce4 <_getpid_r>
 8008c84:	462a      	mov	r2, r5
 8008c86:	4601      	mov	r1, r0
 8008c88:	4620      	mov	r0, r4
 8008c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c8e:	f000 b817 	b.w	8008cc0 <_kill_r>
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d00a      	beq.n	8008cac <_raise_r+0x4c>
 8008c96:	1c59      	adds	r1, r3, #1
 8008c98:	d103      	bne.n	8008ca2 <_raise_r+0x42>
 8008c9a:	2316      	movs	r3, #22
 8008c9c:	6003      	str	r3, [r0, #0]
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e7e7      	b.n	8008c72 <_raise_r+0x12>
 8008ca2:	2400      	movs	r4, #0
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008caa:	4798      	blx	r3
 8008cac:	2000      	movs	r0, #0
 8008cae:	e7e0      	b.n	8008c72 <_raise_r+0x12>

08008cb0 <raise>:
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <raise+0xc>)
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	f7ff bfd3 	b.w	8008c60 <_raise_r>
 8008cba:	bf00      	nop
 8008cbc:	200004a4 	.word	0x200004a4

08008cc0 <_kill_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4d06      	ldr	r5, [pc, #24]	; (8008ce0 <_kill_r+0x20>)
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	4611      	mov	r1, r2
 8008ccc:	602b      	str	r3, [r5, #0]
 8008cce:	f7fe fe4a 	bl	8007966 <_kill>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d102      	bne.n	8008cdc <_kill_r+0x1c>
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	b103      	cbz	r3, 8008cdc <_kill_r+0x1c>
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	bd38      	pop	{r3, r4, r5, pc}
 8008cde:	bf00      	nop
 8008ce0:	20000ec4 	.word	0x20000ec4

08008ce4 <_getpid_r>:
 8008ce4:	f7fe be38 	b.w	8007958 <_getpid>

08008ce8 <__sread>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	460c      	mov	r4, r1
 8008cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf0:	f000 f894 	bl	8008e1c <_read_r>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	bfab      	itete	ge
 8008cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8008cfc:	181b      	addge	r3, r3, r0
 8008cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d02:	bfac      	ite	ge
 8008d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d06:	81a3      	strhlt	r3, [r4, #12]
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <__swrite>:
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	461f      	mov	r7, r3
 8008d10:	898b      	ldrh	r3, [r1, #12]
 8008d12:	4605      	mov	r5, r0
 8008d14:	05db      	lsls	r3, r3, #23
 8008d16:	460c      	mov	r4, r1
 8008d18:	4616      	mov	r6, r2
 8008d1a:	d505      	bpl.n	8008d28 <__swrite+0x1e>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d24:	f000 f868 	bl	8008df8 <_lseek_r>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	4632      	mov	r2, r6
 8008d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	4628      	mov	r0, r5
 8008d34:	463b      	mov	r3, r7
 8008d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3e:	f000 b817 	b.w	8008d70 <_write_r>

08008d42 <__sseek>:
 8008d42:	b510      	push	{r4, lr}
 8008d44:	460c      	mov	r4, r1
 8008d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4a:	f000 f855 	bl	8008df8 <_lseek_r>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	bf15      	itete	ne
 8008d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d5e:	81a3      	strheq	r3, [r4, #12]
 8008d60:	bf18      	it	ne
 8008d62:	81a3      	strhne	r3, [r4, #12]
 8008d64:	bd10      	pop	{r4, pc}

08008d66 <__sclose>:
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 b813 	b.w	8008d94 <_close_r>
	...

08008d70 <_write_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4d05      	ldr	r5, [pc, #20]	; (8008d90 <_write_r+0x20>)
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7fe fe28 	bl	80079d4 <_write>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_write_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_write_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20000ec4 	.word	0x20000ec4

08008d94 <_close_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	2300      	movs	r3, #0
 8008d98:	4d05      	ldr	r5, [pc, #20]	; (8008db0 <_close_r+0x1c>)
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7fe fe34 	bl	8007a0c <_close>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_close_r+0x1a>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_close_r+0x1a>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20000ec4 	.word	0x20000ec4

08008db4 <_fstat_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	2300      	movs	r3, #0
 8008db8:	4d06      	ldr	r5, [pc, #24]	; (8008dd4 <_fstat_r+0x20>)
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	f7fe fe2e 	bl	8007a22 <_fstat>
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	d102      	bne.n	8008dd0 <_fstat_r+0x1c>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	b103      	cbz	r3, 8008dd0 <_fstat_r+0x1c>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	bd38      	pop	{r3, r4, r5, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000ec4 	.word	0x20000ec4

08008dd8 <_isatty_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4d05      	ldr	r5, [pc, #20]	; (8008df4 <_isatty_r+0x1c>)
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7fe fe2c 	bl	8007a40 <_isatty>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_isatty_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_isatty_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20000ec4 	.word	0x20000ec4

08008df8 <_lseek_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	4611      	mov	r1, r2
 8008e00:	2200      	movs	r2, #0
 8008e02:	4d05      	ldr	r5, [pc, #20]	; (8008e18 <_lseek_r+0x20>)
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7fe fe24 	bl	8007a54 <_lseek>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_lseek_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_lseek_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	20000ec4 	.word	0x20000ec4

08008e1c <_read_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	2200      	movs	r2, #0
 8008e26:	4d05      	ldr	r5, [pc, #20]	; (8008e3c <_read_r+0x20>)
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7fe fdb5 	bl	800799a <_read>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_read_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_read_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20000ec4 	.word	0x20000ec4

08008e40 <_init>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	bf00      	nop
 8008e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e46:	bc08      	pop	{r3}
 8008e48:	469e      	mov	lr, r3
 8008e4a:	4770      	bx	lr

08008e4c <_fini>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr
