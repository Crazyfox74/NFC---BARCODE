
NFC_and_Barcode_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008298  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008668  08008668  000204c4  2**0
                  CONTENTS
  4 .ARM          00000000  08008668  08008668  000204c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008668  08008668  000204c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c4  20000000  08008670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  200004c8  08008b34  000204c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e78  08008b34  00020e78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcab  00000000  00000000  000204ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bc  00000000  00000000  0002e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00030b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00031980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010be3  00000000  00000000  00032658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e242  00000000  00000000  0004323b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004cd11  00000000  00000000  0005147d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009e18e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  0009e1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200004c8 	.word	0x200004c8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800838c 	.word	0x0800838c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200004cc 	.word	0x200004cc
 8000148:	0800838c 	.word	0x0800838c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SystemInit>:
    *         SystemCoreClock variable.
    * @note   This function should be used only after reset.
    * @param  None
    * @retval None
    */
void SystemInit() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	SetSysClock();
 8000160:	f000 f802 	bl	8000168 <SetSysClock>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800016c:	f000 f802 	bl	8000174 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}

08000174 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	2300      	movs	r3, #0
 8000180:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000182:	4b3a      	ldr	r3, [pc, #232]	; (800026c <SetSysClockTo72+0xf8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a39      	ldr	r2, [pc, #228]	; (800026c <SetSysClockTo72+0xf8>)
 8000188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800018c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800018e:	4b37      	ldr	r3, [pc, #220]	; (800026c <SetSysClockTo72+0xf8>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000196:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <SetSysClockTo72+0x38>
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001aa:	d1f0      	bne.n	800018e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001ac:	4b2f      	ldr	r3, [pc, #188]	; (800026c <SetSysClockTo72+0xf8>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80001b8:	2301      	movs	r3, #1
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	e001      	b.n	80001c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d14b      	bne.n	8000260 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001c8:	4b29      	ldr	r3, [pc, #164]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a28      	ldr	r2, [pc, #160]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001d4:	4b26      	ldr	r3, [pc, #152]	; (8000270 <SetSysClockTo72+0xfc>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <SetSysClockTo72+0xfc>)
 80001da:	f023 0303 	bic.w	r3, r3, #3
 80001de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a22      	ldr	r2, [pc, #136]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001ec:	4b1f      	ldr	r3, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f6:	4a1d      	ldr	r2, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <SetSysClockTo72+0xf8>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <SetSysClockTo72+0xf8>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <SetSysClockTo72+0xf8>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <SetSysClockTo72+0xf8>)
 800020e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000212:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <SetSysClockTo72+0xf8>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <SetSysClockTo72+0xf8>)
 800021a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800021e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <SetSysClockTo72+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <SetSysClockTo72+0xf8>)
 8000226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800022c:	bf00      	nop
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <SetSysClockTo72+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SetSysClockTo72+0xf8>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <SetSysClockTo72+0xf8>)
 8000240:	f023 0303 	bic.w	r3, r3, #3
 8000244:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <SetSysClockTo72+0xf8>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <SetSysClockTo72+0xf8>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000252:	bf00      	nop
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SetSysClockTo72+0xf8>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	f003 030c 	and.w	r3, r3, #12
 800025c:	2b08      	cmp	r3, #8
 800025e:	d1f9      	bne.n	8000254 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000
 8000270:	40022000 	.word	0x40022000

08000274 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da0b      	bge.n	80002a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <NVIC_SetPriority+0x4c>)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 030f 	and.w	r3, r3, #15
 8000294:	3b04      	subs	r3, #4
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800029e:	e009      	b.n	80002b4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <NVIC_SetPriority+0x50>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	0112      	lsls	r2, r2, #4
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002d6:	d301      	bcc.n	80002dc <SysTick_Config+0x14>
 80002d8:	2301      	movs	r3, #1
 80002da:	e011      	b.n	8000300 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <SysTick_Config+0x40>)
 80002e4:	3b01      	subs	r3, #1
 80002e6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80002e8:	210f      	movs	r1, #15
 80002ea:	f04f 30ff 	mov.w	r0, #4294967295
 80002ee:	f7ff ffc1 	bl	8000274 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SysTick_Config+0x40>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SysTick_Config+0x40>)
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e010 	.word	0xe000e010

0800030c <LCD_PN532_CreateRunInfoString>:

extern char fl_bar_buff[16];
extern char nfc_uid_arr[10];


void LCD_PN532_CreateRunInfoString(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	strcpy( s_pn_info, s_pn_fchip);	//копирую первую заготовку в пустую строку
 8000310:	4912      	ldr	r1, [pc, #72]	; (800035c <LCD_PN532_CreateRunInfoString+0x50>)
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000314:	f006 fef9 	bl	800710a <strcpy>
	strcat(s_pn_info, s_pn_nchip);	//копирую в заготовку пробельную строку
 8000318:	4912      	ldr	r1, [pc, #72]	; (8000364 <LCD_PN532_CreateRunInfoString+0x58>)
 800031a:	4811      	ldr	r0, [pc, #68]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800031c:	f006 fee6 	bl	80070ec <strcat>
	strcat(s_pn_info,s_space );
 8000320:	4911      	ldr	r1, [pc, #68]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000324:	f006 fee2 	bl	80070ec <strcat>
	strcat(s_pn_info,s_pn_wfchip );
 8000328:	4910      	ldr	r1, [pc, #64]	; (800036c <LCD_PN532_CreateRunInfoString+0x60>)
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800032c:	f006 fede 	bl	80070ec <strcat>
	strcat(s_pn_info, s_pn_fw1nchip);
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <LCD_PN532_CreateRunInfoString+0x64>)
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000334:	f006 feda 	bl	80070ec <strcat>
	strcat(s_pn_info,s_pn_fw2nchip );
 8000338:	490e      	ldr	r1, [pc, #56]	; (8000374 <LCD_PN532_CreateRunInfoString+0x68>)
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800033c:	f006 fed6 	bl	80070ec <strcat>
	strcat(s_pn_info,s_space );
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000344:	f006 fed2 	bl	80070ec <strcat>
	strcat(s_pn_info,s_pn_suppchip);
 8000348:	490b      	ldr	r1, [pc, #44]	; (8000378 <LCD_PN532_CreateRunInfoString+0x6c>)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800034c:	f006 fece 	bl	80070ec <strcat>
	strcat(s_pn_info,s_pn_suchip);
 8000350:	490a      	ldr	r1, [pc, #40]	; (800037c <LCD_PN532_CreateRunInfoString+0x70>)
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000354:	f006 feca 	bl	80070ec <strcat>

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200001ec 	.word	0x200001ec
 8000360:	20000748 	.word	0x20000748
 8000364:	200001dc 	.word	0x200001dc
 8000368:	200001d0 	.word	0x200001d0
 800036c:	200001fc 	.word	0x200001fc
 8000370:	200001e0 	.word	0x200001e0
 8000374:	200001e4 	.word	0x200001e4
 8000378:	2000020c 	.word	0x2000020c
 800037c:	200001e8 	.word	0x200001e8

08000380 <LCD_BAR_CreateRunInfoString>:


//Сборка сборка бегущей строки с версией ПО сканера штрих-кодов модуля для LCD
void LCD_BAR_CreateRunInfoString(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
//				s_bar_info++;
//			}
//		}
//	}

	char *ptr_bar_ver_info=strtok(ScanerVersion,"\r\n");
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LCD_BAR_CreateRunInfoString+0x40>)
 800038a:	f006 ff1d 	bl	80071c8 <strtok>
 800038e:	6078      	str	r0, [r7, #4]
	strcpy(s_bar_info,ptr_bar_ver_info);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 8000394:	f006 feb9 	bl	800710a <strcpy>
	strcat(s_bar_info,s_space);
 8000398:	490b      	ldr	r1, [pc, #44]	; (80003c8 <LCD_BAR_CreateRunInfoString+0x48>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 800039c:	f006 fea6 	bl	80070ec <strcat>
	ptr_bar_ver_info=strtok(NULL,"\r\n");
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 80003a2:	2000      	movs	r0, #0
 80003a4:	f006 ff10 	bl	80071c8 <strtok>
 80003a8:	6078      	str	r0, [r7, #4]
	strcat(s_bar_info,ptr_bar_ver_info);
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 80003ae:	f006 fe9d 	bl	80070ec <strcat>

//	char *s_bar_info=strcat(s_bar_ver_info,s_bar_site_info);
//	strcpy(s_bar_info,s_bar_ver_info);


}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	080083a4 	.word	0x080083a4
 80003c0:	20000d88 	.word	0x20000d88
 80003c4:	200007c8 	.word	0x200007c8
 80003c8:	200001d0 	.word	0x200001d0

080003cc <PN532_Write_Data>:


uint8_t PN532_Write_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b092      	sub	sp, #72	; 0x48
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	72fb      	strb	r3, [r7, #11]
 80003da:	4613      	mov	r3, r2
 80003dc:	72bb      	strb	r3, [r7, #10]
//	uint8_t success=0;	// Flag to check if there was an error with the PN532
	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 80003de:	4a51      	ldr	r2, [pc, #324]	; (8000524 <PN532_Write_Data+0x158>)
 80003e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e8:	6018      	str	r0, [r3, #0]
 80003ea:	3304      	adds	r3, #4
 80003ec:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

	bool authenticated = FALSE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t blockBuffer[16];                  // Buffer to store block contents
	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 80003f4:	4a4c      	ldr	r2, [pc, #304]	; (8000528 <PN532_Write_Data+0x15c>)
 80003f6:	f107 0320 	add.w	r3, r7, #32
 80003fa:	6812      	ldr	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	8019      	strh	r1, [r3, #0]
 8000400:	3302      	adds	r3, #2
 8000402:	0c12      	lsrs	r2, r2, #16
 8000404:	701a      	strb	r2, [r3, #0]
	//uint8_t idx = 0;
	uint8_t numOfSector = 16;                 // Assume Mifare Classic 1K for now (16 4-block sectors)
 8000406:	2310      	movs	r3, #16
 8000408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t i=0;
 800040c:	2300      	movs	r3, #0
 800040e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    uint8_t RdWrDataBlock[16];


	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8000412:	7af9      	ldrb	r1, [r7, #11]
 8000414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2301      	movs	r3, #1
 800041c:	2200      	movs	r2, #0
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f004 f960 	bl	80046e4 <PN532_mifareclassic_AuthenticateBlock>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d105      	bne.n	8000436 <PN532_Write_Data+0x6a>
	        {
	          return res_excep=1;	//выход из-за ошибки аутентификации блока
 800042a:	2301      	movs	r3, #1
 800042c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000430:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000434:	e072      	b.n	800051c <PN532_Write_Data+0x150>
	        }

	        res_excep=PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f004 f9c7 	bl	80047d0 <PN532_mifareclassic_ReadDataBlock>
 8000442:	4603      	mov	r3, r0
 8000444:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	        if (!(PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock)))
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	f004 f9be 	bl	80047d0 <PN532_mifareclassic_ReadDataBlock>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d105      	bne.n	8000466 <PN532_Write_Data+0x9a>
	        {
	          return res_excep=2;	//выход из-за ошибки чтения блока
 800045a:	2302      	movs	r3, #2
 800045c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000460:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000464:	e05a      	b.n	800051c <PN532_Write_Data+0x150>
	        }
	        else{

	    		  for(i=0;i<4;i++){
 8000466:	2300      	movs	r3, #0
 8000468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800046c:	e00f      	b.n	800048e <PN532_Write_Data+0xc2>
	    			  RdWrDataBlock[i]=data[i];
 800046e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	441a      	add	r2, r3
 8000476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	3340      	adds	r3, #64	; 0x40
 800047e:	443b      	add	r3, r7
 8000480:	f803 2c30 	strb.w	r2, [r3, #-48]
	    		  for(i=0;i<4;i++){
 8000484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000488:	3301      	adds	r3, #1
 800048a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800048e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000492:	2b03      	cmp	r3, #3
 8000494:	d9eb      	bls.n	800046e <PN532_Write_Data+0xa2>
	    		}



	    		  if(!(PN532_mifareclassic_WriteDataBlock(1,RdWrDataBlock))){
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	2001      	movs	r0, #1
 800049e:	f004 f9d3 	bl	8004848 <PN532_mifareclassic_WriteDataBlock>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d105      	bne.n	80004b4 <PN532_Write_Data+0xe8>
	    			  return res_excep=3;	//выход из-за ошибки запииси блока
 80004a8:	2303      	movs	r3, #3
 80004aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80004ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80004b2:	e033      	b.n	800051c <PN532_Write_Data+0x150>
	    		  }

	        // Step 3: Reset both keys to 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
	        memcpy(blockBuffer, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80004bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c0:	6018      	str	r0, [r3, #0]
 80004c2:	3304      	adds	r3, #4
 80004c4:	8019      	strh	r1, [r3, #0]
	        memcpy(blockBuffer + 6, blankAccessBits, sizeof(blankAccessBits));
 80004c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ca:	3306      	adds	r3, #6
 80004cc:	461a      	mov	r2, r3
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	8819      	ldrh	r1, [r3, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	8011      	strh	r1, [r2, #0]
 80004d8:	7093      	strb	r3, [r2, #2]
	        blockBuffer[9] = 0x69;
 80004da:	2369      	movs	r3, #105	; 0x69
 80004dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	        memcpy(blockBuffer + 10, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e4:	330a      	adds	r3, #10
 80004e6:	461a      	mov	r2, r3
 80004e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	6010      	str	r0, [r2, #0]
 80004f0:	889b      	ldrh	r3, [r3, #4]
 80004f2:	8093      	strh	r3, [r2, #4]

	         //Step 4: Write the trailer block
	        if (!(PN532_mifareclassic_WriteDataBlock(3, blockBuffer)))
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4619      	mov	r1, r3
 80004fa:	2003      	movs	r0, #3
 80004fc:	f004 f9a4 	bl	8004848 <PN532_mifareclassic_WriteDataBlock>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d105      	bne.n	8000512 <PN532_Write_Data+0x146>
	        {
	          return res_excep=4;	//выход из-за ошибки записи ключа блока
 8000506:	2304      	movs	r3, #4
 8000508:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800050c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000510:	e004      	b.n	800051c <PN532_Write_Data+0x150>
	        }else return res_excep=0;
 8000512:	2300      	movs	r3, #0
 8000514:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000518:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c

	        }

}
 800051c:	4618      	mov	r0, r3
 800051e:	3740      	adds	r7, #64	; 0x40
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	080083a8 	.word	0x080083a8
 8000528:	080083b0 	.word	0x080083b0

0800052c <main>:





int main(void){
 800052c:	b580      	push	{r7, lr}
 800052e:	b09c      	sub	sp, #112	; 0x70
 8000530:	af00      	add	r7, sp, #0

	g_sSum[SUM_STR_LEN + 1] = '\0';
 8000532:	4ba5      	ldr	r3, [pc, #660]	; (80007c8 <main+0x29c>)
 8000534:	2200      	movs	r2, #0
 8000536:	721a      	strb	r2, [r3, #8]


	rtc_cal rtc_time;
	RTC_INIT();
 8000538:	f004 f9be 	bl	80048b8 <RTC_INIT>

	RCC_PLLCmd(DISABLE);
 800053c:	2000      	movs	r0, #0
 800053e:	f005 fdff 	bl	8006140 <RCC_PLLCmd>
		RCC_HSEConfig(RCC_HSE_ON);
 8000542:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000546:	f005 fdaf 	bl	80060a8 <RCC_HSEConfig>
		RCC_ClockSecuritySystemCmd(ENABLE);
 800054a:	2001      	movs	r0, #1
 800054c:	f005 ff16 	bl	800637c <RCC_ClockSecuritySystemCmd>
	    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000550:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000554:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000558:	f005 fdd4 	bl	8006104 <RCC_PLLConfig>
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800055c:	2002      	movs	r0, #2
 800055e:	f005 fdff 	bl	8006160 <RCC_SYSCLKConfig>

		uint32_t tmpreg = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
		tmpreg=RCC->CFGR;
 8000566:	4b99      	ldr	r3, [pc, #612]	; (80007cc <main+0x2a0>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC->CFGR=tmpreg & 0xFFFFF0FF;
 800056c:	4a97      	ldr	r2, [pc, #604]	; (80007cc <main+0x2a0>)
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000574:	6053      	str	r3, [r2, #4]
		//RCC->CFGR=tmpreg|0x00000400;//HCLK / 2 - значение по умолчанию? (36МГц)
		RCC->CFGR=tmpreg|0x00000500;//HCLK / 4
 8000576:	4a95      	ldr	r2, [pc, #596]	; (80007cc <main+0x2a0>)
 8000578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800057e:	6053      	str	r3, [r2, #4]

		RCC->CFGR|=RCC_CFGR_USBPRE;	//предделитель для usb
 8000580:	4b92      	ldr	r3, [pc, #584]	; (80007cc <main+0x2a0>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a91      	ldr	r2, [pc, #580]	; (80007cc <main+0x2a0>)
 8000586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058a:	6053      	str	r3, [r2, #4]

		//RCC->CFGR=tmpreg | 0x00000600;//HCLK / 8

	    RCC_PLLCmd(ENABLE);
 800058c:	2001      	movs	r0, #1
 800058e:	f005 fdd7 	bl	8006140 <RCC_PLLCmd>

		/* SysTick end of count event each 1 ms */
		RCC_GetClocksFreq ( &RCC_Clocks );
 8000592:	488f      	ldr	r0, [pc, #572]	; (80007d0 <main+0x2a4>)
 8000594:	f005 fe00 	bl	8006198 <RCC_GetClocksFreq>
		SysTick_Config ( RCC_Clocks.HCLK_Frequency / 1000 );
 8000598:	4b8d      	ldr	r3, [pc, #564]	; (80007d0 <main+0x2a4>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a8d      	ldr	r2, [pc, #564]	; (80007d4 <main+0x2a8>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe8f 	bl	80002c8 <SysTick_Config>

		btnpress=0;
 80005aa:	4b8b      	ldr	r3, [pc, #556]	; (80007d8 <main+0x2ac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

		RTC_SET_COUNTER(timer);
 80005b0:	4b8a      	ldr	r3, [pc, #552]	; (80007dc <main+0x2b0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fa11 	bl	80049dc <RTC_SET_COUNTER>


		 LCD_Init();
 80005ba:	f003 fc39 	bl	8003e30 <LCD_Init>
		BTN_Init();
 80005be:	f002 f943 	bl	8002848 <BTN_Init>
		u8_btnstate=GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN );
 80005c2:	2101      	movs	r1, #1
 80005c4:	4886      	ldr	r0, [pc, #536]	; (80007e0 <main+0x2b4>)
 80005c6:	f005 fbc5 	bl	8005d54 <GPIO_ReadInputDataBit>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <main+0x2b8>)
 80005d0:	701a      	strb	r2, [r3, #0]
		previousState=u8_btnstate;
 80005d2:	4b84      	ldr	r3, [pc, #528]	; (80007e4 <main+0x2b8>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b84      	ldr	r3, [pc, #528]	; (80007e8 <main+0x2bc>)
 80005d8:	701a      	strb	r2, [r3, #0]
		 LED_Init();
 80005da:	f002 f915 	bl	8002808 <LED_Init>

		 spi_gpio_init();
 80005de:	f002 fd5d 	bl	800309c <spi_gpio_init>

		   Usart2Init();
 80005e2:	f006 fa77 	bl	8006ad4 <Usart2Init>
			SCAN_UsartInit();
 80005e6:	f006 faf5 	bl	8006bd4 <SCAN_UsartInit>
			PN532_SPIInit();
 80005ea:	f004 ff6f 	bl	80054cc <PN532_SPIInit>
	//		SPI_FLASH_INIT();
	//		jedec_test = spiFlash_readJEDECDesc();



			nfc_cntcomand=0;
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <main+0x2c0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]


			statusDevice=ST_DEV_ALL_ERR;
 80005f4:	4b7e      	ldr	r3, [pc, #504]	; (80007f0 <main+0x2c4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]

				uint32_t buttonTick = GetTickCount();
 80005fa:	f002 fb01 	bl	8002c00 <GetTickCount>
 80005fe:	62b8      	str	r0, [r7, #40]	; 0x28
				uint32_t ledTick1 = GetTickCount();
 8000600:	f002 fafe 	bl	8002c00 <GetTickCount>
 8000604:	6278      	str	r0, [r7, #36]	; 0x24
				uint32_t ledTick2 = ledTick1;
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	623b      	str	r3, [r7, #32]

				uint32_t versiondata;
				uint32_t st;


				Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
 800060a:	487a      	ldr	r0, [pc, #488]	; (80007f4 <main+0x2c8>)
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	4619      	mov	r1, r3
 8000614:	4877      	ldr	r0, [pc, #476]	; (80007f4 <main+0x2c8>)
 8000616:	f006 fab5 	bl	8006b84 <Usart2_SendData>
				Usart2_SendData(s_pc_scanner,strlen(s_pc_scanner));
 800061a:	4877      	ldr	r0, [pc, #476]	; (80007f8 <main+0x2cc>)
 800061c:	f7ff fd96 	bl	800014c <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	4619      	mov	r1, r3
 8000624:	4874      	ldr	r0, [pc, #464]	; (80007f8 <main+0x2cc>)
 8000626:	f006 faad 	bl	8006b84 <Usart2_SendData>
				Usart2_SendData(s_pc_test,strlen(s_pc_test));
 800062a:	4874      	ldr	r0, [pc, #464]	; (80007fc <main+0x2d0>)
 800062c:	f7ff fd8e 	bl	800014c <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	4871      	ldr	r0, [pc, #452]	; (80007fc <main+0x2d0>)
 8000636:	f006 faa5 	bl	8006b84 <Usart2_SendData>


			LCD_RunStringDevInfo ( s_lcd_hello,s_lcd_scanner,RUN_STR_DELAY_TST);
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4970      	ldr	r1, [pc, #448]	; (8000800 <main+0x2d4>)
 800063e:	4871      	ldr	r0, [pc, #452]	; (8000804 <main+0x2d8>)
 8000640:	f003 f9b8 	bl	80039b4 <LCD_RunStringDevInfo>


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000644:	bf00      	nop
 8000646:	4b70      	ldr	r3, [pc, #448]	; (8000808 <main+0x2dc>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d006      	beq.n	800065e <main+0x132>
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	486e      	ldr	r0, [pc, #440]	; (800080c <main+0x2e0>)
 8000654:	f005 ff8c 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f3      	bne.n	8000646 <main+0x11a>
				SpiActive = 1;
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <main+0x2dc>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
			b_wakeup=PN532_WakeUp();
 8000664:	f003 fc44 	bl	8003ef0 <PN532_WakeUp>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b68      	ldr	r3, [pc, #416]	; (8000810 <main+0x2e4>)
 800066e:	701a      	strb	r2, [r3, #0]
			b_samconfig=PN532_SAMConfig();
 8000670:	f003 fce2 	bl	8004038 <PN532_SAMConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b66      	ldr	r3, [pc, #408]	; (8000814 <main+0x2e8>)
 800067a:	701a      	strb	r2, [r3, #0]

			versiondata = PN532_getFirmwareVersion();//Получениe версии ПО PN532
 800067c:	f003 fd08 	bl	8004090 <PN532_getFirmwareVersion>
 8000680:	61f8      	str	r0, [r7, #28]

				if(versiondata){
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d013      	beq.n	80006b0 <main+0x184>
					statusDevice=statusDevice|ST_DEV_NFC_NOERR;//установка флага успешного теста NFC
 8000688:	4b59      	ldr	r3, [pc, #356]	; (80007f0 <main+0x2c4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b57      	ldr	r3, [pc, #348]	; (80007f0 <main+0x2c4>)
 8000694:	701a      	strb	r2, [r3, #0]
					PN532_FirmWareVersion2String (versiondata);
 8000696:	69f8      	ldr	r0, [r7, #28]
 8000698:	f002 fabc 	bl	8002c14 <PN532_FirmWareVersion2String>
					b_rertyes=PN532_setPassiveActivationRetries(0xFF);
 800069c:	20ff      	movs	r0, #255	; 0xff
 800069e:	f003 fc3d 	bl	8003f1c <PN532_setPassiveActivationRetries>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <main+0x2ec>)
 80006a8:	701a      	strb	r2, [r3, #0]
					b_discannfc=0;
 80006aa:	4b5c      	ldr	r3, [pc, #368]	; (800081c <main+0x2f0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				}
				 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};
 80006b0:	bf00      	nop
 80006b2:	2102      	movs	r1, #2
 80006b4:	4855      	ldr	r0, [pc, #340]	; (800080c <main+0x2e0>)
 80006b6:	f005 ff5b 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f8      	beq.n	80006b2 <main+0x186>
				SpiActive = 0;
 80006c0:	4b51      	ldr	r3, [pc, #324]	; (8000808 <main+0x2dc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]


		/*	while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
				SPI_FLASH_CONFIG();*/

bcd_addr_start = 8192;
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <main+0x2f4>)
 80006c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006cc:	601a      	str	r2, [r3, #0]
bcd_cnt_addr_start = 0;
 80006ce:	4b55      	ldr	r3, [pc, #340]	; (8000824 <main+0x2f8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
//bcd_max_cnt_addr = 64;

nfc_addr_start = 12288;
 80006d4:	4b54      	ldr	r3, [pc, #336]	; (8000828 <main+0x2fc>)
 80006d6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006da:	601a      	str	r2, [r3, #0]
nfc_cnt_addr_start = 4096;
 80006dc:	4b53      	ldr	r3, [pc, #332]	; (800082c <main+0x300>)
 80006de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e2:	601a      	str	r2, [r3, #0]
//nfc_max_cnt_addr = 160;

cnt_addr_2Flash = 4;
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <main+0x304>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	701a      	strb	r2, [r3, #0]
cnt_4cnt = 1;
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <main+0x308>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
cnt_flash = 16;
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x30c>)
 80006f2:	2210      	movs	r2, #16
 80006f4:	801a      	strh	r2, [r3, #0]

val_max_cnt = 255;
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <main+0x310>)
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	701a      	strb	r2, [r3, #0]
val_start_cnt = 0;
 80006fc:	4b50      	ldr	r3, [pc, #320]	; (8000840 <main+0x314>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]

erase_addr = 0;
 8000702:	4b50      	ldr	r3, [pc, #320]	; (8000844 <main+0x318>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
cnt_flash_t = 255;
 8000708:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <main+0x31c>)
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	701a      	strb	r2, [r3, #0]
			memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
			spiFlash_Read(nfc_addr_start, cnt_addr_2Flash, rd_test_buff);
			nfc_flash_addr = flash_conv2_addr(rd_test_buff);
*/

				while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 800070e:	bf00      	nop
 8000710:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <main+0x2dc>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <main+0x1fc>
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	483b      	ldr	r0, [pc, #236]	; (800080c <main+0x2e0>)
 800071e:	f005 ff27 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f3      	bne.n	8000710 <main+0x1e4>
				SPI_FLASH_CONFIG();
 8000728:	f004 ffde 	bl	80056e8 <SPI_FLASH_CONFIG>
				spiFlash_write(erase_addr, cnt_addr_2Flash, wr_test_buff);
				do {
					stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
				} while (stat_reg1 & 0x01 );
*/
				memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	2100      	movs	r1, #0
 8000730:	4846      	ldr	r0, [pc, #280]	; (800084c <main+0x320>)
 8000732:	f006 fcd3 	bl	80070dc <memset>
				spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <main+0x2f8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a43      	ldr	r2, [pc, #268]	; (8000848 <main+0x31c>)
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	b291      	uxth	r1, r2
 8000740:	4a42      	ldr	r2, [pc, #264]	; (800084c <main+0x320>)
 8000742:	4618      	mov	r0, r3
 8000744:	f005 f828 	bl	8005798 <spiFlash_Read>
				for(int k = 0; k < 256; k++){
 8000748:	2300      	movs	r3, #0
 800074a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800074c:	e015      	b.n	800077a <main+0x24e>
					if(rd_test_buff[k] == 0xFF){
 800074e:	4a3f      	ldr	r2, [pc, #252]	; (800084c <main+0x320>)
 8000750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2bff      	cmp	r3, #255	; 0xff
 8000758:	d10c      	bne.n	8000774 <main+0x248>
						if(k == 0){
 800075a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800075c:	2b00      	cmp	r3, #0
 800075e:	d109      	bne.n	8000774 <main+0x248>
							Set_Cnt_to_Flash(bcd_cnt_addr_start, cnt_4cnt, &val_start_cnt);
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <main+0x2f8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <main+0x308>)
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	b291      	uxth	r1, r2
 800076a:	4a35      	ldr	r2, [pc, #212]	; (8000840 <main+0x314>)
 800076c:	4618      	mov	r0, r3
 800076e:	f004 fd81 	bl	8005274 <Set_Cnt_to_Flash>

						break;
 8000772:	e005      	b.n	8000780 <main+0x254>
				for(int k = 0; k < 256; k++){
 8000774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000776:	3301      	adds	r3, #1
 8000778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800077a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800077c:	2bff      	cmp	r3, #255	; 0xff
 800077e:	dde6      	ble.n	800074e <main+0x222>
						}
					}
				}

				memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	2100      	movs	r1, #0
 8000784:	4831      	ldr	r0, [pc, #196]	; (800084c <main+0x320>)
 8000786:	f006 fca9 	bl	80070dc <memset>
				spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <main+0x300>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <main+0x31c>)
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	b291      	uxth	r1, r2
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <main+0x320>)
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fffe 	bl	8005798 <spiFlash_Read>
				for(int k = 0; k < 256; k++){
 800079c:	2300      	movs	r3, #0
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
 80007a0:	e059      	b.n	8000856 <main+0x32a>
					if(rd_test_buff[k] == 0xFF){
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <main+0x320>)
 80007a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d150      	bne.n	8000850 <main+0x324>
						if(k == 0){
 80007ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14d      	bne.n	8000850 <main+0x324>
							Set_Cnt_to_Flash(nfc_cnt_addr_start, cnt_4cnt, &val_start_cnt);
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <main+0x300>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <main+0x308>)
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	b291      	uxth	r1, r2
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <main+0x314>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 fd57 	bl	8005274 <Set_Cnt_to_Flash>

						break;
 80007c6:	e049      	b.n	800085c <main+0x330>
 80007c8:	200004e4 	.word	0x200004e4
 80007cc:	40021000 	.word	0x40021000
 80007d0:	200004f4 	.word	0x200004f4
 80007d4:	10624dd3 	.word	0x10624dd3
 80007d8:	200005ff 	.word	0x200005ff
 80007dc:	20000318 	.word	0x20000318
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	20000739 	.word	0x20000739
 80007e8:	20000738 	.word	0x20000738
 80007ec:	2000070d 	.word	0x2000070d
 80007f0:	20000848 	.word	0x20000848
 80007f4:	200000e8 	.word	0x200000e8
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	20000134 	.word	0x20000134
 8000800:	20000040 	.word	0x20000040
 8000804:	20000028 	.word	0x20000028
 8000808:	20000d26 	.word	0x20000d26
 800080c:	40003800 	.word	0x40003800
 8000810:	2000070e 	.word	0x2000070e
 8000814:	2000070f 	.word	0x2000070f
 8000818:	20000710 	.word	0x20000710
 800081c:	20000711 	.word	0x20000711
 8000820:	20000928 	.word	0x20000928
 8000824:	2000092c 	.word	0x2000092c
 8000828:	20000930 	.word	0x20000930
 800082c:	20000934 	.word	0x20000934
 8000830:	20000938 	.word	0x20000938
 8000834:	20000939 	.word	0x20000939
 8000838:	20000d0e 	.word	0x20000d0e
 800083c:	2000093b 	.word	0x2000093b
 8000840:	2000093c 	.word	0x2000093c
 8000844:	20000918 	.word	0x20000918
 8000848:	2000091c 	.word	0x2000091c
 800084c:	200009d4 	.word	0x200009d4
				for(int k = 0; k < 256; k++){
 8000850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000852:	3301      	adds	r3, #1
 8000854:	66bb      	str	r3, [r7, #104]	; 0x68
 8000856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	dda2      	ble.n	80007a2 <main+0x276>
					}
				}



				SpiActive = 0;
 800085c:	4b82      	ldr	r3, [pc, #520]	; (8000a68 <main+0x53c>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000862:	bf00      	nop
 8000864:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <main+0x53c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <main+0x350>
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	487e      	ldr	r0, [pc, #504]	; (8000a6c <main+0x540>)
 8000872:	f005 fe7d 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1f3      	bne.n	8000864 <main+0x338>
				PN532_SPIInit();
 800087c:	f004 fe26 	bl	80054cc <PN532_SPIInit>

				 b_getversion=ENABLE;
 8000880:	4b7b      	ldr	r3, [pc, #492]	; (8000a70 <main+0x544>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
				 cntbyteversion=0;
 8000886:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <main+0x548>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

				 SCAN_SendCMD(cmd_Version,STR_CMD_LENGTH);//Запрос версии  ПО сканера штрих-кодов
 800088c:	210c      	movs	r1, #12
 800088e:	487a      	ldr	r0, [pc, #488]	; (8000a78 <main+0x54c>)
 8000890:	f006 f9f8 	bl	8006c84 <SCAN_SendCMD>

				uint32_t tick1 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
				uint32_t tick2 = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	667b      	str	r3, [r7, #100]	; 0x64

					tick1=GetTickCount();
 800089c:	f002 f9b0 	bl	8002c00 <GetTickCount>
 80008a0:	61b8      	str	r0, [r7, #24]
					tick2=tick1;
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	667b      	str	r3, [r7, #100]	; 0x64
				while(b_getversion || (tick2 - tick1 > 1000)){
 80008a6:	e002      	b.n	80008ae <main+0x382>
						// b_getversion=ENABLE;
						tick2=GetTickCount();
 80008a8:	f002 f9aa 	bl	8002c00 <GetTickCount>
 80008ac:	6678      	str	r0, [r7, #100]	; 0x64
				while(b_getversion || (tick2 - tick1 > 1000)){
 80008ae:	4b70      	ldr	r3, [pc, #448]	; (8000a70 <main+0x544>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f8      	bne.n	80008a8 <main+0x37c>
 80008b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c0:	d8f2      	bhi.n	80008a8 <main+0x37c>
					}

					if(!b_getversion){//Получена версия сканера штрих-кодов
 80008c2:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <main+0x544>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d106      	bne.n	80008d8 <main+0x3ac>
						statusDevice=statusDevice|ST_DEV_BAR_NOERR;//установка флага успешного теста сканера штрих-кодов
 80008ca:	4b6c      	ldr	r3, [pc, #432]	; (8000a7c <main+0x550>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <main+0x550>)
 80008d6:	701a      	strb	r2, [r3, #0]
					}



switch(statusDevice){
 80008d8:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <main+0x550>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b11      	cmp	r3, #17
 80008de:	f200 8156 	bhi.w	8000b8e <main+0x662>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <main+0x3bc>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000975 	.word	0x08000975
 80008f0:	08000b8f 	.word	0x08000b8f
 80008f4:	08000b8f 	.word	0x08000b8f
 80008f8:	08000b8f 	.word	0x08000b8f
 80008fc:	08000b8f 	.word	0x08000b8f
 8000900:	08000b8f 	.word	0x08000b8f
 8000904:	08000b8f 	.word	0x08000b8f
 8000908:	08000b8f 	.word	0x08000b8f
 800090c:	08000b8f 	.word	0x08000b8f
 8000910:	08000b8f 	.word	0x08000b8f
 8000914:	08000b8f 	.word	0x08000b8f
 8000918:	08000b8f 	.word	0x08000b8f
 800091c:	08000b8f 	.word	0x08000b8f
 8000920:	08000b8f 	.word	0x08000b8f
 8000924:	08000b8f 	.word	0x08000b8f
 8000928:	08000a0f 	.word	0x08000a0f
 800092c:	08000ac1 	.word	0x08000ac1
	case ST_DEV_ALL_ERR://Оба устройства не ответили

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000930:	4853      	ldr	r0, [pc, #332]	; (8000a80 <main+0x554>)
 8000932:	f7ff fc0b 	bl	800014c <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	4619      	mov	r1, r3
 800093a:	4852      	ldr	r0, [pc, #328]	; (8000a84 <main+0x558>)
 800093c:	f006 f922 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000940:	4851      	ldr	r0, [pc, #324]	; (8000a88 <main+0x55c>)
 8000942:	f7ff fc03 	bl	800014c <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	4619      	mov	r1, r3
 800094a:	484f      	ldr	r0, [pc, #316]	; (8000a88 <main+0x55c>)
 800094c:	f006 f91a 	bl	8006b84 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 8000950:	211c      	movs	r1, #28
 8000952:	484e      	ldr	r0, [pc, #312]	; (8000a8c <main+0x560>)
 8000954:	f006 f916 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000958:	484b      	ldr	r0, [pc, #300]	; (8000a88 <main+0x55c>)
 800095a:	f7ff fbf7 	bl	800014c <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	4619      	mov	r1, r3
 8000962:	4849      	ldr	r0, [pc, #292]	; (8000a88 <main+0x55c>)
 8000964:	f006 f90e 	bl	8006b84 <Usart2_SendData>

		LCD_RunStringDevInfo ( s_lcd_bar_err,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000968:	22c8      	movs	r2, #200	; 0xc8
 800096a:	4948      	ldr	r1, [pc, #288]	; (8000a8c <main+0x560>)
 800096c:	4845      	ldr	r0, [pc, #276]	; (8000a84 <main+0x558>)
 800096e:	f003 f821 	bl	80039b4 <LCD_RunStringDevInfo>

	break;
 8000972:	e10c      	b.n	8000b8e <main+0x662>

	case ST_DEV_NFC_NOERR://Ответил только NFC

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000974:	4842      	ldr	r0, [pc, #264]	; (8000a80 <main+0x554>)
 8000976:	f7ff fbe9 	bl	800014c <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	4619      	mov	r1, r3
 800097e:	4841      	ldr	r0, [pc, #260]	; (8000a84 <main+0x558>)
 8000980:	f006 f900 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000984:	4840      	ldr	r0, [pc, #256]	; (8000a88 <main+0x55c>)
 8000986:	f7ff fbe1 	bl	800014c <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	4619      	mov	r1, r3
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <main+0x55c>)
 8000990:	f006 f8f8 	bl	8006b84 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000994:	483e      	ldr	r0, [pc, #248]	; (8000a90 <main+0x564>)
 8000996:	f7ff fbd9 	bl	800014c <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	4619      	mov	r1, r3
 800099e:	483c      	ldr	r0, [pc, #240]	; (8000a90 <main+0x564>)
 80009a0:	f006 f8f0 	bl	8006b84 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 80009a4:	2102      	movs	r1, #2
 80009a6:	483b      	ldr	r0, [pc, #236]	; (8000a94 <main+0x568>)
 80009a8:	f006 f8ec 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009ac:	2102      	movs	r1, #2
 80009ae:	483a      	ldr	r0, [pc, #232]	; (8000a98 <main+0x56c>)
 80009b0:	f006 f8e8 	bl	8006b84 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 80009b4:	4839      	ldr	r0, [pc, #228]	; (8000a9c <main+0x570>)
 80009b6:	f7ff fbc9 	bl	800014c <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4619      	mov	r1, r3
 80009be:	4837      	ldr	r0, [pc, #220]	; (8000a9c <main+0x570>)
 80009c0:	f006 f8e0 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 80009c4:	2103      	movs	r1, #3
 80009c6:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <main+0x574>)
 80009c8:	f006 f8dc 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 80009cc:	2300      	movs	r3, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <main+0x578>)
 80009d2:	f006 f8d7 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 80009d6:	2103      	movs	r1, #3
 80009d8:	4833      	ldr	r0, [pc, #204]	; (8000aa8 <main+0x57c>)
 80009da:	f006 f8d3 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009de:	2102      	movs	r1, #2
 80009e0:	482d      	ldr	r0, [pc, #180]	; (8000a98 <main+0x56c>)
 80009e2:	f006 f8cf 	bl	8006b84 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 80009e6:	210a      	movs	r1, #10
 80009e8:	4830      	ldr	r0, [pc, #192]	; (8000aac <main+0x580>)
 80009ea:	f006 f8cb 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 80009ee:	2102      	movs	r1, #2
 80009f0:	482f      	ldr	r0, [pc, #188]	; (8000ab0 <main+0x584>)
 80009f2:	f006 f8c7 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009f6:	2102      	movs	r1, #2
 80009f8:	4827      	ldr	r0, [pc, #156]	; (8000a98 <main+0x56c>)
 80009fa:	f006 f8c3 	bl	8006b84 <Usart2_SendData>


		LCD_PN532_CreateRunInfoString();
 80009fe:	f7ff fc85 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_lcd_bar_err,s_pn_info,RUN_STR_DELAY_TST);
 8000a02:	22c8      	movs	r2, #200	; 0xc8
 8000a04:	492b      	ldr	r1, [pc, #172]	; (8000ab4 <main+0x588>)
 8000a06:	481f      	ldr	r0, [pc, #124]	; (8000a84 <main+0x558>)
 8000a08:	f002 ffd4 	bl	80039b4 <LCD_RunStringDevInfo>

	break;
 8000a0c:	e0bf      	b.n	8000b8e <main+0x662>

	case ST_DEV_BAR_NOERR://Ответил только сканер штрих-кодов

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <main+0x554>)
 8000a10:	f7ff fb9c 	bl	800014c <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4819      	ldr	r0, [pc, #100]	; (8000a80 <main+0x554>)
 8000a1a:	f006 f8b3 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000a1e:	4826      	ldr	r0, [pc, #152]	; (8000ab8 <main+0x58c>)
 8000a20:	f7ff fb94 	bl	800014c <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <main+0x58c>)
 8000a2a:	f006 f8ab 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a2e:	4816      	ldr	r0, [pc, #88]	; (8000a88 <main+0x55c>)
 8000a30:	f7ff fb8c 	bl	800014c <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <main+0x55c>)
 8000a3a:	f006 f8a3 	bl	8006b84 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 8000a3e:	211c      	movs	r1, #28
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <main+0x560>)
 8000a42:	f006 f89f 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a46:	4810      	ldr	r0, [pc, #64]	; (8000a88 <main+0x55c>)
 8000a48:	f7ff fb80 	bl	800014c <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <main+0x55c>)
 8000a52:	f006 f897 	bl	8006b84 <Usart2_SendData>

		LCD_BAR_CreateRunInfoString();
 8000a56:	f7ff fc93 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000a5a:	22c8      	movs	r2, #200	; 0xc8
 8000a5c:	490b      	ldr	r1, [pc, #44]	; (8000a8c <main+0x560>)
 8000a5e:	4817      	ldr	r0, [pc, #92]	; (8000abc <main+0x590>)
 8000a60:	f002 ffa8 	bl	80039b4 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

	break;
 8000a64:	e093      	b.n	8000b8e <main+0x662>
 8000a66:	bf00      	nop
 8000a68:	20000d26 	.word	0x20000d26
 8000a6c:	40003800 	.word	0x40003800
 8000a70:	20000600 	.word	0x20000600
 8000a74:	20000d84 	.word	0x20000d84
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000848 	.word	0x20000848
 8000a80:	2000014c 	.word	0x2000014c
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	20000168 	.word	0x20000168
 8000a8c:	20000070 	.word	0x20000070
 8000a90:	200001ec 	.word	0x200001ec
 8000a94:	200001dc 	.word	0x200001dc
 8000a98:	200001d8 	.word	0x200001d8
 8000a9c:	200001fc 	.word	0x200001fc
 8000aa0:	200001e0 	.word	0x200001e0
 8000aa4:	200001d4 	.word	0x200001d4
 8000aa8:	200001e4 	.word	0x200001e4
 8000aac:	2000020c 	.word	0x2000020c
 8000ab0:	200001e8 	.word	0x200001e8
 8000ab4:	20000748 	.word	0x20000748
 8000ab8:	20000d88 	.word	0x20000d88
 8000abc:	200007c8 	.word	0x200007c8

	case ST_DEV_ALL_NOERR://Оба устройства ответили

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000ac0:	48b1      	ldr	r0, [pc, #708]	; (8000d88 <main+0x85c>)
 8000ac2:	f7ff fb43 	bl	800014c <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	48af      	ldr	r0, [pc, #700]	; (8000d88 <main+0x85c>)
 8000acc:	f006 f85a 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000ad0:	48ae      	ldr	r0, [pc, #696]	; (8000d8c <main+0x860>)
 8000ad2:	f7ff fb3b 	bl	800014c <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	48ac      	ldr	r0, [pc, #688]	; (8000d8c <main+0x860>)
 8000adc:	f006 f852 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000ae0:	48ab      	ldr	r0, [pc, #684]	; (8000d90 <main+0x864>)
 8000ae2:	f7ff fb33 	bl	800014c <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	48a9      	ldr	r0, [pc, #676]	; (8000d90 <main+0x864>)
 8000aec:	f006 f84a 	bl	8006b84 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000af0:	48a8      	ldr	r0, [pc, #672]	; (8000d94 <main+0x868>)
 8000af2:	f7ff fb2b 	bl	800014c <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4619      	mov	r1, r3
 8000afa:	48a6      	ldr	r0, [pc, #664]	; (8000d94 <main+0x868>)
 8000afc:	f006 f842 	bl	8006b84 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 8000b00:	2102      	movs	r1, #2
 8000b02:	48a5      	ldr	r0, [pc, #660]	; (8000d98 <main+0x86c>)
 8000b04:	f006 f83e 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b08:	2102      	movs	r1, #2
 8000b0a:	48a4      	ldr	r0, [pc, #656]	; (8000d9c <main+0x870>)
 8000b0c:	f006 f83a 	bl	8006b84 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 8000b10:	48a3      	ldr	r0, [pc, #652]	; (8000da0 <main+0x874>)
 8000b12:	f7ff fb1b 	bl	800014c <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	48a1      	ldr	r0, [pc, #644]	; (8000da0 <main+0x874>)
 8000b1c:	f006 f832 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 8000b20:	2103      	movs	r1, #3
 8000b22:	48a0      	ldr	r0, [pc, #640]	; (8000da4 <main+0x878>)
 8000b24:	f006 f82e 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	489e      	ldr	r0, [pc, #632]	; (8000da8 <main+0x87c>)
 8000b2e:	f006 f829 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 8000b32:	2103      	movs	r1, #3
 8000b34:	489d      	ldr	r0, [pc, #628]	; (8000dac <main+0x880>)
 8000b36:	f006 f825 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	4897      	ldr	r0, [pc, #604]	; (8000d9c <main+0x870>)
 8000b3e:	f006 f821 	bl	8006b84 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 8000b42:	210a      	movs	r1, #10
 8000b44:	489a      	ldr	r0, [pc, #616]	; (8000db0 <main+0x884>)
 8000b46:	f006 f81d 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	4899      	ldr	r0, [pc, #612]	; (8000db4 <main+0x888>)
 8000b4e:	f006 f819 	bl	8006b84 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b52:	2102      	movs	r1, #2
 8000b54:	4891      	ldr	r0, [pc, #580]	; (8000d9c <main+0x870>)
 8000b56:	f006 f815 	bl	8006b84 <Usart2_SendData>


		LCD_BAR_CreateRunInfoString();
 8000b5a:	f7ff fc11 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_PN532_CreateRunInfoString();
 8000b5e:	f7ff fbd5 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_pn_info,RUN_STR_DELAY_TST);
 8000b62:	22c8      	movs	r2, #200	; 0xc8
 8000b64:	4994      	ldr	r1, [pc, #592]	; (8000db8 <main+0x88c>)
 8000b66:	4895      	ldr	r0, [pc, #596]	; (8000dbc <main+0x890>)
 8000b68:	f002 ff24 	bl	80039b4 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

		LCD_SetCursor ( LCD_CURSOR_1STR );
 8000b6c:	2080      	movs	r0, #128	; 0x80
 8000b6e:	f002 fe53 	bl	8003818 <LCD_SetCursor>
		LCD_WriteString (s_lcd_scanner_rdy );
 8000b72:	4893      	ldr	r0, [pc, #588]	; (8000dc0 <main+0x894>)
 8000b74:	f002 ff00 	bl	8003978 <LCD_WriteString>

		LCD_SetCursor ( LCD_CURSOR_2STR );
 8000b78:	20c0      	movs	r0, #192	; 0xc0
 8000b7a:	f002 fe4d 	bl	8003818 <LCD_SetCursor>
		LCD_WriteString (s_lcd_ready );
 8000b7e:	4891      	ldr	r0, [pc, #580]	; (8000dc4 <main+0x898>)
 8000b80:	f002 fefa 	bl	8003978 <LCD_WriteString>

		Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000b84:	2121      	movs	r1, #33	; 0x21
 8000b86:	4890      	ldr	r0, [pc, #576]	; (8000dc8 <main+0x89c>)
 8000b88:	f005 fffc 	bl	8006b84 <Usart2_SendData>
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));


	break;
 8000b8c:	bf00      	nop
}

//Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));


Timer1Init();
 8000b8e:	f001 febf 	bl	8002910 <Timer1Init>
EnableTimer1Interrupt();
 8000b92:	f001 fef7 	bl	8002984 <EnableTimer1Interrupt>

		char cSymbol;

		char date_Symbol;

		if(timer1flag==1){
 8000b96:	4b8d      	ldr	r3, [pc, #564]	; (8000dcc <main+0x8a0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d110      	bne.n	8000bc0 <main+0x694>
			ValueInterrupToStr();
 8000b9e:	f002 f8eb 	bl	8002d78 <ValueInterrupToStr>
			Usart2_SendData(b_bounce_value,sizeof(b_bounce_value));
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	488a      	ldr	r0, [pc, #552]	; (8000dd0 <main+0x8a4>)
 8000ba6:	f005 ffed 	bl	8006b84 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8000baa:	4879      	ldr	r0, [pc, #484]	; (8000d90 <main+0x864>)
 8000bac:	f7ff face 	bl	800014c <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4876      	ldr	r0, [pc, #472]	; (8000d90 <main+0x864>)
 8000bb6:	f005 ffe5 	bl	8006b84 <Usart2_SendData>
			timer1flag=0;
 8000bba:	4b84      	ldr	r3, [pc, #528]	; (8000dcc <main+0x8a0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
		}



		//если не режим записи метки NFC
		if(u8_wrnfcstatus==0){
 8000bc0:	4b84      	ldr	r3, [pc, #528]	; (8000dd4 <main+0x8a8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f041 84d8 	bne.w	800257a <main+0x204e>

				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000bca:	e01b      	b.n	8000c04 <main+0x6d8>
					g_sBuffer [ g_iBufferLength++ ] = cSymbol;
 8000bcc:	4b82      	ldr	r3, [pc, #520]	; (8000dd8 <main+0x8ac>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	4981      	ldr	r1, [pc, #516]	; (8000dd8 <main+0x8ac>)
 8000bd4:	600a      	str	r2, [r1, #0]
 8000bd6:	78f9      	ldrb	r1, [r7, #3]
 8000bd8:	4a80      	ldr	r2, [pc, #512]	; (8000ddc <main+0x8b0>)
 8000bda:	54d1      	strb	r1, [r2, r3]
					g_sBuffer [ g_iBufferLength ] = '\0';
 8000bdc:	4b7e      	ldr	r3, [pc, #504]	; (8000dd8 <main+0x8ac>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a7e      	ldr	r2, [pc, #504]	; (8000ddc <main+0x8b0>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	54d1      	strb	r1, [r2, r3]
					if ( g_iBufferLength >= BUFFER_LEN ) {
 8000be6:	4b7c      	ldr	r3, [pc, #496]	; (8000dd8 <main+0x8ac>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	dd0a      	ble.n	8000c04 <main+0x6d8>
						memmove ( g_sBuffer, g_sBuffer + 1, BUFFER_LEN );
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <main+0x8b4>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4879      	ldr	r0, [pc, #484]	; (8000ddc <main+0x8b0>)
 8000bf6:	f006 fa57 	bl	80070a8 <memmove>
						g_iBufferLength--;
 8000bfa:	4b77      	ldr	r3, [pc, #476]	; (8000dd8 <main+0x8ac>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	4a75      	ldr	r2, [pc, #468]	; (8000dd8 <main+0x8ac>)
 8000c02:	6013      	str	r3, [r2, #0]
				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000c04:	1cfb      	adds	r3, r7, #3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f006 f8bc 	bl	8006d84 <FIFO_GetNextData>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d0dc      	beq.n	8000bcc <main+0x6a0>
					}
				}
		//	прием данных с телефона
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000c12:	e01b      	b.n	8000c4c <main+0x720>

				//	Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
				//	Usart2_SendData(s_newline,strlen(s_newline));


					date_sBuffer [ date_iBufferLength++ ] = date_Symbol;
 8000c14:	4b73      	ldr	r3, [pc, #460]	; (8000de4 <main+0x8b8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	4972      	ldr	r1, [pc, #456]	; (8000de4 <main+0x8b8>)
 8000c1c:	600a      	str	r2, [r1, #0]
 8000c1e:	78b9      	ldrb	r1, [r7, #2]
 8000c20:	4a71      	ldr	r2, [pc, #452]	; (8000de8 <main+0x8bc>)
 8000c22:	54d1      	strb	r1, [r2, r3]
					date_sBuffer [ date_iBufferLength] = '\0';
 8000c24:	4b6f      	ldr	r3, [pc, #444]	; (8000de4 <main+0x8b8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a6f      	ldr	r2, [pc, #444]	; (8000de8 <main+0x8bc>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	54d1      	strb	r1, [r2, r3]
					if( date_iBufferLength >= BUFFER_LEN){
 8000c2e:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <main+0x8b8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b7f      	cmp	r3, #127	; 0x7f
 8000c34:	dd0a      	ble.n	8000c4c <main+0x720>
						memmove(date_sBuffer, date_sBuffer + 1, BUFFER_LEN);
 8000c36:	4b6d      	ldr	r3, [pc, #436]	; (8000dec <main+0x8c0>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	486a      	ldr	r0, [pc, #424]	; (8000de8 <main+0x8bc>)
 8000c3e:	f006 fa33 	bl	80070a8 <memmove>
						date_iBufferLength--;
 8000c42:	4b68      	ldr	r3, [pc, #416]	; (8000de4 <main+0x8b8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	4a66      	ldr	r2, [pc, #408]	; (8000de4 <main+0x8b8>)
 8000c4a:	6013      	str	r3, [r2, #0]
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000c4c:	1cbb      	adds	r3, r7, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f006 f8c6 	bl	8006de0 <Date_GetNextDate>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d0dc      	beq.n	8000c14 <main+0x6e8>
		*/



		//	декодирование данных с телефона
				if(strstr(date_sBuffer, "\r\n") != NULL){
 8000c5a:	4965      	ldr	r1, [pc, #404]	; (8000df0 <main+0x8c4>)
 8000c5c:	4862      	ldr	r0, [pc, #392]	; (8000de8 <main+0x8bc>)
 8000c5e:	f006 fa9c 	bl	800719a <strstr>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 8778 	beq.w	8001b5a <main+0x162e>

				//	Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
				//	Usart2_SendData(s_newline,strlen(s_newline));

					char *pstr = date_sBuffer;
 8000c6a:	4b5f      	ldr	r3, [pc, #380]	; (8000de8 <main+0x8bc>)
 8000c6c:	663b      	str	r3, [r7, #96]	; 0x60

					if( date_sBuffer[0] == CMD /*&& date_sBuffer[4] == CMD*//**pstr == CMD*/ /*&& *pstr+4 == CMD*/){
 8000c6e:	4b5e      	ldr	r3, [pc, #376]	; (8000de8 <main+0x8bc>)
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	4b60      	ldr	r3, [pc, #384]	; (8000df4 <main+0x8c8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f040 8728 	bne.w	8001acc <main+0x15a0>
						pstr++;
 8000c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c7e:	3301      	adds	r3, #1
 8000c80:	663b      	str	r3, [r7, #96]	; 0x60

						for(int i = 0; i < SIZE_CMD ; i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c86:	e00b      	b.n	8000ca0 <main+0x774>
							test_buffer[i] = *pstr++;
 8000c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	663a      	str	r2, [r7, #96]	; 0x60
 8000c8e:	7819      	ldrb	r1, [r3, #0]
 8000c90:	4a59      	ldr	r2, [pc, #356]	; (8000df8 <main+0x8cc>)
 8000c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c94:	4413      	add	r3, r2
 8000c96:	460a      	mov	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
						for(int i = 0; i < SIZE_CMD ; i++){
 8000c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	ddf0      	ble.n	8000c88 <main+0x75c>

						}
						NUM_CMD = atoi(test_buffer);
 8000ca6:	4854      	ldr	r0, [pc, #336]	; (8000df8 <main+0x8cc>)
 8000ca8:	f006 f9b2 	bl	8007010 <atoi>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a53      	ldr	r2, [pc, #332]	; (8000dfc <main+0x8d0>)
 8000cb0:	6013      	str	r3, [r2, #0]
						if(NUM_CMD == 0){
 8000cb2:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <main+0x8d0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10f      	bne.n	8000cda <main+0x7ae>
							Usart2_SendData(android_wron_cmd_form,strlen(android_wron_cmd_form));
 8000cba:	4851      	ldr	r0, [pc, #324]	; (8000e00 <main+0x8d4>)
 8000cbc:	f7ff fa46 	bl	800014c <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	484e      	ldr	r0, [pc, #312]	; (8000e00 <main+0x8d4>)
 8000cc6:	f005 ff5d 	bl	8006b84 <Usart2_SendData>
							Usart2_SendData(s_newline,strlen(s_newline));
 8000cca:	4831      	ldr	r0, [pc, #196]	; (8000d90 <main+0x864>)
 8000ccc:	f7ff fa3e 	bl	800014c <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482e      	ldr	r0, [pc, #184]	; (8000d90 <main+0x864>)
 8000cd6:	f005 ff55 	bl	8006b84 <Usart2_SendData>
						}
						uint8_t date_result;
						switch (NUM_CMD) {
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <main+0x8d0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2bcc      	cmp	r3, #204	; 0xcc
 8000ce0:	f300 86e3 	bgt.w	8001aaa <main+0x157e>
 8000ce4:	2bc9      	cmp	r3, #201	; 0xc9
 8000ce6:	da0c      	bge.n	8000d02 <main+0x7d6>
 8000ce8:	2b67      	cmp	r3, #103	; 0x67
 8000cea:	f000 80fd 	beq.w	8000ee8 <main+0x9bc>
 8000cee:	2b67      	cmp	r3, #103	; 0x67
 8000cf0:	f300 86db 	bgt.w	8001aaa <main+0x157e>
 8000cf4:	2b65      	cmp	r3, #101	; 0x65
 8000cf6:	d013      	beq.n	8000d20 <main+0x7f4>
 8000cf8:	2b66      	cmp	r3, #102	; 0x66
 8000cfa:	f000 80bc 	beq.w	8000e76 <main+0x94a>
 8000cfe:	f000 bed4 	b.w	8001aaa <main+0x157e>
 8000d02:	3bc9      	subs	r3, #201	; 0xc9
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	f200 86d0 	bhi.w	8001aaa <main+0x157e>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <main+0x7e4>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000f9f 	.word	0x08000f9f
 8000d14:	080011cf 	.word	0x080011cf
 8000d18:	080013ed 	.word	0x080013ed
 8000d1c:	0800173b 	.word	0x0800173b
							case 101:

								date_result = convert_time_from_android(&rtc_time, date_sBuffer);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4931      	ldr	r1, [pc, #196]	; (8000de8 <main+0x8bc>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f004 f80b 	bl	8004d40 <convert_time_from_android>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
								switch(date_result){
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	f200 8705 	bhi.w	8001b40 <main+0x1614>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <main+0x810>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d4d 	.word	0x08000d4d
 8000d40:	08000e0d 	.word	0x08000e0d
 8000d44:	08000e2f 	.word	0x08000e2f
 8000d48:	08000e51 	.word	0x08000e51
								case 0:
									tim = cal_to_timer(&rtc_time);
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 ff78 	bl	8004c44 <cal_to_timer>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <main+0x8d8>)
 8000d58:	6013      	str	r3, [r2, #0]
									RTC_SET_COUNTER(tim);
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <main+0x8d8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fe3c 	bl	80049dc <RTC_SET_COUNTER>
									Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 8000d64:	4828      	ldr	r0, [pc, #160]	; (8000e08 <main+0x8dc>)
 8000d66:	f7ff f9f1 	bl	800014c <strlen>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4826      	ldr	r0, [pc, #152]	; (8000e08 <main+0x8dc>)
 8000d70:	f005 ff08 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <main+0x864>)
 8000d76:	f7ff f9e9 	bl	800014c <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <main+0x864>)
 8000d80:	f005 ff00 	bl	8006b84 <Usart2_SendData>
									break;
 8000d84:	e075      	b.n	8000e72 <main+0x946>
 8000d86:	bf00      	nop
 8000d88:	2000014c 	.word	0x2000014c
 8000d8c:	20000d88 	.word	0x20000d88
 8000d90:	20000168 	.word	0x20000168
 8000d94:	200001ec 	.word	0x200001ec
 8000d98:	200001dc 	.word	0x200001dc
 8000d9c:	200001d8 	.word	0x200001d8
 8000da0:	200001fc 	.word	0x200001fc
 8000da4:	200001e0 	.word	0x200001e0
 8000da8:	200001d4 	.word	0x200001d4
 8000dac:	200001e4 	.word	0x200001e4
 8000db0:	2000020c 	.word	0x2000020c
 8000db4:	200001e8 	.word	0x200001e8
 8000db8:	20000748 	.word	0x20000748
 8000dbc:	200007c8 	.word	0x200007c8
 8000dc0:	20000034 	.word	0x20000034
 8000dc4:	20000064 	.word	0x20000064
 8000dc8:	20000110 	.word	0x20000110
 8000dcc:	2000073e 	.word	0x2000073e
 8000dd0:	20000258 	.word	0x20000258
 8000dd4:	2000073f 	.word	0x2000073f
 8000dd8:	2000058c 	.word	0x2000058c
 8000ddc:	20000508 	.word	0x20000508
 8000de0:	20000509 	.word	0x20000509
 8000de4:	20000688 	.word	0x20000688
 8000de8:	20000604 	.word	0x20000604
 8000dec:	20000605 	.word	0x20000605
 8000df0:	080083a4 	.word	0x080083a4
 8000df4:	2000043d 	.word	0x2000043d
 8000df8:	2000068c 	.word	0x2000068c
 8000dfc:	20000910 	.word	0x20000910
 8000e00:	2000033c 	.word	0x2000033c
 8000e04:	2000090c 	.word	0x2000090c
 8000e08:	20000058 	.word	0x20000058
								case 1:
									Usart2_SendData(incorrect_rtc_year,strlen(incorrect_rtc_year));
 8000e0c:	4884      	ldr	r0, [pc, #528]	; (8001020 <main+0xaf4>)
 8000e0e:	f7ff f99d 	bl	800014c <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4619      	mov	r1, r3
 8000e16:	4882      	ldr	r0, [pc, #520]	; (8001020 <main+0xaf4>)
 8000e18:	f005 feb4 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e1c:	4881      	ldr	r0, [pc, #516]	; (8001024 <main+0xaf8>)
 8000e1e:	f7ff f995 	bl	800014c <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4619      	mov	r1, r3
 8000e26:	487f      	ldr	r0, [pc, #508]	; (8001024 <main+0xaf8>)
 8000e28:	f005 feac 	bl	8006b84 <Usart2_SendData>
									break;
 8000e2c:	e021      	b.n	8000e72 <main+0x946>
								case 2:
									Usart2_SendData(incorrect_rtc_mon,strlen(incorrect_rtc_mon));
 8000e2e:	487e      	ldr	r0, [pc, #504]	; (8001028 <main+0xafc>)
 8000e30:	f7ff f98c 	bl	800014c <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4619      	mov	r1, r3
 8000e38:	487b      	ldr	r0, [pc, #492]	; (8001028 <main+0xafc>)
 8000e3a:	f005 fea3 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e3e:	4879      	ldr	r0, [pc, #484]	; (8001024 <main+0xaf8>)
 8000e40:	f7ff f984 	bl	800014c <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4619      	mov	r1, r3
 8000e48:	4876      	ldr	r0, [pc, #472]	; (8001024 <main+0xaf8>)
 8000e4a:	f005 fe9b 	bl	8006b84 <Usart2_SendData>
									break;
 8000e4e:	e010      	b.n	8000e72 <main+0x946>
								case 3:
									Usart2_SendData(incorrect_rtc_day,strlen(incorrect_rtc_day));
 8000e50:	4876      	ldr	r0, [pc, #472]	; (800102c <main+0xb00>)
 8000e52:	f7ff f97b 	bl	800014c <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4874      	ldr	r0, [pc, #464]	; (800102c <main+0xb00>)
 8000e5c:	f005 fe92 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e60:	4870      	ldr	r0, [pc, #448]	; (8001024 <main+0xaf8>)
 8000e62:	f7ff f973 	bl	800014c <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	486e      	ldr	r0, [pc, #440]	; (8001024 <main+0xaf8>)
 8000e6c:	f005 fe8a 	bl	8006b84 <Usart2_SendData>
									break;
 8000e70:	bf00      	nop

								}
								break;
 8000e72:	f000 be65 	b.w	8001b40 <main+0x1614>
							case 102:

								timer = RTC_GET_COUNTER();
 8000e76:	f003 fda1 	bl	80049bc <RTC_GET_COUNTER>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a6c      	ldr	r2, [pc, #432]	; (8001030 <main+0xb04>)
 8000e7e:	6013      	str	r3, [r2, #0]
								timer_to_cal(timer, &rtc_time);
 8000e80:	4b6b      	ldr	r3, [pc, #428]	; (8001030 <main+0xb04>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	1d3a      	adds	r2, r7, #4
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fdf1 	bl	8004a70 <timer_to_cal>
								tim = cal_to_timer(&rtc_time);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fed7 	bl	8004c44 <cal_to_timer>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a66      	ldr	r2, [pc, #408]	; (8001034 <main+0xb08>)
 8000e9a:	6013      	str	r3, [r2, #0]


								//*xxx*yyyy-MM-dd HH:mm:ss

								convert_time_2android(&rtc_time);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f88c 	bl	8004fbc <convert_time_2android>

								Usart2_SendData(s_cal_data,strlen(s_cal_data));
 8000ea4:	4864      	ldr	r0, [pc, #400]	; (8001038 <main+0xb0c>)
 8000ea6:	f7ff f951 	bl	800014c <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4862      	ldr	r0, [pc, #392]	; (8001038 <main+0xb0c>)
 8000eb0:	f005 fe68 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000eb4:	485b      	ldr	r0, [pc, #364]	; (8001024 <main+0xaf8>)
 8000eb6:	f7ff f949 	bl	800014c <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4859      	ldr	r0, [pc, #356]	; (8001024 <main+0xaf8>)
 8000ec0:	f005 fe60 	bl	8006b84 <Usart2_SendData>


								Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 8000ec4:	485d      	ldr	r0, [pc, #372]	; (800103c <main+0xb10>)
 8000ec6:	f7ff f941 	bl	800014c <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	485b      	ldr	r0, [pc, #364]	; (800103c <main+0xb10>)
 8000ed0:	f005 fe58 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000ed4:	4853      	ldr	r0, [pc, #332]	; (8001024 <main+0xaf8>)
 8000ed6:	f7ff f939 	bl	800014c <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4851      	ldr	r0, [pc, #324]	; (8001024 <main+0xaf8>)
 8000ee0:	f005 fe50 	bl	8006b84 <Usart2_SendData>
								break;
 8000ee4:	f000 be2d 	b.w	8001b42 <main+0x1616>
							case 103://отправка настроек устройства

								Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000ee8:	4855      	ldr	r0, [pc, #340]	; (8001040 <main+0xb14>)
 8000eea:	f7ff f92f 	bl	800014c <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4853      	ldr	r0, [pc, #332]	; (8001040 <main+0xb14>)
 8000ef4:	f005 fe46 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000ef8:	4852      	ldr	r0, [pc, #328]	; (8001044 <main+0xb18>)
 8000efa:	f7ff f927 	bl	800014c <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4619      	mov	r1, r3
 8000f02:	4850      	ldr	r0, [pc, #320]	; (8001044 <main+0xb18>)
 8000f04:	f005 fe3e 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000f08:	4846      	ldr	r0, [pc, #280]	; (8001024 <main+0xaf8>)
 8000f0a:	f7ff f91f 	bl	800014c <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4844      	ldr	r0, [pc, #272]	; (8001024 <main+0xaf8>)
 8000f14:	f005 fe36 	bl	8006b84 <Usart2_SendData>

							    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000f18:	484b      	ldr	r0, [pc, #300]	; (8001048 <main+0xb1c>)
 8000f1a:	f7ff f917 	bl	800014c <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4849      	ldr	r0, [pc, #292]	; (8001048 <main+0xb1c>)
 8000f24:	f005 fe2e 	bl	8006b84 <Usart2_SendData>
							    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4848      	ldr	r0, [pc, #288]	; (800104c <main+0xb20>)
 8000f2c:	f005 fe2a 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000f30:	2102      	movs	r1, #2
 8000f32:	4847      	ldr	r0, [pc, #284]	; (8001050 <main+0xb24>)
 8000f34:	f005 fe26 	bl	8006b84 <Usart2_SendData>

								Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 8000f38:	4846      	ldr	r0, [pc, #280]	; (8001054 <main+0xb28>)
 8000f3a:	f7ff f907 	bl	800014c <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4619      	mov	r1, r3
 8000f42:	4844      	ldr	r0, [pc, #272]	; (8001054 <main+0xb28>)
 8000f44:	f005 fe1e 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4843      	ldr	r0, [pc, #268]	; (8001058 <main+0xb2c>)
 8000f4c:	f005 fe1a 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_point,strlen(s_pn_point));
 8000f50:	2300      	movs	r3, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4841      	ldr	r0, [pc, #260]	; (800105c <main+0xb30>)
 8000f56:	f005 fe15 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	4840      	ldr	r0, [pc, #256]	; (8001060 <main+0xb34>)
 8000f5e:	f005 fe11 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000f62:	2102      	movs	r1, #2
 8000f64:	483a      	ldr	r0, [pc, #232]	; (8001050 <main+0xb24>)
 8000f66:	f005 fe0d 	bl	8006b84 <Usart2_SendData>

								Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 8000f6a:	210a      	movs	r1, #10
 8000f6c:	483d      	ldr	r0, [pc, #244]	; (8001064 <main+0xb38>)
 8000f6e:	f005 fe09 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 8000f72:	2102      	movs	r1, #2
 8000f74:	483c      	ldr	r0, [pc, #240]	; (8001068 <main+0xb3c>)
 8000f76:	f005 fe05 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4834      	ldr	r0, [pc, #208]	; (8001050 <main+0xb24>)
 8000f7e:	f005 fe01 	bl	8006b84 <Usart2_SendData>

								Usart2_SendData(s_at_manufacter,sizeof(s_at_manufacter));
 8000f82:	2120      	movs	r1, #32
 8000f84:	4839      	ldr	r0, [pc, #228]	; (800106c <main+0xb40>)
 8000f86:	f005 fdfd 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_at_model,sizeof(s_at_model));
 8000f8a:	211f      	movs	r1, #31
 8000f8c:	4838      	ldr	r0, [pc, #224]	; (8001070 <main+0xb44>)
 8000f8e:	f005 fdf9 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000f92:	2102      	movs	r1, #2
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <main+0xb24>)
 8000f96:	f005 fdf5 	bl	8006b84 <Usart2_SendData>
								break;
 8000f9a:	f000 bdd2 	b.w	8001b42 <main+0x1616>
							case 201://чтение последнего штрих-кода
								Usart2_SendData(android_last_barcode,strlen(android_last_barcode));
 8000f9e:	4835      	ldr	r0, [pc, #212]	; (8001074 <main+0xb48>)
 8000fa0:	f7ff f8d4 	bl	800014c <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4832      	ldr	r0, [pc, #200]	; (8001074 <main+0xb48>)
 8000faa:	f005 fdeb 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <main+0xaf8>)
 8000fb0:	f7ff f8cc 	bl	800014c <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481a      	ldr	r0, [pc, #104]	; (8001024 <main+0xaf8>)
 8000fba:	f005 fde3 	bl	8006b84 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000fbe:	bf00      	nop
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <main+0xb4c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <main+0xaac>
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	482b      	ldr	r0, [pc, #172]	; (800107c <main+0xb50>)
 8000fce:	f005 facf 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f3      	bne.n	8000fc0 <main+0xa94>
								SPI_FLASH_CONFIG();
 8000fd8:	f004 fb86 	bl	80056e8 <SPI_FLASH_CONFIG>



								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4827      	ldr	r0, [pc, #156]	; (8001080 <main+0xb54>)
 8000fe2:	f006 f87b 	bl	80070dc <memset>
								spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <main+0xb58>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a27      	ldr	r2, [pc, #156]	; (8001088 <main+0xb5c>)
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	b291      	uxth	r1, r2
 8000ff0:	4a23      	ldr	r2, [pc, #140]	; (8001080 <main+0xb54>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fbd0 	bl	8005798 <spiFlash_Read>
								for(int j = 0; j < 253; j++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ffc:	e04d      	b.n	800109a <main+0xb6e>
									if(rd_test_buff[j] == 0xFF){
 8000ffe:	4a20      	ldr	r2, [pc, #128]	; (8001080 <main+0xb54>)
 8001000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d144      	bne.n	8001094 <main+0xb68>
										val_cnt = rd_test_buff[j-1];
 800100a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800100c:	3b01      	subs	r3, #1
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <main+0xb54>)
 8001010:	5cd2      	ldrb	r2, [r2, r3]
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <main+0xb60>)
 8001014:	701a      	strb	r2, [r3, #0]
										bcd_cnt_addr = j;
 8001016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <main+0xb64>)
 800101a:	6013      	str	r3, [r2, #0]
										break;
 800101c:	e040      	b.n	80010a0 <main+0xb74>
 800101e:	bf00      	nop
 8001020:	20000350 	.word	0x20000350
 8001024:	20000168 	.word	0x20000168
 8001028:	20000360 	.word	0x20000360
 800102c:	20000370 	.word	0x20000370
 8001030:	20000318 	.word	0x20000318
 8001034:	2000090c 	.word	0x2000090c
 8001038:	20000260 	.word	0x20000260
 800103c:	20000058 	.word	0x20000058
 8001040:	2000014c 	.word	0x2000014c
 8001044:	20000d88 	.word	0x20000d88
 8001048:	200001ec 	.word	0x200001ec
 800104c:	200001dc 	.word	0x200001dc
 8001050:	200001d8 	.word	0x200001d8
 8001054:	200001fc 	.word	0x200001fc
 8001058:	200001e0 	.word	0x200001e0
 800105c:	200001d4 	.word	0x200001d4
 8001060:	200001e4 	.word	0x200001e4
 8001064:	2000020c 	.word	0x2000020c
 8001068:	200001e8 	.word	0x200001e8
 800106c:	20000218 	.word	0x20000218
 8001070:	20000238 	.word	0x20000238
 8001074:	20000380 	.word	0x20000380
 8001078:	20000d26 	.word	0x20000d26
 800107c:	40003800 	.word	0x40003800
 8001080:	200009d4 	.word	0x200009d4
 8001084:	2000092c 	.word	0x2000092c
 8001088:	2000091c 	.word	0x2000091c
 800108c:	2000093a 	.word	0x2000093a
 8001090:	2000094c 	.word	0x2000094c
								for(int j = 0; j < 253; j++){
 8001094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001096:	3301      	adds	r3, #1
 8001098:	65bb      	str	r3, [r7, #88]	; 0x58
 800109a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800109c:	2bfc      	cmp	r3, #252	; 0xfc
 800109e:	ddae      	ble.n	8000ffe <main+0xad2>
									}
								}
								if(val_cnt == 0){
 80010a0:	4b6b      	ldr	r3, [pc, #428]	; (8001250 <main+0xd24>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10f      	bne.n	80010c8 <main+0xb9c>
									Usart2_SendData(android_empty_bar_mem,strlen(android_empty_bar_mem));
 80010a8:	486a      	ldr	r0, [pc, #424]	; (8001254 <main+0xd28>)
 80010aa:	f7ff f84f 	bl	800014c <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4619      	mov	r1, r3
 80010b2:	4868      	ldr	r0, [pc, #416]	; (8001254 <main+0xd28>)
 80010b4:	f005 fd66 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 80010b8:	4867      	ldr	r0, [pc, #412]	; (8001258 <main+0xd2c>)
 80010ba:	f7ff f847 	bl	800014c <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	4865      	ldr	r0, [pc, #404]	; (8001258 <main+0xd2c>)
 80010c4:	f005 fd5e 	bl	8006b84 <Usart2_SendData>

									}

								if(val_cnt > 0 && val_cnt < 253){
 80010c8:	4b61      	ldr	r3, [pc, #388]	; (8001250 <main+0xd24>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d077      	beq.n	80011c0 <main+0xc94>
 80010d0:	4b5f      	ldr	r3, [pc, #380]	; (8001250 <main+0xd24>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2bfc      	cmp	r3, #252	; 0xfc
 80010d6:	d873      	bhi.n	80011c0 <main+0xc94>
									bar_flash_addr = 8192 + (val_cnt - 1) * 16;
 80010d8:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <main+0xd24>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b5d      	ldr	r3, [pc, #372]	; (800125c <main+0xd30>)
 80010e6:	601a      	str	r2, [r3, #0]
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 80010e8:	22ff      	movs	r2, #255	; 0xff
 80010ea:	2100      	movs	r1, #0
 80010ec:	485c      	ldr	r0, [pc, #368]	; (8001260 <main+0xd34>)
 80010ee:	f005 fff5 	bl	80070dc <memset>
									memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 80010f2:	2210      	movs	r2, #16
 80010f4:	2100      	movs	r1, #0
 80010f6:	485b      	ldr	r0, [pc, #364]	; (8001264 <main+0xd38>)
 80010f8:	f005 fff0 	bl	80070dc <memset>
									spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 80010fc:	4b57      	ldr	r3, [pc, #348]	; (800125c <main+0xd30>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a59      	ldr	r2, [pc, #356]	; (8001268 <main+0xd3c>)
 8001102:	8811      	ldrh	r1, [r2, #0]
 8001104:	4a57      	ldr	r2, [pc, #348]	; (8001264 <main+0xd38>)
 8001106:	4618      	mov	r0, r3
 8001108:	f004 fb46 	bl	8005798 <spiFlash_Read>
									flash_timer = flash_conv2_timer(rd_flash_buff);
 800110c:	4855      	ldr	r0, [pc, #340]	; (8001264 <main+0xd38>)
 800110e:	f002 f92b 	bl	8003368 <flash_conv2_timer>
 8001112:	4603      	mov	r3, r0
 8001114:	4a55      	ldr	r2, [pc, #340]	; (800126c <main+0xd40>)
 8001116:	6013      	str	r3, [r2, #0]
									timer_to_cal(flash_timer, &rtc_time);
 8001118:	4b54      	ldr	r3, [pc, #336]	; (800126c <main+0xd40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1d3a      	adds	r2, r7, #4
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fca5 	bl	8004a70 <timer_to_cal>

									convert_time_2android(&rtc_time);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f003 ff47 	bl	8004fbc <convert_time_2android>

									flash_conv2_bcode(rd_flash_buff);
 800112e:	484d      	ldr	r0, [pc, #308]	; (8001264 <main+0xd38>)
 8001130:	f002 f936 	bl	80033a0 <flash_conv2_bcode>
									memset(f_sBarCode,0,strlen(f_sNfcCode));
 8001134:	484e      	ldr	r0, [pc, #312]	; (8001270 <main+0xd44>)
 8001136:	f7ff f809 	bl	800014c <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	2100      	movs	r1, #0
 8001140:	484c      	ldr	r0, [pc, #304]	; (8001274 <main+0xd48>)
 8001142:	f005 ffcb 	bl	80070dc <memset>
									strlcpy ( f_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 8001146:	221a      	movs	r2, #26
 8001148:	494b      	ldr	r1, [pc, #300]	; (8001278 <main+0xd4c>)
 800114a:	484a      	ldr	r0, [pc, #296]	; (8001274 <main+0xd48>)
 800114c:	f005 ffe5 	bl	800711a <strlcpy>
									strcat(f_sBarCode,fl_bar_buff );
 8001150:	494a      	ldr	r1, [pc, #296]	; (800127c <main+0xd50>)
 8001152:	4848      	ldr	r0, [pc, #288]	; (8001274 <main+0xd48>)
 8001154:	f005 ffca 	bl	80070ec <strcat>
									strncat(s_flash_d_c, s_cal_data, 19);
 8001158:	2213      	movs	r2, #19
 800115a:	4949      	ldr	r1, [pc, #292]	; (8001280 <main+0xd54>)
 800115c:	4849      	ldr	r0, [pc, #292]	; (8001284 <main+0xd58>)
 800115e:	f005 fff1 	bl	8007144 <strncat>
									strcat(s_flash_d_c, s_space);
 8001162:	4949      	ldr	r1, [pc, #292]	; (8001288 <main+0xd5c>)
 8001164:	4847      	ldr	r0, [pc, #284]	; (8001284 <main+0xd58>)
 8001166:	f005 ffc1 	bl	80070ec <strcat>
									strncat(s_flash_d_c, f_sBarCode, strlen(f_sBarCode));
 800116a:	4842      	ldr	r0, [pc, #264]	; (8001274 <main+0xd48>)
 800116c:	f7fe ffee 	bl	800014c <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	493f      	ldr	r1, [pc, #252]	; (8001274 <main+0xd48>)
 8001176:	4843      	ldr	r0, [pc, #268]	; (8001284 <main+0xd58>)
 8001178:	f005 ffe4 	bl	8007144 <strncat>
									strncat(s_flash_d_c, s_newline, strlen(s_newline));
 800117c:	4836      	ldr	r0, [pc, #216]	; (8001258 <main+0xd2c>)
 800117e:	f7fe ffe5 	bl	800014c <strlen>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4934      	ldr	r1, [pc, #208]	; (8001258 <main+0xd2c>)
 8001188:	483e      	ldr	r0, [pc, #248]	; (8001284 <main+0xd58>)
 800118a:	f005 ffdb 	bl	8007144 <strncat>

									Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 800118e:	483d      	ldr	r0, [pc, #244]	; (8001284 <main+0xd58>)
 8001190:	f7fe ffdc 	bl	800014c <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	483a      	ldr	r0, [pc, #232]	; (8001284 <main+0xd58>)
 800119a:	f005 fcf3 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 800119e:	482e      	ldr	r0, [pc, #184]	; (8001258 <main+0xd2c>)
 80011a0:	f7fe ffd4 	bl	800014c <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	482b      	ldr	r0, [pc, #172]	; (8001258 <main+0xd2c>)
 80011aa:	f005 fceb 	bl	8006b84 <Usart2_SendData>

									memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 80011ae:	4835      	ldr	r0, [pc, #212]	; (8001284 <main+0xd58>)
 80011b0:	f7fe ffcc 	bl	800014c <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	2100      	movs	r1, #0
 80011ba:	4832      	ldr	r0, [pc, #200]	; (8001284 <main+0xd58>)
 80011bc:	f005 ff8e 	bl	80070dc <memset>
								}

								SpiActive = 0;
 80011c0:	4b32      	ldr	r3, [pc, #200]	; (800128c <main+0xd60>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 80011c6:	f004 f981 	bl	80054cc <PN532_SPIInit>
								break;
 80011ca:	f000 bcba 	b.w	8001b42 <main+0x1616>
							case 202://чтение последней NFC-метки
								Usart2_SendData(android_last_nfc,strlen(android_last_nfc));
 80011ce:	4830      	ldr	r0, [pc, #192]	; (8001290 <main+0xd64>)
 80011d0:	f7fe ffbc 	bl	800014c <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	482d      	ldr	r0, [pc, #180]	; (8001290 <main+0xd64>)
 80011da:	f005 fcd3 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80011de:	481e      	ldr	r0, [pc, #120]	; (8001258 <main+0xd2c>)
 80011e0:	f7fe ffb4 	bl	800014c <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4619      	mov	r1, r3
 80011e8:	481b      	ldr	r0, [pc, #108]	; (8001258 <main+0xd2c>)
 80011ea:	f005 fccb 	bl	8006b84 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 80011ee:	bf00      	nop
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <main+0xd60>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <main+0xcdc>
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	4825      	ldr	r0, [pc, #148]	; (8001294 <main+0xd68>)
 80011fe:	f005 f9b7 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f3      	bne.n	80011f0 <main+0xcc4>
								SPI_FLASH_CONFIG();
 8001208:	f004 fa6e 	bl	80056e8 <SPI_FLASH_CONFIG>


								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 800120c:	22ff      	movs	r2, #255	; 0xff
 800120e:	2100      	movs	r1, #0
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <main+0xd34>)
 8001212:	f005 ff63 	bl	80070dc <memset>
								spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <main+0xd6c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a20      	ldr	r2, [pc, #128]	; (800129c <main+0xd70>)
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	b291      	uxth	r1, r2
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <main+0xd34>)
 8001222:	4618      	mov	r0, r3
 8001224:	f004 fab8 	bl	8005798 <spiFlash_Read>
								for(int j = 0; j < 253; j++){
 8001228:	2300      	movs	r3, #0
 800122a:	657b      	str	r3, [r7, #84]	; 0x54
 800122c:	e03d      	b.n	80012aa <main+0xd7e>
								if(rd_test_buff[j] == 0xFF){
 800122e:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <main+0xd34>)
 8001230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2bff      	cmp	r3, #255	; 0xff
 8001238:	d134      	bne.n	80012a4 <main+0xd78>
									val_cnt = rd_test_buff[j-1];
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	3b01      	subs	r3, #1
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <main+0xd34>)
 8001240:	5cd2      	ldrb	r2, [r2, r3]
 8001242:	4b03      	ldr	r3, [pc, #12]	; (8001250 <main+0xd24>)
 8001244:	701a      	strb	r2, [r3, #0]
									nfc_cnt_addr = j;
 8001246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001248:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <main+0xd74>)
 800124a:	6013      	str	r3, [r2, #0]
									break;
 800124c:	e030      	b.n	80012b0 <main+0xd84>
 800124e:	bf00      	nop
 8001250:	2000093a 	.word	0x2000093a
 8001254:	200003f8 	.word	0x200003f8
 8001258:	20000168 	.word	0x20000168
 800125c:	20000940 	.word	0x20000940
 8001260:	200009d4 	.word	0x200009d4
 8001264:	20000ad4 	.word	0x20000ad4
 8001268:	20000d0e 	.word	0x20000d0e
 800126c:	20000948 	.word	0x20000948
 8001270:	200005e4 	.word	0x200005e4
 8001274:	200005ac 	.word	0x200005ac
 8001278:	200000d4 	.word	0x200000d4
 800127c:	20000ae4 	.word	0x20000ae4
 8001280:	20000260 	.word	0x20000260
 8001284:	2000088c 	.word	0x2000088c
 8001288:	200001d0 	.word	0x200001d0
 800128c:	20000d26 	.word	0x20000d26
 8001290:	2000039c 	.word	0x2000039c
 8001294:	40003800 	.word	0x40003800
 8001298:	20000934 	.word	0x20000934
 800129c:	2000091c 	.word	0x2000091c
 80012a0:	20000950 	.word	0x20000950
								for(int j = 0; j < 253; j++){
 80012a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a6:	3301      	adds	r3, #1
 80012a8:	657b      	str	r3, [r7, #84]	; 0x54
 80012aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ac:	2bfc      	cmp	r3, #252	; 0xfc
 80012ae:	ddbe      	ble.n	800122e <main+0xd02>
									}
								}
								if(val_cnt == 0){
 80012b0:	4b82      	ldr	r3, [pc, #520]	; (80014bc <main+0xf90>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10f      	bne.n	80012d8 <main+0xdac>
								Usart2_SendData(android_empty_nfc_mem,strlen(android_empty_nfc_mem));
 80012b8:	4881      	ldr	r0, [pc, #516]	; (80014c0 <main+0xf94>)
 80012ba:	f7fe ff47 	bl	800014c <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	4619      	mov	r1, r3
 80012c2:	487f      	ldr	r0, [pc, #508]	; (80014c0 <main+0xf94>)
 80012c4:	f005 fc5e 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80012c8:	487e      	ldr	r0, [pc, #504]	; (80014c4 <main+0xf98>)
 80012ca:	f7fe ff3f 	bl	800014c <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	487c      	ldr	r0, [pc, #496]	; (80014c4 <main+0xf98>)
 80012d4:	f005 fc56 	bl	8006b84 <Usart2_SendData>

								}

								if(val_cnt > 0 && val_cnt < 253){
 80012d8:	4b78      	ldr	r3, [pc, #480]	; (80014bc <main+0xf90>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d07f      	beq.n	80013e0 <main+0xeb4>
 80012e0:	4b76      	ldr	r3, [pc, #472]	; (80014bc <main+0xf90>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2bfc      	cmp	r3, #252	; 0xfc
 80012e6:	d87b      	bhi.n	80013e0 <main+0xeb4>
								nfc_flash_addr = 12288 + (val_cnt - 1) * 16;
 80012e8:	4b74      	ldr	r3, [pc, #464]	; (80014bc <main+0xf90>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f203 23ff 	addw	r3, r3, #767	; 0x2ff
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <main+0xf9c>)
 80012f6:	601a      	str	r2, [r3, #0]
								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	2100      	movs	r1, #0
 80012fc:	4873      	ldr	r0, [pc, #460]	; (80014cc <main+0xfa0>)
 80012fe:	f005 feed 	bl	80070dc <memset>
								memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 8001302:	2210      	movs	r2, #16
 8001304:	2100      	movs	r1, #0
 8001306:	4872      	ldr	r0, [pc, #456]	; (80014d0 <main+0xfa4>)
 8001308:	f005 fee8 	bl	80070dc <memset>
								spiFlash_Read(nfc_flash_addr, cnt_flash, rd_flash_buff);
 800130c:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <main+0xf9c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a70      	ldr	r2, [pc, #448]	; (80014d4 <main+0xfa8>)
 8001312:	8811      	ldrh	r1, [r2, #0]
 8001314:	4a6e      	ldr	r2, [pc, #440]	; (80014d0 <main+0xfa4>)
 8001316:	4618      	mov	r0, r3
 8001318:	f004 fa3e 	bl	8005798 <spiFlash_Read>
								flash_timer = flash_conv2_timer(rd_flash_buff);
 800131c:	486c      	ldr	r0, [pc, #432]	; (80014d0 <main+0xfa4>)
 800131e:	f002 f823 	bl	8003368 <flash_conv2_timer>
 8001322:	4603      	mov	r3, r0
 8001324:	4a6c      	ldr	r2, [pc, #432]	; (80014d8 <main+0xfac>)
 8001326:	6013      	str	r3, [r2, #0]
								timer_to_cal(flash_timer, &rtc_time);
 8001328:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <main+0xfac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	1d3a      	adds	r2, r7, #4
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fb9d 	bl	8004a70 <timer_to_cal>

								convert_time_2android(&rtc_time);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fe3f 	bl	8004fbc <convert_time_2android>


								flash_uid = flash_conv2_uid(rd_flash_buff);
 800133e:	4864      	ldr	r0, [pc, #400]	; (80014d0 <main+0xfa4>)
 8001340:	f002 f8a6 	bl	8003490 <flash_conv2_uid>
 8001344:	4603      	mov	r3, r0
 8001346:	4a65      	ldr	r2, [pc, #404]	; (80014dc <main+0xfb0>)
 8001348:	6013      	str	r3, [r2, #0]
								flash_conv2_nfc(flash_uid);
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <main+0xfb0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f8bc 	bl	80034cc <flash_conv2_nfc>

								memset(f_sNfcCode,0,strlen(f_sNfcCode));
 8001354:	4862      	ldr	r0, [pc, #392]	; (80014e0 <main+0xfb4>)
 8001356:	f7fe fef9 	bl	800014c <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	485f      	ldr	r0, [pc, #380]	; (80014e0 <main+0xfb4>)
 8001362:	f005 febb 	bl	80070dc <memset>
								strlcpy ( f_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 8001366:	221a      	movs	r2, #26
 8001368:	495e      	ldr	r1, [pc, #376]	; (80014e4 <main+0xfb8>)
 800136a:	485d      	ldr	r0, [pc, #372]	; (80014e0 <main+0xfb4>)
 800136c:	f005 fed5 	bl	800711a <strlcpy>
								strcat(f_sNfcCode,nfc_uid_arr );
 8001370:	495d      	ldr	r1, [pc, #372]	; (80014e8 <main+0xfbc>)
 8001372:	485b      	ldr	r0, [pc, #364]	; (80014e0 <main+0xfb4>)
 8001374:	f005 feba 	bl	80070ec <strcat>
								strncat(s_flash_d_c, s_cal_data, 19);
 8001378:	2213      	movs	r2, #19
 800137a:	495c      	ldr	r1, [pc, #368]	; (80014ec <main+0xfc0>)
 800137c:	485c      	ldr	r0, [pc, #368]	; (80014f0 <main+0xfc4>)
 800137e:	f005 fee1 	bl	8007144 <strncat>
								strcat(s_flash_d_c, s_space);
 8001382:	495c      	ldr	r1, [pc, #368]	; (80014f4 <main+0xfc8>)
 8001384:	485a      	ldr	r0, [pc, #360]	; (80014f0 <main+0xfc4>)
 8001386:	f005 feb1 	bl	80070ec <strcat>
								strncat(s_flash_d_c, f_sNfcCode, strlen(f_sNfcCode));
 800138a:	4855      	ldr	r0, [pc, #340]	; (80014e0 <main+0xfb4>)
 800138c:	f7fe fede 	bl	800014c <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4952      	ldr	r1, [pc, #328]	; (80014e0 <main+0xfb4>)
 8001396:	4856      	ldr	r0, [pc, #344]	; (80014f0 <main+0xfc4>)
 8001398:	f005 fed4 	bl	8007144 <strncat>
								strncat(s_flash_d_c, s_newline, strlen(s_newline));
 800139c:	4849      	ldr	r0, [pc, #292]	; (80014c4 <main+0xf98>)
 800139e:	f7fe fed5 	bl	800014c <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4947      	ldr	r1, [pc, #284]	; (80014c4 <main+0xf98>)
 80013a8:	4851      	ldr	r0, [pc, #324]	; (80014f0 <main+0xfc4>)
 80013aa:	f005 fecb 	bl	8007144 <strncat>

								Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 80013ae:	4850      	ldr	r0, [pc, #320]	; (80014f0 <main+0xfc4>)
 80013b0:	f7fe fecc 	bl	800014c <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4619      	mov	r1, r3
 80013b8:	484d      	ldr	r0, [pc, #308]	; (80014f0 <main+0xfc4>)
 80013ba:	f005 fbe3 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80013be:	4841      	ldr	r0, [pc, #260]	; (80014c4 <main+0xf98>)
 80013c0:	f7fe fec4 	bl	800014c <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4619      	mov	r1, r3
 80013c8:	483e      	ldr	r0, [pc, #248]	; (80014c4 <main+0xf98>)
 80013ca:	f005 fbdb 	bl	8006b84 <Usart2_SendData>

								memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 80013ce:	4848      	ldr	r0, [pc, #288]	; (80014f0 <main+0xfc4>)
 80013d0:	f7fe febc 	bl	800014c <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	2100      	movs	r1, #0
 80013da:	4845      	ldr	r0, [pc, #276]	; (80014f0 <main+0xfc4>)
 80013dc:	f005 fe7e 	bl	80070dc <memset>
								}

								SpiActive = 0;
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <main+0xfcc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 80013e6:	f004 f871 	bl	80054cc <PN532_SPIInit>

								break;
 80013ea:	e3aa      	b.n	8001b42 <main+0x1616>
							case 203://чтение последних пяти штрих-кодов
								Usart2_SendData(android_last_5_bcodes,strlen(android_last_5_bcodes));
 80013ec:	4843      	ldr	r0, [pc, #268]	; (80014fc <main+0xfd0>)
 80013ee:	f7fe fead 	bl	800014c <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4841      	ldr	r0, [pc, #260]	; (80014fc <main+0xfd0>)
 80013f8:	f005 fbc4 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80013fc:	4831      	ldr	r0, [pc, #196]	; (80014c4 <main+0xf98>)
 80013fe:	f7fe fea5 	bl	800014c <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	482f      	ldr	r0, [pc, #188]	; (80014c4 <main+0xf98>)
 8001408:	f005 fbbc 	bl	8006b84 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 800140c:	bf00      	nop
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <main+0xfcc>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <main+0xefa>
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	4839      	ldr	r0, [pc, #228]	; (8001500 <main+0xfd4>)
 800141c:	f005 f8a8 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f3      	bne.n	800140e <main+0xee2>
								SPI_FLASH_CONFIG();
 8001426:	f004 f95f 	bl	80056e8 <SPI_FLASH_CONFIG>

								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	2100      	movs	r1, #0
 800142e:	4827      	ldr	r0, [pc, #156]	; (80014cc <main+0xfa0>)
 8001430:	f005 fe54 	bl	80070dc <memset>
								spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <main+0xfd8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a33      	ldr	r2, [pc, #204]	; (8001508 <main+0xfdc>)
 800143a:	7812      	ldrb	r2, [r2, #0]
 800143c:	b291      	uxth	r1, r2
 800143e:	4a23      	ldr	r2, [pc, #140]	; (80014cc <main+0xfa0>)
 8001440:	4618      	mov	r0, r3
 8001442:	f004 f9a9 	bl	8005798 <spiFlash_Read>
								for(int j = 0; j < 253; j++){
 8001446:	2300      	movs	r3, #0
 8001448:	653b      	str	r3, [r7, #80]	; 0x50
 800144a:	e012      	b.n	8001472 <main+0xf46>
								if(rd_test_buff[j] == 0xFF){
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <main+0xfa0>)
 800144e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2bff      	cmp	r3, #255	; 0xff
 8001456:	d109      	bne.n	800146c <main+0xf40>
									val_cnt = rd_test_buff[j-1];
 8001458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145a:	3b01      	subs	r3, #1
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <main+0xfa0>)
 800145e:	5cd2      	ldrb	r2, [r2, r3]
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <main+0xf90>)
 8001462:	701a      	strb	r2, [r3, #0]
									bcd_cnt_addr = j;
 8001464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001466:	4a29      	ldr	r2, [pc, #164]	; (800150c <main+0xfe0>)
 8001468:	6013      	str	r3, [r2, #0]
									break;
 800146a:	e005      	b.n	8001478 <main+0xf4c>
								for(int j = 0; j < 253; j++){
 800146c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800146e:	3301      	adds	r3, #1
 8001470:	653b      	str	r3, [r7, #80]	; 0x50
 8001472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001474:	2bfc      	cmp	r3, #252	; 0xfc
 8001476:	dde9      	ble.n	800144c <main+0xf20>
									}
								}

								if(val_cnt == 0){
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <main+0xf90>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10f      	bne.n	80014a0 <main+0xf74>
									Usart2_SendData(android_empty_bar_mem,strlen(android_empty_bar_mem));
 8001480:	4823      	ldr	r0, [pc, #140]	; (8001510 <main+0xfe4>)
 8001482:	f7fe fe63 	bl	800014c <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	4619      	mov	r1, r3
 800148a:	4821      	ldr	r0, [pc, #132]	; (8001510 <main+0xfe4>)
 800148c:	f005 fb7a 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <main+0xf98>)
 8001492:	f7fe fe5b 	bl	800014c <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	4619      	mov	r1, r3
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <main+0xf98>)
 800149c:	f005 fb72 	bl	8006b84 <Usart2_SendData>

									}
								if(val_cnt > 0 && val_cnt < 5){
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <main+0xf90>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80ae 	beq.w	8001606 <main+0x10da>
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <main+0xf90>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	f200 80a9 	bhi.w	8001606 <main+0x10da>
									for(int x = val_cnt; x > 0; x--){
 80014b4:	4b01      	ldr	r3, [pc, #4]	; (80014bc <main+0xf90>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014ba:	e0a1      	b.n	8001600 <main+0x10d4>
 80014bc:	2000093a 	.word	0x2000093a
 80014c0:	2000041c 	.word	0x2000041c
 80014c4:	20000168 	.word	0x20000168
 80014c8:	20000944 	.word	0x20000944
 80014cc:	200009d4 	.word	0x200009d4
 80014d0:	20000ad4 	.word	0x20000ad4
 80014d4:	20000d0e 	.word	0x20000d0e
 80014d8:	20000948 	.word	0x20000948
 80014dc:	20000958 	.word	0x20000958
 80014e0:	200005e4 	.word	0x200005e4
 80014e4:	200000e0 	.word	0x200000e0
 80014e8:	200009a8 	.word	0x200009a8
 80014ec:	20000260 	.word	0x20000260
 80014f0:	2000088c 	.word	0x2000088c
 80014f4:	200001d0 	.word	0x200001d0
 80014f8:	20000d26 	.word	0x20000d26
 80014fc:	200003d8 	.word	0x200003d8
 8001500:	40003800 	.word	0x40003800
 8001504:	2000092c 	.word	0x2000092c
 8001508:	2000091c 	.word	0x2000091c
 800150c:	2000094c 	.word	0x2000094c
 8001510:	200003f8 	.word	0x200003f8
										bar_flash_addr = 8192 + (x - 1) * 16;
 8001514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001516:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	461a      	mov	r2, r3
 800151e:	4ba7      	ldr	r3, [pc, #668]	; (80017bc <main+0x1290>)
 8001520:	601a      	str	r2, [r3, #0]
										memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001522:	22ff      	movs	r2, #255	; 0xff
 8001524:	2100      	movs	r1, #0
 8001526:	48a6      	ldr	r0, [pc, #664]	; (80017c0 <main+0x1294>)
 8001528:	f005 fdd8 	bl	80070dc <memset>
										memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 800152c:	2210      	movs	r2, #16
 800152e:	2100      	movs	r1, #0
 8001530:	48a4      	ldr	r0, [pc, #656]	; (80017c4 <main+0x1298>)
 8001532:	f005 fdd3 	bl	80070dc <memset>
										spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 8001536:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <main+0x1290>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4aa3      	ldr	r2, [pc, #652]	; (80017c8 <main+0x129c>)
 800153c:	8811      	ldrh	r1, [r2, #0]
 800153e:	4aa1      	ldr	r2, [pc, #644]	; (80017c4 <main+0x1298>)
 8001540:	4618      	mov	r0, r3
 8001542:	f004 f929 	bl	8005798 <spiFlash_Read>
										flash_timer = flash_conv2_timer(rd_flash_buff);
 8001546:	489f      	ldr	r0, [pc, #636]	; (80017c4 <main+0x1298>)
 8001548:	f001 ff0e 	bl	8003368 <flash_conv2_timer>
 800154c:	4603      	mov	r3, r0
 800154e:	4a9f      	ldr	r2, [pc, #636]	; (80017cc <main+0x12a0>)
 8001550:	6013      	str	r3, [r2, #0]
										timer_to_cal(flash_timer, &rtc_time);
 8001552:	4b9e      	ldr	r3, [pc, #632]	; (80017cc <main+0x12a0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	1d3a      	adds	r2, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fa88 	bl	8004a70 <timer_to_cal>

										convert_time_2android(&rtc_time);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fd2a 	bl	8004fbc <convert_time_2android>

										flash_conv2_bcode(rd_flash_buff);
 8001568:	4896      	ldr	r0, [pc, #600]	; (80017c4 <main+0x1298>)
 800156a:	f001 ff19 	bl	80033a0 <flash_conv2_bcode>
										memset(f_sBarCode,0,strlen(f_sNfcCode));
 800156e:	4898      	ldr	r0, [pc, #608]	; (80017d0 <main+0x12a4>)
 8001570:	f7fe fdec 	bl	800014c <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	4896      	ldr	r0, [pc, #600]	; (80017d4 <main+0x12a8>)
 800157c:	f005 fdae 	bl	80070dc <memset>
										strlcpy ( f_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 8001580:	221a      	movs	r2, #26
 8001582:	4995      	ldr	r1, [pc, #596]	; (80017d8 <main+0x12ac>)
 8001584:	4893      	ldr	r0, [pc, #588]	; (80017d4 <main+0x12a8>)
 8001586:	f005 fdc8 	bl	800711a <strlcpy>
										strcat(f_sBarCode,fl_bar_buff );
 800158a:	4994      	ldr	r1, [pc, #592]	; (80017dc <main+0x12b0>)
 800158c:	4891      	ldr	r0, [pc, #580]	; (80017d4 <main+0x12a8>)
 800158e:	f005 fdad 	bl	80070ec <strcat>
										strncat(s_flash_d_c, s_cal_data, 19);
 8001592:	2213      	movs	r2, #19
 8001594:	4992      	ldr	r1, [pc, #584]	; (80017e0 <main+0x12b4>)
 8001596:	4893      	ldr	r0, [pc, #588]	; (80017e4 <main+0x12b8>)
 8001598:	f005 fdd4 	bl	8007144 <strncat>
										strcat(s_flash_d_c, s_space);
 800159c:	4992      	ldr	r1, [pc, #584]	; (80017e8 <main+0x12bc>)
 800159e:	4891      	ldr	r0, [pc, #580]	; (80017e4 <main+0x12b8>)
 80015a0:	f005 fda4 	bl	80070ec <strcat>
										strncat(s_flash_d_c, f_sBarCode, strlen(f_sBarCode));
 80015a4:	488b      	ldr	r0, [pc, #556]	; (80017d4 <main+0x12a8>)
 80015a6:	f7fe fdd1 	bl	800014c <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	4989      	ldr	r1, [pc, #548]	; (80017d4 <main+0x12a8>)
 80015b0:	488c      	ldr	r0, [pc, #560]	; (80017e4 <main+0x12b8>)
 80015b2:	f005 fdc7 	bl	8007144 <strncat>
										strncat(s_flash_d_c, s_newline, strlen(s_newline));
 80015b6:	488d      	ldr	r0, [pc, #564]	; (80017ec <main+0x12c0>)
 80015b8:	f7fe fdc8 	bl	800014c <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	498a      	ldr	r1, [pc, #552]	; (80017ec <main+0x12c0>)
 80015c2:	4888      	ldr	r0, [pc, #544]	; (80017e4 <main+0x12b8>)
 80015c4:	f005 fdbe 	bl	8007144 <strncat>

										Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 80015c8:	4886      	ldr	r0, [pc, #536]	; (80017e4 <main+0x12b8>)
 80015ca:	f7fe fdbf 	bl	800014c <strlen>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4884      	ldr	r0, [pc, #528]	; (80017e4 <main+0x12b8>)
 80015d4:	f005 fad6 	bl	8006b84 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 80015d8:	4884      	ldr	r0, [pc, #528]	; (80017ec <main+0x12c0>)
 80015da:	f7fe fdb7 	bl	800014c <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4882      	ldr	r0, [pc, #520]	; (80017ec <main+0x12c0>)
 80015e4:	f005 face 	bl	8006b84 <Usart2_SendData>

										memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 80015e8:	487e      	ldr	r0, [pc, #504]	; (80017e4 <main+0x12b8>)
 80015ea:	f7fe fdaf 	bl	800014c <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	2100      	movs	r1, #0
 80015f4:	487b      	ldr	r0, [pc, #492]	; (80017e4 <main+0x12b8>)
 80015f6:	f005 fd71 	bl	80070dc <memset>
									for(int x = val_cnt; x > 0; x--){
 80015fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fc:	3b01      	subs	r3, #1
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001602:	2b00      	cmp	r3, #0
 8001604:	dc86      	bgt.n	8001514 <main+0xfe8>
									}

								}

								if(val_cnt > 5 && val_cnt < 253){
 8001606:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <main+0x12c4>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b05      	cmp	r3, #5
 800160c:	f240 808f 	bls.w	800172e <main+0x1202>
 8001610:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <main+0x12c4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2bfc      	cmp	r3, #252	; 0xfc
 8001616:	f200 808a 	bhi.w	800172e <main+0x1202>
									last_bcode = val_cnt - 5;
 800161a:	4b75      	ldr	r3, [pc, #468]	; (80017f0 <main+0x12c4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3b05      	subs	r3, #5
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b74      	ldr	r3, [pc, #464]	; (80017f4 <main+0x12c8>)
 8001624:	701a      	strb	r2, [r3, #0]
									for(uint8_t k = val_cnt; k > last_bcode; k--){
 8001626:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <main+0x12c4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800162e:	e078      	b.n	8001722 <main+0x11f6>
										bar_flash_addr = 8192 + (k - 1) * 16;
 8001630:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001634:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	461a      	mov	r2, r3
 800163c:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <main+0x1290>)
 800163e:	601a      	str	r2, [r3, #0]
										memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	2100      	movs	r1, #0
 8001644:	485e      	ldr	r0, [pc, #376]	; (80017c0 <main+0x1294>)
 8001646:	f005 fd49 	bl	80070dc <memset>
										memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 800164a:	2210      	movs	r2, #16
 800164c:	2100      	movs	r1, #0
 800164e:	485d      	ldr	r0, [pc, #372]	; (80017c4 <main+0x1298>)
 8001650:	f005 fd44 	bl	80070dc <memset>
										spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <main+0x1290>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a5b      	ldr	r2, [pc, #364]	; (80017c8 <main+0x129c>)
 800165a:	8811      	ldrh	r1, [r2, #0]
 800165c:	4a59      	ldr	r2, [pc, #356]	; (80017c4 <main+0x1298>)
 800165e:	4618      	mov	r0, r3
 8001660:	f004 f89a 	bl	8005798 <spiFlash_Read>
										flash_timer = flash_conv2_timer(rd_flash_buff);
 8001664:	4857      	ldr	r0, [pc, #348]	; (80017c4 <main+0x1298>)
 8001666:	f001 fe7f 	bl	8003368 <flash_conv2_timer>
 800166a:	4603      	mov	r3, r0
 800166c:	4a57      	ldr	r2, [pc, #348]	; (80017cc <main+0x12a0>)
 800166e:	6013      	str	r3, [r2, #0]
										timer_to_cal(flash_timer, &rtc_time);
 8001670:	4b56      	ldr	r3, [pc, #344]	; (80017cc <main+0x12a0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1d3a      	adds	r2, r7, #4
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f003 f9f9 	bl	8004a70 <timer_to_cal>

										convert_time_2android(&rtc_time);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fc9b 	bl	8004fbc <convert_time_2android>

										flash_conv2_bcode(rd_flash_buff);
 8001686:	484f      	ldr	r0, [pc, #316]	; (80017c4 <main+0x1298>)
 8001688:	f001 fe8a 	bl	80033a0 <flash_conv2_bcode>
										memset(f_sBarCode,0,strlen(f_sBarCode));
 800168c:	4851      	ldr	r0, [pc, #324]	; (80017d4 <main+0x12a8>)
 800168e:	f7fe fd5d 	bl	800014c <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	484e      	ldr	r0, [pc, #312]	; (80017d4 <main+0x12a8>)
 800169a:	f005 fd1f 	bl	80070dc <memset>
										strlcpy ( f_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 800169e:	221a      	movs	r2, #26
 80016a0:	494d      	ldr	r1, [pc, #308]	; (80017d8 <main+0x12ac>)
 80016a2:	484c      	ldr	r0, [pc, #304]	; (80017d4 <main+0x12a8>)
 80016a4:	f005 fd39 	bl	800711a <strlcpy>
										strcat(f_sBarCode,fl_bar_buff );
 80016a8:	494c      	ldr	r1, [pc, #304]	; (80017dc <main+0x12b0>)
 80016aa:	484a      	ldr	r0, [pc, #296]	; (80017d4 <main+0x12a8>)
 80016ac:	f005 fd1e 	bl	80070ec <strcat>
										strncat(s_flash_d_c, s_cal_data, 19);
 80016b0:	2213      	movs	r2, #19
 80016b2:	494b      	ldr	r1, [pc, #300]	; (80017e0 <main+0x12b4>)
 80016b4:	484b      	ldr	r0, [pc, #300]	; (80017e4 <main+0x12b8>)
 80016b6:	f005 fd45 	bl	8007144 <strncat>
										strcat(s_flash_d_c, s_space);
 80016ba:	494b      	ldr	r1, [pc, #300]	; (80017e8 <main+0x12bc>)
 80016bc:	4849      	ldr	r0, [pc, #292]	; (80017e4 <main+0x12b8>)
 80016be:	f005 fd15 	bl	80070ec <strcat>
										strncat(s_flash_d_c, f_sBarCode, strlen(f_sBarCode));
 80016c2:	4844      	ldr	r0, [pc, #272]	; (80017d4 <main+0x12a8>)
 80016c4:	f7fe fd42 	bl	800014c <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4941      	ldr	r1, [pc, #260]	; (80017d4 <main+0x12a8>)
 80016ce:	4845      	ldr	r0, [pc, #276]	; (80017e4 <main+0x12b8>)
 80016d0:	f005 fd38 	bl	8007144 <strncat>
										strncat(s_flash_d_c, s_newline, strlen(s_newline));
 80016d4:	4845      	ldr	r0, [pc, #276]	; (80017ec <main+0x12c0>)
 80016d6:	f7fe fd39 	bl	800014c <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4943      	ldr	r1, [pc, #268]	; (80017ec <main+0x12c0>)
 80016e0:	4840      	ldr	r0, [pc, #256]	; (80017e4 <main+0x12b8>)
 80016e2:	f005 fd2f 	bl	8007144 <strncat>

										Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 80016e6:	483f      	ldr	r0, [pc, #252]	; (80017e4 <main+0x12b8>)
 80016e8:	f7fe fd30 	bl	800014c <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4619      	mov	r1, r3
 80016f0:	483c      	ldr	r0, [pc, #240]	; (80017e4 <main+0x12b8>)
 80016f2:	f005 fa47 	bl	8006b84 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 80016f6:	483d      	ldr	r0, [pc, #244]	; (80017ec <main+0x12c0>)
 80016f8:	f7fe fd28 	bl	800014c <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	483a      	ldr	r0, [pc, #232]	; (80017ec <main+0x12c0>)
 8001702:	f005 fa3f 	bl	8006b84 <Usart2_SendData>

										memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 8001706:	4837      	ldr	r0, [pc, #220]	; (80017e4 <main+0x12b8>)
 8001708:	f7fe fd20 	bl	800014c <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	2100      	movs	r1, #0
 8001712:	4834      	ldr	r0, [pc, #208]	; (80017e4 <main+0x12b8>)
 8001714:	f005 fce2 	bl	80070dc <memset>
									for(uint8_t k = val_cnt; k > last_bcode; k--){
 8001718:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800171c:	3b01      	subs	r3, #1
 800171e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001722:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <main+0x12c8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800172a:	429a      	cmp	r2, r3
 800172c:	d880      	bhi.n	8001630 <main+0x1104>
									}
								}
								SpiActive = 0;
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <main+0x12cc>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 8001734:	f003 feca 	bl	80054cc <PN532_SPIInit>


								break;
 8001738:	e203      	b.n	8001b42 <main+0x1616>
							case 204://чтение последних пяти NFC-меток
								Usart2_SendData(android_last_5_nfc,strlen(android_last_5_nfc));
 800173a:	4830      	ldr	r0, [pc, #192]	; (80017fc <main+0x12d0>)
 800173c:	f7fe fd06 	bl	800014c <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	482d      	ldr	r0, [pc, #180]	; (80017fc <main+0x12d0>)
 8001746:	f005 fa1d 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800174a:	4828      	ldr	r0, [pc, #160]	; (80017ec <main+0x12c0>)
 800174c:	f7fe fcfe 	bl	800014c <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	4619      	mov	r1, r3
 8001754:	4825      	ldr	r0, [pc, #148]	; (80017ec <main+0x12c0>)
 8001756:	f005 fa15 	bl	8006b84 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 800175a:	bf00      	nop
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <main+0x12cc>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <main+0x1248>
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	4825      	ldr	r0, [pc, #148]	; (8001800 <main+0x12d4>)
 800176a:	f004 ff01 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f3      	bne.n	800175c <main+0x1230>
								SPI_FLASH_CONFIG();
 8001774:	f003 ffb8 	bl	80056e8 <SPI_FLASH_CONFIG>

								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001778:	22ff      	movs	r2, #255	; 0xff
 800177a:	2100      	movs	r1, #0
 800177c:	4810      	ldr	r0, [pc, #64]	; (80017c0 <main+0x1294>)
 800177e:	f005 fcad 	bl	80070dc <memset>
								spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <main+0x12d8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a20      	ldr	r2, [pc, #128]	; (8001808 <main+0x12dc>)
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	b291      	uxth	r1, r2
 800178c:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <main+0x1294>)
 800178e:	4618      	mov	r0, r3
 8001790:	f004 f802 	bl	8005798 <spiFlash_Read>
								for(int j = 0; j < 253; j++){
 8001794:	2300      	movs	r3, #0
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
 8001798:	e03d      	b.n	8001816 <main+0x12ea>
									if(rd_test_buff[j] == 0xFF){
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <main+0x1294>)
 800179c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d134      	bne.n	8001810 <main+0x12e4>
										val_cnt = rd_test_buff[j-1];
 80017a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <main+0x1294>)
 80017ac:	5cd2      	ldrb	r2, [r2, r3]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <main+0x12c4>)
 80017b0:	701a      	strb	r2, [r3, #0]
										nfc_cnt_addr = j;
 80017b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b4:	4a15      	ldr	r2, [pc, #84]	; (800180c <main+0x12e0>)
 80017b6:	6013      	str	r3, [r2, #0]
										break;
 80017b8:	e030      	b.n	800181c <main+0x12f0>
 80017ba:	bf00      	nop
 80017bc:	20000940 	.word	0x20000940
 80017c0:	200009d4 	.word	0x200009d4
 80017c4:	20000ad4 	.word	0x20000ad4
 80017c8:	20000d0e 	.word	0x20000d0e
 80017cc:	20000948 	.word	0x20000948
 80017d0:	200005e4 	.word	0x200005e4
 80017d4:	200005ac 	.word	0x200005ac
 80017d8:	200000d4 	.word	0x200000d4
 80017dc:	20000ae4 	.word	0x20000ae4
 80017e0:	20000260 	.word	0x20000260
 80017e4:	2000088c 	.word	0x2000088c
 80017e8:	200001d0 	.word	0x200001d0
 80017ec:	20000168 	.word	0x20000168
 80017f0:	2000093a 	.word	0x2000093a
 80017f4:	20000954 	.word	0x20000954
 80017f8:	20000d26 	.word	0x20000d26
 80017fc:	200003b8 	.word	0x200003b8
 8001800:	40003800 	.word	0x40003800
 8001804:	20000934 	.word	0x20000934
 8001808:	2000091c 	.word	0x2000091c
 800180c:	20000950 	.word	0x20000950
								for(int j = 0; j < 253; j++){
 8001810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001812:	3301      	adds	r3, #1
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
 8001816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001818:	2bfc      	cmp	r3, #252	; 0xfc
 800181a:	ddbe      	ble.n	800179a <main+0x126e>
										}
								}

								if(val_cnt == 0){
 800181c:	4bb4      	ldr	r3, [pc, #720]	; (8001af0 <main+0x15c4>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10f      	bne.n	8001844 <main+0x1318>
									Usart2_SendData(android_empty_bar_mem,strlen(android_empty_bar_mem));
 8001824:	48b3      	ldr	r0, [pc, #716]	; (8001af4 <main+0x15c8>)
 8001826:	f7fe fc91 	bl	800014c <strlen>
 800182a:	4603      	mov	r3, r0
 800182c:	4619      	mov	r1, r3
 800182e:	48b1      	ldr	r0, [pc, #708]	; (8001af4 <main+0x15c8>)
 8001830:	f005 f9a8 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8001834:	48b0      	ldr	r0, [pc, #704]	; (8001af8 <main+0x15cc>)
 8001836:	f7fe fc89 	bl	800014c <strlen>
 800183a:	4603      	mov	r3, r0
 800183c:	4619      	mov	r1, r3
 800183e:	48ae      	ldr	r0, [pc, #696]	; (8001af8 <main+0x15cc>)
 8001840:	f005 f9a0 	bl	8006b84 <Usart2_SendData>
								}

								if(val_cnt > 0 && val_cnt < 5){
 8001844:	4baa      	ldr	r3, [pc, #680]	; (8001af0 <main+0x15c4>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 808b 	beq.w	8001964 <main+0x1438>
 800184e:	4ba8      	ldr	r3, [pc, #672]	; (8001af0 <main+0x15c4>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b04      	cmp	r3, #4
 8001854:	f200 8086 	bhi.w	8001964 <main+0x1438>
									for(int x = val_cnt; x > 0; x--){
 8001858:	4ba5      	ldr	r3, [pc, #660]	; (8001af0 <main+0x15c4>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	643b      	str	r3, [r7, #64]	; 0x40
 800185e:	e07d      	b.n	800195c <main+0x1430>
										nfc_flash_addr = 12288 + (x - 1) * 16;
 8001860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001862:	f203 23ff 	addw	r3, r3, #767	; 0x2ff
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	461a      	mov	r2, r3
 800186a:	4ba4      	ldr	r3, [pc, #656]	; (8001afc <main+0x15d0>)
 800186c:	601a      	str	r2, [r3, #0]
										memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 800186e:	22ff      	movs	r2, #255	; 0xff
 8001870:	2100      	movs	r1, #0
 8001872:	48a3      	ldr	r0, [pc, #652]	; (8001b00 <main+0x15d4>)
 8001874:	f005 fc32 	bl	80070dc <memset>
										memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 8001878:	2210      	movs	r2, #16
 800187a:	2100      	movs	r1, #0
 800187c:	48a1      	ldr	r0, [pc, #644]	; (8001b04 <main+0x15d8>)
 800187e:	f005 fc2d 	bl	80070dc <memset>
										spiFlash_Read(nfc_flash_addr, cnt_flash, rd_flash_buff);
 8001882:	4b9e      	ldr	r3, [pc, #632]	; (8001afc <main+0x15d0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4aa0      	ldr	r2, [pc, #640]	; (8001b08 <main+0x15dc>)
 8001888:	8811      	ldrh	r1, [r2, #0]
 800188a:	4a9e      	ldr	r2, [pc, #632]	; (8001b04 <main+0x15d8>)
 800188c:	4618      	mov	r0, r3
 800188e:	f003 ff83 	bl	8005798 <spiFlash_Read>
										flash_timer = flash_conv2_timer(rd_flash_buff);
 8001892:	489c      	ldr	r0, [pc, #624]	; (8001b04 <main+0x15d8>)
 8001894:	f001 fd68 	bl	8003368 <flash_conv2_timer>
 8001898:	4603      	mov	r3, r0
 800189a:	4a9c      	ldr	r2, [pc, #624]	; (8001b0c <main+0x15e0>)
 800189c:	6013      	str	r3, [r2, #0]
										timer_to_cal(flash_timer, &rtc_time);
 800189e:	4b9b      	ldr	r3, [pc, #620]	; (8001b0c <main+0x15e0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1d3a      	adds	r2, r7, #4
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f8e2 	bl	8004a70 <timer_to_cal>

										convert_time_2android(&rtc_time);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 fb84 	bl	8004fbc <convert_time_2android>

										flash_uid = flash_conv2_uid(rd_flash_buff);
 80018b4:	4893      	ldr	r0, [pc, #588]	; (8001b04 <main+0x15d8>)
 80018b6:	f001 fdeb 	bl	8003490 <flash_conv2_uid>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a94      	ldr	r2, [pc, #592]	; (8001b10 <main+0x15e4>)
 80018be:	6013      	str	r3, [r2, #0]
										flash_conv2_nfc(flash_uid);
 80018c0:	4b93      	ldr	r3, [pc, #588]	; (8001b10 <main+0x15e4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fe01 	bl	80034cc <flash_conv2_nfc>

										memset(f_sNfcCode,0,strlen(f_sNfcCode));
 80018ca:	4892      	ldr	r0, [pc, #584]	; (8001b14 <main+0x15e8>)
 80018cc:	f7fe fc3e 	bl	800014c <strlen>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	488f      	ldr	r0, [pc, #572]	; (8001b14 <main+0x15e8>)
 80018d8:	f005 fc00 	bl	80070dc <memset>
										strlcpy ( f_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 80018dc:	221a      	movs	r2, #26
 80018de:	498e      	ldr	r1, [pc, #568]	; (8001b18 <main+0x15ec>)
 80018e0:	488c      	ldr	r0, [pc, #560]	; (8001b14 <main+0x15e8>)
 80018e2:	f005 fc1a 	bl	800711a <strlcpy>
										strcat(f_sNfcCode,nfc_uid_arr );
 80018e6:	498d      	ldr	r1, [pc, #564]	; (8001b1c <main+0x15f0>)
 80018e8:	488a      	ldr	r0, [pc, #552]	; (8001b14 <main+0x15e8>)
 80018ea:	f005 fbff 	bl	80070ec <strcat>
										strncat(s_flash_d_c, s_cal_data, 19);
 80018ee:	2213      	movs	r2, #19
 80018f0:	498b      	ldr	r1, [pc, #556]	; (8001b20 <main+0x15f4>)
 80018f2:	488c      	ldr	r0, [pc, #560]	; (8001b24 <main+0x15f8>)
 80018f4:	f005 fc26 	bl	8007144 <strncat>
										strcat(s_flash_d_c, s_space);
 80018f8:	498b      	ldr	r1, [pc, #556]	; (8001b28 <main+0x15fc>)
 80018fa:	488a      	ldr	r0, [pc, #552]	; (8001b24 <main+0x15f8>)
 80018fc:	f005 fbf6 	bl	80070ec <strcat>
										strncat(s_flash_d_c, f_sNfcCode, strlen(f_sNfcCode));
 8001900:	4884      	ldr	r0, [pc, #528]	; (8001b14 <main+0x15e8>)
 8001902:	f7fe fc23 	bl	800014c <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	4982      	ldr	r1, [pc, #520]	; (8001b14 <main+0x15e8>)
 800190c:	4885      	ldr	r0, [pc, #532]	; (8001b24 <main+0x15f8>)
 800190e:	f005 fc19 	bl	8007144 <strncat>
										strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001912:	4879      	ldr	r0, [pc, #484]	; (8001af8 <main+0x15cc>)
 8001914:	f7fe fc1a 	bl	800014c <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4976      	ldr	r1, [pc, #472]	; (8001af8 <main+0x15cc>)
 800191e:	4881      	ldr	r0, [pc, #516]	; (8001b24 <main+0x15f8>)
 8001920:	f005 fc10 	bl	8007144 <strncat>

										Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 8001924:	487f      	ldr	r0, [pc, #508]	; (8001b24 <main+0x15f8>)
 8001926:	f7fe fc11 	bl	800014c <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	4619      	mov	r1, r3
 800192e:	487d      	ldr	r0, [pc, #500]	; (8001b24 <main+0x15f8>)
 8001930:	f005 f928 	bl	8006b84 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001934:	4870      	ldr	r0, [pc, #448]	; (8001af8 <main+0x15cc>)
 8001936:	f7fe fc09 	bl	800014c <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	4619      	mov	r1, r3
 800193e:	486e      	ldr	r0, [pc, #440]	; (8001af8 <main+0x15cc>)
 8001940:	f005 f920 	bl	8006b84 <Usart2_SendData>

										memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 8001944:	4877      	ldr	r0, [pc, #476]	; (8001b24 <main+0x15f8>)
 8001946:	f7fe fc01 	bl	800014c <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	2100      	movs	r1, #0
 8001950:	4874      	ldr	r0, [pc, #464]	; (8001b24 <main+0x15f8>)
 8001952:	f005 fbc3 	bl	80070dc <memset>
									for(int x = val_cnt; x > 0; x--){
 8001956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001958:	3b01      	subs	r3, #1
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
 800195c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	f73f af7e 	bgt.w	8001860 <main+0x1334>
									}

								}

								if(val_cnt > 5 && val_cnt < 253){
 8001964:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <main+0x15c4>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b05      	cmp	r3, #5
 800196a:	f240 8098 	bls.w	8001a9e <main+0x1572>
 800196e:	4b60      	ldr	r3, [pc, #384]	; (8001af0 <main+0x15c4>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2bfc      	cmp	r3, #252	; 0xfc
 8001974:	f200 8093 	bhi.w	8001a9e <main+0x1572>
									last_bcode = val_cnt - 5;
 8001978:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <main+0x15c4>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b05      	subs	r3, #5
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <main+0x1600>)
 8001982:	701a      	strb	r2, [r3, #0]

									for(uint8_t k = val_cnt; k > last_bcode; k--){
 8001984:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <main+0x15c4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800198c:	e080      	b.n	8001a90 <main+0x1564>
										bar_flash_addr = 12288 + (k - 1) * 16;
 800198e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001992:	f203 23ff 	addw	r3, r3, #767	; 0x2ff
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	461a      	mov	r2, r3
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <main+0x1604>)
 800199c:	601a      	str	r2, [r3, #0]
										memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 800199e:	22ff      	movs	r2, #255	; 0xff
 80019a0:	2100      	movs	r1, #0
 80019a2:	4857      	ldr	r0, [pc, #348]	; (8001b00 <main+0x15d4>)
 80019a4:	f005 fb9a 	bl	80070dc <memset>
										memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 80019a8:	2210      	movs	r2, #16
 80019aa:	2100      	movs	r1, #0
 80019ac:	4855      	ldr	r0, [pc, #340]	; (8001b04 <main+0x15d8>)
 80019ae:	f005 fb95 	bl	80070dc <memset>
										spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <main+0x1604>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <main+0x15dc>)
 80019b8:	8811      	ldrh	r1, [r2, #0]
 80019ba:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <main+0x15d8>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 feeb 	bl	8005798 <spiFlash_Read>
										flash_timer = flash_conv2_timer(rd_flash_buff);
 80019c2:	4850      	ldr	r0, [pc, #320]	; (8001b04 <main+0x15d8>)
 80019c4:	f001 fcd0 	bl	8003368 <flash_conv2_timer>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a50      	ldr	r2, [pc, #320]	; (8001b0c <main+0x15e0>)
 80019cc:	6013      	str	r3, [r2, #0]
										timer_to_cal(flash_timer, &rtc_time);
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <main+0x15e0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1d3a      	adds	r2, r7, #4
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f84a 	bl	8004a70 <timer_to_cal>

										convert_time_2android(&rtc_time);
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 faec 	bl	8004fbc <convert_time_2android>

										flash_uid = flash_conv2_uid(rd_flash_buff);
 80019e4:	4847      	ldr	r0, [pc, #284]	; (8001b04 <main+0x15d8>)
 80019e6:	f001 fd53 	bl	8003490 <flash_conv2_uid>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <main+0x15e4>)
 80019ee:	6013      	str	r3, [r2, #0]
										flash_conv2_nfc(flash_uid);
 80019f0:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <main+0x15e4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 fd69 	bl	80034cc <flash_conv2_nfc>

										memset(f_sNfcCode,0,strlen(f_sNfcCode));
 80019fa:	4846      	ldr	r0, [pc, #280]	; (8001b14 <main+0x15e8>)
 80019fc:	f7fe fba6 	bl	800014c <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	2100      	movs	r1, #0
 8001a06:	4843      	ldr	r0, [pc, #268]	; (8001b14 <main+0x15e8>)
 8001a08:	f005 fb68 	bl	80070dc <memset>
										strlcpy ( f_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 8001a0c:	221a      	movs	r2, #26
 8001a0e:	4942      	ldr	r1, [pc, #264]	; (8001b18 <main+0x15ec>)
 8001a10:	4840      	ldr	r0, [pc, #256]	; (8001b14 <main+0x15e8>)
 8001a12:	f005 fb82 	bl	800711a <strlcpy>
										strcat(f_sNfcCode,nfc_uid_arr );
 8001a16:	4941      	ldr	r1, [pc, #260]	; (8001b1c <main+0x15f0>)
 8001a18:	483e      	ldr	r0, [pc, #248]	; (8001b14 <main+0x15e8>)
 8001a1a:	f005 fb67 	bl	80070ec <strcat>
										strncat(s_flash_d_c, s_cal_data, 19);
 8001a1e:	2213      	movs	r2, #19
 8001a20:	493f      	ldr	r1, [pc, #252]	; (8001b20 <main+0x15f4>)
 8001a22:	4840      	ldr	r0, [pc, #256]	; (8001b24 <main+0x15f8>)
 8001a24:	f005 fb8e 	bl	8007144 <strncat>
										strcat(s_flash_d_c, s_space);
 8001a28:	493f      	ldr	r1, [pc, #252]	; (8001b28 <main+0x15fc>)
 8001a2a:	483e      	ldr	r0, [pc, #248]	; (8001b24 <main+0x15f8>)
 8001a2c:	f005 fb5e 	bl	80070ec <strcat>
										strncat(s_flash_d_c, f_sNfcCode, strlen(f_sNfcCode));
 8001a30:	4838      	ldr	r0, [pc, #224]	; (8001b14 <main+0x15e8>)
 8001a32:	f7fe fb8b 	bl	800014c <strlen>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4936      	ldr	r1, [pc, #216]	; (8001b14 <main+0x15e8>)
 8001a3c:	4839      	ldr	r0, [pc, #228]	; (8001b24 <main+0x15f8>)
 8001a3e:	f005 fb81 	bl	8007144 <strncat>
										strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001a42:	482d      	ldr	r0, [pc, #180]	; (8001af8 <main+0x15cc>)
 8001a44:	f7fe fb82 	bl	800014c <strlen>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	492a      	ldr	r1, [pc, #168]	; (8001af8 <main+0x15cc>)
 8001a4e:	4835      	ldr	r0, [pc, #212]	; (8001b24 <main+0x15f8>)
 8001a50:	f005 fb78 	bl	8007144 <strncat>

										Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 8001a54:	4833      	ldr	r0, [pc, #204]	; (8001b24 <main+0x15f8>)
 8001a56:	f7fe fb79 	bl	800014c <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4831      	ldr	r0, [pc, #196]	; (8001b24 <main+0x15f8>)
 8001a60:	f005 f890 	bl	8006b84 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001a64:	4824      	ldr	r0, [pc, #144]	; (8001af8 <main+0x15cc>)
 8001a66:	f7fe fb71 	bl	800014c <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4822      	ldr	r0, [pc, #136]	; (8001af8 <main+0x15cc>)
 8001a70:	f005 f888 	bl	8006b84 <Usart2_SendData>

										memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 8001a74:	482b      	ldr	r0, [pc, #172]	; (8001b24 <main+0x15f8>)
 8001a76:	f7fe fb69 	bl	800014c <strlen>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4828      	ldr	r0, [pc, #160]	; (8001b24 <main+0x15f8>)
 8001a82:	f005 fb2b 	bl	80070dc <memset>
									for(uint8_t k = val_cnt; k > last_bcode; k--){
 8001a86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <main+0x1600>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f63f af78 	bhi.w	800198e <main+0x1462>
									}
								}
								SpiActive = 0;
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <main+0x1608>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 8001aa4:	f003 fd12 	bl	80054cc <PN532_SPIInit>

								break;
 8001aa8:	e04b      	b.n	8001b42 <main+0x1616>
							default:
								Usart2_SendData(android_no_such_cmd,strlen(android_no_such_cmd));
 8001aaa:	4823      	ldr	r0, [pc, #140]	; (8001b38 <main+0x160c>)
 8001aac:	f7fe fb4e 	bl	800014c <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4820      	ldr	r0, [pc, #128]	; (8001b38 <main+0x160c>)
 8001ab6:	f005 f865 	bl	8006b84 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8001aba:	480f      	ldr	r0, [pc, #60]	; (8001af8 <main+0x15cc>)
 8001abc:	f7fe fb46 	bl	800014c <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <main+0x15cc>)
 8001ac6:	f005 f85d 	bl	8006b84 <Usart2_SendData>
								break;
 8001aca:	e03a      	b.n	8001b42 <main+0x1616>
						}
					} else {
						Usart2_SendData(android_no_cmd_error,strlen(android_no_cmd_error));
 8001acc:	481b      	ldr	r0, [pc, #108]	; (8001b3c <main+0x1610>)
 8001ace:	f7fe fb3d 	bl	800014c <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4819      	ldr	r0, [pc, #100]	; (8001b3c <main+0x1610>)
 8001ad8:	f005 f854 	bl	8006b84 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <main+0x15cc>)
 8001ade:	f7fe fb35 	bl	800014c <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4804      	ldr	r0, [pc, #16]	; (8001af8 <main+0x15cc>)
 8001ae8:	f005 f84c 	bl	8006b84 <Usart2_SendData>
 8001aec:	e029      	b.n	8001b42 <main+0x1616>
 8001aee:	bf00      	nop
 8001af0:	2000093a 	.word	0x2000093a
 8001af4:	200003f8 	.word	0x200003f8
 8001af8:	20000168 	.word	0x20000168
 8001afc:	20000944 	.word	0x20000944
 8001b00:	200009d4 	.word	0x200009d4
 8001b04:	20000ad4 	.word	0x20000ad4
 8001b08:	20000d0e 	.word	0x20000d0e
 8001b0c:	20000948 	.word	0x20000948
 8001b10:	20000958 	.word	0x20000958
 8001b14:	200005e4 	.word	0x200005e4
 8001b18:	200000e0 	.word	0x200000e0
 8001b1c:	200009a8 	.word	0x200009a8
 8001b20:	20000260 	.word	0x20000260
 8001b24:	2000088c 	.word	0x2000088c
 8001b28:	200001d0 	.word	0x200001d0
 8001b2c:	20000954 	.word	0x20000954
 8001b30:	20000940 	.word	0x20000940
 8001b34:	20000d26 	.word	0x20000d26
 8001b38:	20000330 	.word	0x20000330
 8001b3c:	2000031c 	.word	0x2000031c
								break;
 8001b40:	bf00      	nop

					}


					date_iBufferLength=0;
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <main+0x1730>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

					memset(date_sBuffer, 0, strlen(date_sBuffer));
 8001b48:	4845      	ldr	r0, [pc, #276]	; (8001c60 <main+0x1734>)
 8001b4a:	f7fe faff 	bl	800014c <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	4842      	ldr	r0, [pc, #264]	; (8001c60 <main+0x1734>)
 8001b56:	f005 fac1 	bl	80070dc <memset>
				//GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);

				/*
				 * Декодирование данных сканера
				 */
				if (strstr(g_sBuffer, "\r\n") != NULL) {
 8001b5a:	4942      	ldr	r1, [pc, #264]	; (8001c64 <main+0x1738>)
 8001b5c:	4842      	ldr	r0, [pc, #264]	; (8001c68 <main+0x173c>)
 8001b5e:	f005 fb1c 	bl	800719a <strstr>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 819b 	beq.w	8001ea0 <main+0x1974>
					/* Выделение лексемы,
					 *  ограниченной справа одним из символов множества "\r\n"
					 */
					strtok ( g_sBuffer, "\r\n" );
 8001b6a:	493e      	ldr	r1, [pc, #248]	; (8001c64 <main+0x1738>)
 8001b6c:	483e      	ldr	r0, [pc, #248]	; (8001c68 <main+0x173c>)
 8001b6e:	f005 fb2b 	bl	80071c8 <strtok>

					char * pBuffer = g_sBuffer;
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <main+0x173c>)
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 8001b76:	e002      	b.n	8001b7e <main+0x1652>
						pBuffer++;
 8001b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 8001b7e:	493b      	ldr	r1, [pc, #236]	; (8001c6c <main+0x1740>)
 8001b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b82:	f005 faf2 	bl	800716a <strpbrk>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f5      	bne.n	8001b78 <main+0x164c>
					}

					memset(g_sBarCode,0,strlen(g_sBarCode));
 8001b8c:	4838      	ldr	r0, [pc, #224]	; (8001c70 <main+0x1744>)
 8001b8e:	f7fe fadd 	bl	800014c <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	4835      	ldr	r0, [pc, #212]	; (8001c70 <main+0x1744>)
 8001b9a:	f005 fa9f 	bl	80070dc <memset>
					  strlcpy ( g_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 8001b9e:	221a      	movs	r2, #26
 8001ba0:	4934      	ldr	r1, [pc, #208]	; (8001c74 <main+0x1748>)
 8001ba2:	4833      	ldr	r0, [pc, #204]	; (8001c70 <main+0x1744>)
 8001ba4:	f005 fab9 	bl	800711a <strlcpy>
					  strcat(g_sBarCode,pBuffer );
 8001ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001baa:	4831      	ldr	r0, [pc, #196]	; (8001c70 <main+0x1744>)
 8001bac:	f005 fa9e 	bl	80070ec <strcat>



						timer = RTC_GET_COUNTER();
 8001bb0:	f002 ff04 	bl	80049bc <RTC_GET_COUNTER>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <main+0x174c>)
 8001bb8:	6013      	str	r3, [r2, #0]
						timer_to_cal(timer, &rtc_time);
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <main+0x174c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	1d3a      	adds	r2, r7, #4
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 ff54 	bl	8004a70 <timer_to_cal>
						tim = cal_to_timer(&rtc_time);
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 f83a 	bl	8004c44 <cal_to_timer>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a2a      	ldr	r2, [pc, #168]	; (8001c7c <main+0x1750>)
 8001bd4:	6013      	str	r3, [r2, #0]
						bcdflash = bcode_conv_to_flash(tim, g_sBuffer);
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <main+0x1750>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4923      	ldr	r1, [pc, #140]	; (8001c68 <main+0x173c>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f001 fa91 	bl	8003104 <bcode_conv_to_flash>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4926      	ldr	r1, [pc, #152]	; (8001c80 <main+0x1754>)
 8001be8:	e9c1 2300 	strd	r2, r3, [r1]
						data_conv2Flash(tim, bcdflash);
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <main+0x1750>)
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <main+0x1754>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	f001 fb18 	bl	800322c <data_conv2Flash>

					//	flash_conv2_bcode();



						while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8001bfc:	bf00      	nop
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <main+0x1758>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <main+0x16ea>
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	481f      	ldr	r0, [pc, #124]	; (8001c88 <main+0x175c>)
 8001c0c:	f004 fcb0 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f3      	bne.n	8001bfe <main+0x16d2>
						SPI_FLASH_CONFIG();
 8001c16:	f003 fd67 	bl	80056e8 <SPI_FLASH_CONFIG>


						memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));	//получение значения счетчика записей
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	481b      	ldr	r0, [pc, #108]	; (8001c8c <main+0x1760>)
 8001c20:	f005 fa5c 	bl	80070dc <memset>
						spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <main+0x1764>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <main+0x1768>)
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	b291      	uxth	r1, r2
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <main+0x176c>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 fdb1 	bl	8005798 <spiFlash_Read>
						for(int j = 0; j < 253; j++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3a:	e036      	b.n	8001caa <main+0x177e>
							if(rd_test_buff[j] == 0xFF){
 8001c3c:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <main+0x176c>)
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2bff      	cmp	r3, #255	; 0xff
 8001c46:	d12d      	bne.n	8001ca4 <main+0x1778>
								val_cnt = rd_test_buff[j-1];
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <main+0x176c>)
 8001c4e:	5cd2      	ldrb	r2, [r2, r3]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <main+0x1770>)
 8001c52:	701a      	strb	r2, [r3, #0]
								bcd_cnt_addr = j;
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <main+0x1774>)
 8001c58:	6013      	str	r3, [r2, #0]
								break;
 8001c5a:	e029      	b.n	8001cb0 <main+0x1784>
 8001c5c:	20000688 	.word	0x20000688
 8001c60:	20000604 	.word	0x20000604
 8001c64:	080083a4 	.word	0x080083a4
 8001c68:	20000508 	.word	0x20000508
 8001c6c:	080083b4 	.word	0x080083b4
 8001c70:	20000590 	.word	0x20000590
 8001c74:	200000d4 	.word	0x200000d4
 8001c78:	20000318 	.word	0x20000318
 8001c7c:	2000090c 	.word	0x2000090c
 8001c80:	20000920 	.word	0x20000920
 8001c84:	20000d26 	.word	0x20000d26
 8001c88:	40003800 	.word	0x40003800
 8001c8c:	20000ad4 	.word	0x20000ad4
 8001c90:	2000092c 	.word	0x2000092c
 8001c94:	2000091c 	.word	0x2000091c
 8001c98:	200009d4 	.word	0x200009d4
 8001c9c:	2000093a 	.word	0x2000093a
 8001ca0:	2000094c 	.word	0x2000094c
						for(int j = 0; j < 253; j++){
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8001caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cac:	2bfc      	cmp	r3, #252	; 0xfc
 8001cae:	ddc5      	ble.n	8001c3c <main+0x1710>
							}
						}

						if(val_cnt< 251){	//количество записей удовлетворяет диапазону
 8001cb0:	4bae      	ldr	r3, [pc, #696]	; (8001f6c <main+0x1a40>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2bfa      	cmp	r3, #250	; 0xfa
 8001cb6:	d82c      	bhi.n	8001d12 <main+0x17e6>
							memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8001cb8:	22ff      	movs	r2, #255	; 0xff
 8001cba:	2100      	movs	r1, #0
 8001cbc:	48ac      	ldr	r0, [pc, #688]	; (8001f70 <main+0x1a44>)
 8001cbe:	f005 fa0d 	bl	80070dc <memset>
							spiFlash_Read(bcd_addr_start, cnt_flash_t, rd_test_buff);
 8001cc2:	4bac      	ldr	r3, [pc, #688]	; (8001f74 <main+0x1a48>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4aac      	ldr	r2, [pc, #688]	; (8001f78 <main+0x1a4c>)
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	b291      	uxth	r1, r2
 8001ccc:	4aa8      	ldr	r2, [pc, #672]	; (8001f70 <main+0x1a44>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fd62 	bl	8005798 <spiFlash_Read>
							bar_flash_addr = 8192 + val_cnt * 16;
 8001cd4:	4ba5      	ldr	r3, [pc, #660]	; (8001f6c <main+0x1a40>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4ba6      	ldr	r3, [pc, #664]	; (8001f7c <main+0x1a50>)
 8001ce2:	601a      	str	r2, [r3, #0]
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 8001ce4:	4ba5      	ldr	r3, [pc, #660]	; (8001f7c <main+0x1a50>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4aa5      	ldr	r2, [pc, #660]	; (8001f80 <main+0x1a54>)
 8001cea:	8811      	ldrh	r1, [r2, #0]
 8001cec:	4aa5      	ldr	r2, [pc, #660]	; (8001f84 <main+0x1a58>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fa58 	bl	80051a4 <Write_data_2Flash>
							val_cnt++;
 8001cf4:	4b9d      	ldr	r3, [pc, #628]	; (8001f6c <main+0x1a40>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b9b      	ldr	r3, [pc, #620]	; (8001f6c <main+0x1a40>)
 8001cfe:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//количество штрих-кодов
 8001d00:	4ba1      	ldr	r3, [pc, #644]	; (8001f88 <main+0x1a5c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4aa1      	ldr	r2, [pc, #644]	; (8001f8c <main+0x1a60>)
 8001d06:	7812      	ldrb	r2, [r2, #0]
 8001d08:	b291      	uxth	r1, r2
 8001d0a:	4a98      	ldr	r2, [pc, #608]	; (8001f6c <main+0x1a40>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fab1 	bl	8005274 <Set_Cnt_to_Flash>

						}
						if(bcd_cnt_addr == 252 ){		//стирка если больше диапазона
 8001d12:	4b9d      	ldr	r3, [pc, #628]	; (8001f88 <main+0x1a5c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2bfc      	cmp	r3, #252	; 0xfc
 8001d18:	d141      	bne.n	8001d9e <main+0x1872>
							memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8001d1a:	22ff      	movs	r2, #255	; 0xff
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4894      	ldr	r0, [pc, #592]	; (8001f70 <main+0x1a44>)
 8001d20:	f005 f9dc 	bl	80070dc <memset>
							spiFlash_Read(bcd_addr_start, cnt_flash_t, rd_test_buff);
 8001d24:	4b93      	ldr	r3, [pc, #588]	; (8001f74 <main+0x1a48>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a93      	ldr	r2, [pc, #588]	; (8001f78 <main+0x1a4c>)
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	b291      	uxth	r1, r2
 8001d2e:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <main+0x1a44>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fd31 	bl	8005798 <spiFlash_Read>
							bcd_cnt_addr = 0;
 8001d36:	4b94      	ldr	r3, [pc, #592]	; (8001f88 <main+0x1a5c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
							bar_flash_addr = 8192;
 8001d3c:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <main+0x1a50>)
 8001d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d42:	601a      	str	r2, [r3, #0]
							Safe_Flash_Erase(bar_flash_addr);
 8001d44:	4b8d      	ldr	r3, [pc, #564]	; (8001f7c <main+0x1a50>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fafb 	bl	8005344 <Safe_Flash_Erase>
							Safe_Flash_Erase(bcd_cnt_addr);
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <main+0x1a5c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 faf6 	bl	8005344 <Safe_Flash_Erase>
							val_cnt = 0;
 8001d58:	4b84      	ldr	r3, [pc, #528]	; (8001f6c <main+0x1a40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8001d5e:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <main+0x1a5c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a8a      	ldr	r2, [pc, #552]	; (8001f8c <main+0x1a60>)
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	b291      	uxth	r1, r2
 8001d68:	4a80      	ldr	r2, [pc, #512]	; (8001f6c <main+0x1a40>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fa82 	bl	8005274 <Set_Cnt_to_Flash>
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 8001d70:	4b82      	ldr	r3, [pc, #520]	; (8001f7c <main+0x1a50>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a82      	ldr	r2, [pc, #520]	; (8001f80 <main+0x1a54>)
 8001d76:	8811      	ldrh	r1, [r2, #0]
 8001d78:	4a82      	ldr	r2, [pc, #520]	; (8001f84 <main+0x1a58>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fa12 	bl	80051a4 <Write_data_2Flash>
							bcd_cnt_addr = 1;
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <main+0x1a5c>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
							val_cnt = 1;
 8001d86:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <main+0x1a40>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <main+0x1a5c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a7e      	ldr	r2, [pc, #504]	; (8001f8c <main+0x1a60>)
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	b291      	uxth	r1, r2
 8001d96:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <main+0x1a40>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fa6b 	bl	8005274 <Set_Cnt_to_Flash>
						}

						memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8001d9e:	22ff      	movs	r2, #255	; 0xff
 8001da0:	2100      	movs	r1, #0
 8001da2:	4873      	ldr	r0, [pc, #460]	; (8001f70 <main+0x1a44>)
 8001da4:	f005 f99a 	bl	80070dc <memset>
						spiFlash_Read(erase_addr, cnt_flash_t, rd_test_buff);
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <main+0x1a64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a72      	ldr	r2, [pc, #456]	; (8001f78 <main+0x1a4c>)
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	b291      	uxth	r1, r2
 8001db2:	4a6f      	ldr	r2, [pc, #444]	; (8001f70 <main+0x1a44>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fcef 	bl	8005798 <spiFlash_Read>

						memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8001dba:	22ff      	movs	r2, #255	; 0xff
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	486c      	ldr	r0, [pc, #432]	; (8001f70 <main+0x1a44>)
 8001dc0:	f005 f98c 	bl	80070dc <memset>
						spiFlash_Read(bar_flash_addr, cnt_flash_t, rd_test_buff);
 8001dc4:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <main+0x1a50>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6b      	ldr	r2, [pc, #428]	; (8001f78 <main+0x1a4c>)
 8001dca:	7812      	ldrb	r2, [r2, #0]
 8001dcc:	b291      	uxth	r1, r2
 8001dce:	4a68      	ldr	r2, [pc, #416]	; (8001f70 <main+0x1a44>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fce1 	bl	8005798 <spiFlash_Read>

						SpiActive = 0;
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <main+0x1a68>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
						PN532_SPIInit();
 8001ddc:	f003 fb76 	bl	80054cc <PN532_SPIInit>

						convert_time_2android(&rtc_time);
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f8ea 	bl	8004fbc <convert_time_2android>


					//if(b_firstrddata==DISABLE){
						LCD_SetCursor ( LCD_CURSOR_1STR );
 8001de8:	2080      	movs	r0, #128	; 0x80
 8001dea:	f001 fd15 	bl	8003818 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 8001dee:	486a      	ldr	r0, [pc, #424]	; (8001f98 <main+0x1a6c>)
 8001df0:	f001 fdc2 	bl	8003978 <LCD_WriteString>
						LCD_SetCursor ( LCD_CURSOR_2STR );
 8001df4:	20c0      	movs	r0, #192	; 0xc0
 8001df6:	f001 fd0f 	bl	8003818 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 8001dfa:	4867      	ldr	r0, [pc, #412]	; (8001f98 <main+0x1a6c>)
 8001dfc:	f001 fdbc 	bl	8003978 <LCD_WriteString>
						//b_firstrddata=ENABLE;

					//}

					LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001e06:	4865      	ldr	r0, [pc, #404]	; (8001f9c <main+0x1a70>)
 8001e08:	f001 feea 	bl	8003be0 <LCD_RunStringBARCode>

					int strLength = strlen(g_sBuffer) + 1;
 8001e0c:	4864      	ldr	r0, [pc, #400]	; (8001fa0 <main+0x1a74>)
 8001e0e:	f7fe f99d 	bl	800014c <strlen>
 8001e12:	4603      	mov	r3, r0
 8001e14:	3301      	adds	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
					g_iBufferLength -= strLength;
 8001e18:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <main+0x1a78>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4a60      	ldr	r2, [pc, #384]	; (8001fa4 <main+0x1a78>)
 8001e22:	6013      	str	r3, [r2, #0]
					memmove ( g_sBuffer, g_sBuffer + strLength,
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <main+0x1a74>)
 8001e28:	1899      	adds	r1, r3, r2

							BUFFER_LEN + 1 - strLength );
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f1c3 0381 	rsb	r3, r3, #129	; 0x81
					memmove ( g_sBuffer, g_sBuffer + strLength,
 8001e30:	461a      	mov	r2, r3
 8001e32:	485b      	ldr	r0, [pc, #364]	; (8001fa0 <main+0x1a74>)
 8001e34:	f005 f938 	bl	80070a8 <memmove>

					//*xxx*yyyy-MM-dd HH:mm:ss


					strncat(s_scan_d_c, s_cal_data, 19);
 8001e38:	2213      	movs	r2, #19
 8001e3a:	495b      	ldr	r1, [pc, #364]	; (8001fa8 <main+0x1a7c>)
 8001e3c:	485b      	ldr	r0, [pc, #364]	; (8001fac <main+0x1a80>)
 8001e3e:	f005 f981 	bl	8007144 <strncat>
					strcat(s_scan_d_c, s_space);
 8001e42:	495b      	ldr	r1, [pc, #364]	; (8001fb0 <main+0x1a84>)
 8001e44:	4859      	ldr	r0, [pc, #356]	; (8001fac <main+0x1a80>)
 8001e46:	f005 f951 	bl	80070ec <strcat>
					strncat(s_scan_d_c, g_sBarCode, strlen(g_sBarCode));
 8001e4a:	4854      	ldr	r0, [pc, #336]	; (8001f9c <main+0x1a70>)
 8001e4c:	f7fe f97e 	bl	800014c <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	4951      	ldr	r1, [pc, #324]	; (8001f9c <main+0x1a70>)
 8001e56:	4855      	ldr	r0, [pc, #340]	; (8001fac <main+0x1a80>)
 8001e58:	f005 f974 	bl	8007144 <strncat>
					strncat(s_scan_d_c, s_newline, strlen(s_newline));
 8001e5c:	4855      	ldr	r0, [pc, #340]	; (8001fb4 <main+0x1a88>)
 8001e5e:	f7fe f975 	bl	800014c <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4953      	ldr	r1, [pc, #332]	; (8001fb4 <main+0x1a88>)
 8001e68:	4850      	ldr	r0, [pc, #320]	; (8001fac <main+0x1a80>)
 8001e6a:	f005 f96b 	bl	8007144 <strncat>


					Usart2_SendData(s_scan_d_c,strlen(s_scan_d_c));
 8001e6e:	484f      	ldr	r0, [pc, #316]	; (8001fac <main+0x1a80>)
 8001e70:	f7fe f96c 	bl	800014c <strlen>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4619      	mov	r1, r3
 8001e78:	484c      	ldr	r0, [pc, #304]	; (8001fac <main+0x1a80>)
 8001e7a:	f004 fe83 	bl	8006b84 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 8001e7e:	484d      	ldr	r0, [pc, #308]	; (8001fb4 <main+0x1a88>)
 8001e80:	f7fe f964 	bl	800014c <strlen>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	484a      	ldr	r0, [pc, #296]	; (8001fb4 <main+0x1a88>)
 8001e8a:	f004 fe7b 	bl	8006b84 <Usart2_SendData>

					memset(s_scan_d_c, 0, strlen(s_scan_d_c));
 8001e8e:	4847      	ldr	r0, [pc, #284]	; (8001fac <main+0x1a80>)
 8001e90:	f7fe f95c 	bl	800014c <strlen>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4844      	ldr	r0, [pc, #272]	; (8001fac <main+0x1a80>)
 8001e9c:	f005 f91e 	bl	80070dc <memset>



				//*****************************************************************************
				//Если тест NFC пройден успешно,то сканируем ID
						if(statusDevice==ST_DEV_NFC_NOERR || statusDevice==ST_DEV_ALL_NOERR ){
 8001ea0:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <main+0x1a8c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d004      	beq.n	8001eb2 <main+0x1986>
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <main+0x1a8c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b11      	cmp	r3, #17
 8001eae:	f040 8379 	bne.w	80025a4 <main+0x2078>
							if(cntlooppn532==CNT_LOOP_PN532){
 8001eb2:	4b42      	ldr	r3, [pc, #264]	; (8001fbc <main+0x1a90>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	f040 8351 	bne.w	8002562 <main+0x2036>

								success=PN532_readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength,1500);
 8001ec0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001ec4:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <main+0x1a94>)
 8001ec6:	493f      	ldr	r1, [pc, #252]	; (8001fc4 <main+0x1a98>)
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f002 f84d 	bl	8003f68 <PN532_readPassiveTargetID>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <main+0x1a9c>)
 8001ed4:	701a      	strb	r2, [r3, #0]

								if(success && !b_discannfc){
 8001ed6:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <main+0x1a9c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8337 	beq.w	800254e <main+0x2022>
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <main+0x1aa0>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f040 8332 	bne.w	800254e <main+0x2022>

									b_discannfc=1;
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <main+0x1aa0>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]

									s_pn_uidlengthdata[0] = 0x30+(uidLength/100);
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <main+0x1a94>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4a36      	ldr	r2, [pc, #216]	; (8001fd0 <main+0x1aa4>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3330      	adds	r3, #48	; 0x30
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <main+0x1aa8>)
 8001f04:	701a      	strb	r2, [r3, #0]
									s_pn_uidlengthdata[1] = 0x30+(uidLength/10%10);
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <main+0x1a94>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <main+0x1aac>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <main+0x1aac>)
 8001f16:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1a:	08d9      	lsrs	r1, r3, #3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3330      	adds	r3, #48	; 0x30
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <main+0x1aa8>)
 8001f2e:	705a      	strb	r2, [r3, #1]
									s_pn_uidlengthdata[2] = 0x30+(uidLength%10);
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <main+0x1a94>)
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <main+0x1aac>)
 8001f36:	fba3 1302 	umull	r1, r3, r3, r2
 8001f3a:	08d9      	lsrs	r1, r3, #3
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	3330      	adds	r3, #48	; 0x30
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <main+0x1aa8>)
 8001f4e:	709a      	strb	r2, [r3, #2]

									Usart2_SendData(s_pn_foundcard,strlen(s_pn_foundcard));
 8001f50:	4822      	ldr	r0, [pc, #136]	; (8001fdc <main+0x1ab0>)
 8001f52:	f7fe f8fb 	bl	800014c <strlen>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4820      	ldr	r0, [pc, #128]	; (8001fdc <main+0x1ab0>)
 8001f5c:	f004 fe12 	bl	8006b84 <Usart2_SendData>

									Usart2_SendData(s_pn_uidlength,strlen(s_pn_uidlength));
 8001f60:	481f      	ldr	r0, [pc, #124]	; (8001fe0 <main+0x1ab4>)
 8001f62:	f7fe f8f3 	bl	800014c <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	e03b      	b.n	8001fe4 <main+0x1ab8>
 8001f6c:	2000093a 	.word	0x2000093a
 8001f70:	200009d4 	.word	0x200009d4
 8001f74:	20000928 	.word	0x20000928
 8001f78:	2000091c 	.word	0x2000091c
 8001f7c:	20000940 	.word	0x20000940
 8001f80:	20000d0e 	.word	0x20000d0e
 8001f84:	200009b4 	.word	0x200009b4
 8001f88:	2000094c 	.word	0x2000094c
 8001f8c:	20000939 	.word	0x20000939
 8001f90:	20000918 	.word	0x20000918
 8001f94:	20000d26 	.word	0x20000d26
 8001f98:	200000b4 	.word	0x200000b4
 8001f9c:	20000590 	.word	0x20000590
 8001fa0:	20000508 	.word	0x20000508
 8001fa4:	2000058c 	.word	0x2000058c
 8001fa8:	20000260 	.word	0x20000260
 8001fac:	2000084c 	.word	0x2000084c
 8001fb0:	200001d0 	.word	0x200001d0
 8001fb4:	20000168 	.word	0x20000168
 8001fb8:	20000848 	.word	0x20000848
 8001fbc:	2000072c 	.word	0x2000072c
 8001fc0:	20000724 	.word	0x20000724
 8001fc4:	20000714 	.word	0x20000714
 8001fc8:	20000712 	.word	0x20000712
 8001fcc:	20000711 	.word	0x20000711
 8001fd0:	51eb851f 	.word	0x51eb851f
 8001fd4:	200001ac 	.word	0x200001ac
 8001fd8:	cccccccd 	.word	0xcccccccd
 8001fdc:	2000016c 	.word	0x2000016c
 8001fe0:	20000180 	.word	0x20000180
 8001fe4:	483c      	ldr	r0, [pc, #240]	; (80020d8 <main+0x1bac>)
 8001fe6:	f004 fdcd 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_pn_uidlengthdata,strlen(s_pn_uidlengthdata));
 8001fea:	483c      	ldr	r0, [pc, #240]	; (80020dc <main+0x1bb0>)
 8001fec:	f7fe f8ae 	bl	800014c <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4839      	ldr	r0, [pc, #228]	; (80020dc <main+0x1bb0>)
 8001ff6:	f004 fdc5 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8001ffa:	4839      	ldr	r0, [pc, #228]	; (80020e0 <main+0x1bb4>)
 8001ffc:	f7fe f8a6 	bl	800014c <strlen>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4836      	ldr	r0, [pc, #216]	; (80020e0 <main+0x1bb4>)
 8002006:	f004 fdbd 	bl	8006b84 <Usart2_SendData>

									b_hextostr = fourbytes2strhex (&uid[0], &uidhex2pc4b[0]);
 800200a:	4936      	ldr	r1, [pc, #216]	; (80020e4 <main+0x1bb8>)
 800200c:	4836      	ldr	r0, [pc, #216]	; (80020e8 <main+0x1bbc>)
 800200e:	f000 ff2f 	bl	8002e70 <fourbytes2strhex>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <main+0x1bc0>)
 8002018:	701a      	strb	r2, [r3, #0]

									Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 800201a:	4835      	ldr	r0, [pc, #212]	; (80020f0 <main+0x1bc4>)
 800201c:	f7fe f896 	bl	800014c <strlen>
 8002020:	4603      	mov	r3, r0
 8002022:	4619      	mov	r1, r3
 8002024:	4832      	ldr	r0, [pc, #200]	; (80020f0 <main+0x1bc4>)
 8002026:	f004 fdad 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(uidhex2pc4b,strlen(uidhex2pc4b));
 800202a:	482e      	ldr	r0, [pc, #184]	; (80020e4 <main+0x1bb8>)
 800202c:	f7fe f88e 	bl	800014c <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	482b      	ldr	r0, [pc, #172]	; (80020e4 <main+0x1bb8>)
 8002036:	f004 fda5 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 800203a:	4829      	ldr	r0, [pc, #164]	; (80020e0 <main+0x1bb4>)
 800203c:	f7fe f886 	bl	800014c <strlen>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4826      	ldr	r0, [pc, #152]	; (80020e0 <main+0x1bb4>)
 8002046:	f004 fd9d 	bl	8006b84 <Usart2_SendData>

									decuid = UIDResponse(&uid[0], uidLength);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <main+0x1bc8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	4825      	ldr	r0, [pc, #148]	; (80020e8 <main+0x1bbc>)
 8002052:	f000 ff81 	bl	8002f58 <UIDResponse>
 8002056:	4603      	mov	r3, r0
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <main+0x1bcc>)
 800205a:	6013      	str	r3, [r2, #0]

									tim = RTC_GET_COUNTER();
 800205c:	f002 fcae 	bl	80049bc <RTC_GET_COUNTER>
 8002060:	4603      	mov	r3, r0
 8002062:	4a26      	ldr	r2, [pc, #152]	; (80020fc <main+0x1bd0>)
 8002064:	6013      	str	r3, [r2, #0]

									nfc_conv2Flash(tim, decuid);
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <main+0x1bd0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <main+0x1bcc>)
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f001 f947 	bl	8003304 <nfc_conv2Flash>

									while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8002076:	bf00      	nop
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <main+0x1bd4>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <main+0x1b64>
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	481f      	ldr	r0, [pc, #124]	; (8002104 <main+0x1bd8>)
 8002086:	f004 fa73 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f3      	bne.n	8002078 <main+0x1b4c>
									SPI_FLASH_CONFIG();
 8002090:	f003 fb2a 	bl	80056e8 <SPI_FLASH_CONFIG>


									memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));	//получение значения счетчика записей
 8002094:	2210      	movs	r2, #16
 8002096:	2100      	movs	r1, #0
 8002098:	481b      	ldr	r0, [pc, #108]	; (8002108 <main+0x1bdc>)
 800209a:	f005 f81f 	bl	80070dc <memset>
									spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <main+0x1be0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <main+0x1be4>)
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	b291      	uxth	r1, r2
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <main+0x1be8>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fb74 	bl	8005798 <spiFlash_Read>
									for(int j = 0; j < 253; j++){
 80020b0:	2300      	movs	r3, #0
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
 80020b4:	e037      	b.n	8002126 <main+0x1bfa>
										if(rd_test_buff[j] == 0xFF){
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <main+0x1be8>)
 80020b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	d12e      	bne.n	8002120 <main+0x1bf4>
											val_cnt = rd_test_buff[j-1];
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	3b01      	subs	r3, #1
 80020c6:	4a13      	ldr	r2, [pc, #76]	; (8002114 <main+0x1be8>)
 80020c8:	5cd2      	ldrb	r2, [r2, r3]
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <main+0x1bec>)
 80020cc:	701a      	strb	r2, [r3, #0]
											nfc_cnt_addr = j;
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <main+0x1bf0>)
 80020d2:	6013      	str	r3, [r2, #0]
											break;
 80020d4:	e02a      	b.n	800212c <main+0x1c00>
 80020d6:	bf00      	nop
 80020d8:	20000180 	.word	0x20000180
 80020dc:	200001ac 	.word	0x200001ac
 80020e0:	20000168 	.word	0x20000168
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	20000714 	.word	0x20000714
 80020ec:	20000713 	.word	0x20000713
 80020f0:	20000198 	.word	0x20000198
 80020f4:	20000724 	.word	0x20000724
 80020f8:	20000728 	.word	0x20000728
 80020fc:	2000090c 	.word	0x2000090c
 8002100:	20000d26 	.word	0x20000d26
 8002104:	40003800 	.word	0x40003800
 8002108:	20000ad4 	.word	0x20000ad4
 800210c:	20000934 	.word	0x20000934
 8002110:	2000091c 	.word	0x2000091c
 8002114:	200009d4 	.word	0x200009d4
 8002118:	2000093a 	.word	0x2000093a
 800211c:	20000950 	.word	0x20000950
									for(int j = 0; j < 253; j++){
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	3301      	adds	r3, #1
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	2bfc      	cmp	r3, #252	; 0xfc
 800212a:	ddc4      	ble.n	80020b6 <main+0x1b8a>
											}
									}

									if(val_cnt< 251){	//количество записей удовлетворяет диапазону
 800212c:	4bae      	ldr	r3, [pc, #696]	; (80023e8 <main+0x1ebc>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2bfa      	cmp	r3, #250	; 0xfa
 8002132:	d832      	bhi.n	800219a <main+0x1c6e>
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8002134:	22ff      	movs	r2, #255	; 0xff
 8002136:	2100      	movs	r1, #0
 8002138:	48ac      	ldr	r0, [pc, #688]	; (80023ec <main+0x1ec0>)
 800213a:	f004 ffcf 	bl	80070dc <memset>
									spiFlash_Read(nfc_addr_start, cnt_flash_t, rd_test_buff);
 800213e:	4bac      	ldr	r3, [pc, #688]	; (80023f0 <main+0x1ec4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4aac      	ldr	r2, [pc, #688]	; (80023f4 <main+0x1ec8>)
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	b291      	uxth	r1, r2
 8002148:	4aa8      	ldr	r2, [pc, #672]	; (80023ec <main+0x1ec0>)
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fb24 	bl	8005798 <spiFlash_Read>
									nfc_flash_addr = 12288 + val_cnt * 16;
 8002150:	4ba5      	ldr	r3, [pc, #660]	; (80023e8 <main+0x1ebc>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	461a      	mov	r2, r3
 800215c:	4ba6      	ldr	r3, [pc, #664]	; (80023f8 <main+0x1ecc>)
 800215e:	601a      	str	r2, [r3, #0]
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002160:	4ba5      	ldr	r3, [pc, #660]	; (80023f8 <main+0x1ecc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4aa5      	ldr	r2, [pc, #660]	; (80023fc <main+0x1ed0>)
 8002166:	8811      	ldrh	r1, [r2, #0]
 8002168:	4aa5      	ldr	r2, [pc, #660]	; (8002400 <main+0x1ed4>)
 800216a:	4618      	mov	r0, r3
 800216c:	f003 f81a 	bl	80051a4 <Write_data_2Flash>
									val_cnt++;
 8002170:	4b9d      	ldr	r3, [pc, #628]	; (80023e8 <main+0x1ebc>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b9b      	ldr	r3, [pc, #620]	; (80023e8 <main+0x1ebc>)
 800217a:	701a      	strb	r2, [r3, #0]
									nfc_cnt_addr = 4096 + nfc_cnt_addr;
 800217c:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <main+0x1ed8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002184:	4a9f      	ldr	r2, [pc, #636]	; (8002404 <main+0x1ed8>)
 8002186:	6013      	str	r3, [r2, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//количество штрих-кодов
 8002188:	4b9e      	ldr	r3, [pc, #632]	; (8002404 <main+0x1ed8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a9e      	ldr	r2, [pc, #632]	; (8002408 <main+0x1edc>)
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	b291      	uxth	r1, r2
 8002192:	4a95      	ldr	r2, [pc, #596]	; (80023e8 <main+0x1ebc>)
 8002194:	4618      	mov	r0, r3
 8002196:	f003 f86d 	bl	8005274 <Set_Cnt_to_Flash>

									}
									if(nfc_cnt_addr == 252 ){		//стирка если больше диапазона
 800219a:	4b9a      	ldr	r3, [pc, #616]	; (8002404 <main+0x1ed8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2bfc      	cmp	r3, #252	; 0xfc
 80021a0:	d143      	bne.n	800222a <main+0x1cfe>
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 80021a2:	22ff      	movs	r2, #255	; 0xff
 80021a4:	2100      	movs	r1, #0
 80021a6:	4891      	ldr	r0, [pc, #580]	; (80023ec <main+0x1ec0>)
 80021a8:	f004 ff98 	bl	80070dc <memset>
									spiFlash_Read(nfc_addr_start, cnt_flash_t, rd_test_buff);
 80021ac:	4b90      	ldr	r3, [pc, #576]	; (80023f0 <main+0x1ec4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a90      	ldr	r2, [pc, #576]	; (80023f4 <main+0x1ec8>)
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	b291      	uxth	r1, r2
 80021b6:	4a8d      	ldr	r2, [pc, #564]	; (80023ec <main+0x1ec0>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 faed 	bl	8005798 <spiFlash_Read>
									nfc_cnt_addr = 4096;
 80021be:	4b91      	ldr	r3, [pc, #580]	; (8002404 <main+0x1ed8>)
 80021c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c4:	601a      	str	r2, [r3, #0]
									nfc_flash_addr = 12288;
 80021c6:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <main+0x1ecc>)
 80021c8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80021cc:	601a      	str	r2, [r3, #0]
									Safe_Flash_Erase(nfc_cnt_addr);
 80021ce:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <main+0x1ed8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 f8b6 	bl	8005344 <Safe_Flash_Erase>
									Safe_Flash_Erase(nfc_flash_addr);
 80021d8:	4b87      	ldr	r3, [pc, #540]	; (80023f8 <main+0x1ecc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 f8b1 	bl	8005344 <Safe_Flash_Erase>
									val_cnt = 0;
 80021e2:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <main+0x1ebc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 80021e8:	4b86      	ldr	r3, [pc, #536]	; (8002404 <main+0x1ed8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a86      	ldr	r2, [pc, #536]	; (8002408 <main+0x1edc>)
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	b291      	uxth	r1, r2
 80021f2:	4a7d      	ldr	r2, [pc, #500]	; (80023e8 <main+0x1ebc>)
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 f83d 	bl	8005274 <Set_Cnt_to_Flash>
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 80021fa:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <main+0x1ecc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7f      	ldr	r2, [pc, #508]	; (80023fc <main+0x1ed0>)
 8002200:	8811      	ldrh	r1, [r2, #0]
 8002202:	4a7f      	ldr	r2, [pc, #508]	; (8002400 <main+0x1ed4>)
 8002204:	4618      	mov	r0, r3
 8002206:	f002 ffcd 	bl	80051a4 <Write_data_2Flash>
									nfc_cnt_addr = 4097;
 800220a:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <main+0x1ed8>)
 800220c:	f241 0201 	movw	r2, #4097	; 0x1001
 8002210:	601a      	str	r2, [r3, #0]
									val_cnt = 1;
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <main+0x1ebc>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8002218:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <main+0x1ed8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a7a      	ldr	r2, [pc, #488]	; (8002408 <main+0x1edc>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	b291      	uxth	r1, r2
 8002222:	4a71      	ldr	r2, [pc, #452]	; (80023e8 <main+0x1ebc>)
 8002224:	4618      	mov	r0, r3
 8002226:	f003 f825 	bl	8005274 <Set_Cnt_to_Flash>
									}

									memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	2100      	movs	r1, #0
 800222e:	486f      	ldr	r0, [pc, #444]	; (80023ec <main+0x1ec0>)
 8002230:	f004 ff54 	bl	80070dc <memset>
									spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8002234:	4b75      	ldr	r3, [pc, #468]	; (800240c <main+0x1ee0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <main+0x1ec8>)
 800223a:	7812      	ldrb	r2, [r2, #0]
 800223c:	b291      	uxth	r1, r2
 800223e:	4a6b      	ldr	r2, [pc, #428]	; (80023ec <main+0x1ec0>)
 8002240:	4618      	mov	r0, r3
 8002242:	f003 faa9 	bl	8005798 <spiFlash_Read>

									memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	2100      	movs	r1, #0
 800224a:	4868      	ldr	r0, [pc, #416]	; (80023ec <main+0x1ec0>)
 800224c:	f004 ff46 	bl	80070dc <memset>
									spiFlash_Read(nfc_flash_addr, cnt_flash_t, rd_test_buff);
 8002250:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <main+0x1ecc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a67      	ldr	r2, [pc, #412]	; (80023f4 <main+0x1ec8>)
 8002256:	7812      	ldrb	r2, [r2, #0]
 8002258:	b291      	uxth	r1, r2
 800225a:	4a64      	ldr	r2, [pc, #400]	; (80023ec <main+0x1ec0>)
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fa9b 	bl	8005798 <spiFlash_Read>

									SpiActive = 0;
 8002262:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <main+0x1ee4>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
									PN532_SPIInit();
 8002268:	f003 f930 	bl	80054cc <PN532_SPIInit>


									s_pn_uiddecdata[0] = 0x30+(decuid/1000000000);
 800226c:	4b69      	ldr	r3, [pc, #420]	; (8002414 <main+0x1ee8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0a5b      	lsrs	r3, r3, #9
 8002272:	4a69      	ldr	r2, [pc, #420]	; (8002418 <main+0x1eec>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	09db      	lsrs	r3, r3, #7
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3330      	adds	r3, #48	; 0x30
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <main+0x1ef0>)
 8002282:	701a      	strb	r2, [r3, #0]
									s_pn_uiddecdata[1] = 0x30+(decuid/100000000%10);
 8002284:	4b63      	ldr	r3, [pc, #396]	; (8002414 <main+0x1ee8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a65      	ldr	r2, [pc, #404]	; (8002420 <main+0x1ef4>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0e59      	lsrs	r1, r3, #25
 8002290:	4b64      	ldr	r3, [pc, #400]	; (8002424 <main+0x1ef8>)
 8002292:	fba3 2301 	umull	r2, r3, r3, r1
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	1aca      	subs	r2, r1, r3
 80022a2:	b2d3      	uxtb	r3, r2
 80022a4:	3330      	adds	r3, #48	; 0x30
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b5c      	ldr	r3, [pc, #368]	; (800241c <main+0x1ef0>)
 80022aa:	705a      	strb	r2, [r3, #1]
									s_pn_uiddecdata[2] = 0x30+(decuid/10000000%10);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <main+0x1ee8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	; (8002428 <main+0x1efc>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0d99      	lsrs	r1, r3, #22
 80022b8:	4b5a      	ldr	r3, [pc, #360]	; (8002424 <main+0x1ef8>)
 80022ba:	fba3 2301 	umull	r2, r3, r3, r1
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	1aca      	subs	r2, r1, r3
 80022ca:	b2d3      	uxtb	r3, r2
 80022cc:	3330      	adds	r3, #48	; 0x30
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b52      	ldr	r3, [pc, #328]	; (800241c <main+0x1ef0>)
 80022d2:	709a      	strb	r2, [r3, #2]
									s_pn_uiddecdata[3] = 0x30+(decuid/1000000%10);
 80022d4:	4b4f      	ldr	r3, [pc, #316]	; (8002414 <main+0x1ee8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <main+0x1f00>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0c99      	lsrs	r1, r3, #18
 80022e0:	4b50      	ldr	r3, [pc, #320]	; (8002424 <main+0x1ef8>)
 80022e2:	fba3 2301 	umull	r2, r3, r3, r1
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	1aca      	subs	r2, r1, r3
 80022f2:	b2d3      	uxtb	r3, r2
 80022f4:	3330      	adds	r3, #48	; 0x30
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b48      	ldr	r3, [pc, #288]	; (800241c <main+0x1ef0>)
 80022fa:	70da      	strb	r2, [r3, #3]
									s_pn_uiddecdata[4] = 0x30+(decuid/100000%10);
 80022fc:	4b45      	ldr	r3, [pc, #276]	; (8002414 <main+0x1ee8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <main+0x1f04>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	09d9      	lsrs	r1, r3, #7
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <main+0x1ef8>)
 800230c:	fba3 2301 	umull	r2, r3, r3, r1
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	1aca      	subs	r2, r1, r3
 800231c:	b2d3      	uxtb	r3, r2
 800231e:	3330      	adds	r3, #48	; 0x30
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <main+0x1ef0>)
 8002324:	711a      	strb	r2, [r3, #4]
									s_pn_uiddecdata[5] = 0x30+(decuid/10000%10);
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <main+0x1ee8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a42      	ldr	r2, [pc, #264]	; (8002434 <main+0x1f08>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0b59      	lsrs	r1, r3, #13
 8002332:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <main+0x1ef8>)
 8002334:	fba3 2301 	umull	r2, r3, r3, r1
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	1aca      	subs	r2, r1, r3
 8002344:	b2d3      	uxtb	r3, r2
 8002346:	3330      	adds	r3, #48	; 0x30
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b34      	ldr	r3, [pc, #208]	; (800241c <main+0x1ef0>)
 800234c:	715a      	strb	r2, [r3, #5]
									s_pn_uiddecdata[6] = 0x30+(decuid/1000%10);
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <main+0x1ee8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a39      	ldr	r2, [pc, #228]	; (8002438 <main+0x1f0c>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0999      	lsrs	r1, r3, #6
 800235a:	4b32      	ldr	r3, [pc, #200]	; (8002424 <main+0x1ef8>)
 800235c:	fba3 2301 	umull	r2, r3, r3, r1
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	1aca      	subs	r2, r1, r3
 800236c:	b2d3      	uxtb	r3, r2
 800236e:	3330      	adds	r3, #48	; 0x30
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <main+0x1ef0>)
 8002374:	719a      	strb	r2, [r3, #6]
									s_pn_uiddecdata[7] = 0x30+(decuid/100%10);
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <main+0x1ee8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a30      	ldr	r2, [pc, #192]	; (800243c <main+0x1f10>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	0959      	lsrs	r1, r3, #5
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <main+0x1ef8>)
 8002384:	fba3 2301 	umull	r2, r3, r3, r1
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	1aca      	subs	r2, r1, r3
 8002394:	b2d3      	uxtb	r3, r2
 8002396:	3330      	adds	r3, #48	; 0x30
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <main+0x1ef0>)
 800239c:	71da      	strb	r2, [r3, #7]
									s_pn_uiddecdata[8] = 0x30+(decuid/10%10);
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <main+0x1ee8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a20      	ldr	r2, [pc, #128]	; (8002424 <main+0x1ef8>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	08d9      	lsrs	r1, r3, #3
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <main+0x1ef8>)
 80023ac:	fba3 2301 	umull	r2, r3, r3, r1
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	1aca      	subs	r2, r1, r3
 80023bc:	b2d3      	uxtb	r3, r2
 80023be:	3330      	adds	r3, #48	; 0x30
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <main+0x1ef0>)
 80023c4:	721a      	strb	r2, [r3, #8]
									s_pn_uiddecdata[9] = 0x30+(decuid%10);
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <main+0x1ee8>)
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <main+0x1ef8>)
 80023cc:	fba3 2301 	umull	r2, r3, r3, r1
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	1aca      	subs	r2, r1, r3
 80023dc:	b2d3      	uxtb	r3, r2
 80023de:	3330      	adds	r3, #48	; 0x30
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <main+0x1ef0>)
 80023e4:	725a      	strb	r2, [r3, #9]
 80023e6:	e02b      	b.n	8002440 <main+0x1f14>
 80023e8:	2000093a 	.word	0x2000093a
 80023ec:	200009d4 	.word	0x200009d4
 80023f0:	20000930 	.word	0x20000930
 80023f4:	2000091c 	.word	0x2000091c
 80023f8:	20000944 	.word	0x20000944
 80023fc:	20000d0e 	.word	0x20000d0e
 8002400:	200009c4 	.word	0x200009c4
 8002404:	20000950 	.word	0x20000950
 8002408:	20000939 	.word	0x20000939
 800240c:	20000934 	.word	0x20000934
 8002410:	20000d26 	.word	0x20000d26
 8002414:	20000728 	.word	0x20000728
 8002418:	00044b83 	.word	0x00044b83
 800241c:	200001b0 	.word	0x200001b0
 8002420:	55e63b89 	.word	0x55e63b89
 8002424:	cccccccd 	.word	0xcccccccd
 8002428:	6b5fca6b 	.word	0x6b5fca6b
 800242c:	431bde83 	.word	0x431bde83
 8002430:	0a7c5ac5 	.word	0x0a7c5ac5
 8002434:	d1b71759 	.word	0xd1b71759
 8002438:	10624dd3 	.word	0x10624dd3
 800243c:	51eb851f 	.word	0x51eb851f

									Usart2_SendData(s_pn_uiddecvalue,strlen(s_pn_uiddecvalue));
 8002440:	48a9      	ldr	r0, [pc, #676]	; (80026e8 <main+0x21bc>)
 8002442:	f7fd fe83 	bl	800014c <strlen>
 8002446:	4603      	mov	r3, r0
 8002448:	4619      	mov	r1, r3
 800244a:	48a7      	ldr	r0, [pc, #668]	; (80026e8 <main+0x21bc>)
 800244c:	f004 fb9a 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_pn_uiddecdata,strlen(s_pn_uiddecdata));
 8002450:	48a6      	ldr	r0, [pc, #664]	; (80026ec <main+0x21c0>)
 8002452:	f7fd fe7b 	bl	800014c <strlen>
 8002456:	4603      	mov	r3, r0
 8002458:	4619      	mov	r1, r3
 800245a:	48a4      	ldr	r0, [pc, #656]	; (80026ec <main+0x21c0>)
 800245c:	f004 fb92 	bl	8006b84 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8002460:	48a3      	ldr	r0, [pc, #652]	; (80026f0 <main+0x21c4>)
 8002462:	f7fd fe73 	bl	800014c <strlen>
 8002466:	4603      	mov	r3, r0
 8002468:	4619      	mov	r1, r3
 800246a:	48a1      	ldr	r0, [pc, #644]	; (80026f0 <main+0x21c4>)
 800246c:	f004 fb8a 	bl	8006b84 <Usart2_SendData>
									//memset(g_sBarCode,0,strlen(g_sBarCode));
									//strlcpy ( g_sBarCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );


									//if(b_firstrddata==DISABLE){
										LCD_SetCursor ( LCD_CURSOR_1STR );
 8002470:	2080      	movs	r0, #128	; 0x80
 8002472:	f001 f9d1 	bl	8003818 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8002476:	489f      	ldr	r0, [pc, #636]	; (80026f4 <main+0x21c8>)
 8002478:	f001 fa7e 	bl	8003978 <LCD_WriteString>
										LCD_SetCursor ( LCD_CURSOR_2STR );
 800247c:	20c0      	movs	r0, #192	; 0xc0
 800247e:	f001 f9cb 	bl	8003818 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8002482:	489c      	ldr	r0, [pc, #624]	; (80026f4 <main+0x21c8>)
 8002484:	f001 fa78 	bl	8003978 <LCD_WriteString>
										//b_firstrddata=ENABLE;

									//}

									memset(g_sNfcCode,0,strlen(g_sNfcCode));
 8002488:	489b      	ldr	r0, [pc, #620]	; (80026f8 <main+0x21cc>)
 800248a:	f7fd fe5f 	bl	800014c <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	4898      	ldr	r0, [pc, #608]	; (80026f8 <main+0x21cc>)
 8002496:	f004 fe21 	bl	80070dc <memset>

									  strlcpy ( g_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 800249a:	221a      	movs	r2, #26
 800249c:	4997      	ldr	r1, [pc, #604]	; (80026fc <main+0x21d0>)
 800249e:	4896      	ldr	r0, [pc, #600]	; (80026f8 <main+0x21cc>)
 80024a0:	f004 fe3b 	bl	800711a <strlcpy>
									  strcat(g_sNfcCode, s_pn_uiddecdata );
 80024a4:	4991      	ldr	r1, [pc, #580]	; (80026ec <main+0x21c0>)
 80024a6:	4894      	ldr	r0, [pc, #592]	; (80026f8 <main+0x21cc>)
 80024a8:	f004 fe20 	bl	80070ec <strcat>

									//strlcpy ( g_sNfcCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );

									//LCD_SetCursor ( LCD_CURSOR_1STR );
									//LCD_WriteString ( s_lcd_nfc );
									LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 0 );
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 7148 	mov.w	r1, #800	; 0x320
 80024b2:	4891      	ldr	r0, [pc, #580]	; (80026f8 <main+0x21cc>)
 80024b4:	f001 fc28 	bl	8003d08 <LCD_RunStringNFCCode>
									BytesHex2Str(rdDataBlock, sizeof(rdDataBlock), DataHex2pc);
										Usart2_SendData(DataHex2pc,sizeof(DataHex2pc));
										Usart2_SendData(s_newline,strlen(s_newline));
*/
									//}
										timer = RTC_GET_COUNTER();
 80024b8:	f002 fa80 	bl	80049bc <RTC_GET_COUNTER>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a90      	ldr	r2, [pc, #576]	; (8002700 <main+0x21d4>)
 80024c0:	6013      	str	r3, [r2, #0]
										timer_to_cal(timer, &rtc_time);
 80024c2:	4b8f      	ldr	r3, [pc, #572]	; (8002700 <main+0x21d4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1d3a      	adds	r2, r7, #4
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fad0 	bl	8004a70 <timer_to_cal>
										tim = cal_to_timer(&rtc_time);
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fbb6 	bl	8004c44 <cal_to_timer>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a8a      	ldr	r2, [pc, #552]	; (8002704 <main+0x21d8>)
 80024dc:	6013      	str	r3, [r2, #0]

										//*xxx*yyyy-MM-dd HH:mm:ss
										convert_time_2android(&rtc_time);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 fd6b 	bl	8004fbc <convert_time_2android>

										strncat(s_nfc_tag_date, s_cal_data, 19);
 80024e6:	2213      	movs	r2, #19
 80024e8:	4987      	ldr	r1, [pc, #540]	; (8002708 <main+0x21dc>)
 80024ea:	4888      	ldr	r0, [pc, #544]	; (800270c <main+0x21e0>)
 80024ec:	f004 fe2a 	bl	8007144 <strncat>
										strcat(s_nfc_tag_date, s_space);
 80024f0:	4987      	ldr	r1, [pc, #540]	; (8002710 <main+0x21e4>)
 80024f2:	4886      	ldr	r0, [pc, #536]	; (800270c <main+0x21e0>)
 80024f4:	f004 fdfa 	bl	80070ec <strcat>
										strncat(s_nfc_tag_date, g_sNfcCode, strlen(g_sNfcCode));
 80024f8:	487f      	ldr	r0, [pc, #508]	; (80026f8 <main+0x21cc>)
 80024fa:	f7fd fe27 	bl	800014c <strlen>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	497d      	ldr	r1, [pc, #500]	; (80026f8 <main+0x21cc>)
 8002504:	4881      	ldr	r0, [pc, #516]	; (800270c <main+0x21e0>)
 8002506:	f004 fe1d 	bl	8007144 <strncat>
										strncat(s_nfc_tag_date, s_newline, strlen(s_newline));
 800250a:	4879      	ldr	r0, [pc, #484]	; (80026f0 <main+0x21c4>)
 800250c:	f7fd fe1e 	bl	800014c <strlen>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	4976      	ldr	r1, [pc, #472]	; (80026f0 <main+0x21c4>)
 8002516:	487d      	ldr	r0, [pc, #500]	; (800270c <main+0x21e0>)
 8002518:	f004 fe14 	bl	8007144 <strncat>



									//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
										Usart2_SendData(s_nfc_tag_date,strlen(s_nfc_tag_date));
 800251c:	487b      	ldr	r0, [pc, #492]	; (800270c <main+0x21e0>)
 800251e:	f7fd fe15 	bl	800014c <strlen>
 8002522:	4603      	mov	r3, r0
 8002524:	4619      	mov	r1, r3
 8002526:	4879      	ldr	r0, [pc, #484]	; (800270c <main+0x21e0>)
 8002528:	f004 fb2c 	bl	8006b84 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 800252c:	4870      	ldr	r0, [pc, #448]	; (80026f0 <main+0x21c4>)
 800252e:	f7fd fe0d 	bl	800014c <strlen>
 8002532:	4603      	mov	r3, r0
 8002534:	4619      	mov	r1, r3
 8002536:	486e      	ldr	r0, [pc, #440]	; (80026f0 <main+0x21c4>)
 8002538:	f004 fb24 	bl	8006b84 <Usart2_SendData>

										memset(s_nfc_tag_date, 0, strlen(s_nfc_tag_date));
 800253c:	4873      	ldr	r0, [pc, #460]	; (800270c <main+0x21e0>)
 800253e:	f7fd fe05 	bl	800014c <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	4870      	ldr	r0, [pc, #448]	; (800270c <main+0x21e0>)
 800254a:	f004 fdc7 	bl	80070dc <memset>

								}
								if(!success)
 800254e:	4b71      	ldr	r3, [pc, #452]	; (8002714 <main+0x21e8>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <main+0x2030>
								{

									//Usart2_SendData(s_pn_notfoundcard,sizeof(s_pn_notfoundcard));
									b_discannfc=0;
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <main+0x21ec>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]

								}

								cntlooppn532=0;
 800255c:	4b6f      	ldr	r3, [pc, #444]	; (800271c <main+0x21f0>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
							}//конец if(cntlooppn532==CNT_LOOP_PN532)

							cntlooppn532++;
 8002562:	4b6e      	ldr	r3, [pc, #440]	; (800271c <main+0x21f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	4a6c      	ldr	r2, [pc, #432]	; (800271c <main+0x21f0>)
 800256a:	6013      	str	r3, [r2, #0]

							LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 1 );
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002572:	4861      	ldr	r0, [pc, #388]	; (80026f8 <main+0x21cc>)
 8002574:	f001 fbc8 	bl	8003d08 <LCD_RunStringNFCCode>
 8002578:	e014      	b.n	80025a4 <main+0x2078>

		}//конец если не режим записи метки NFC
		else{ //если режим записи метки NFC


			if(!b_1secflg){
 800257a:	4b69      	ldr	r3, [pc, #420]	; (8002720 <main+0x21f4>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <main+0x2064>
				LCD_SetCursor ( LCD_CURSOR_2STR );
 8002582:	20c0      	movs	r0, #192	; 0xc0
 8002584:	f001 f948 	bl	8003818 <LCD_SetCursor>
				LCD_WriteString (uidnfcwrdara );
 8002588:	4866      	ldr	r0, [pc, #408]	; (8002724 <main+0x21f8>)
 800258a:	f001 f9f5 	bl	8003978 <LCD_WriteString>
 800258e:	e009      	b.n	80025a4 <main+0x2078>

			}
			else{
				LCD_SetCursor ( LCD_CURSOR_2STR+u8_cntindex );
 8002590:	4b65      	ldr	r3, [pc, #404]	; (8002728 <main+0x21fc>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	3b40      	subs	r3, #64	; 0x40
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	f001 f93d 	bl	8003818 <LCD_SetCursor>
				LCD_WriteString (s_space);
 800259e:	485c      	ldr	r0, [pc, #368]	; (8002710 <main+0x21e4>)
 80025a0:	f001 f9ea 	bl	8003978 <LCD_WriteString>

			}
		}


		if(u8_wrnfcstatus!=0 && b_wrstr1==TRUE){
 80025a4:	4b61      	ldr	r3, [pc, #388]	; (800272c <main+0x2200>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01a      	beq.n	80025e2 <main+0x20b6>
 80025ac:	4b60      	ldr	r3, [pc, #384]	; (8002730 <main+0x2204>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d116      	bne.n	80025e2 <main+0x20b6>
			   memset(g_sBarCode,0,strlen(g_sBarCode));
 80025b4:	485f      	ldr	r0, [pc, #380]	; (8002734 <main+0x2208>)
 80025b6:	f7fd fdc9 	bl	800014c <strlen>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	2100      	movs	r1, #0
 80025c0:	485c      	ldr	r0, [pc, #368]	; (8002734 <main+0x2208>)
 80025c2:	f004 fd8b 	bl	80070dc <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_wrnfc, USB_STATE_LEN );
 80025c6:	221a      	movs	r2, #26
 80025c8:	495b      	ldr	r1, [pc, #364]	; (8002738 <main+0x220c>)
 80025ca:	485a      	ldr	r0, [pc, #360]	; (8002734 <main+0x2208>)
 80025cc:	f004 fda5 	bl	800711a <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80025d6:	4857      	ldr	r0, [pc, #348]	; (8002734 <main+0x2208>)
 80025d8:	f001 fb02 	bl	8003be0 <LCD_RunStringBARCode>
			  b_wrstr1=FALSE;
 80025dc:	4b54      	ldr	r3, [pc, #336]	; (8002730 <main+0x2204>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
		}

		LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 1 );
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80025e8:	4852      	ldr	r0, [pc, #328]	; (8002734 <main+0x2208>)
 80025ea:	f001 faf9 	bl	8003be0 <LCD_RunStringBARCode>

		if(u8_wrnfcstatus==9){
 80025ee:	4b4f      	ldr	r3, [pc, #316]	; (800272c <main+0x2200>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	f47e aacf 	bne.w	8000b96 <main+0x66a>
			PN532_WriteTagtoHex();
 80025f8:	f000 fce0 	bl	8002fbc <PN532_WriteTagtoHex>

			//b_hextostr = fourbytes2strhex (&outwrdata[0], &uidhex2pc4b[0]);

			Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 80025fc:	484f      	ldr	r0, [pc, #316]	; (800273c <main+0x2210>)
 80025fe:	f7fd fda5 	bl	800014c <strlen>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	484d      	ldr	r0, [pc, #308]	; (800273c <main+0x2210>)
 8002608:	f004 fabc 	bl	8006b84 <Usart2_SendData>
			Usart2_SendData(outwrdata,sizeof(outwrdata));
 800260c:	2104      	movs	r1, #4
 800260e:	484c      	ldr	r0, [pc, #304]	; (8002740 <main+0x2214>)
 8002610:	f004 fab8 	bl	8006b84 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8002614:	4836      	ldr	r0, [pc, #216]	; (80026f0 <main+0x21c4>)
 8002616:	f7fd fd99 	bl	800014c <strlen>
 800261a:	4603      	mov	r3, r0
 800261c:	4619      	mov	r1, r3
 800261e:	4834      	ldr	r0, [pc, #208]	; (80026f0 <main+0x21c4>)
 8002620:	f004 fab0 	bl	8006b84 <Usart2_SendData>

			pn532_wr_stat=PN532_Write_Data(uid,uidLength, 1, outwrdata);
 8002624:	4b47      	ldr	r3, [pc, #284]	; (8002744 <main+0x2218>)
 8002626:	7819      	ldrb	r1, [r3, #0]
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <main+0x2214>)
 800262a:	2201      	movs	r2, #1
 800262c:	4846      	ldr	r0, [pc, #280]	; (8002748 <main+0x221c>)
 800262e:	f7fd fecd 	bl	80003cc <PN532_Write_Data>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b45      	ldr	r3, [pc, #276]	; (800274c <main+0x2220>)
 8002638:	701a      	strb	r2, [r3, #0]

			switch(pn532_wr_stat){
 800263a:	4b44      	ldr	r3, [pc, #272]	; (800274c <main+0x2220>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b04      	cmp	r3, #4
 8002640:	f200 809f 	bhi.w	8002782 <main+0x2256>
 8002644:	a201      	add	r2, pc, #4	; (adr r2, 800264c <main+0x2120>)
 8002646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264a:	bf00      	nop
 800264c:	08002661 	.word	0x08002661
 8002650:	08002683 	.word	0x08002683
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026c7 	.word	0x080026c7
 800265c:	08002761 	.word	0x08002761
			case 0:
				Usart2_SendData(s_pc_PN532_info2,strlen(s_pc_PN532_info2));
 8002660:	483b      	ldr	r0, [pc, #236]	; (8002750 <main+0x2224>)
 8002662:	f7fd fd73 	bl	800014c <strlen>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	4839      	ldr	r0, [pc, #228]	; (8002750 <main+0x2224>)
 800266c:	f004 fa8a 	bl	8006b84 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002670:	481f      	ldr	r0, [pc, #124]	; (80026f0 <main+0x21c4>)
 8002672:	f7fd fd6b 	bl	800014c <strlen>
 8002676:	4603      	mov	r3, r0
 8002678:	4619      	mov	r1, r3
 800267a:	481d      	ldr	r0, [pc, #116]	; (80026f0 <main+0x21c4>)
 800267c:	f004 fa82 	bl	8006b84 <Usart2_SendData>
				break;
 8002680:	e07f      	b.n	8002782 <main+0x2256>
			case 1:
				Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 8002682:	4834      	ldr	r0, [pc, #208]	; (8002754 <main+0x2228>)
 8002684:	f7fd fd62 	bl	800014c <strlen>
 8002688:	4603      	mov	r3, r0
 800268a:	4619      	mov	r1, r3
 800268c:	4831      	ldr	r0, [pc, #196]	; (8002754 <main+0x2228>)
 800268e:	f004 fa79 	bl	8006b84 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002692:	4817      	ldr	r0, [pc, #92]	; (80026f0 <main+0x21c4>)
 8002694:	f7fd fd5a 	bl	800014c <strlen>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	4814      	ldr	r0, [pc, #80]	; (80026f0 <main+0x21c4>)
 800269e:	f004 fa71 	bl	8006b84 <Usart2_SendData>
				break;
 80026a2:	e06e      	b.n	8002782 <main+0x2256>
			case 2:
				Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 80026a4:	482c      	ldr	r0, [pc, #176]	; (8002758 <main+0x222c>)
 80026a6:	f7fd fd51 	bl	800014c <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4619      	mov	r1, r3
 80026ae:	482a      	ldr	r0, [pc, #168]	; (8002758 <main+0x222c>)
 80026b0:	f004 fa68 	bl	8006b84 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 80026b4:	480e      	ldr	r0, [pc, #56]	; (80026f0 <main+0x21c4>)
 80026b6:	f7fd fd49 	bl	800014c <strlen>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4619      	mov	r1, r3
 80026be:	480c      	ldr	r0, [pc, #48]	; (80026f0 <main+0x21c4>)
 80026c0:	f004 fa60 	bl	8006b84 <Usart2_SendData>
				break;
 80026c4:	e05d      	b.n	8002782 <main+0x2256>
			case 3:
				Usart2_SendData(s_pc_PN532_err2,strlen(s_pc_PN532_err2));
 80026c6:	4825      	ldr	r0, [pc, #148]	; (800275c <main+0x2230>)
 80026c8:	f7fd fd40 	bl	800014c <strlen>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4619      	mov	r1, r3
 80026d0:	4822      	ldr	r0, [pc, #136]	; (800275c <main+0x2230>)
 80026d2:	f004 fa57 	bl	8006b84 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <main+0x21c4>)
 80026d8:	f7fd fd38 	bl	800014c <strlen>
 80026dc:	4603      	mov	r3, r0
 80026de:	4619      	mov	r1, r3
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <main+0x21c4>)
 80026e2:	f004 fa4f 	bl	8006b84 <Usart2_SendData>
				break;
 80026e6:	e04c      	b.n	8002782 <main+0x2256>
 80026e8:	200001bc 	.word	0x200001bc
 80026ec:	200001b0 	.word	0x200001b0
 80026f0:	20000168 	.word	0x20000168
 80026f4:	200000b4 	.word	0x200000b4
 80026f8:	200005c8 	.word	0x200005c8
 80026fc:	200000e0 	.word	0x200000e0
 8002700:	20000318 	.word	0x20000318
 8002704:	2000090c 	.word	0x2000090c
 8002708:	20000260 	.word	0x20000260
 800270c:	200008cc 	.word	0x200008cc
 8002710:	200001d0 	.word	0x200001d0
 8002714:	20000712 	.word	0x20000712
 8002718:	20000711 	.word	0x20000711
 800271c:	2000072c 	.word	0x2000072c
 8002720:	20000730 	.word	0x20000730
 8002724:	20000020 	.word	0x20000020
 8002728:	2000071c 	.word	0x2000071c
 800272c:	2000073f 	.word	0x2000073f
 8002730:	20000740 	.word	0x20000740
 8002734:	20000590 	.word	0x20000590
 8002738:	200000c8 	.word	0x200000c8
 800273c:	20000198 	.word	0x20000198
 8002740:	20000720 	.word	0x20000720
 8002744:	20000724 	.word	0x20000724
 8002748:	20000714 	.word	0x20000714
 800274c:	20000741 	.word	0x20000741
 8002750:	20000278 	.word	0x20000278
 8002754:	20000294 	.word	0x20000294
 8002758:	200002fc 	.word	0x200002fc
 800275c:	200002b8 	.word	0x200002b8
			case 4:
				Usart2_SendData(s_pc_PN532_err3,strlen(s_pc_PN532_err3));
 8002760:	4817      	ldr	r0, [pc, #92]	; (80027c0 <main+0x2294>)
 8002762:	f7fd fcf3 	bl	800014c <strlen>
 8002766:	4603      	mov	r3, r0
 8002768:	4619      	mov	r1, r3
 800276a:	4815      	ldr	r0, [pc, #84]	; (80027c0 <main+0x2294>)
 800276c:	f004 fa0a 	bl	8006b84 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002770:	4814      	ldr	r0, [pc, #80]	; (80027c4 <main+0x2298>)
 8002772:	f7fd fceb 	bl	800014c <strlen>
 8002776:	4603      	mov	r3, r0
 8002778:	4619      	mov	r1, r3
 800277a:	4812      	ldr	r0, [pc, #72]	; (80027c4 <main+0x2298>)
 800277c:	f004 fa02 	bl	8006b84 <Usart2_SendData>
				break;
 8002780:	bf00      	nop

			}

			//PN532_WriteID();

			u8_wrnfcstatus=0;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <main+0x229c>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]

			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8002788:	4810      	ldr	r0, [pc, #64]	; (80027cc <main+0x22a0>)
 800278a:	f7fd fcdf 	bl	800014c <strlen>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	2100      	movs	r1, #0
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <main+0x22a0>)
 8002796:	f004 fca1 	bl	80070dc <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_scanner_rdy, USB_STATE_LEN );
 800279a:	221a      	movs	r2, #26
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <main+0x22a4>)
 800279e:	480b      	ldr	r0, [pc, #44]	; (80027cc <main+0x22a0>)
 80027a0:	f004 fcbb 	bl	800711a <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80027aa:	4808      	ldr	r0, [pc, #32]	; (80027cc <main+0x22a0>)
 80027ac:	f001 fa18 	bl	8003be0 <LCD_RunStringBARCode>


			//LCD_SetCursor ( LCD_CURSOR_1STR );
		//	LCD_WriteString (s_lcd_scanner_rdy );

			LCD_SetCursor ( LCD_CURSOR_2STR );
 80027b0:	20c0      	movs	r0, #192	; 0xc0
 80027b2:	f001 f831 	bl	8003818 <LCD_SetCursor>
			LCD_WriteString (s_lcd_ready );
 80027b6:	4807      	ldr	r0, [pc, #28]	; (80027d4 <main+0x22a8>)
 80027b8:	f001 f8de 	bl	8003978 <LCD_WriteString>
	while(1){
 80027bc:	f7fe b9eb 	b.w	8000b96 <main+0x66a>
 80027c0:	200002d4 	.word	0x200002d4
 80027c4:	20000168 	.word	0x20000168
 80027c8:	2000073f 	.word	0x2000073f
 80027cc:	20000590 	.word	0x20000590
 80027d0:	20000034 	.word	0x20000034
 80027d4:	20000064 	.word	0x20000064

080027d8 <NVIC_EnableIRQ>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2201      	movs	r2, #1
 80027ea:	fa02 f103 	lsl.w	r1, r2, r3
 80027ee:	4a05      	ldr	r2, [pc, #20]	; (8002804 <NVIC_EnableIRQ+0x2c>)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100

08002808 <LED_Init>:

NVIC_InitTypeDef        NVIC_InitTmr1Structure;
EXTI_InitTypeDef		EXTI_InitExtiStruct;
NVIC_InitTypeDef		NVIC_InitExtiStruct;

void LED_Init(void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0


	/*
	 * EXTI pin configure
	 */
	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );
 800280e:	2101      	movs	r1, #1
 8002810:	2004      	movs	r0, #4
 8002812:	f003 fd77 	bl	8006304 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8002816:	2302      	movs	r3, #2
 8002818:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 800281a:	2310      	movs	r3, #16
 800281c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
 800281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002822:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	4619      	mov	r1, r3
 8002828:	4806      	ldr	r0, [pc, #24]	; (8002844 <LED_Init+0x3c>)
 800282a:	f003 f9d7 	bl	8005bdc <GPIO_Init>
//#define LED_GPIO_PORT					GPIOA
//#define LED_PIN							GPIO_Pin_12


	GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002834:	4803      	ldr	r0, [pc, #12]	; (8002844 <LED_Init+0x3c>)
 8002836:	f003 faa6 	bl	8005d86 <GPIO_WriteBit>
//	NVIC_InitStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitStruct );
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40010800 	.word	0x40010800

08002848 <BTN_Init>:





void BTN_Init(void) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	/*
	 * EXTI pin configure
	 */
	BTN_RCC_PERIPH_CLOCK_CMD ( BTN_RCC_GPIO_PORT, ENABLE );
 800284e:	2101      	movs	r1, #1
 8002850:	2008      	movs	r0, #8
 8002852:	f003 fd57 	bl	8006304 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8002856:	2302      	movs	r3, #2
 8002858:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 800285a:	2348      	movs	r3, #72	; 0x48
 800285c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = BTN_PIN;
 800285e:	2301      	movs	r3, #1
 8002860:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( BTN_GPIO_PORT, &GPIO_InitStruct );
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4803      	ldr	r0, [pc, #12]	; (8002874 <BTN_Init+0x2c>)
 8002868:	f003 f9b8 	bl	8005bdc <GPIO_Init>
//	NVIC_InitExtiStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitExtiStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitExtiStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitExtiStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitExtiStruct );
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40010c00 	.word	0x40010c00

08002878 <BTN_IRQHandler>:



void BTN_IRQHandler ( void ) {
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus ( BTN_EXTI_LINE ) == SET) {
 800287c:	2001      	movs	r0, #1
 800287e:	f003 f985 	bl	8005b8c <EXTI_GetFlagStatus>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d134      	bne.n	80028f2 <BTN_IRQHandler+0x7a>
		if(u8_btnstate==BTN_UNPRESSED){
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <BTN_IRQHandler+0x80>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d117      	bne.n	80028c0 <BTN_IRQHandler+0x48>

		  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <BTN_IRQHandler+0x84>)
 8002892:	2200      	movs	r2, #0
 8002894:	70da      	strb	r2, [r3, #3]
		  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <BTN_IRQHandler+0x88>)
 8002898:	2208      	movs	r2, #8
 800289a:	715a      	strb	r2, [r3, #5]
		  NVIC_Init ( &NVIC_InitExtiStruct );
 800289c:	4817      	ldr	r0, [pc, #92]	; (80028fc <BTN_IRQHandler+0x84>)
 800289e:	f003 f913 	bl	8005ac8 <NVIC_Init>
		  cnttimer1=0;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <BTN_IRQHandler+0x8c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	801a      	strh	r2, [r3, #0]
		  u8_btnstate=BTN_PRESSED;
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <BTN_IRQHandler+0x80>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
		  EnableTimer1Interrupt();
 80028ae:	f000 f869 	bl	8002984 <EnableTimer1Interrupt>
		  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 1);
 80028b2:	2201      	movs	r2, #1
 80028b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b8:	4813      	ldr	r0, [pc, #76]	; (8002908 <BTN_IRQHandler+0x90>)
 80028ba:	f003 fa64 	bl	8005d86 <GPIO_WriteBit>
 80028be:	e015      	b.n	80028ec <BTN_IRQHandler+0x74>
		}
		else{
			//DisableTimer1Interrupt
			  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <BTN_IRQHandler+0x84>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	70da      	strb	r2, [r3, #3]
			  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <BTN_IRQHandler+0x88>)
 80028c8:	220c      	movs	r2, #12
 80028ca:	715a      	strb	r2, [r3, #5]
			  NVIC_Init ( &NVIC_InitExtiStruct );
 80028cc:	480b      	ldr	r0, [pc, #44]	; (80028fc <BTN_IRQHandler+0x84>)
 80028ce:	f003 f8fb 	bl	8005ac8 <NVIC_Init>
			  timer1data=cnttimer1;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <BTN_IRQHandler+0x8c>)
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <BTN_IRQHandler+0x94>)
 80028d8:	801a      	strh	r2, [r3, #0]
			  u8_btnstate=BTN_UNPRESSED;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <BTN_IRQHandler+0x80>)
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
			  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e6:	4808      	ldr	r0, [pc, #32]	; (8002908 <BTN_IRQHandler+0x90>)
 80028e8:	f003 fa4d 	bl	8005d86 <GPIO_WriteBit>
//		}
//		else{
//			GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
//			b_ledbtnstate=FALSE;
//		}
		EXTI_ClearITPendingBit ( BTN_EXTI_LINE );
 80028ec:	2001      	movs	r0, #1
 80028ee:	f003 f967 	bl	8005bc0 <EXTI_ClearITPendingBit>


	}
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000739 	.word	0x20000739
 80028fc:	20000b00 	.word	0x20000b00
 8002900:	20000af8 	.word	0x20000af8
 8002904:	20000736 	.word	0x20000736
 8002908:	40010800 	.word	0x40010800
 800290c:	2000073a 	.word	0x2000073a

08002910 <Timer1Init>:


void Timer1Init(void)	{		//	(функция инициализации таймера)
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
TIM_TimeBaseInitTypeDef		TIMER1_InitStruct;


//	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002916:	2101      	movs	r1, #1
 8002918:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800291c:	f003 fcf2 	bl	8006304 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );

*/
	TIMER1_InitStruct.TIM_Prescaler=TIMER1_PRESCALER-1;	//предделитель 720-1
 8002920:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002924:	80bb      	strh	r3, [r7, #4]
	TIMER1_InitStruct.TIM_CounterMode=TIM_CounterMode_Up;	//режим прямого счета
 8002926:	2300      	movs	r3, #0
 8002928:	80fb      	strh	r3, [r7, #6]
	TIMER1_InitStruct.TIM_Period=TIMER1_RELOAD_PERIOD;		//множитель периодов?
 800292a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800292e:	813b      	strh	r3, [r7, #8]
	TIMER1_InitStruct.TIM_ClockDivision=TIM_CKD_DIV1;		//делитель самого таймера(можно не ставить)
 8002930:	2300      	movs	r3, #0
 8002932:	817b      	strh	r3, [r7, #10]
	TIMER1_InitStruct.TIM_RepetitionCounter=0x0000;		//счетчик повторов?
 8002934:	2300      	movs	r3, #0
 8002936:	733b      	strb	r3, [r7, #12]
	TIM_TimeBaseInit(TIM1,&TIMER1_InitStruct);
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	4619      	mov	r1, r3
 800293c:	480f      	ldr	r0, [pc, #60]	; (800297c <Timer1Init+0x6c>)
 800293e:	f003 fe33 	bl	80065a8 <TIM_TimeBaseInit>


	//timer1data=1;
    NVIC_InitTmr1Structure.NVIC_IRQChannel = TIM1_UP_IRQn;
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <Timer1Init+0x70>)
 8002944:	2219      	movs	r2, #25
 8002946:	701a      	strb	r2, [r3, #0]
    NVIC_InitTmr1Structure.NVIC_IRQChannelPreemptionPriority = 0;
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <Timer1Init+0x70>)
 800294a:	2200      	movs	r2, #0
 800294c:	705a      	strb	r2, [r3, #1]
    NVIC_InitTmr1Structure.NVIC_IRQChannelSubPriority = 1;
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <Timer1Init+0x70>)
 8002950:	2201      	movs	r2, #1
 8002952:	709a      	strb	r2, [r3, #2]
    NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = DISABLE;
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <Timer1Init+0x70>)
 8002956:	2200      	movs	r2, #0
 8002958:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitTmr1Structure);
 800295a:	4809      	ldr	r0, [pc, #36]	; (8002980 <Timer1Init+0x70>)
 800295c:	f003 f8b4 	bl	8005ac8 <NVIC_Init>

	TIM_ITConfig(TIM1, TIM_IT_Update, DISABLE);
 8002960:	2200      	movs	r2, #0
 8002962:	2101      	movs	r1, #1
 8002964:	4805      	ldr	r0, [pc, #20]	; (800297c <Timer1Init+0x6c>)
 8002966:	f003 feba 	bl	80066de <TIM_ITConfig>
	TIM_Cmd(TIM1,DISABLE);
 800296a:	2100      	movs	r1, #0
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <Timer1Init+0x6c>)
 800296e:	f003 fe97 	bl	80066a0 <TIM_Cmd>


	//NVIC_EnableIRQ(TIM1_UP_IRQn);


}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	20000af4 	.word	0x20000af4

08002984 <EnableTimer1Interrupt>:



void EnableTimer1Interrupt()
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    //NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = ENABLE;
    //NVIC_Init(&NVIC_InitTmr1Structure);
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8002988:	2201      	movs	r2, #1
 800298a:	2101      	movs	r1, #1
 800298c:	4805      	ldr	r0, [pc, #20]	; (80029a4 <EnableTimer1Interrupt+0x20>)
 800298e:	f003 fea6 	bl	80066de <TIM_ITConfig>
	TIM_Cmd(TIM1,ENABLE);
 8002992:	2101      	movs	r1, #1
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <EnableTimer1Interrupt+0x20>)
 8002996:	f003 fe83 	bl	80066a0 <TIM_Cmd>

    NVIC_EnableIRQ(TIM1_UP_IRQn);
 800299a:	2019      	movs	r0, #25
 800299c:	f7ff ff1c 	bl	80027d8 <NVIC_EnableIRQ>

}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40012c00 	.word	0x40012c00

080029a8 <TIM1_IRQHandler>:




void TIM1_IRQHandler()
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
uint8_t u8_cntindex;
//--------------------------------------------------------------------------------------------

 */

	if(TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET){
 80029ac:	2101      	movs	r1, #1
 80029ae:	4887      	ldr	r0, [pc, #540]	; (8002bcc <TIM1_IRQHandler+0x224>)
 80029b0:	f003 feb8 	bl	8006724 <TIM_GetITStatus>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8105 	beq.w	8002bc6 <TIM1_IRQHandler+0x21e>


		if (GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN ) == Bit_RESET) {//если кнопка нажата
 80029bc:	2101      	movs	r1, #1
 80029be:	4884      	ldr	r0, [pc, #528]	; (8002bd0 <TIM1_IRQHandler+0x228>)
 80029c0:	f003 f9c8 	bl	8005d54 <GPIO_ReadInputDataBit>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d12d      	bne.n	8002a26 <TIM1_IRQHandler+0x7e>

			   if (previousState==1){
 80029ca:	4b82      	ldr	r3, [pc, #520]	; (8002bd4 <TIM1_IRQHandler+0x22c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d106      	bne.n	80029e0 <TIM1_IRQHandler+0x38>
				   u8_btnstate=0;
 80029d2:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <TIM1_IRQHandler+0x230>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
				   cnttimer1=0;
 80029d8:	4b80      	ldr	r3, [pc, #512]	; (8002bdc <TIM1_IRQHandler+0x234>)
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e0ea      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>

				}
			   else{
				   cnttimer1++;
 80029e0:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <TIM1_IRQHandler+0x234>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <TIM1_IRQHandler+0x234>)
 80029ea:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==60 && u8_wrnfcstatus==0) {
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <TIM1_IRQHandler+0x234>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2b3c      	cmp	r3, #60	; 0x3c
 80029f2:	f040 80e0 	bne.w	8002bb6 <TIM1_IRQHandler+0x20e>
 80029f6:	4b7a      	ldr	r3, [pc, #488]	; (8002be0 <TIM1_IRQHandler+0x238>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 80db 	bne.w	8002bb6 <TIM1_IRQHandler+0x20e>

					   u8_wrnfcstatus=1; b_wrstr1=TRUE;//флаг выдачи первой строки в режиме записи
 8002a00:	4b77      	ldr	r3, [pc, #476]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <TIM1_IRQHandler+0x23c>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
					   u8_cntchar=0; u8_cntindex=0;
 8002a0c:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
					   b_1secflg=FALSE;
 8002a18:	4b75      	ldr	r3, [pc, #468]	; (8002bf0 <TIM1_IRQHandler+0x248>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
					   cnttimer1sec=0;
 8002a1e:	4b75      	ldr	r3, [pc, #468]	; (8002bf4 <TIM1_IRQHandler+0x24c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e0c7      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
			   }

		}
		else{//если кнопка не нажата

			 if(previousState==0){
 8002a26:	4b6b      	ldr	r3, [pc, #428]	; (8002bd4 <TIM1_IRQHandler+0x22c>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d131      	bne.n	8002a92 <TIM1_IRQHandler+0xea>
				 u8_btnstate=1;
 8002a2e:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <TIM1_IRQHandler+0x230>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
				 cnttimer1=0;
 8002a34:	4b69      	ldr	r3, [pc, #420]	; (8002bdc <TIM1_IRQHandler+0x234>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	801a      	strh	r2, [r3, #0]
				 cnttimer30sec=0;
 8002a3a:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <TIM1_IRQHandler+0x250>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	801a      	strh	r2, [r3, #0]
				 switch (u8_wrnfcstatus){
 8002a40:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	2b07      	cmp	r3, #7
 8002a48:	f200 80b5 	bhi.w	8002bb6 <TIM1_IRQHandler+0x20e>
				 case 4:
				 case 5:
				 case 6:
				 case 7:
				 case 8:
					    u8_cntchar++;
 8002a4c:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a56:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar>15) u8_cntchar=0;
 8002a58:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b0f      	cmp	r3, #15
 8002a5e:	d902      	bls.n	8002a66 <TIM1_IRQHandler+0xbe>
 8002a60:	4b61      	ldr	r3, [pc, #388]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar<10){
 8002a66:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	d808      	bhi.n	8002a80 <TIM1_IRQHandler+0xd8>
					       uidnfcwrdara[u8_cntindex]= 48 + u8_cntchar;
 8002a6e:	4b5e      	ldr	r3, [pc, #376]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	4a5e      	ldr	r2, [pc, #376]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	3330      	adds	r3, #48	; 0x30
 8002a78:	b2d9      	uxtb	r1, r3
 8002a7a:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <TIM1_IRQHandler+0x254>)
 8002a7c:	5499      	strb	r1, [r3, r2]
					    }
					    else{
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
					    }
					 break;
 8002a7e:	e09a      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
 8002a80:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4a59      	ldr	r2, [pc, #356]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	3337      	adds	r3, #55	; 0x37
 8002a8a:	b2d9      	uxtb	r1, r3
 8002a8c:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <TIM1_IRQHandler+0x254>)
 8002a8e:	5499      	strb	r1, [r3, r2]
					 break;
 8002a90:	e091      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
				 }

				}

			   else{
				   cnttimer30sec++;
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <TIM1_IRQHandler+0x250>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <TIM1_IRQHandler+0x250>)
 8002a9c:	801a      	strh	r2, [r3, #0]
				   if(cnttimer30sec==600){
 8002a9e:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <TIM1_IRQHandler+0x250>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002aa6:	d105      	bne.n	8002ab4 <TIM1_IRQHandler+0x10c>
					   u8_wrnfcstatus=0;
 8002aa8:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
					   cnttimer30sec=0;
 8002aae:	4b52      	ldr	r3, [pc, #328]	; (8002bf8 <TIM1_IRQHandler+0x250>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	801a      	strh	r2, [r3, #0]
				   }


				   cnttimer1sec++;
 8002ab4:	4b4f      	ldr	r3, [pc, #316]	; (8002bf4 <TIM1_IRQHandler+0x24c>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	4b4d      	ldr	r3, [pc, #308]	; (8002bf4 <TIM1_IRQHandler+0x24c>)
 8002abe:	801a      	strh	r2, [r3, #0]
				   if(cnttimer1sec==10){
 8002ac0:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <TIM1_IRQHandler+0x24c>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	2b0a      	cmp	r3, #10
 8002ac6:	d108      	bne.n	8002ada <TIM1_IRQHandler+0x132>
					   cnttimer1sec=0;
 8002ac8:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <TIM1_IRQHandler+0x24c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]
					   b_1secflg=~b_1secflg;
 8002ace:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <TIM1_IRQHandler+0x248>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <TIM1_IRQHandler+0x248>)
 8002ad8:	701a      	strb	r2, [r3, #0]
				   }

				   cnttimer1++;
 8002ada:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <TIM1_IRQHandler+0x234>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <TIM1_IRQHandler+0x234>)
 8002ae4:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==100 ) {
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <TIM1_IRQHandler+0x234>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d162      	bne.n	8002bb4 <TIM1_IRQHandler+0x20c>
					   switch (u8_wrnfcstatus){
 8002aee:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	2b07      	cmp	r3, #7
 8002af6:	d85e      	bhi.n	8002bb6 <TIM1_IRQHandler+0x20e>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <TIM1_IRQHandler+0x158>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b21 	.word	0x08002b21
 8002b04:	08002b35 	.word	0x08002b35
 8002b08:	08002b49 	.word	0x08002b49
 8002b0c:	08002b5d 	.word	0x08002b5d
 8002b10:	08002b71 	.word	0x08002b71
 8002b14:	08002b85 	.word	0x08002b85
 8002b18:	08002b99 	.word	0x08002b99
 8002b1c:	08002bad 	.word	0x08002bad
					   case 1:
						   u8_wrnfcstatus=2;
 8002b20:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002b22:	2202      	movs	r2, #2
 8002b24:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=1;
 8002b26:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
						   break;
 8002b32:	e040      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   case 2:
						   u8_wrnfcstatus=3;
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002b36:	2203      	movs	r2, #3
 8002b38:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=2;
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
						   break;
 8002b46:	e036      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   case 3:
						   u8_wrnfcstatus=4;
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=3;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002b56:	2203      	movs	r2, #3
 8002b58:	701a      	strb	r2, [r3, #0]
						   break;
 8002b5a:	e02c      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   case 4:
						   u8_wrnfcstatus=5;
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002b5e:	2205      	movs	r2, #5
 8002b60:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=4;
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	701a      	strb	r2, [r3, #0]
						   break;
 8002b6e:	e022      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   case 5:
						   u8_wrnfcstatus=6;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002b72:	2206      	movs	r2, #6
 8002b74:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=5;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002b7e:	2205      	movs	r2, #5
 8002b80:	701a      	strb	r2, [r3, #0]
						   break;
 8002b82:	e018      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   case 6:
						   u8_wrnfcstatus=7;
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002b86:	2207      	movs	r2, #7
 8002b88:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=6;
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002b92:	2206      	movs	r2, #6
 8002b94:	701a      	strb	r2, [r3, #0]
						   break;
 8002b96:	e00e      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   case 7:
						   u8_wrnfcstatus=8;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=7;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <TIM1_IRQHandler+0x240>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <TIM1_IRQHandler+0x244>)
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	701a      	strb	r2, [r3, #0]
						   break;
 8002baa:	e004      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   case 8:
					   		u8_wrnfcstatus=9;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <TIM1_IRQHandler+0x238>)
 8002bae:	2209      	movs	r2, #9
 8002bb0:	701a      	strb	r2, [r3, #0]

					   		break;
 8002bb2:	e000      	b.n	8002bb6 <TIM1_IRQHandler+0x20e>
					   }

				   }
 8002bb4:	bf00      	nop
			   }

		}

		previousState=u8_btnstate;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <TIM1_IRQHandler+0x230>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <TIM1_IRQHandler+0x22c>)
 8002bbc:	701a      	strb	r2, [r3, #0]
//	}
//



    TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4802      	ldr	r0, [pc, #8]	; (8002bcc <TIM1_IRQHandler+0x224>)
 8002bc2:	f003 fdd8 	bl	8006776 <TIM_ClearITPendingBit>

	}
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40010c00 	.word	0x40010c00
 8002bd4:	20000738 	.word	0x20000738
 8002bd8:	20000739 	.word	0x20000739
 8002bdc:	20000736 	.word	0x20000736
 8002be0:	2000073f 	.word	0x2000073f
 8002be4:	20000740 	.word	0x20000740
 8002be8:	2000071b 	.word	0x2000071b
 8002bec:	2000071c 	.word	0x2000071c
 8002bf0:	20000730 	.word	0x20000730
 8002bf4:	20000734 	.word	0x20000734
 8002bf8:	20000732 	.word	0x20000732
 8002bfc:	20000020 	.word	0x20000020

08002c00 <GetTickCount>:

uint32_t GetTickCount() {
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
	return tick;
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <GetTickCount+0x10>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000b04 	.word	0x20000b04

08002c14 <PN532_FirmWareVersion2String>:


void PN532_FirmWareVersion2String(uint32_t version){
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

		 pn_chip=version>>24;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0e1b      	lsrs	r3, r3, #24
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <PN532_FirmWareVersion2String+0x13c>)
 8002c24:	701a      	strb	r2, [r3, #0]
		 pn_fw1chip=version>>16;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <PN532_FirmWareVersion2String+0x140>)
 8002c2e:	701a      	strb	r2, [r3, #0]
		 pn_fw2chip=version>>8;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b48      	ldr	r3, [pc, #288]	; (8002d58 <PN532_FirmWareVersion2String+0x144>)
 8002c38:	701a      	strb	r2, [r3, #0]
		 pn_suppchip=version&0xFF;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <PN532_FirmWareVersion2String+0x148>)
 8002c40:	701a      	strb	r2, [r3, #0]

		 s_pn_nchip[0] = 0x30 + (pn_chip >> 4);
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <PN532_FirmWareVersion2String+0x13c>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3330      	adds	r3, #48	; 0x30
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b44      	ldr	r3, [pc, #272]	; (8002d60 <PN532_FirmWareVersion2String+0x14c>)
 8002c50:	701a      	strb	r2, [r3, #0]
		 s_pn_nchip[1] = 0x30 + (pn_chip & 0x0F);
 8002c52:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <PN532_FirmWareVersion2String+0x13c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3330      	adds	r3, #48	; 0x30
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <PN532_FirmWareVersion2String+0x14c>)
 8002c62:	705a      	strb	r2, [r3, #1]

		 s_pn_fw1nchip[0] = 0x30+(pn_fw1chip/100);
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <PN532_FirmWareVersion2String+0x140>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4a3e      	ldr	r2, [pc, #248]	; (8002d64 <PN532_FirmWareVersion2String+0x150>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3330      	adds	r3, #48	; 0x30
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <PN532_FirmWareVersion2String+0x154>)
 8002c78:	701a      	strb	r2, [r3, #0]
		 s_pn_fw1nchip[1] = 0x30+(pn_fw1chip/10%10);
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <PN532_FirmWareVersion2String+0x140>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <PN532_FirmWareVersion2String+0x158>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <PN532_FirmWareVersion2String+0x158>)
 8002c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8e:	08d9      	lsrs	r1, r3, #3
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3330      	adds	r3, #48	; 0x30
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <PN532_FirmWareVersion2String+0x154>)
 8002ca2:	705a      	strb	r2, [r3, #1]
		 s_pn_fw1nchip[2] = 0x30+(pn_fw1chip%10);
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <PN532_FirmWareVersion2String+0x140>)
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <PN532_FirmWareVersion2String+0x158>)
 8002caa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cae:	08d9      	lsrs	r1, r3, #3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3330      	adds	r3, #48	; 0x30
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <PN532_FirmWareVersion2String+0x154>)
 8002cc2:	709a      	strb	r2, [r3, #2]

		 s_pn_fw2nchip[0] = 0x30+(pn_fw2chip/100);
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <PN532_FirmWareVersion2String+0x144>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <PN532_FirmWareVersion2String+0x150>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3330      	adds	r3, #48	; 0x30
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <PN532_FirmWareVersion2String+0x15c>)
 8002cd8:	701a      	strb	r2, [r3, #0]
		 s_pn_fw2nchip[1] = 0x30+(pn_fw2chip/10%10);
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <PN532_FirmWareVersion2String+0x144>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <PN532_FirmWareVersion2String+0x158>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <PN532_FirmWareVersion2String+0x158>)
 8002cea:	fba3 1302 	umull	r1, r3, r3, r2
 8002cee:	08d9      	lsrs	r1, r3, #3
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3330      	adds	r3, #48	; 0x30
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <PN532_FirmWareVersion2String+0x15c>)
 8002d02:	705a      	strb	r2, [r3, #1]
		 s_pn_fw2nchip[2] = 0x30+(pn_fw2chip%10);
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <PN532_FirmWareVersion2String+0x144>)
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <PN532_FirmWareVersion2String+0x158>)
 8002d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0e:	08d9      	lsrs	r1, r3, #3
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3330      	adds	r3, #48	; 0x30
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <PN532_FirmWareVersion2String+0x15c>)
 8002d22:	709a      	strb	r2, [r3, #2]

		 s_pn_suchip[0] = 0x30 + (pn_suppchip >> 4);
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <PN532_FirmWareVersion2String+0x148>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3330      	adds	r3, #48	; 0x30
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <PN532_FirmWareVersion2String+0x160>)
 8002d32:	701a      	strb	r2, [r3, #0]
		 s_pn_suchip[1] = 0x30 + (pn_suppchip & 0x0F);
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <PN532_FirmWareVersion2String+0x148>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	3330      	adds	r3, #48	; 0x30
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <PN532_FirmWareVersion2String+0x160>)
 8002d44:	705a      	strb	r2, [r3, #1]

}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	20000742 	.word	0x20000742
 8002d54:	20000743 	.word	0x20000743
 8002d58:	20000744 	.word	0x20000744
 8002d5c:	20000745 	.word	0x20000745
 8002d60:	200001dc 	.word	0x200001dc
 8002d64:	51eb851f 	.word	0x51eb851f
 8002d68:	200001e0 	.word	0x200001e0
 8002d6c:	cccccccd 	.word	0xcccccccd
 8002d70:	200001e4 	.word	0x200001e4
 8002d74:	200001e8 	.word	0x200001e8

08002d78 <ValueInterrupToStr>:



void ValueInterrupToStr(){
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
	b_bounce_value[0] = 0x30+(testtimer1/10000%10);
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <ValueInterrupToStr+0xe0>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	4a36      	ldr	r2, [pc, #216]	; (8002e5c <ValueInterrupToStr+0xe4>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <ValueInterrupToStr+0xe8>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	08d9      	lsrs	r1, r3, #3
 8002d92:	460b      	mov	r3, r1
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3330      	adds	r3, #48	; 0x30
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <ValueInterrupToStr+0xec>)
 8002da6:	701a      	strb	r2, [r3, #0]
	b_bounce_value[1] = 0x30+(testtimer1/1000%10);
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <ValueInterrupToStr+0xe0>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	4a2e      	ldr	r2, [pc, #184]	; (8002e68 <ValueInterrupToStr+0xf0>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	099b      	lsrs	r3, r3, #6
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <ValueInterrupToStr+0xe8>)
 8002db8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbc:	08d9      	lsrs	r1, r3, #3
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3330      	adds	r3, #48	; 0x30
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <ValueInterrupToStr+0xec>)
 8002dd2:	705a      	strb	r2, [r3, #1]
	b_bounce_value[2] = 0x30+(testtimer1/100%10);
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <ValueInterrupToStr+0xe0>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	4a24      	ldr	r2, [pc, #144]	; (8002e6c <ValueInterrupToStr+0xf4>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <ValueInterrupToStr+0xe8>)
 8002de4:	fba3 1302 	umull	r1, r3, r3, r2
 8002de8:	08d9      	lsrs	r1, r3, #3
 8002dea:	460b      	mov	r3, r1
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	3330      	adds	r3, #48	; 0x30
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <ValueInterrupToStr+0xec>)
 8002dfe:	709a      	strb	r2, [r3, #2]
	b_bounce_value[3] = 0x30+(testtimer1/10%10);
 8002e00:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <ValueInterrupToStr+0xe0>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <ValueInterrupToStr+0xe8>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	08db      	lsrs	r3, r3, #3
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <ValueInterrupToStr+0xe8>)
 8002e10:	fba3 1302 	umull	r1, r3, r3, r2
 8002e14:	08d9      	lsrs	r1, r3, #3
 8002e16:	460b      	mov	r3, r1
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3330      	adds	r3, #48	; 0x30
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <ValueInterrupToStr+0xec>)
 8002e2a:	70da      	strb	r2, [r3, #3]
	b_bounce_value[4] = 0x30+(testtimer1%10);
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <ValueInterrupToStr+0xe0>)
 8002e2e:	881a      	ldrh	r2, [r3, #0]
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <ValueInterrupToStr+0xe8>)
 8002e32:	fba3 1302 	umull	r1, r3, r3, r2
 8002e36:	08d9      	lsrs	r1, r3, #3
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3330      	adds	r3, #48	; 0x30
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <ValueInterrupToStr+0xec>)
 8002e4c:	711a      	strb	r2, [r3, #4]

}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	2000073c 	.word	0x2000073c
 8002e5c:	d1b71759 	.word	0xd1b71759
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	20000258 	.word	0x20000258
 8002e68:	10624dd3 	.word	0x10624dd3
 8002e6c:	51eb851f 	.word	0x51eb851f

08002e70 <fourbytes2strhex>:



bool fourbytes2strhex(uint8_t *indatarray, uint8_t *outstrhex){
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
	uint8_t b=0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73bb      	strb	r3, [r7, #14]
	uint8_t th=0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	737b      	strb	r3, [r7, #13]
	uint8_t tl=0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	733b      	strb	r3, [r7, #12]

		for ( b=0; b<4; b++){
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73bb      	strb	r3, [r7, #14]
 8002e8e:	e05a      	b.n	8002f46 <fourbytes2strhex+0xd6>


			th = indatarray[b] >> 4;
 8002e90:	7bbb      	ldrb	r3, [r7, #14]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	737b      	strb	r3, [r7, #13]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 8002e9c:	7b7b      	ldrb	r3, [r7, #13]
 8002e9e:	2b09      	cmp	r3, #9
 8002ea0:	d803      	bhi.n	8002eaa <fourbytes2strhex+0x3a>
 8002ea2:	7b7b      	ldrb	r3, [r7, #13]
 8002ea4:	3330      	adds	r3, #48	; 0x30
 8002ea6:	737b      	strb	r3, [r7, #13]
 8002ea8:	e008      	b.n	8002ebc <fourbytes2strhex+0x4c>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 8002eaa:	7b7b      	ldrb	r3, [r7, #13]
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	d905      	bls.n	8002ebc <fourbytes2strhex+0x4c>
 8002eb0:	7b7b      	ldrb	r3, [r7, #13]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d802      	bhi.n	8002ebc <fourbytes2strhex+0x4c>
 8002eb6:	7b7b      	ldrb	r3, [r7, #13]
 8002eb8:	3337      	adds	r3, #55	; 0x37
 8002eba:	737b      	strb	r3, [r7, #13]
			}

			tl = indatarray[b]& 0x0F;
 8002ebc:	7bbb      	ldrb	r3, [r7, #14]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	733b      	strb	r3, [r7, #12]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 8002eca:	7b3b      	ldrb	r3, [r7, #12]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d803      	bhi.n	8002ed8 <fourbytes2strhex+0x68>
 8002ed0:	7b3b      	ldrb	r3, [r7, #12]
 8002ed2:	3330      	adds	r3, #48	; 0x30
 8002ed4:	733b      	strb	r3, [r7, #12]
 8002ed6:	e008      	b.n	8002eea <fourbytes2strhex+0x7a>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 8002ed8:	7b3b      	ldrb	r3, [r7, #12]
 8002eda:	2b09      	cmp	r3, #9
 8002edc:	d905      	bls.n	8002eea <fourbytes2strhex+0x7a>
 8002ede:	7b3b      	ldrb	r3, [r7, #12]
 8002ee0:	2b0f      	cmp	r3, #15
 8002ee2:	d802      	bhi.n	8002eea <fourbytes2strhex+0x7a>
 8002ee4:	7b3b      	ldrb	r3, [r7, #12]
 8002ee6:	3337      	adds	r3, #55	; 0x37
 8002ee8:	733b      	strb	r3, [r7, #12]

			}

			outstrhex[i] = '0';	i++;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	2230      	movs	r2, #48	; 0x30
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = 'x';	i++;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	2278      	movs	r2, #120	; 0x78
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	3301      	adds	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = th;  i++;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	7b7a      	ldrb	r2, [r7, #13]
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	3301      	adds	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = tl;	i++;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	7b3a      	ldrb	r2, [r7, #12]
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	3301      	adds	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
			//outstrhex[i] = ' '; i++;
			if(i<18){ outstrhex[i] = ' '; i++; }
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b11      	cmp	r3, #17
 8002f2e:	d807      	bhi.n	8002f40 <fourbytes2strhex+0xd0>
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	4413      	add	r3, r2
 8002f36:	2220      	movs	r2, #32
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
		for ( b=0; b<4; b++){
 8002f40:	7bbb      	ldrb	r3, [r7, #14]
 8002f42:	3301      	adds	r3, #1
 8002f44:	73bb      	strb	r3, [r7, #14]
 8002f46:	7bbb      	ldrb	r3, [r7, #14]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d9a1      	bls.n	8002e90 <fourbytes2strhex+0x20>


		}
		return 1;
 8002f4c:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <UIDResponse>:



uint32_t UIDResponse(uint8_t *uid,  uint8_t uidLength){
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
	uint32_t result;
	result=0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

	if(uidLength==4){
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d120      	bne.n	8002fb0 <UIDResponse+0x58>

		result = uid[0];
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	60fb      	str	r3, [r7, #12]
		result |= uid[1];
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	60fb      	str	r3, [r7, #12]
		result |= uid[2];
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3302      	adds	r3, #2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	60fb      	str	r3, [r7, #12]
		result |= uid[3];
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3303      	adds	r3, #3
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
	}
return result;
 8002fb0:	68fb      	ldr	r3, [r7, #12]

}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <PN532_WriteTagtoHex>:
	//else{
	//	return 0;
	//}
}

void PN532_WriteTagtoHex(){
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
	uint8_t u8_cntindex;
	//--------------------------------------------------------------------------------------------

	 */

	uint8_t k=0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx=0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	71bb      	strb	r3, [r7, #6]
	uint8_t x=0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	717b      	strb	r3, [r7, #5]

	for ( x=0; x<4 ; x++){
 8002fce:	2300      	movs	r3, #0
 8002fd0:	717b      	strb	r3, [r7, #5]
 8002fd2:	e055      	b.n	8003080 <PN532_WriteTagtoHex+0xc4>


				//tx = uidnfcwrdara[k];

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	2b2f      	cmp	r3, #47	; 0x2f
 8002fdc:	d90a      	bls.n	8002ff4 <PN532_WriteTagtoHex+0x38>
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	2b39      	cmp	r3, #57	; 0x39
 8002fe6:	d805      	bhi.n	8002ff4 <PN532_WriteTagtoHex+0x38>
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8002fec:	5cd3      	ldrb	r3, [r2, r3]
 8002fee:	3b30      	subs	r3, #48	; 0x30
 8002ff0:	71bb      	strb	r3, [r7, #6]
 8002ff2:	e00e      	b.n	8003012 <PN532_WriteTagtoHex+0x56>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8002ff8:	5cd3      	ldrb	r3, [r2, r3]
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d909      	bls.n	8003012 <PN532_WriteTagtoHex+0x56>
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8003002:	5cd3      	ldrb	r3, [r2, r3]
 8003004:	2b46      	cmp	r3, #70	; 0x46
 8003006:	d804      	bhi.n	8003012 <PN532_WriteTagtoHex+0x56>
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	3b37      	subs	r3, #55	; 0x37
 8003010:	71bb      	strb	r3, [r7, #6]
				}

				outwrdata[x]=tx<<4;
 8003012:	797b      	ldrb	r3, [r7, #5]
 8003014:	79ba      	ldrb	r2, [r7, #6]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d1      	uxtb	r1, r2
 800301a:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <PN532_WriteTagtoHex+0xdc>)
 800301c:	54d1      	strb	r1, [r2, r3]
				k++;
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	3301      	adds	r3, #1
 8003022:	71fb      	strb	r3, [r7, #7]

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	2b2f      	cmp	r3, #47	; 0x2f
 800302c:	d90a      	bls.n	8003044 <PN532_WriteTagtoHex+0x88>
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	2b39      	cmp	r3, #57	; 0x39
 8003036:	d805      	bhi.n	8003044 <PN532_WriteTagtoHex+0x88>
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 800303c:	5cd3      	ldrb	r3, [r2, r3]
 800303e:	3b30      	subs	r3, #48	; 0x30
 8003040:	71bb      	strb	r3, [r7, #6]
 8003042:	e00e      	b.n	8003062 <PN532_WriteTagtoHex+0xa6>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d909      	bls.n	8003062 <PN532_WriteTagtoHex+0xa6>
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	4a10      	ldr	r2, [pc, #64]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	2b46      	cmp	r3, #70	; 0x46
 8003056:	d804      	bhi.n	8003062 <PN532_WriteTagtoHex+0xa6>
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <PN532_WriteTagtoHex+0xd8>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	3b37      	subs	r3, #55	; 0x37
 8003060:	71bb      	strb	r3, [r7, #6]
				}
				outwrdata[x]|=tx;
 8003062:	797b      	ldrb	r3, [r7, #5]
 8003064:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <PN532_WriteTagtoHex+0xdc>)
 8003066:	5cd1      	ldrb	r1, [r2, r3]
 8003068:	797b      	ldrb	r3, [r7, #5]
 800306a:	79ba      	ldrb	r2, [r7, #6]
 800306c:	430a      	orrs	r2, r1
 800306e:	b2d1      	uxtb	r1, r2
 8003070:	4a09      	ldr	r2, [pc, #36]	; (8003098 <PN532_WriteTagtoHex+0xdc>)
 8003072:	54d1      	strb	r1, [r2, r3]
				k++;
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	3301      	adds	r3, #1
 8003078:	71fb      	strb	r3, [r7, #7]
	for ( x=0; x<4 ; x++){
 800307a:	797b      	ldrb	r3, [r7, #5]
 800307c:	3301      	adds	r3, #1
 800307e:	717b      	strb	r3, [r7, #5]
 8003080:	797b      	ldrb	r3, [r7, #5]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d9a6      	bls.n	8002fd4 <PN532_WriteTagtoHex+0x18>

			}


}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000020 	.word	0x20000020
 8003098:	20000720 	.word	0x20000720

0800309c <spi_gpio_init>:



void spi_gpio_init(void){
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  		GPIO_InitStruct;

	SPI_RCC_PORT_CLOCK_CMD ( SPI_RCC_PORT, ENABLE);
 80030a2:	2101      	movs	r1, #1
 80030a4:	2008      	movs	r0, #8
 80030a6:	f003 f92d 	bl	8006304 <RCC_APB2PeriphClockCmd>
	SPI_RCC_PERIPH_CLOCK_CMD ( SPI_RCC_APBPORT, ENABLE );
 80030aa:	2101      	movs	r1, #1
 80030ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030b0:	f003 f946 	bl	8006340 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 80030b4:	2303      	movs	r3, #3
 80030b6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode =  GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 80030b8:	2318      	movs	r3, #24
 80030ba:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MOSI_PIN | SPI_SCK_PIN;
 80030bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80030c0:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	480e      	ldr	r0, [pc, #56]	; (8003100 <spi_gpio_init+0x64>)
 80030c8:	f002 fd88 	bl	8005bdc <GPIO_Init>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 80030cc:	2303      	movs	r3, #3
 80030ce:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;//GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 80030d0:	2310      	movs	r3, #16
 80030d2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_NSS_PIN | SPI_FLASH_NSS;
 80030d4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80030d8:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <spi_gpio_init+0x64>)
 80030e0:	f002 fd7c 	bl	8005bdc <GPIO_Init>


	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;//GPIO_Mode_AF_PP;//GPIO_Mode_IN_FLOATING;//GPIO_Mode_IPU;
 80030e4:	2348      	movs	r3, #72	; 0x48
 80030e6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MISO_PIN;
 80030e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030ec:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4803      	ldr	r0, [pc, #12]	; (8003100 <spi_gpio_init+0x64>)
 80030f4:	f002 fd72 	bl	8005bdc <GPIO_Init>





}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40010c00 	.word	0x40010c00

08003104 <bcode_conv_to_flash>:



uint64_t bcode_conv_to_flash(uint32_t rtc_time, char *bar_buff){
 8003104:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]

	uint8_t s;
	char *pBar = bar_buff;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	613b      	str	r3, [r7, #16]
	if(bar_buff[0] =='\n'){
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b0a      	cmp	r3, #10
 800311a:	d102      	bne.n	8003122 <bcode_conv_to_flash+0x1e>
		*pBar++;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	3301      	adds	r3, #1
 8003120:	613b      	str	r3, [r7, #16]
	}
	for(int i = 0; i < 13; i++){
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e00b      	b.n	8003140 <bcode_conv_to_flash+0x3c>
		barcode[i] = *pBar++;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	613a      	str	r2, [r7, #16]
 800312e:	7819      	ldrb	r1, [r3, #0]
 8003130:	4a3c      	ldr	r2, [pc, #240]	; (8003224 <bcode_conv_to_flash+0x120>)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4413      	add	r3, r2
 8003136:	460a      	mov	r2, r1
 8003138:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 13; i++){
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	ddf0      	ble.n	8003128 <bcode_conv_to_flash+0x24>
	}

	for(int a=0;a<7;a++){
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	e05e      	b.n	800320a <bcode_conv_to_flash+0x106>
		if(a==0){
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d114      	bne.n	800317c <bcode_conv_to_flash+0x78>
			s=barcode[a]-0x30;
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <bcode_conv_to_flash+0x120>)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	3b30      	subs	r3, #48	; 0x30
 800315c:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a+1]-0x30;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3301      	adds	r3, #1
 8003168:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <bcode_conv_to_flash+0x120>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	3b30      	subs	r3, #48	; 0x30
 800316e:	b2db      	uxtb	r3, r3
 8003170:	b25a      	sxtb	r2, r3
 8003172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003176:	4313      	orrs	r3, r2
 8003178:	b25b      	sxtb	r3, r3
 800317a:	75fb      	strb	r3, [r7, #23]
		}
		if(a>0 && a<=5){
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	dd18      	ble.n	80031b4 <bcode_conv_to_flash+0xb0>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b05      	cmp	r3, #5
 8003186:	dc15      	bgt.n	80031b4 <bcode_conv_to_flash+0xb0>
			s=barcode[a*2]-0x30;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4a25      	ldr	r2, [pc, #148]	; (8003224 <bcode_conv_to_flash+0x120>)
 800318e:	5cd3      	ldrb	r3, [r2, r3]
 8003190:	3b30      	subs	r3, #48	; 0x30
 8003192:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a*2+1]-0x30;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	3301      	adds	r3, #1
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <bcode_conv_to_flash+0x120>)
 80031a2:	5cd3      	ldrb	r3, [r2, r3]
 80031a4:	3b30      	subs	r3, #48	; 0x30
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	b25a      	sxtb	r2, r3
 80031aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b25b      	sxtb	r3, r3
 80031b2:	75fb      	strb	r3, [r7, #23]
		}
		if(a==6){
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d108      	bne.n	80031cc <bcode_conv_to_flash+0xc8>
			s=barcode[a*2]-0x30;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <bcode_conv_to_flash+0x120>)
 80031c0:	5cd3      	ldrb	r3, [r2, r3]
 80031c2:	3b30      	subs	r3, #48	; 0x30
 80031c4:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	75fb      	strb	r3, [r7, #23]
		}

		bcode<<=8;
 80031cc:	4b16      	ldr	r3, [pc, #88]	; (8003228 <bcode_conv_to_flash+0x124>)
 80031ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	020b      	lsls	r3, r1, #8
 80031dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031e0:	0202      	lsls	r2, r0, #8
 80031e2:	4911      	ldr	r1, [pc, #68]	; (8003228 <bcode_conv_to_flash+0x124>)
 80031e4:	e9c1 2300 	strd	r2, r3, [r1]
		bcode|=(uint64_t)s;
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2200      	movs	r2, #0
 80031ec:	461c      	mov	r4, r3
 80031ee:	4615      	mov	r5, r2
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <bcode_conv_to_flash+0x124>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	ea44 0802 	orr.w	r8, r4, r2
 80031fa:	ea45 0903 	orr.w	r9, r5, r3
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <bcode_conv_to_flash+0x124>)
 8003200:	e9c3 8900 	strd	r8, r9, [r3]
	for(int a=0;a<7;a++){
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3301      	adds	r3, #1
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b06      	cmp	r3, #6
 800320e:	dd9d      	ble.n	800314c <bcode_conv_to_flash+0x48>

	}


	return bcode;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <bcode_conv_to_flash+0x124>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]

}
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003222:	4770      	bx	lr
 8003224:	20000968 	.word	0x20000968
 8003228:	20000960 	.word	0x20000960

0800322c <data_conv2Flash>:
	nfc_to_flash[0]=rtc_time;
	nfc_to_flash[1]=nfc_tag;
}


void data_conv2Flash(uint32_t cnt_timer, uint64_t data ){
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	e9c7 2300 	strd	r2, r3, [r7]


	data_to_flash[0]=(cnt_timer >> 24) & 0xFF;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	0e1b      	lsrs	r3, r3, #24
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b30      	ldr	r3, [pc, #192]	; (8003300 <data_conv2Flash+0xd4>)
 8003240:	701a      	strb	r2, [r3, #0]
	data_to_flash[1]=(cnt_timer >> 16) & 0xFF;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <data_conv2Flash+0xd4>)
 800324a:	705a      	strb	r2, [r3, #1]
	data_to_flash[2]=(cnt_timer >> 8) & 0xFF;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <data_conv2Flash+0xd4>)
 8003254:	709a      	strb	r2, [r3, #2]
	data_to_flash[3]=cnt_timer & 0xFF;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <data_conv2Flash+0xd4>)
 800325c:	70da      	strb	r2, [r3, #3]

	data_to_flash[4]=(data >> 48) & 0xFF;
 800325e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	0c0a      	lsrs	r2, r1, #16
 800326c:	2300      	movs	r3, #0
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <data_conv2Flash+0xd4>)
 8003272:	711a      	strb	r2, [r3, #4]
	data_to_flash[5]=(data >> 40) & 0xFF;
 8003274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	0a0a      	lsrs	r2, r1, #8
 8003282:	2300      	movs	r3, #0
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <data_conv2Flash+0xd4>)
 8003288:	715a      	strb	r2, [r3, #5]
	data_to_flash[6]=(data >> 32) & 0xFF;
 800328a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	000a      	movs	r2, r1
 8003298:	2300      	movs	r3, #0
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <data_conv2Flash+0xd4>)
 800329e:	719a      	strb	r2, [r3, #6]
	data_to_flash[7]=(data >> 24) & 0xFF;
 80032a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	0e02      	lsrs	r2, r0, #24
 80032ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032b2:	0e0b      	lsrs	r3, r1, #24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <data_conv2Flash+0xd4>)
 80032b8:	71da      	strb	r2, [r3, #7]
	data_to_flash[8]=(data >> 16) & 0xFF;
 80032ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	0c02      	lsrs	r2, r0, #16
 80032c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032cc:	0c0b      	lsrs	r3, r1, #16
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <data_conv2Flash+0xd4>)
 80032d2:	721a      	strb	r2, [r3, #8]
	data_to_flash[9]=(data >> 8) & 0xFF;
 80032d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	0a02      	lsrs	r2, r0, #8
 80032e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032e6:	0a0b      	lsrs	r3, r1, #8
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <data_conv2Flash+0xd4>)
 80032ec:	725a      	strb	r2, [r3, #9]
	data_to_flash[10]=data & 0xFF;
 80032ee:	783a      	ldrb	r2, [r7, #0]
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <data_conv2Flash+0xd4>)
 80032f2:	729a      	strb	r2, [r3, #10]


}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	200009b4 	.word	0x200009b4

08003304 <nfc_conv2Flash>:

void nfc_conv2Flash(uint32_t cnt_timer, uint32_t data ){
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]


	nfc_data_2flash[0]=(cnt_timer >> 24) & 0xFF;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0e1b      	lsrs	r3, r3, #24
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <nfc_conv2Flash+0x60>)
 8003316:	701a      	strb	r2, [r3, #0]
	nfc_data_2flash[1]=(cnt_timer >> 16) & 0xFF;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <nfc_conv2Flash+0x60>)
 8003320:	705a      	strb	r2, [r3, #1]
	nfc_data_2flash[2]=(cnt_timer >> 8) & 0xFF;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <nfc_conv2Flash+0x60>)
 800332a:	709a      	strb	r2, [r3, #2]
	nfc_data_2flash[3]=cnt_timer & 0xFF;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <nfc_conv2Flash+0x60>)
 8003332:	70da      	strb	r2, [r3, #3]

	nfc_data_2flash[4]=(data >> 24) & 0xFF;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	0e1b      	lsrs	r3, r3, #24
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <nfc_conv2Flash+0x60>)
 800333c:	711a      	strb	r2, [r3, #4]
	nfc_data_2flash[5]=(data >> 16) & 0xFF;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <nfc_conv2Flash+0x60>)
 8003346:	715a      	strb	r2, [r3, #5]
	nfc_data_2flash[6]=(data >> 8) & 0xFF;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <nfc_conv2Flash+0x60>)
 8003350:	719a      	strb	r2, [r3, #6]
	nfc_data_2flash[7]=data & 0xFF;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b03      	ldr	r3, [pc, #12]	; (8003364 <nfc_conv2Flash+0x60>)
 8003358:	71da      	strb	r2, [r3, #7]


}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	200009c4 	.word	0x200009c4

08003368 <flash_conv2_timer>:
	uint32_t addr2_wr = (padBuf[0] << 24) | (padBuf[1] << 16) | (padBuf[2] << 8) | padBuf[3];
	return addr2_wr;

}

uint32_t flash_conv2_timer(uint8_t *pdBuf){
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	uint32_t timer_flash = (pdBuf[0] << 24) | (pdBuf[1] << 16) | (pdBuf[2] << 8) | pdBuf[3];
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	061a      	lsls	r2, r3, #24
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3301      	adds	r3, #1
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3302      	adds	r3, #2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	4313      	orrs	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	3203      	adds	r2, #3
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
	return timer_flash;
 8003394:	68fb      	ldr	r3, [r7, #12]

}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <flash_conv2_bcode>:

void flash_conv2_bcode(){
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0

	fl_bar_buff[0] = (rd_flash_buff[4] >> 4) + 0x30;
 80033a4:	4b38      	ldr	r3, [pc, #224]	; (8003488 <flash_conv2_bcode+0xe8>)
 80033a6:	791b      	ldrb	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3330      	adds	r3, #48	; 0x30
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <flash_conv2_bcode+0xec>)
 80033b2:	701a      	strb	r2, [r3, #0]
	fl_bar_buff[1] = (rd_flash_buff[4] & 0x0F) + 0x30;
 80033b4:	4b34      	ldr	r3, [pc, #208]	; (8003488 <flash_conv2_bcode+0xe8>)
 80033b6:	791b      	ldrb	r3, [r3, #4]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3330      	adds	r3, #48	; 0x30
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b32      	ldr	r3, [pc, #200]	; (800348c <flash_conv2_bcode+0xec>)
 80033c4:	705a      	strb	r2, [r3, #1]
	fl_bar_buff[2] = (rd_flash_buff[5] >> 4) + 0x30;
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <flash_conv2_bcode+0xe8>)
 80033c8:	795b      	ldrb	r3, [r3, #5]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	3330      	adds	r3, #48	; 0x30
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <flash_conv2_bcode+0xec>)
 80033d4:	709a      	strb	r2, [r3, #2]
	fl_bar_buff[3] = (rd_flash_buff[5] & 0x0F) + 0x30;
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <flash_conv2_bcode+0xe8>)
 80033d8:	795b      	ldrb	r3, [r3, #5]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3330      	adds	r3, #48	; 0x30
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <flash_conv2_bcode+0xec>)
 80033e6:	70da      	strb	r2, [r3, #3]
	fl_bar_buff[4] = (rd_flash_buff[6] >> 4) + 0x30;
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <flash_conv2_bcode+0xe8>)
 80033ea:	799b      	ldrb	r3, [r3, #6]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	3330      	adds	r3, #48	; 0x30
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <flash_conv2_bcode+0xec>)
 80033f6:	711a      	strb	r2, [r3, #4]
	fl_bar_buff[5] = (rd_flash_buff[6] & 0x0F) + 0x30;
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <flash_conv2_bcode+0xe8>)
 80033fa:	799b      	ldrb	r3, [r3, #6]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	b2db      	uxtb	r3, r3
 8003402:	3330      	adds	r3, #48	; 0x30
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4b21      	ldr	r3, [pc, #132]	; (800348c <flash_conv2_bcode+0xec>)
 8003408:	715a      	strb	r2, [r3, #5]
	fl_bar_buff[6] = (rd_flash_buff[7] >> 4) + 0x30;
 800340a:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <flash_conv2_bcode+0xe8>)
 800340c:	79db      	ldrb	r3, [r3, #7]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3330      	adds	r3, #48	; 0x30
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <flash_conv2_bcode+0xec>)
 8003418:	719a      	strb	r2, [r3, #6]
	fl_bar_buff[7] = (rd_flash_buff[7] & 0x0F) + 0x30;
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <flash_conv2_bcode+0xe8>)
 800341c:	79db      	ldrb	r3, [r3, #7]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3330      	adds	r3, #48	; 0x30
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <flash_conv2_bcode+0xec>)
 800342a:	71da      	strb	r2, [r3, #7]
	fl_bar_buff[8] = (rd_flash_buff[8] >> 4) + 0x30;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <flash_conv2_bcode+0xe8>)
 800342e:	7a1b      	ldrb	r3, [r3, #8]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3330      	adds	r3, #48	; 0x30
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <flash_conv2_bcode+0xec>)
 800343a:	721a      	strb	r2, [r3, #8]
	fl_bar_buff[9] = (rd_flash_buff[8] & 0x0F) + 0x30;
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <flash_conv2_bcode+0xe8>)
 800343e:	7a1b      	ldrb	r3, [r3, #8]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	b2db      	uxtb	r3, r3
 8003446:	3330      	adds	r3, #48	; 0x30
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <flash_conv2_bcode+0xec>)
 800344c:	725a      	strb	r2, [r3, #9]
	fl_bar_buff[10] = (rd_flash_buff[9] >> 4) + 0x30;
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <flash_conv2_bcode+0xe8>)
 8003450:	7a5b      	ldrb	r3, [r3, #9]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3330      	adds	r3, #48	; 0x30
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <flash_conv2_bcode+0xec>)
 800345c:	729a      	strb	r2, [r3, #10]
	fl_bar_buff[11] = (rd_flash_buff[9] & 0x0F) + 0x30;
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <flash_conv2_bcode+0xe8>)
 8003460:	7a5b      	ldrb	r3, [r3, #9]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	b2db      	uxtb	r3, r3
 8003468:	3330      	adds	r3, #48	; 0x30
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <flash_conv2_bcode+0xec>)
 800346e:	72da      	strb	r2, [r3, #11]
	fl_bar_buff[12] = (rd_flash_buff[10] >> 4) + 0x30;
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <flash_conv2_bcode+0xe8>)
 8003472:	7a9b      	ldrb	r3, [r3, #10]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3330      	adds	r3, #48	; 0x30
 800347a:	b2da      	uxtb	r2, r3
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <flash_conv2_bcode+0xec>)
 800347e:	731a      	strb	r2, [r3, #12]

}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	20000ad4 	.word	0x20000ad4
 800348c:	20000ae4 	.word	0x20000ae4

08003490 <flash_conv2_uid>:

uint32_t flash_conv2_uid(uint8_t *pdBuf){
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

	uint32_t decuid_flash = (pdBuf[4] << 24) | (pdBuf[5] << 16) | (pdBuf[6] << 8) | pdBuf[7];
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	061a      	lsls	r2, r3, #24
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3305      	adds	r3, #5
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	041b      	lsls	r3, r3, #16
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3306      	adds	r3, #6
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	4313      	orrs	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	3207      	adds	r2, #7
 80034b8:	7812      	ldrb	r2, [r2, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
	return decuid_flash;
 80034be:	68fb      	ldr	r3, [r7, #12]

}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
	...

080034cc <flash_conv2_nfc>:

void flash_conv2_nfc(uint32_t flash_nfc_uid ){
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]


	nfc_uid_arr[0] = 0x30+(flash_nfc_uid/1000000000);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0a5b      	lsrs	r3, r3, #9
 80034d8:	4a5a      	ldr	r2, [pc, #360]	; (8003644 <flash_conv2_nfc+0x178>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	09db      	lsrs	r3, r3, #7
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	3330      	adds	r3, #48	; 0x30
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b58      	ldr	r3, [pc, #352]	; (8003648 <flash_conv2_nfc+0x17c>)
 80034e8:	701a      	strb	r2, [r3, #0]
	nfc_uid_arr[1] = 0x30+(flash_nfc_uid/100000000%10);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a57      	ldr	r2, [pc, #348]	; (800364c <flash_conv2_nfc+0x180>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0e59      	lsrs	r1, r3, #25
 80034f4:	4b56      	ldr	r3, [pc, #344]	; (8003650 <flash_conv2_nfc+0x184>)
 80034f6:	fba3 2301 	umull	r2, r3, r3, r1
 80034fa:	08da      	lsrs	r2, r3, #3
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	1aca      	subs	r2, r1, r3
 8003506:	b2d3      	uxtb	r3, r2
 8003508:	3330      	adds	r3, #48	; 0x30
 800350a:	b2da      	uxtb	r2, r3
 800350c:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <flash_conv2_nfc+0x17c>)
 800350e:	705a      	strb	r2, [r3, #1]
	nfc_uid_arr[2] = 0x30+(flash_nfc_uid/10000000%10);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a50      	ldr	r2, [pc, #320]	; (8003654 <flash_conv2_nfc+0x188>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	0d99      	lsrs	r1, r3, #22
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <flash_conv2_nfc+0x184>)
 800351c:	fba3 2301 	umull	r2, r3, r3, r1
 8003520:	08da      	lsrs	r2, r3, #3
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	1aca      	subs	r2, r1, r3
 800352c:	b2d3      	uxtb	r3, r2
 800352e:	3330      	adds	r3, #48	; 0x30
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b45      	ldr	r3, [pc, #276]	; (8003648 <flash_conv2_nfc+0x17c>)
 8003534:	709a      	strb	r2, [r3, #2]
	nfc_uid_arr[3] = 0x30+(flash_nfc_uid/1000000%10);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a47      	ldr	r2, [pc, #284]	; (8003658 <flash_conv2_nfc+0x18c>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0c99      	lsrs	r1, r3, #18
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <flash_conv2_nfc+0x184>)
 8003542:	fba3 2301 	umull	r2, r3, r3, r1
 8003546:	08da      	lsrs	r2, r3, #3
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	1aca      	subs	r2, r1, r3
 8003552:	b2d3      	uxtb	r3, r2
 8003554:	3330      	adds	r3, #48	; 0x30
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <flash_conv2_nfc+0x17c>)
 800355a:	70da      	strb	r2, [r3, #3]
	nfc_uid_arr[4] = 0x30+(flash_nfc_uid/100000%10);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	4a3e      	ldr	r2, [pc, #248]	; (800365c <flash_conv2_nfc+0x190>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	09d9      	lsrs	r1, r3, #7
 8003568:	4b39      	ldr	r3, [pc, #228]	; (8003650 <flash_conv2_nfc+0x184>)
 800356a:	fba3 2301 	umull	r2, r3, r3, r1
 800356e:	08da      	lsrs	r2, r3, #3
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	1aca      	subs	r2, r1, r3
 800357a:	b2d3      	uxtb	r3, r2
 800357c:	3330      	adds	r3, #48	; 0x30
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b31      	ldr	r3, [pc, #196]	; (8003648 <flash_conv2_nfc+0x17c>)
 8003582:	711a      	strb	r2, [r3, #4]
	nfc_uid_arr[5] = 0x30+(flash_nfc_uid/10000%10);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a36      	ldr	r2, [pc, #216]	; (8003660 <flash_conv2_nfc+0x194>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	0b59      	lsrs	r1, r3, #13
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <flash_conv2_nfc+0x184>)
 8003590:	fba3 2301 	umull	r2, r3, r3, r1
 8003594:	08da      	lsrs	r2, r3, #3
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	1aca      	subs	r2, r1, r3
 80035a0:	b2d3      	uxtb	r3, r2
 80035a2:	3330      	adds	r3, #48	; 0x30
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <flash_conv2_nfc+0x17c>)
 80035a8:	715a      	strb	r2, [r3, #5]
	nfc_uid_arr[6] = 0x30+(flash_nfc_uid/1000%10);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	; (8003664 <flash_conv2_nfc+0x198>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	0999      	lsrs	r1, r3, #6
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <flash_conv2_nfc+0x184>)
 80035b6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ba:	08da      	lsrs	r2, r3, #3
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	1aca      	subs	r2, r1, r3
 80035c6:	b2d3      	uxtb	r3, r2
 80035c8:	3330      	adds	r3, #48	; 0x30
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <flash_conv2_nfc+0x17c>)
 80035ce:	719a      	strb	r2, [r3, #6]
	nfc_uid_arr[7] = 0x30+(flash_nfc_uid/100%10);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <flash_conv2_nfc+0x19c>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	0959      	lsrs	r1, r3, #5
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <flash_conv2_nfc+0x184>)
 80035dc:	fba3 2301 	umull	r2, r3, r3, r1
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	1aca      	subs	r2, r1, r3
 80035ec:	b2d3      	uxtb	r3, r2
 80035ee:	3330      	adds	r3, #48	; 0x30
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <flash_conv2_nfc+0x17c>)
 80035f4:	71da      	strb	r2, [r3, #7]
	nfc_uid_arr[8] = 0x30+(flash_nfc_uid/10%10);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <flash_conv2_nfc+0x184>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	08d9      	lsrs	r1, r3, #3
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <flash_conv2_nfc+0x184>)
 8003602:	fba3 2301 	umull	r2, r3, r3, r1
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	1aca      	subs	r2, r1, r3
 8003612:	b2d3      	uxtb	r3, r2
 8003614:	3330      	adds	r3, #48	; 0x30
 8003616:	b2da      	uxtb	r2, r3
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <flash_conv2_nfc+0x17c>)
 800361a:	721a      	strb	r2, [r3, #8]
	nfc_uid_arr[9] = 0x30+(flash_nfc_uid%10);
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <flash_conv2_nfc+0x184>)
 8003620:	fba3 2301 	umull	r2, r3, r3, r1
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	1aca      	subs	r2, r1, r3
 8003630:	b2d3      	uxtb	r3, r2
 8003632:	3330      	adds	r3, #48	; 0x30
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4b04      	ldr	r3, [pc, #16]	; (8003648 <flash_conv2_nfc+0x17c>)
 8003638:	725a      	strb	r2, [r3, #9]


}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	00044b83 	.word	0x00044b83
 8003648:	200009a8 	.word	0x200009a8
 800364c:	55e63b89 	.word	0x55e63b89
 8003650:	cccccccd 	.word	0xcccccccd
 8003654:	6b5fca6b 	.word	0x6b5fca6b
 8003658:	431bde83 	.word	0x431bde83
 800365c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003660:	d1b71759 	.word	0xd1b71759
 8003664:	10624dd3 	.word	0x10624dd3
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <TimingDelay_Decrement>:
/**
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement ( void ) {
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00) {
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <TimingDelay_Decrement+0x28>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <TimingDelay_Decrement+0x16>
		TimingDelay--;
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <TimingDelay_Decrement+0x28>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3b01      	subs	r3, #1
 800367e:	4a05      	ldr	r2, [pc, #20]	; (8003694 <TimingDelay_Decrement+0x28>)
 8003680:	6013      	str	r3, [r2, #0]
	}
	tick++;
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <TimingDelay_Decrement+0x2c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3301      	adds	r3, #1
 8003688:	4a03      	ldr	r2, [pc, #12]	; (8003698 <TimingDelay_Decrement+0x2c>)
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	200004f0 	.word	0x200004f0
 8003698:	20000b04 	.word	0x20000b04

0800369c <Delay>:
/**
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in milliseconds
 * @retval None
 */
void Delay ( uint32_t nTime ) {
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <Delay+0x24>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6013      	str	r3, [r2, #0]
	while (TimingDelay != 0);
 80036aa:	bf00      	nop
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <Delay+0x24>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1fb      	bne.n	80036ac <Delay+0x10>
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	200004f0 	.word	0x200004f0

080036c4 <LCD_CtrlLinesConfig>:
}




void LCD_CtrlLinesConfig(void) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
	I2C_InitTypeDef			I2C_InitStruct;

	/*
	 * I2C pins configure
	 */
	LCD_I2C_SCL_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SCL_RCC_PORT, ENABLE );
 80036ca:	2101      	movs	r1, #1
 80036cc:	2008      	movs	r0, #8
 80036ce:	f002 fe19 	bl	8006304 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80036d2:	2302      	movs	r3, #2
 80036d4:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80036d6:	2318      	movs	r3, #24
 80036d8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SCL_PIN;
 80036da:	2340      	movs	r3, #64	; 0x40
 80036dc:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SCL_GPIO_PORT, &GPIO_InitStruct );
 80036de:	f107 0314 	add.w	r3, r7, #20
 80036e2:	4619      	mov	r1, r3
 80036e4:	481a      	ldr	r0, [pc, #104]	; (8003750 <LCD_CtrlLinesConfig+0x8c>)
 80036e6:	f002 fa79 	bl	8005bdc <GPIO_Init>

	LCD_I2C_SDA_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SDA_RCC_PORT, ENABLE );
 80036ea:	2101      	movs	r1, #1
 80036ec:	2008      	movs	r0, #8
 80036ee:	f002 fe09 	bl	8006304 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80036f2:	2302      	movs	r3, #2
 80036f4:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_OD;
 80036f6:	231c      	movs	r3, #28
 80036f8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SDA_PIN;
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SDA_GPIO_PORT, &GPIO_InitStruct );
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	4619      	mov	r1, r3
 8003704:	4812      	ldr	r0, [pc, #72]	; (8003750 <LCD_CtrlLinesConfig+0x8c>)
 8003706:	f002 fa69 	bl	8005bdc <GPIO_Init>

	LCD_I2C_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_RCC_APBPORT, ENABLE );
 800370a:	2101      	movs	r1, #1
 800370c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003710:	f002 fe16 	bl	8006340 <RCC_APB1PeriphClockCmd>

	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8003714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003718:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800371a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800371e:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_ClockSpeed = 50000;
 8003720:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003724:	607b      	str	r3, [r7, #4]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8003726:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800372a:	817b      	strh	r3, [r7, #10]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 800372c:	2300      	movs	r3, #0
 800372e:	813b      	strh	r3, [r7, #8]
	I2C_InitStruct.I2C_OwnAddress1 = 1;
 8003730:	2301      	movs	r3, #1
 8003732:	81bb      	strh	r3, [r7, #12]
	I2C_Init ( LCD_I2C_NUM, &I2C_InitStruct );
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4806      	ldr	r0, [pc, #24]	; (8003754 <LCD_CtrlLinesConfig+0x90>)
 800373a:	f002 fb3b 	bl	8005db4 <I2C_Init>

	I2C_Cmd ( LCD_I2C_NUM, ENABLE );
 800373e:	2101      	movs	r1, #1
 8003740:	4804      	ldr	r0, [pc, #16]	; (8003754 <LCD_CtrlLinesConfig+0x90>)
 8003742:	f002 fbf9 	bl	8005f38 <I2C_Cmd>
}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40010c00 	.word	0x40010c00
 8003754:	40005400 	.word	0x40005400

08003758 <I2C_SingleRandomWrite>:
  * @param  Addr: register address
  * @param  Data: data to be written to the specific register
  * @retval 0x00 if write operation is OK
  *         0xFF if timeout condition occured (device not connected or bus error).
  */
uint8_t I2C_SingleRandomWrite ( I2C_TypeDef* I2Cx, uint8_t Device, uint8_t Data ) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
 8003764:	4613      	mov	r3, r2
 8003766:	70bb      	strb	r3, [r7, #2]
	uint32_t timeout = TIMEOUT_MAX;
 8003768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800376c:	60fb      	str	r3, [r7, #12]

	/* Generate the Start Condition */
	I2C_GenerateSTART ( I2Cx, ENABLE );
 800376e:	2101      	movs	r1, #1
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f002 fc00 	bl	8005f76 <I2C_GenerateSTART>

	/* Test on I2Cx EV5 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8003776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377a:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 800377c:	e006      	b.n	800378c <I2C_SingleRandomWrite+0x34>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	60fa      	str	r2, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <I2C_SingleRandomWrite+0x34>
			return 0xFF;
 8003788:	23ff      	movs	r3, #255	; 0xff
 800378a:	e03a      	b.n	8003802 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 800378c:	491f      	ldr	r1, [pc, #124]	; (800380c <I2C_SingleRandomWrite+0xb4>)
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f002 fc5b 	bl	800604a <I2C_CheckEvent>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f1      	beq.n	800377e <I2C_SingleRandomWrite+0x26>
	}

	/* Send TS selected device slave Address for write */
	I2C_Send7bitAddress ( I2Cx, Device, I2C_Direction_Transmitter );
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	2200      	movs	r2, #0
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f002 fc35 	bl	8006010 <I2C_Send7bitAddress>

	/* Test on I2Cx EV6 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 80037a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037aa:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 80037ac:	e006      	b.n	80037bc <I2C_SingleRandomWrite+0x64>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	60fa      	str	r2, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <I2C_SingleRandomWrite+0x64>
			return 0xFF;
 80037b8:	23ff      	movs	r3, #255	; 0xff
 80037ba:	e022      	b.n	8003802 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 80037bc:	4914      	ldr	r1, [pc, #80]	; (8003810 <I2C_SingleRandomWrite+0xb8>)
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f002 fc43 	bl	800604a <I2C_CheckEvent>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f1      	beq.n	80037ae <I2C_SingleRandomWrite+0x56>
	}

	/* Send Data */
	I2C_SendData ( I2Cx, Data );
 80037ca:	78bb      	ldrb	r3, [r7, #2]
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f002 fc0f 	bl	8005ff2 <I2C_SendData>

	/* Test on I2Cx EV8 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 80037d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d8:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80037da:	e006      	b.n	80037ea <I2C_SingleRandomWrite+0x92>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	60fa      	str	r2, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <I2C_SingleRandomWrite+0x92>
			return 0xFF;
 80037e6:	23ff      	movs	r3, #255	; 0xff
 80037e8:	e00b      	b.n	8003802 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80037ea:	490a      	ldr	r1, [pc, #40]	; (8003814 <I2C_SingleRandomWrite+0xbc>)
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f002 fc2c 	bl	800604a <I2C_CheckEvent>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f1      	beq.n	80037dc <I2C_SingleRandomWrite+0x84>
	}

	/* Send I2Cx STOP Condition */
	I2C_GenerateSTOP ( I2Cx, ENABLE );
 80037f8:	2101      	movs	r1, #1
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f002 fbda 	bl	8005fb4 <I2C_GenerateSTOP>

	/* If operation is OK, return 0 */
	return 0;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	00030001 	.word	0x00030001
 8003810:	00070080 	.word	0x00070080
 8003814:	00070084 	.word	0x00070084

08003818 <LCD_SetCursor>:
//******************************************************************
void LCD_SetCursor ( uint8_t index ) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
	uint8_t index_hi = index & 0xF0;
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f023 030f 	bic.w	r3, r3, #15
 8003828:	73fb      	strb	r3, [r7, #15]
	uint8_t index_lo = (index & 0x0F) << 4;
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	f023 0307 	bic.w	r3, r3, #7
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	214e      	movs	r1, #78	; 0x4e
 800383c:	481c      	ldr	r0, [pc, #112]	; (80038b0 <LCD_SetCursor+0x98>)
 800383e:	f7ff ff8b 	bl	8003758 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_hi | LCD_E) & ~LCD_RS & ~LCD_RW );
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800384a:	f023 0305 	bic.w	r3, r3, #5
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	214e      	movs	r1, #78	; 0x4e
 8003854:	4816      	ldr	r0, [pc, #88]	; (80038b0 <LCD_SetCursor+0x98>)
 8003856:	f7ff ff7f 	bl	8003758 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	f023 0307 	bic.w	r3, r3, #7
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	214e      	movs	r1, #78	; 0x4e
 8003866:	4812      	ldr	r0, [pc, #72]	; (80038b0 <LCD_SetCursor+0x98>)
 8003868:	f7ff ff76 	bl	8003758 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800386c:	7bbb      	ldrb	r3, [r7, #14]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	214e      	movs	r1, #78	; 0x4e
 8003878:	480d      	ldr	r0, [pc, #52]	; (80038b0 <LCD_SetCursor+0x98>)
 800387a:	f7ff ff6d 	bl	8003758 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_lo | LCD_E) & ~LCD_RS & ~LCD_RW );
 800387e:	7bbb      	ldrb	r3, [r7, #14]
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003886:	f023 0305 	bic.w	r3, r3, #5
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	214e      	movs	r1, #78	; 0x4e
 8003890:	4807      	ldr	r0, [pc, #28]	; (80038b0 <LCD_SetCursor+0x98>)
 8003892:	f7ff ff61 	bl	8003758 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003896:	7bbb      	ldrb	r3, [r7, #14]
 8003898:	f023 0307 	bic.w	r3, r3, #7
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	214e      	movs	r1, #78	; 0x4e
 80038a2:	4803      	ldr	r0, [pc, #12]	; (80038b0 <LCD_SetCursor+0x98>)
 80038a4:	f7ff ff58 	bl	8003758 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40005400 	.word	0x40005400

080038b4 <LCD_WriteData>:
//******************************************************************
void LCD_WriteData ( uint8_t data ) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_hi = data & 0xF0;
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f023 030f 	bic.w	r3, r3, #15
 80038c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lo = (data & 0x0F) << 4;
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 80038cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	214e      	movs	r1, #78	; 0x4e
 80038e2:	4824      	ldr	r0, [pc, #144]	; (8003974 <LCD_WriteData+0xc0>)
 80038e4:	f7ff ff38 	bl	8003758 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi | LCD_E) | LCD_RS) & ~LCD_RW );
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	f043 0306 	orr.w	r3, r3, #6
 80038ee:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	214e      	movs	r1, #78	; 0x4e
 80038fa:	481e      	ldr	r0, [pc, #120]	; (8003974 <LCD_WriteData+0xc0>)
 80038fc:	f7ff ff2c 	bl	8003758 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003904:	f023 0307 	bic.w	r3, r3, #7
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	214e      	movs	r1, #78	; 0x4e
 8003916:	4817      	ldr	r0, [pc, #92]	; (8003974 <LCD_WriteData+0xc0>)
 8003918:	f7ff ff1e 	bl	8003758 <I2C_SingleRandomWrite>

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 800391c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003920:	f023 0307 	bic.w	r3, r3, #7
 8003924:	b25b      	sxtb	r3, r3
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	214e      	movs	r1, #78	; 0x4e
 8003932:	4810      	ldr	r0, [pc, #64]	; (8003974 <LCD_WriteData+0xc0>)
 8003934:	f7ff ff10 	bl	8003758 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo | LCD_E)  | LCD_RS) & ~LCD_RW );
 8003938:	7bbb      	ldrb	r3, [r7, #14]
 800393a:	f043 0306 	orr.w	r3, r3, #6
 800393e:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	214e      	movs	r1, #78	; 0x4e
 800394a:	480a      	ldr	r0, [pc, #40]	; (8003974 <LCD_WriteData+0xc0>)
 800394c:	f7ff ff04 	bl	8003758 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8003950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003954:	f023 0307 	bic.w	r3, r3, #7
 8003958:	b25b      	sxtb	r3, r3
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	214e      	movs	r1, #78	; 0x4e
 8003966:	4803      	ldr	r0, [pc, #12]	; (8003974 <LCD_WriteData+0xc0>)
 8003968:	f7ff fef6 	bl	8003758 <I2C_SingleRandomWrite>
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40005400 	.word	0x40005400

08003978 <LCD_WriteString>:
//******************************************************************
void LCD_WriteString ( char * str ) {
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < strlen(str); i++) {
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e009      	b.n	800399a <LCD_WriteString+0x22>
		LCD_WriteData ( str[i] );
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff90 	bl	80038b4 <LCD_WriteData>
	for (i = 0; i < strlen(str); i++) {
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	3301      	adds	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	7bfc      	ldrb	r4, [r7, #15]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fc fbd5 	bl	800014c <strlen>
 80039a2:	4603      	mov	r3, r0
 80039a4:	429c      	cmp	r4, r3
 80039a6:	d3ee      	bcc.n	8003986 <LCD_WriteString+0xe>
	}

}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}
	...

080039b4 <LCD_RunStringDevInfo>:
//******************************************************************
//******************************************************************
void LCD_RunStringDevInfo ( char * str1line,char * str2line, uint32_t delay) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
	char str1Frame[LCD_STR_LEN + 1];
	char str2Frame[LCD_STR_LEN + 1];
	uint8_t i;
	uint8_t cnt;

		tick = GetTickCount();
 80039c0:	f7ff f91e 	bl	8002c00 <GetTickCount>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4a7f      	ldr	r2, [pc, #508]	; (8003bc4 <LCD_RunStringDevInfo+0x210>)
 80039c8:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <LCD_RunStringDevInfo+0x214>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
		cnt=0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr1 = '\0';
 80039d6:	4b7d      	ldr	r3, [pc, #500]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
		*runStr2 = '\0';
 80039dc:	4b7c      	ldr	r3, [pc, #496]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80039e2:	2300      	movs	r3, #0
 80039e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039e8:	e01c      	b.n	8003a24 <LCD_RunStringDevInfo+0x70>
			strcat ( runStr1, " " );
 80039ea:	4878      	ldr	r0, [pc, #480]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 80039ec:	f7fc fbae 	bl	800014c <strlen>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 80039f6:	4413      	add	r3, r2
 80039f8:	4976      	ldr	r1, [pc, #472]	; (8003bd4 <LCD_RunStringDevInfo+0x220>)
 80039fa:	461a      	mov	r2, r3
 80039fc:	460b      	mov	r3, r1
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8003a02:	4873      	ldr	r0, [pc, #460]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 8003a04:	f7fc fba2 	bl	800014c <strlen>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b70      	ldr	r3, [pc, #448]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	4970      	ldr	r1, [pc, #448]	; (8003bd4 <LCD_RunStringDevInfo+0x220>)
 8003a12:	461a      	mov	r2, r3
 8003a14:	460b      	mov	r3, r1
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d9de      	bls.n	80039ea <LCD_RunStringDevInfo+0x36>
		}
		strcat ( runStr1, str1line );
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	4867      	ldr	r0, [pc, #412]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 8003a30:	f003 fb5c 	bl	80070ec <strcat>
		strcat ( runStr2, str2line );
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4866      	ldr	r0, [pc, #408]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 8003a38:	f003 fb58 	bl	80070ec <strcat>

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a42:	e01c      	b.n	8003a7e <LCD_RunStringDevInfo+0xca>
			strcat ( runStr1, " " );
 8003a44:	4861      	ldr	r0, [pc, #388]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 8003a46:	f7fc fb81 	bl	800014c <strlen>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 8003a50:	4413      	add	r3, r2
 8003a52:	4960      	ldr	r1, [pc, #384]	; (8003bd4 <LCD_RunStringDevInfo+0x220>)
 8003a54:	461a      	mov	r2, r3
 8003a56:	460b      	mov	r3, r1
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8003a5c:	485c      	ldr	r0, [pc, #368]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 8003a5e:	f7fc fb75 	bl	800014c <strlen>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b5a      	ldr	r3, [pc, #360]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	495a      	ldr	r1, [pc, #360]	; (8003bd4 <LCD_RunStringDevInfo+0x220>)
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	460b      	mov	r3, r1
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d9de      	bls.n	8003a44 <LCD_RunStringDevInfo+0x90>
		}

		runStr1Len = strlen ( runStr1 );
 8003a86:	4851      	ldr	r0, [pc, #324]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 8003a88:	f7fc fb60 	bl	800014c <strlen>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	4b51      	ldr	r3, [pc, #324]	; (8003bd8 <LCD_RunStringDevInfo+0x224>)
 8003a92:	701a      	strb	r2, [r3, #0]
		runStr2Len = strlen ( runStr2 );
 8003a94:	484e      	ldr	r0, [pc, #312]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 8003a96:	f7fc fb59 	bl	800014c <strlen>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <LCD_RunStringDevInfo+0x228>)
 8003aa0:	701a      	strb	r2, [r3, #0]

	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 8003aa2:	e07a      	b.n	8003b9a <LCD_RunStringDevInfo+0x1e6>
		if (GetTickCount() - tick > delay) {
 8003aa4:	f7ff f8ac 	bl	8002c00 <GetTickCount>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <LCD_RunStringDevInfo+0x210>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d271      	bcs.n	8003b9a <LCD_RunStringDevInfo+0x1e6>
			tick = GetTickCount();
 8003ab6:	f7ff f8a3 	bl	8002c00 <GetTickCount>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4a41      	ldr	r2, [pc, #260]	; (8003bc4 <LCD_RunStringDevInfo+0x210>)
 8003abe:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <LCD_RunStringDevInfo+0x214>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <LCD_RunStringDevInfo+0x214>)
 8003aca:	701a      	strb	r2, [r3, #0]

			if (cnt<(runStr1Len-1)) {
 8003acc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003ad0:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <LCD_RunStringDevInfo+0x224>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	da29      	bge.n	8003b2e <LCD_RunStringDevInfo+0x17a>
			for (i = 0; i < LCD_STR_LEN; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ae0:	e019      	b.n	8003b16 <LCD_RunStringDevInfo+0x162>
				str1Frame[i] = runStr1[(strFrameIndex + i) % runStr1Len];
 8003ae2:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <LCD_RunStringDevInfo+0x214>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aec:	4413      	add	r3, r2
 8003aee:	4a3a      	ldr	r2, [pc, #232]	; (8003bd8 <LCD_RunStringDevInfo+0x224>)
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	fb93 f1f2 	sdiv	r1, r3, r2
 8003af6:	fb01 f202 	mul.w	r2, r1, r2
 8003afa:	1a9a      	subs	r2, r3, r2
 8003afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b00:	4932      	ldr	r1, [pc, #200]	; (8003bcc <LCD_RunStringDevInfo+0x218>)
 8003b02:	5c8a      	ldrb	r2, [r1, r2]
 8003b04:	3328      	adds	r3, #40	; 0x28
 8003b06:	443b      	add	r3, r7
 8003b08:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++)
 8003b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b10:	3301      	adds	r3, #1
 8003b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b1a:	2b07      	cmp	r3, #7
 8003b1c:	d9e1      	bls.n	8003ae2 <LCD_RunStringDevInfo+0x12e>

			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку строку
 8003b1e:	2080      	movs	r0, #128	; 0x80
 8003b20:	f7ff fe7a 	bl	8003818 <LCD_SetCursor>
			LCD_WriteString ( str1Frame );
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff25 	bl	8003978 <LCD_WriteString>
			}

			if (cnt<(runStr2Len-1)){
 8003b2e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <LCD_RunStringDevInfo+0x228>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	da29      	bge.n	8003b90 <LCD_RunStringDevInfo+0x1dc>
			for (i = 0; i < LCD_STR_LEN; i++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b42:	e019      	b.n	8003b78 <LCD_RunStringDevInfo+0x1c4>
				str2Frame[i] = runStr2[(strFrameIndex + i) % runStr2Len];
 8003b44:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <LCD_RunStringDevInfo+0x214>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a22      	ldr	r2, [pc, #136]	; (8003bdc <LCD_RunStringDevInfo+0x228>)
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	fb93 f1f2 	sdiv	r1, r3, r2
 8003b58:	fb01 f202 	mul.w	r2, r1, r2
 8003b5c:	1a9a      	subs	r2, r3, r2
 8003b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b62:	491b      	ldr	r1, [pc, #108]	; (8003bd0 <LCD_RunStringDevInfo+0x21c>)
 8003b64:	5c8a      	ldrb	r2, [r1, r2]
 8003b66:	3328      	adds	r3, #40	; 0x28
 8003b68:	443b      	add	r3, r7
 8003b6a:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < LCD_STR_LEN; i++)
 8003b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b72:	3301      	adds	r3, #1
 8003b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	d9e1      	bls.n	8003b44 <LCD_RunStringDevInfo+0x190>

			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8003b80:	20c0      	movs	r0, #192	; 0xc0
 8003b82:	f7ff fe49 	bl	8003818 <LCD_SetCursor>
			LCD_WriteString ( str2Frame );
 8003b86:	f107 0310 	add.w	r3, r7, #16
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fef4 	bl	8003978 <LCD_WriteString>
			}

			cnt++;
 8003b90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b94:	3301      	adds	r3, #1
 8003b96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 8003b9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <LCD_RunStringDevInfo+0x224>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	f6ff af7d 	blt.w	8003aa4 <LCD_RunStringDevInfo+0xf0>
 8003baa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <LCD_RunStringDevInfo+0x228>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	f6ff af75 	blt.w	8003aa4 <LCD_RunStringDevInfo+0xf0>
		}

}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	3728      	adds	r7, #40	; 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000b08 	.word	0x20000b08
 8003bc8:	20000b0c 	.word	0x20000b0c
 8003bcc:	20000b10 	.word	0x20000b10
 8003bd0:	20000b88 	.word	0x20000b88
 8003bd4:	080083b8 	.word	0x080083b8
 8003bd8:	20000bfd 	.word	0x20000bfd
 8003bdc:	20000bfe 	.word	0x20000bfe

08003be0 <LCD_RunStringBARCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера штрих-кодов бегущей строкой в первой строчке LCD
void LCD_RunStringBARCode ( char * str, uint32_t delay, uint8_t start ) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13f      	bne.n	8003c74 <LCD_RunStringBARCode+0x94>
		tick = GetTickCount();
 8003bf4:	f7ff f804 	bl	8002c00 <GetTickCount>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4a3e      	ldr	r2, [pc, #248]	; (8003cf4 <LCD_RunStringBARCode+0x114>)
 8003bfc:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <LCD_RunStringBARCode+0x118>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 8003c04:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e00e      	b.n	8003c2e <LCD_RunStringBARCode+0x4e>
			strcat ( runStr, " " );
 8003c10:	483a      	ldr	r0, [pc, #232]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003c12:	f7fc fa9b 	bl	800014c <strlen>
 8003c16:	4603      	mov	r3, r0
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4938      	ldr	r1, [pc, #224]	; (8003d00 <LCD_RunStringBARCode+0x120>)
 8003c20:	461a      	mov	r2, r3
 8003c22:	460b      	mov	r3, r1
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
 8003c30:	2b06      	cmp	r3, #6
 8003c32:	d9ed      	bls.n	8003c10 <LCD_RunStringBARCode+0x30>
		}
		strcat ( runStr, str );
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	4831      	ldr	r0, [pc, #196]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003c38:	f003 fa58 	bl	80070ec <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e00e      	b.n	8003c60 <LCD_RunStringBARCode+0x80>
			strcat ( runStr, " " );
 8003c42:	482e      	ldr	r0, [pc, #184]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003c44:	f7fc fa82 	bl	800014c <strlen>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	492b      	ldr	r1, [pc, #172]	; (8003d00 <LCD_RunStringBARCode+0x120>)
 8003c52:	461a      	mov	r2, r3
 8003c54:	460b      	mov	r3, r1
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003c5a:	7ffb      	ldrb	r3, [r7, #31]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d9ed      	bls.n	8003c42 <LCD_RunStringBARCode+0x62>
		}
		runStrLen = strlen ( runStr );
 8003c66:	4825      	ldr	r0, [pc, #148]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003c68:	f7fc fa70 	bl	800014c <strlen>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <LCD_RunStringBARCode+0x124>)
 8003c72:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d037      	beq.n	8003cec <LCD_RunStringBARCode+0x10c>
		if (GetTickCount() - tick > delay) {
 8003c7c:	f7fe ffc0 	bl	8002c00 <GetTickCount>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <LCD_RunStringBARCode+0x114>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d22e      	bcs.n	8003cec <LCD_RunStringBARCode+0x10c>
			tick = GetTickCount();
 8003c8e:	f7fe ffb7 	bl	8002c00 <GetTickCount>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <LCD_RunStringBARCode+0x114>)
 8003c96:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8003c98:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <LCD_RunStringBARCode+0x118>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <LCD_RunStringBARCode+0x118>)
 8003ca2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e015      	b.n	8003cd6 <LCD_RunStringBARCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <LCD_RunStringBARCode+0x118>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	7ffb      	ldrb	r3, [r7, #31]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <LCD_RunStringBARCode+0x124>)
 8003cb6:	7812      	ldrb	r2, [r2, #0]
 8003cb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8003cbc:	fb01 f202 	mul.w	r2, r1, r2
 8003cc0:	1a9a      	subs	r2, r3, r2
 8003cc2:	7ffb      	ldrb	r3, [r7, #31]
 8003cc4:	490d      	ldr	r1, [pc, #52]	; (8003cfc <LCD_RunStringBARCode+0x11c>)
 8003cc6:	5c8a      	ldrb	r2, [r1, r2]
 8003cc8:	3320      	adds	r3, #32
 8003cca:	443b      	add	r3, r7
 8003ccc:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8003cd0:	7ffb      	ldrb	r3, [r7, #31]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	7ffb      	ldrb	r3, [r7, #31]
 8003cd8:	2b07      	cmp	r3, #7
 8003cda:	d9e6      	bls.n	8003caa <LCD_RunStringBARCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку
 8003cdc:	2080      	movs	r0, #128	; 0x80
 8003cde:	f7ff fd9b 	bl	8003818 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8003ce2:	f107 0314 	add.w	r3, r7, #20
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fe46 	bl	8003978 <LCD_WriteString>
		}
	}
}
 8003cec:	bf00      	nop
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000c00 	.word	0x20000c00
 8003cf8:	20000c04 	.word	0x20000c04
 8003cfc:	20000c08 	.word	0x20000c08
 8003d00:	080083b8 	.word	0x080083b8
 8003d04:	20000c33 	.word	0x20000c33

08003d08 <LCD_RunStringNFCCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера NFC бегущей строкой во второй строчке LCD
void LCD_RunStringNFCCode ( char * str, uint32_t delay, uint8_t start ) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d13f      	bne.n	8003d9c <LCD_RunStringNFCCode+0x94>
		tick = GetTickCount();
 8003d1c:	f7fe ff70 	bl	8002c00 <GetTickCount>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4a3e      	ldr	r2, [pc, #248]	; (8003e1c <LCD_RunStringNFCCode+0x114>)
 8003d24:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <LCD_RunStringNFCCode+0x118>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003d32:	2300      	movs	r3, #0
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e00e      	b.n	8003d56 <LCD_RunStringNFCCode+0x4e>
			strcat ( runStr, " " );
 8003d38:	483a      	ldr	r0, [pc, #232]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003d3a:	f7fc fa07 	bl	800014c <strlen>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003d44:	4413      	add	r3, r2
 8003d46:	4938      	ldr	r1, [pc, #224]	; (8003e28 <LCD_RunStringNFCCode+0x120>)
 8003d48:	461a      	mov	r2, r3
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	3301      	adds	r3, #1
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	7ffb      	ldrb	r3, [r7, #31]
 8003d58:	2b06      	cmp	r3, #6
 8003d5a:	d9ed      	bls.n	8003d38 <LCD_RunStringNFCCode+0x30>
		}
		strcat ( runStr, str );
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	4831      	ldr	r0, [pc, #196]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003d60:	f003 f9c4 	bl	80070ec <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e00e      	b.n	8003d88 <LCD_RunStringNFCCode+0x80>
			strcat ( runStr, " " );
 8003d6a:	482e      	ldr	r0, [pc, #184]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003d6c:	f7fc f9ee 	bl	800014c <strlen>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003d76:	4413      	add	r3, r2
 8003d78:	492b      	ldr	r1, [pc, #172]	; (8003e28 <LCD_RunStringNFCCode+0x120>)
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003d82:	7ffb      	ldrb	r3, [r7, #31]
 8003d84:	3301      	adds	r3, #1
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	7ffb      	ldrb	r3, [r7, #31]
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d9ed      	bls.n	8003d6a <LCD_RunStringNFCCode+0x62>
		}
		runStrLen = strlen ( runStr );
 8003d8e:	4825      	ldr	r0, [pc, #148]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003d90:	f7fc f9dc 	bl	800014c <strlen>
 8003d94:	4603      	mov	r3, r0
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <LCD_RunStringNFCCode+0x124>)
 8003d9a:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d037      	beq.n	8003e14 <LCD_RunStringNFCCode+0x10c>
		if (GetTickCount() - tick > delay) {
 8003da4:	f7fe ff2c 	bl	8002c00 <GetTickCount>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <LCD_RunStringNFCCode+0x114>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d22e      	bcs.n	8003e14 <LCD_RunStringNFCCode+0x10c>
			tick = GetTickCount();
 8003db6:	f7fe ff23 	bl	8002c00 <GetTickCount>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <LCD_RunStringNFCCode+0x114>)
 8003dbe:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <LCD_RunStringNFCCode+0x118>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <LCD_RunStringNFCCode+0x118>)
 8003dca:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e015      	b.n	8003dfe <LCD_RunStringNFCCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <LCD_RunStringNFCCode+0x118>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	7ffb      	ldrb	r3, [r7, #31]
 8003dda:	4413      	add	r3, r2
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <LCD_RunStringNFCCode+0x124>)
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	fb93 f1f2 	sdiv	r1, r3, r2
 8003de4:	fb01 f202 	mul.w	r2, r1, r2
 8003de8:	1a9a      	subs	r2, r3, r2
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	490d      	ldr	r1, [pc, #52]	; (8003e24 <LCD_RunStringNFCCode+0x11c>)
 8003dee:	5c8a      	ldrb	r2, [r1, r2]
 8003df0:	3320      	adds	r3, #32
 8003df2:	443b      	add	r3, r7
 8003df4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	d9e6      	bls.n	8003dd2 <LCD_RunStringNFCCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8003e04:	20c0      	movs	r0, #192	; 0xc0
 8003e06:	f7ff fd07 	bl	8003818 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fdb2 	bl	8003978 <LCD_WriteString>
		}
	}
}
 8003e14:	bf00      	nop
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000c34 	.word	0x20000c34
 8003e20:	20000c38 	.word	0x20000c38
 8003e24:	20000c3c 	.word	0x20000c3c
 8003e28:	080083b8 	.word	0x080083b8
 8003e2c:	20000c67 	.word	0x20000c67

08003e30 <LCD_Init>:
//******************************************************************

void LCD_Init(void) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
	uint8_t i;

	LCD_CtrlLinesConfig();
 8003e36:	f7ff fc45 	bl	80036c4 <LCD_CtrlLinesConfig>

	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	71fb      	strb	r3, [r7, #7]
 8003e3e:	e02d      	b.n	8003e9c <LCD_Init+0x6c>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <LCD_Init+0x94>)
 8003e44:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	214e      	movs	r1, #78	; 0x4e
 8003e4e:	481e      	ldr	r0, [pc, #120]	; (8003ec8 <LCD_Init+0x98>)
 8003e50:	f7ff fc82 	bl	8003758 <I2C_SingleRandomWrite>
		Delay(10);
 8003e54:	200a      	movs	r0, #10
 8003e56:	f7ff fc21 	bl	800369c <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) | LCD_E) & ~LCD_RS & ~LCD_RW );
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <LCD_Init+0x94>)
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	f043 0302 	orr.w	r3, r3, #2
 8003e68:	b25b      	sxtb	r3, r3
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	214e      	movs	r1, #78	; 0x4e
 8003e70:	4815      	ldr	r0, [pc, #84]	; (8003ec8 <LCD_Init+0x98>)
 8003e72:	f7ff fc71 	bl	8003758 <I2C_SingleRandomWrite>
		Delay(10);
 8003e76:	200a      	movs	r0, #10
 8003e78:	f7ff fc10 	bl	800369c <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <LCD_Init+0x94>)
 8003e80:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	214e      	movs	r1, #78	; 0x4e
 8003e8a:	480f      	ldr	r0, [pc, #60]	; (8003ec8 <LCD_Init+0x98>)
 8003e8c:	f7ff fc64 	bl	8003758 <I2C_SingleRandomWrite>
		Delay(10);
 8003e90:	200a      	movs	r0, #10
 8003e92:	f7ff fc03 	bl	800369c <Delay>
	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2b0b      	cmp	r3, #11
 8003ea0:	d9ce      	bls.n	8003e40 <LCD_Init+0x10>
	}
	/*
	 * Очистка дисплея
	 */
	LCD_SetCursor ( LCD_CURSOR_1STR );
 8003ea2:	2080      	movs	r0, #128	; 0x80
 8003ea4:	f7ff fcb8 	bl	8003818 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8003ea8:	4808      	ldr	r0, [pc, #32]	; (8003ecc <LCD_Init+0x9c>)
 8003eaa:	f7ff fd65 	bl	8003978 <LCD_WriteString>
	LCD_SetCursor ( LCD_CURSOR_2STR );
 8003eae:	20c0      	movs	r0, #192	; 0xc0
 8003eb0:	f7ff fcb2 	bl	8003818 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8003eb4:	4805      	ldr	r0, [pc, #20]	; (8003ecc <LCD_Init+0x9c>)
 8003eb6:	f7ff fd5f 	bl	8003978 <LCD_WriteString>
	//LCD_WriteString ( "SUM:               " );
	/*
	 * Отображение на дисплее текущей суммы
	 */
	//LCD_DisplaySum();
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000440 	.word	0x20000440
 8003ec8:	40005400 	.word	0x40005400
 8003ecc:	080083bc 	.word	0x080083bc

08003ed0 <PN532_Delay>:
int8_t _uid[7];      // ISO14443A uid
int8_t _uidLen;      // uid len
int8_t _key[6];      // Mifare Classic key
int8_t _inListedTag; // Tg number of inlisted tag.

void PN532_Delay(uint32_t cntdelay){
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	while(cntdelay--){};
 8003ed8:	bf00      	nop
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1e5a      	subs	r2, r3, #1
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1fa      	bne.n	8003eda <PN532_Delay+0xa>
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <PN532_WakeUp>:
//******************************************************************************
bool PN532_WakeUp(void){
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0

/*
    uint8_t packet[21];
    uint8_t *p = packet;
*/
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003efa:	4807      	ldr	r0, [pc, #28]	; (8003f18 <PN532_WakeUp+0x28>)
 8003efc:	f001 ff43 	bl	8005d86 <GPIO_WriteBit>
	 Delay(10);
 8003f00:	200a      	movs	r0, #10
 8003f02:	f7ff fbcb 	bl	800369c <Delay>
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8003f06:	2201      	movs	r2, #1
 8003f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <PN532_WakeUp+0x28>)
 8003f0e:	f001 ff3a 	bl	8005d86 <GPIO_WriteBit>
    ///-----------------------------------------------------------------------------


	 PN532_write( packet,21);
*/
	  return TRUE;
 8003f12:	2301      	movs	r3, #1

}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40010c00 	.word	0x40010c00

08003f1c <PN532_setPassiveActivationRetries>:
                          after mxRetries

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_setPassiveActivationRetries(uint8_t maxRetries) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
  pn532_packetbuffer[0] = PN532_COMMAND_RFCONFIGURATION;
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <PN532_setPassiveActivationRetries+0x48>)
 8003f28:	2232      	movs	r2, #50	; 0x32
 8003f2a:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 5;    // Config item 5 (MaxRetries)
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <PN532_setPassiveActivationRetries+0x48>)
 8003f2e:	2205      	movs	r2, #5
 8003f30:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = 0xFF; // MxRtyATR (default = 0xFF)
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <PN532_setPassiveActivationRetries+0x48>)
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	709a      	strb	r2, [r3, #2]
  pn532_packetbuffer[3] = 0x01; // MxRtyPSL (default = 0x01)
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <PN532_setPassiveActivationRetries+0x48>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	70da      	strb	r2, [r3, #3]
  pn532_packetbuffer[4] = maxRetries;
 8003f3e:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <PN532_setPassiveActivationRetries+0x48>)
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	7113      	strb	r3, [r2, #4]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 5,1000))
 8003f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f48:	2105      	movs	r1, #5
 8003f4a:	4806      	ldr	r0, [pc, #24]	; (8003f64 <PN532_setPassiveActivationRetries+0x48>)
 8003f4c:	f000 f900 	bl	8004150 <PN532_sendCommandCheckAck>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <PN532_setPassiveActivationRetries+0x3e>
  { return 0x0;} // no ACK
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <PN532_setPassiveActivationRetries+0x40>

  return 1;
 8003f5a:	2301      	movs	r3, #1
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000c80 	.word	0x20000c80

08003f68 <PN532_readPassiveTargetID>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readPassiveTargetID(uint8_t cardbaudrate, uint8_t *uid,
                                         uint8_t *uidLength, uint16_t timeout) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	81bb      	strh	r3, [r7, #12]
  pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <PN532_readPassiveTargetID+0x54>)
 8003f7e:	224a      	movs	r2, #74	; 0x4a
 8003f80:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 1; // max 1 cards at once (we can set this to 2 later)
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <PN532_readPassiveTargetID+0x54>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = cardbaudrate;
 8003f88:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <PN532_readPassiveTargetID+0x54>)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	7093      	strb	r3, [r2, #2]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)) {
 8003f8e:	89bb      	ldrh	r3, [r7, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	2103      	movs	r1, #3
 8003f94:	4809      	ldr	r0, [pc, #36]	; (8003fbc <PN532_readPassiveTargetID+0x54>)
 8003f96:	f000 f8db 	bl	8004150 <PN532_sendCommandCheckAck>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <PN532_readPassiveTargetID+0x3c>
    return 0x0; // no cards read
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e007      	b.n	8003fb4 <PN532_readPassiveTargetID+0x4c>
  }
  //Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
 //Задержка внутри PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)
 //Для чтения ID карты задежка не менее 10 мс обязательна!
     Delay(20);
 8003fa4:	2014      	movs	r0, #20
 8003fa6:	f7ff fb79 	bl	800369c <Delay>
/*
  // wait for a card to enter the field (only possible with I2C)
  if (!waitready(timeout)) {
    return 0x0;   }
*/
  return PN532_readDetectedPassiveTargetID(uid, uidLength);
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	68b8      	ldr	r0, [r7, #8]
 8003fae:	f000 f807 	bl	8003fc0 <PN532_readDetectedPassiveTargetID>
 8003fb2:	4603      	mov	r3, r0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000c80 	.word	0x20000c80

08003fc0 <PN532_readDetectedPassiveTargetID>:
                          length of the card's UID.

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readDetectedPassiveTargetID(uint8_t *uid, uint8_t *uidLength) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  // read data packet
  PN532_readdata(pn532_readbuffer, 19, 0x00);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2113      	movs	r1, #19
 8003fce:	4819      	ldr	r0, [pc, #100]	; (8004034 <PN532_readDetectedPassiveTargetID+0x74>)
 8003fd0:	f000 f9c6 	bl	8004360 <PN532_readdata>
  PN532DEBUGPRINT.print(F("Found "));
  PN532DEBUGPRINT.print(pn532_packetbuffer[7], DEC);
  PN532DEBUGPRINT.println(F(" tags"));
#endif
*/
  if (pn532_readbuffer[7] != 1)
 8003fd4:	4b17      	ldr	r3, [pc, #92]	; (8004034 <PN532_readDetectedPassiveTargetID+0x74>)
 8003fd6:	79db      	ldrb	r3, [r3, #7]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <PN532_readDetectedPassiveTargetID+0x20>
    return FALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e024      	b.n	800402a <PN532_readDetectedPassiveTargetID+0x6a>

  uint16_t sens_res = pn532_readbuffer[9];
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <PN532_readDetectedPassiveTargetID+0x74>)
 8003fe2:	7a5b      	ldrb	r3, [r3, #9]
 8003fe4:	81bb      	strh	r3, [r7, #12]
  sens_res <<= 8;
 8003fe6:	89bb      	ldrh	r3, [r7, #12]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	81bb      	strh	r3, [r7, #12]
  sens_res |= pn532_readbuffer[10];
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <PN532_readDetectedPassiveTargetID+0x74>)
 8003fee:	7a9b      	ldrb	r3, [r3, #10]
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	89bb      	ldrh	r3, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	81bb      	strh	r3, [r7, #12]
  PN532DEBUGPRINT.print(F("SAK: 0x"));
  PN532DEBUGPRINT.println(pn532_packetbuffer[11], HEX);
#endif
*/
  /* Card appears to be Mifare Classic */
  *uidLength = pn532_readbuffer[12];
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <PN532_readDetectedPassiveTargetID+0x74>)
 8003ffa:	7b1a      	ldrb	r2, [r3, #12]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	701a      	strb	r2, [r3, #0]
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.print(F("UID:"));
#endif
*/
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e00b      	b.n	800401e <PN532_readDetectedPassiveTargetID+0x5e>
    uid[i] = pn532_readbuffer[13 + i];
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	f103 020d 	add.w	r2, r3, #13
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	440b      	add	r3, r1
 8004012:	4908      	ldr	r1, [pc, #32]	; (8004034 <PN532_readDetectedPassiveTargetID+0x74>)
 8004014:	5c8a      	ldrb	r2, [r1, r2]
 8004016:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	3301      	adds	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <PN532_readDetectedPassiveTargetID+0x74>)
 8004020:	7b1b      	ldrb	r3, [r3, #12]
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	429a      	cmp	r2, r3
 8004026:	d3ee      	bcc.n	8004006 <PN532_readDetectedPassiveTargetID+0x46>
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.println();
#endif
*/
  return TRUE;
 8004028:	2301      	movs	r3, #1
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000cc0 	.word	0x20000cc0

08004038 <PN532_SAMConfig>:

//******************************************************************************
bool PN532_SAMConfig(void){
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0

            return this.ExecuteCmd(cmd);
        }
 *
 */
	 pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <PN532_SAMConfig+0x50>)
 800403e:	2214      	movs	r2, #20
 8004040:	701a      	strb	r2, [r3, #0]
	 pn532_packetbuffer[1] = 0x01;//0x01;
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <PN532_SAMConfig+0x50>)
 8004044:	2201      	movs	r2, #1
 8004046:	705a      	strb	r2, [r3, #1]
	 pn532_packetbuffer[2] = 0x14;
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <PN532_SAMConfig+0x50>)
 800404a:	2214      	movs	r2, #20
 800404c:	709a      	strb	r2, [r3, #2]
	 pn532_packetbuffer[3] = 0x00;//не использоать прерывания
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <PN532_SAMConfig+0x50>)
 8004050:	2200      	movs	r2, #0
 8004052:	70da      	strb	r2, [r3, #3]

	  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,500)) {
 8004054:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004058:	2104      	movs	r1, #4
 800405a:	480b      	ldr	r0, [pc, #44]	; (8004088 <PN532_SAMConfig+0x50>)
 800405c:	f000 f878 	bl	8004150 <PN532_sendCommandCheckAck>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <PN532_SAMConfig+0x32>
	    return 0;
 8004066:	2300      	movs	r3, #0
 8004068:	e00b      	b.n	8004082 <PN532_SAMConfig+0x4a>

//Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);
// read data packet
	  PN532_readdata(pn532_readbuffer, 9, 0xFF);
 800406a:	22ff      	movs	r2, #255	; 0xff
 800406c:	2109      	movs	r1, #9
 800406e:	4807      	ldr	r0, [pc, #28]	; (800408c <PN532_SAMConfig+0x54>)
 8004070:	f000 f976 	bl	8004360 <PN532_readdata>
	  	    }
*/
	    //int offset = 6;
	    //pn532_packetbuffer[offset] == 0x15

return (pn532_readbuffer[6] == 0x15);
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <PN532_SAMConfig+0x54>)
 8004076:	799b      	ldrb	r3, [r3, #6]
 8004078:	2b15      	cmp	r3, #21
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
}
 8004082:	4618      	mov	r0, r3
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000c80 	.word	0x20000c80
 800408c:	20000cc0 	.word	0x20000cc0

08004090 <PN532_getFirmwareVersion>:
    Checks the firmware version of the PN5xx chip

    @returns  The chip's firmware version and ID
*/
/******************************************************************************/
 uint32_t PN532_getFirmwareVersion(void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 uint32_t response;
 const uint8_t pn532response_firmwarevers[] = {0x00, 0x00, 0xFF, 0x06, 0xFA, 0xD5};
 8004096:	4a2b      	ldr	r2, [pc, #172]	; (8004144 <PN532_getFirmwareVersion+0xb4>)
 8004098:	463b      	mov	r3, r7
 800409a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800409e:	6018      	str	r0, [r3, #0]
 80040a0:	3304      	adds	r3, #4
 80040a2:	8019      	strh	r1, [r3, #0]

  pn532_packetbuffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
 80040a4:	4b28      	ldr	r3, [pc, #160]	; (8004148 <PN532_getFirmwareVersion+0xb8>)
 80040a6:	2202      	movs	r2, #2
 80040a8:	701a      	strb	r2, [r3, #0]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 1,500)) {
 80040aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80040ae:	2101      	movs	r1, #1
 80040b0:	4825      	ldr	r0, [pc, #148]	; (8004148 <PN532_getFirmwareVersion+0xb8>)
 80040b2:	f000 f84d 	bl	8004150 <PN532_sendCommandCheckAck>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <PN532_getFirmwareVersion+0x30>
    return 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	e03c      	b.n	800413a <PN532_getFirmwareVersion+0xaa>

//Нужна задержка после выполнения подтверждения готовности!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);

   PN532_readdata(pn532_readbuffer, 13, 0xFF);
 80040c0:	22ff      	movs	r2, #255	; 0xff
 80040c2:	210d      	movs	r1, #13
 80040c4:	4821      	ldr	r0, [pc, #132]	; (800414c <PN532_getFirmwareVersion+0xbc>)
 80040c6:	f000 f94b 	bl	8004360 <PN532_readdata>
	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	    }
*/
   //сравнение полученных первых шести байт с массивом правильных данных
   //если сдержимое не одинаковое, от выход с ошибкой;
	if (0 != memcmp((char *)pn532_readbuffer, (char *)pn532response_firmwarevers, 6))
 80040ca:	463b      	mov	r3, r7
 80040cc:	2206      	movs	r2, #6
 80040ce:	4619      	mov	r1, r3
 80040d0:	481e      	ldr	r0, [pc, #120]	; (800414c <PN532_getFirmwareVersion+0xbc>)
 80040d2:	f002 ffcb 	bl	800706c <memcmp>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <PN532_getFirmwareVersion+0x50>
	   { return 0; }
 80040dc:	2300      	movs	r3, #0
 80040de:	e02c      	b.n	800413a <PN532_getFirmwareVersion+0xaa>

  int offset = 7;
 80040e0:	2307      	movs	r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]

  response = pn532_readbuffer[offset++];
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	60fa      	str	r2, [r7, #12]
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <PN532_getFirmwareVersion+0xbc>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	60fa      	str	r2, [r7, #12]
 80040fc:	4a13      	ldr	r2, [pc, #76]	; (800414c <PN532_getFirmwareVersion+0xbc>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	60fa      	str	r2, [r7, #12]
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <PN532_getFirmwareVersion+0xbc>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4313      	orrs	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	60fa      	str	r2, [r7, #12]
 800412c:	4a07      	ldr	r2, [pc, #28]	; (800414c <PN532_getFirmwareVersion+0xbc>)
 800412e:	5cd3      	ldrb	r3, [r2, r3]
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

  return response;
 8004138:	68bb      	ldr	r3, [r7, #8]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	080083d0 	.word	0x080083d0
 8004148:	20000c80 	.word	0x20000c80
 800414c:	20000cc0 	.word	0x20000cc0

08004150 <PN532_sendCommandCheckAck>:
     @returns  1 if everything is OK, 0 if timeout occured before an
               ACK was recieved
 */
 /**************************************************************************/

 bool PN532_sendCommandCheckAck(uint8_t *cmd, uint8_t cmdlen, uint16_t timeout) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
 800415c:	4613      	mov	r3, r2
 800415e:	803b      	strh	r3, [r7, #0]

	 PN532_writecommand(cmd, cmdlen);
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f81b 	bl	80041a0 <PN532_writecommand>

#endif
//------------------------------------------------------------------------------
*/
//Ожидание и чтение байта готовности (0x01)
   if (!PN532_waitready(timeout)) {
 800416a:	883b      	ldrh	r3, [r7, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fa91 	bl	8004694 <PN532_waitready>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <PN532_sendCommandCheckAck+0x2c>
	  return FALSE; }
 8004178:	2300      	movs	r3, #0
 800417a:	e00d      	b.n	8004198 <PN532_sendCommandCheckAck+0x48>

//Нужна задержка после выполнения подтверждения готовности!!!!!
   PN532_Delay(100);
 800417c:	2064      	movs	r0, #100	; 0x64
 800417e:	f7ff fea7 	bl	8003ed0 <PN532_Delay>
  	}
  #endif
//------------------------------------------------------------------------------
*/
// чтение подтверждения
  if (!PN532_readack()) {  return FALSE;  }
 8004182:	f000 f95f 	bl	8004444 <PN532_readack>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <PN532_sendCommandCheckAck+0x40>
 800418c:	2300      	movs	r3, #0
 800418e:	e003      	b.n	8004198 <PN532_sendCommandCheckAck+0x48>

   // For SPI only wait for the chip to be ready again.
   // This is unnecessary with I2C.
  PN532_Delay(100);
 8004190:	2064      	movs	r0, #100	; 0x64
 8004192:	f7ff fe9d 	bl	8003ed0 <PN532_Delay>

//Delay(2);
 //  if (!PN532_waitready(timeout)) {  return FALSE;}
//Delay(1);

   return TRUE; // ack'd command
 8004196:	2301      	movs	r3, #1

 }
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <PN532_writecommand>:

     @param  cmd       Pointer to the command buffer
     @param  cmdlen    Command length in bytes
 */
 /**************************************************************************/
 void PN532_writecommand(uint8_t *cmd, uint8_t cmdlen) {
 80041a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041a4:	b089      	sub	sp, #36	; 0x24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	70fb      	strb	r3, [r7, #3]
 80041ae:	466b      	mov	r3, sp
 80041b0:	461e      	mov	r6, r3

     uint8_t checksum;
     uint8_t packet[8 + cmdlen];
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f103 0108 	add.w	r1, r3, #8
 80041b8:	1e4b      	subs	r3, r1, #1
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	460a      	mov	r2, r1
 80041be:	2300      	movs	r3, #0
 80041c0:	4690      	mov	r8, r2
 80041c2:	4699      	mov	r9, r3
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d8:	460a      	mov	r2, r1
 80041da:	2300      	movs	r3, #0
 80041dc:	4614      	mov	r4, r2
 80041de:	461d      	mov	r5, r3
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	00eb      	lsls	r3, r5, #3
 80041ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ee:	00e2      	lsls	r2, r4, #3
 80041f0:	460b      	mov	r3, r1
 80041f2:	3307      	adds	r3, #7
 80041f4:	08db      	lsrs	r3, r3, #3
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	ebad 0d03 	sub.w	sp, sp, r3
 80041fc:	466b      	mov	r3, sp
 80041fe:	3300      	adds	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
     uint8_t *p = packet;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	61bb      	str	r3, [r7, #24]
     cmdlen++;
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	3301      	adds	r3, #1
 800420a:	70fb      	strb	r3, [r7, #3]

     p[0] = PN532_SPI_DATAWRITE;
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
     p++;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	3301      	adds	r3, #1
 8004216:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_PREAMBLE;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
     p++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3301      	adds	r3, #1
 8004222:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE1;
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
     p++;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3301      	adds	r3, #1
 800422e:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE2;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	701a      	strb	r2, [r3, #0]
     p++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3301      	adds	r3, #1
 800423a:	61bb      	str	r3, [r7, #24]
     checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
 800423c:	23ff      	movs	r3, #255	; 0xff
 800423e:	75fb      	strb	r3, [r7, #23]

     p[0] = cmdlen;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	701a      	strb	r2, [r3, #0]
     p++;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3301      	adds	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
     p[0] = ~cmdlen + 1;
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	425b      	negs	r3, r3
 8004250:	b2da      	uxtb	r2, r3
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	701a      	strb	r2, [r3, #0]
     p++;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	3301      	adds	r3, #1
 800425a:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_HOSTTOPN532;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	22d4      	movs	r2, #212	; 0xd4
 8004260:	701a      	strb	r2, [r3, #0]
     p++;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	3301      	adds	r3, #1
 8004266:	61bb      	str	r3, [r7, #24]
     checksum += PN532_HOSTTOPN532;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	3b2c      	subs	r3, #44	; 0x2c
 800426c:	75fb      	strb	r3, [r7, #23]

     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 800426e:	2300      	movs	r3, #0
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e012      	b.n	800429a <PN532_writecommand+0xfa>
       p[0] = cmd[i];
 8004274:	7ffb      	ldrb	r3, [r7, #31]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	701a      	strb	r2, [r3, #0]
       p++;
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	3301      	adds	r3, #1
 8004284:	61bb      	str	r3, [r7, #24]
       checksum += cmd[i];
 8004286:	7ffb      	ldrb	r3, [r7, #31]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	4413      	add	r3, r2
 8004292:	75fb      	strb	r3, [r7, #23]
     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 8004294:	7ffb      	ldrb	r3, [r7, #31]
 8004296:	3301      	adds	r3, #1
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	7ffa      	ldrb	r2, [r7, #31]
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	3b01      	subs	r3, #1
 80042a0:	429a      	cmp	r2, r3
 80042a2:	dbe7      	blt.n	8004274 <PN532_writecommand+0xd4>
     }

     p[0] = ~checksum;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	701a      	strb	r2, [r3, #0]
     p++;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	3301      	adds	r3, #1
 80042b2:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_POSTAMBLE;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
     p++;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	3301      	adds	r3, #1
 80042be:	61bb      	str	r3, [r7, #24]
//		USART_SendData(USART2_NUM,0x0D);
//		while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
#endif
//-----------------------------------------------------------------------------

     PN532_write( packet, 8 + cmdlen);
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	3308      	adds	r3, #8
 80042c4:	4619      	mov	r1, r3
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f806 	bl	80042d8 <PN532_write>
 80042cc:	46b5      	mov	sp, r6

 }
 80042ce:	bf00      	nop
 80042d0:	3724      	adds	r7, #36	; 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080042d8 <PN532_write>:
/******************************************************************************/
 void PN532_write( uint8_t *buffer, size_t len) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу
    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 80042e2:	bf00      	nop
 80042e4:	2102      	movs	r1, #2
 80042e6:	481c      	ldr	r0, [pc, #112]	; (8004358 <PN532_write+0x80>)
 80042e8:	f002 f942 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f8      	beq.n	80042e4 <PN532_write+0xc>

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 80042f2:	2200      	movs	r2, #0
 80042f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042f8:	4818      	ldr	r0, [pc, #96]	; (800435c <PN532_write+0x84>)
 80042fa:	f001 fd44 	bl	8005d86 <GPIO_WriteBit>

	  //PN532_Delay(100);
	  Delay(2);
 80042fe:	2002      	movs	r0, #2
 8004300:	f7ff f9cc 	bl	800369c <Delay>
	for (size_t i = 0; i < len; i++) {
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e017      	b.n	800433a <PN532_write+0x62>

		SPI_I2S_SendData(SPI2,buffer[i]);
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	4810      	ldr	r0, [pc, #64]	; (8004358 <PN532_write+0x80>)
 8004318:	f002 f8d2 	bl	80064c0 <SPI_I2S_SendData>

	    PN532_Delay(400);
 800431c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004320:	f7ff fdd6 	bl	8003ed0 <PN532_Delay>

	    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET){};  // ждём пока данные уйдут
 8004324:	bf00      	nop
 8004326:	2102      	movs	r1, #2
 8004328:	480b      	ldr	r0, [pc, #44]	; (8004358 <PN532_write+0x80>)
 800432a:	f002 f921 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f8      	beq.n	8004326 <PN532_write+0x4e>
	for (size_t i = 0; i < len; i++) {
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d3e3      	bcc.n	800430a <PN532_write+0x32>

     }

//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004342:	2201      	movs	r2, #1
 8004344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004348:	4804      	ldr	r0, [pc, #16]	; (800435c <PN532_write+0x84>)
 800434a:	f001 fd1c 	bl	8005d86 <GPIO_WriteBit>


 }
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40003800 	.word	0x40003800
 800435c:	40010c00 	.word	0x40010c00

08004360 <PN532_readdata>:

     @param  rd_buff      Pointer to the buffer where data will be written
     @param  len_rd_buff         Number of bytes to be read
 */
 /**************************************************************************/
 void PN532_readdata(uint8_t *rd_buff, uint8_t len_rd_buff,uint16_t sendvalue) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
 800436c:	4613      	mov	r3, r2
 800436e:	803b      	strh	r3, [r7, #0]
      //uint8_t cmd = PN532_SPI_DATAREAD;
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004376:	4831      	ldr	r0, [pc, #196]	; (800443c <PN532_readdata+0xdc>)
 8004378:	f001 fd05 	bl	8005d86 <GPIO_WriteBit>

    // PN532_Delay(100);
     Delay(2);
 800437c:	2002      	movs	r0, #2
 800437e:	f7ff f98d 	bl	800369c <Delay>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8004382:	bf00      	nop
 8004384:	2102      	movs	r1, #2
 8004386:	482e      	ldr	r0, [pc, #184]	; (8004440 <PN532_readdata+0xe0>)
 8004388:	f002 f8f2 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f8      	beq.n	8004384 <PN532_readdata+0x24>
	   SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 8004392:	2103      	movs	r1, #3
 8004394:	482a      	ldr	r0, [pc, #168]	; (8004440 <PN532_readdata+0xe0>)
 8004396:	f002 f893 	bl	80064c0 <SPI_I2S_SendData>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800439a:	bf00      	nop
 800439c:	2102      	movs	r1, #2
 800439e:	4828      	ldr	r0, [pc, #160]	; (8004440 <PN532_readdata+0xe0>)
 80043a0:	f002 f8e6 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f8      	beq.n	800439c <PN532_readdata+0x3c>
	   while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80043aa:	bf00      	nop
 80043ac:	2101      	movs	r1, #1
 80043ae:	4824      	ldr	r0, [pc, #144]	; (8004440 <PN532_readdata+0xe0>)
 80043b0:	f002 f8de 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f8      	beq.n	80043ac <PN532_readdata+0x4c>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 80043ba:	4821      	ldr	r0, [pc, #132]	; (8004440 <PN532_readdata+0xe0>)
 80043bc:	f002 f88e 	bl	80064dc <SPI_I2S_ReceiveData>
 80043c0:	4603      	mov	r3, r0
 80043c2:	73bb      	strb	r3, [r7, #14]

	   // чтение
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e029      	b.n	800441e <PN532_readdata+0xbe>
	         PN532_Delay(400);
 80043ca:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80043ce:	f7ff fd7f 	bl	8003ed0 <PN532_Delay>

	    	 SPI_I2S_SendData(SPI2, sendvalue);
 80043d2:	883b      	ldrh	r3, [r7, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	481a      	ldr	r0, [pc, #104]	; (8004440 <PN532_readdata+0xe0>)
 80043d8:	f002 f872 	bl	80064c0 <SPI_I2S_SendData>

	         PN532_Delay(400);
 80043dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80043e0:	f7ff fd76 	bl	8003ed0 <PN532_Delay>

			 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80043e4:	bf00      	nop
 80043e6:	2102      	movs	r1, #2
 80043e8:	4815      	ldr	r0, [pc, #84]	; (8004440 <PN532_readdata+0xe0>)
 80043ea:	f002 f8c1 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f8      	beq.n	80043e6 <PN532_readdata+0x86>

	    	 while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появтся
 80043f4:	bf00      	nop
 80043f6:	2101      	movs	r1, #1
 80043f8:	4811      	ldr	r0, [pc, #68]	; (8004440 <PN532_readdata+0xe0>)
 80043fa:	f002 f8b9 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f8      	beq.n	80043f6 <PN532_readdata+0x96>

	    	 rd_buff[i] =SPI_I2S_ReceiveData(SPI2);
 8004404:	480e      	ldr	r0, [pc, #56]	; (8004440 <PN532_readdata+0xe0>)
 8004406:	f002 f869 	bl	80064dc <SPI_I2S_ReceiveData>
 800440a:	4603      	mov	r3, r0
 800440c:	4619      	mov	r1, r3
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	b2ca      	uxtb	r2, r1
 8004416:	701a      	strb	r2, [r3, #0]
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	3301      	adds	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	7bfa      	ldrb	r2, [r7, #15]
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	429a      	cmp	r2, r3
 8004424:	d3d1      	bcc.n	80043ca <PN532_readdata+0x6a>


//	 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу


	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN, 1);
 8004426:	2201      	movs	r2, #1
 8004428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800442c:	4803      	ldr	r0, [pc, #12]	; (800443c <PN532_readdata+0xdc>)
 800442e:	f001 fcaa 	bl	8005d86 <GPIO_WriteBit>
	    	USART_SendData(USART2_NUM,rd_buff[i]);
	    }
#endif
//------------------------------------------------------------------------------

}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40010c00 	.word	0x40010c00
 8004440:	40003800 	.word	0x40003800

08004444 <PN532_readack>:
 /**************************************************************************/
 /*!
     @brief  Tries to read the SPI or I2C ACK signal
 */
 /**************************************************************************/
 bool PN532_readack() {
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0

	 const uint8_t pn532ack[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00};
 800444a:	4a3f      	ldr	r2, [pc, #252]	; (8004548 <PN532_readack+0x104>)
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004454:	6018      	str	r0, [r3, #0]
 8004456:	3304      	adds	r3, #4
 8004458:	8019      	strh	r1, [r3, #0]
	 uint8_t ackbuff[6];
	 //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 0
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 800445a:	2200      	movs	r2, #0
 800445c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004460:	483a      	ldr	r0, [pc, #232]	; (800454c <PN532_readack+0x108>)
 8004462:	f001 fc90 	bl	8005d86 <GPIO_WriteBit>

	 //PN532_Delay(100);
	 Delay(2);
 8004466:	2002      	movs	r0, #2
 8004468:	f7ff f918 	bl	800369c <Delay>
//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800446c:	bf00      	nop
 800446e:	2102      	movs	r1, #2
 8004470:	4837      	ldr	r0, [pc, #220]	; (8004550 <PN532_readack+0x10c>)
 8004472:	f002 f87d 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f8      	beq.n	800446e <PN532_readack+0x2a>

	  SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 800447c:	2103      	movs	r1, #3
 800447e:	4834      	ldr	r0, [pc, #208]	; (8004550 <PN532_readack+0x10c>)
 8004480:	f002 f81e 	bl	80064c0 <SPI_I2S_SendData>
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8004484:	bf00      	nop
 8004486:	2102      	movs	r1, #2
 8004488:	4831      	ldr	r0, [pc, #196]	; (8004550 <PN532_readack+0x10c>)
 800448a:	f002 f871 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f8      	beq.n	8004486 <PN532_readack+0x42>

//Читаем данные, чтобы очистить приемный буфер иначе там данные от байта готовности!!????(непонятно!)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8004494:	bf00      	nop
 8004496:	2101      	movs	r1, #1
 8004498:	482d      	ldr	r0, [pc, #180]	; (8004550 <PN532_readack+0x10c>)
 800449a:	f002 f869 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f8      	beq.n	8004496 <PN532_readack+0x52>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 80044a4:	482a      	ldr	r0, [pc, #168]	; (8004550 <PN532_readack+0x10c>)
 80044a6:	f002 f819 	bl	80064dc <SPI_I2S_ReceiveData>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73bb      	strb	r3, [r7, #14]

//Читаем 6 байт пакета подтверждения
	  for (uint8_t i = 0; i < 6; i++) {
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
 80044b2:	e02f      	b.n	8004514 <PN532_readack+0xd0>

		  PN532_Delay(100);
 80044b4:	2064      	movs	r0, #100	; 0x64
 80044b6:	f7ff fd0b 	bl	8003ed0 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80044ba:	bf00      	nop
 80044bc:	2102      	movs	r1, #2
 80044be:	4824      	ldr	r0, [pc, #144]	; (8004550 <PN532_readack+0x10c>)
 80044c0:	f002 f856 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f8      	beq.n	80044bc <PN532_readack+0x78>
	      SPI_I2S_SendData(SPI2, 0x00);
 80044ca:	2100      	movs	r1, #0
 80044cc:	4820      	ldr	r0, [pc, #128]	; (8004550 <PN532_readack+0x10c>)
 80044ce:	f001 fff7 	bl	80064c0 <SPI_I2S_SendData>

	      PN532_Delay(100);
 80044d2:	2064      	movs	r0, #100	; 0x64
 80044d4:	f7ff fcfc 	bl	8003ed0 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80044d8:	bf00      	nop
 80044da:	2102      	movs	r1, #2
 80044dc:	481c      	ldr	r0, [pc, #112]	; (8004550 <PN532_readack+0x10c>)
 80044de:	f002 f847 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f8      	beq.n	80044da <PN532_readack+0x96>
    	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80044e8:	bf00      	nop
 80044ea:	2101      	movs	r1, #1
 80044ec:	4818      	ldr	r0, [pc, #96]	; (8004550 <PN532_readack+0x10c>)
 80044ee:	f002 f83f 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f8      	beq.n	80044ea <PN532_readack+0xa6>
	      ackbuff[i] =SPI_I2S_ReceiveData(SPI2);
 80044f8:	4815      	ldr	r0, [pc, #84]	; (8004550 <PN532_readack+0x10c>)
 80044fa:	f001 ffef 	bl	80064dc <SPI_I2S_ReceiveData>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	3310      	adds	r3, #16
 8004508:	443b      	add	r3, r7
 800450a:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for (uint8_t i = 0; i < 6; i++) {
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	3301      	adds	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b05      	cmp	r3, #5
 8004518:	d9cc      	bls.n	80044b4 <PN532_readack+0x70>

	     }

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	    GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800451a:	2201      	movs	r2, #1
 800451c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004520:	480a      	ldr	r0, [pc, #40]	; (800454c <PN532_readack+0x108>)
 8004522:	f001 fc30 	bl	8005d86 <GPIO_WriteBit>
//------------------------------------------------------------------------------

//сравнение полученных  шести байт с массивом правильных данных
//если сдержимое не одинаковое, от выход с ошибкой;
//проверка подтверждения (ack)
   return (0 == memcmp((char *)ackbuff, (char *)pn532ack, sizeof(pn532ack)));
 8004526:	f107 0108 	add.w	r1, r7, #8
 800452a:	463b      	mov	r3, r7
 800452c:	2206      	movs	r2, #6
 800452e:	4618      	mov	r0, r3
 8004530:	f002 fd9c 	bl	800706c <memcmp>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf0c      	ite	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	2300      	movne	r3, #0
 800453e:	b2db      	uxtb	r3, r3

}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	080083d8 	.word	0x080083d8
 800454c:	40010c00 	.word	0x40010c00
 8004550:	40003800 	.word	0x40003800

08004554 <PN532_isready>:
 /**************************************************************************/
 /*!
     @brief  Return true if the PN532 is ready with a response.
 */
 /**************************************************************************/
 bool PN532_isready() {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
     uint8_t reply;
// 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 800455a:	bf00      	nop
 800455c:	2102      	movs	r1, #2
 800455e:	4849      	ldr	r0, [pc, #292]	; (8004684 <PN532_isready+0x130>)
 8004560:	f002 f806 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f8      	beq.n	800455c <PN532_isready+0x8>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить принимающий регистр (не понятно зачем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 800456a:	bf00      	nop
 800456c:	2101      	movs	r1, #1
 800456e:	4845      	ldr	r0, [pc, #276]	; (8004684 <PN532_isready+0x130>)
 8004570:	f001 fffe 	bl	8006570 <SPI_I2S_GetFlagStatus>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f8      	beq.n	800456c <PN532_isready+0x18>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 800457a:	4842      	ldr	r0, [pc, #264]	; (8004684 <PN532_isready+0x130>)
 800457c:	f001 ffae 	bl	80064dc <SPI_I2S_ReceiveData>
 8004580:	4603      	mov	r3, r0
 8004582:	4619      	mov	r1, r3
 8004584:	4b40      	ldr	r3, [pc, #256]	; (8004688 <PN532_isready+0x134>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	b2c9      	uxtb	r1, r1
 800458c:	4b3f      	ldr	r3, [pc, #252]	; (800468c <PN532_isready+0x138>)
 800458e:	5499      	strb	r1, [r3, r2]
	  rl++;
 8004590:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <PN532_isready+0x134>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	4b3b      	ldr	r3, [pc, #236]	; (8004688 <PN532_isready+0x134>)
 800459a:	701a      	strb	r2, [r3, #0]
//NSS устанавливаем в 0
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a2:	483b      	ldr	r0, [pc, #236]	; (8004690 <PN532_isready+0x13c>)
 80045a4:	f001 fbef 	bl	8005d86 <GPIO_WriteBit>

	    //PN532_Delay(100);
	    Delay(2);
 80045a8:	2002      	movs	r0, #2
 80045aa:	f7ff f877 	bl	800369c <Delay>
	  SPI_I2S_SendData(SPI2, PN532_SPI_STATREAD);//посылка команды чтения байта состояния
 80045ae:	2102      	movs	r1, #2
 80045b0:	4834      	ldr	r0, [pc, #208]	; (8004684 <PN532_isready+0x130>)
 80045b2:	f001 ff85 	bl	80064c0 <SPI_I2S_SendData>

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80045b6:	bf00      	nop
 80045b8:	2102      	movs	r1, #2
 80045ba:	4832      	ldr	r0, [pc, #200]	; (8004684 <PN532_isready+0x130>)
 80045bc:	f001 ffd8 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f8      	beq.n	80045b8 <PN532_isready+0x64>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить примнающий регистр (не понятно зачем)
//Получается, что нужно прочитать 2 раза приемный буфер, что бы потом получить корретные данные
//при посылке байта и чтении данных после его передачи (странно!!! установленно опытным путем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80045c6:	bf00      	nop
 80045c8:	2101      	movs	r1, #1
 80045ca:	482e      	ldr	r0, [pc, #184]	; (8004684 <PN532_isready+0x130>)
 80045cc:	f001 ffd0 	bl	8006570 <SPI_I2S_GetFlagStatus>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f8      	beq.n	80045c8 <PN532_isready+0x74>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 80045d6:	482b      	ldr	r0, [pc, #172]	; (8004684 <PN532_isready+0x130>)
 80045d8:	f001 ff80 	bl	80064dc <SPI_I2S_ReceiveData>
 80045dc:	4603      	mov	r3, r0
 80045de:	4619      	mov	r1, r3
 80045e0:	4b29      	ldr	r3, [pc, #164]	; (8004688 <PN532_isready+0x134>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	b2c9      	uxtb	r1, r1
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <PN532_isready+0x138>)
 80045ea:	5499      	strb	r1, [r3, r2]
	  rl++;
 80045ec:	4b26      	ldr	r3, [pc, #152]	; (8004688 <PN532_isready+0x134>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <PN532_isready+0x134>)
 80045f6:	701a      	strb	r2, [r3, #0]

	     PN532_Delay(400);
 80045f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80045fc:	f7ff fc68 	bl	8003ed0 <PN532_Delay>

      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8004600:	bf00      	nop
 8004602:	2102      	movs	r1, #2
 8004604:	481f      	ldr	r0, [pc, #124]	; (8004684 <PN532_isready+0x130>)
 8004606:	f001 ffb3 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f8      	beq.n	8004602 <PN532_isready+0xae>

	  SPI_I2S_SendData(SPI2, 0XFF);//посылка "пустышки", чтобы забрать байт состояния
 8004610:	21ff      	movs	r1, #255	; 0xff
 8004612:	481c      	ldr	r0, [pc, #112]	; (8004684 <PN532_isready+0x130>)
 8004614:	f001 ff54 	bl	80064c0 <SPI_I2S_SendData>

	     PN532_Delay(400);
 8004618:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800461c:	f7ff fc58 	bl	8003ed0 <PN532_Delay>

   	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8004620:	bf00      	nop
 8004622:	2102      	movs	r1, #2
 8004624:	4817      	ldr	r0, [pc, #92]	; (8004684 <PN532_isready+0x130>)
 8004626:	f001 ffa3 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f8      	beq.n	8004622 <PN532_isready+0xce>

	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {};  // ждём пока данные появятся
 8004630:	bf00      	nop
 8004632:	2101      	movs	r1, #1
 8004634:	4813      	ldr	r0, [pc, #76]	; (8004684 <PN532_isready+0x130>)
 8004636:	f001 ff9b 	bl	8006570 <SPI_I2S_GetFlagStatus>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f8      	beq.n	8004632 <PN532_isready+0xde>

	  reply = SPI_I2S_ReceiveData(SPI2);
 8004640:	4810      	ldr	r0, [pc, #64]	; (8004684 <PN532_isready+0x130>)
 8004642:	f001 ff4b 	bl	80064dc <SPI_I2S_ReceiveData>
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 1
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800464a:	2201      	movs	r2, #1
 800464c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004650:	480f      	ldr	r0, [pc, #60]	; (8004690 <PN532_isready+0x13c>)
 8004652:	f001 fb98 	bl	8005d86 <GPIO_WriteBit>

	   replybuff[rl]=reply;
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <PN532_isready+0x134>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <PN532_isready+0x138>)
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	5453      	strb	r3, [r2, r1]
       rl++;
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <PN532_isready+0x134>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <PN532_isready+0x134>)
 800466c:	701a      	strb	r2, [r3, #0]

       //USART_SendData(USART2_NUM,reply);

// Проверка ответа с байтом готовности (0x01);
     return reply == PN532_SPI_READY;
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	2b01      	cmp	r3, #1
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3


 }
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40003800 	.word	0x40003800
 8004688:	20000c7c 	.word	0x20000c7c
 800468c:	20000c68 	.word	0x20000c68
 8004690:	40010c00 	.word	0x40010c00

08004694 <PN532_waitready>:
     @brief  Waits until the PN532 is ready.

     @param  timeout   Timeout before giving up
 */
 /**************************************************************************/
 bool PN532_waitready(uint16_t timeout) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	80fb      	strh	r3, [r7, #6]
   uint16_t timer = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	81fb      	strh	r3, [r7, #14]

   Delay(5);
 80046a2:	2005      	movs	r0, #5
 80046a4:	f7fe fffa 	bl	800369c <Delay>
   timer += 5;
 80046a8:	89fb      	ldrh	r3, [r7, #14]
 80046aa:	3305      	adds	r3, #5
 80046ac:	81fb      	strh	r3, [r7, #14]
   //USART_SendData(USART2_NUM,0xFF);

   while (!PN532_isready()) {
 80046ae:	e00e      	b.n	80046ce <PN532_waitready+0x3a>
     if (timeout != 0) {
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <PN532_waitready+0x34>
       timer += 5;
 80046b6:	89fb      	ldrh	r3, [r7, #14]
 80046b8:	3305      	adds	r3, #5
 80046ba:	81fb      	strh	r3, [r7, #14]
       if (timer > timeout) {
 80046bc:	89fa      	ldrh	r2, [r7, #14]
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d901      	bls.n	80046c8 <PN532_waitready+0x34>
         return FALSE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e008      	b.n	80046da <PN532_waitready+0x46>
       }
     }
     Delay(5);
 80046c8:	2005      	movs	r0, #5
 80046ca:	f7fe ffe7 	bl	800369c <Delay>
   while (!PN532_isready()) {
 80046ce:	f7ff ff41 	bl	8004554 <PN532_isready>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0eb      	beq.n	80046b0 <PN532_waitready+0x1c>
   }
   return TRUE;
 80046d8:	2301      	movs	r3, #1
 }
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <PN532_mifareclassic_AuthenticateBlock>:
 /**************************************************************************/
 uint8_t PN532_mifareclassic_AuthenticateBlock(uint8_t *uid,
                                                         uint8_t uidLen,
                                                         uint32_t blockNumber,
                                                         uint8_t keyNumber,
                                                         uint8_t *keyData) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	461a      	mov	r2, r3
 80046f0:	460b      	mov	r3, r1
 80046f2:	72fb      	strb	r3, [r7, #11]
 80046f4:	4613      	mov	r3, r2
 80046f6:	72bb      	strb	r3, [r7, #10]
   // uint8_t len;
   uint8_t i;

   // Hang on to the key and uid data
   memcpy(_key, keyData, 6);
 80046f8:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 80046fa:	6a3a      	ldr	r2, [r7, #32]
 80046fc:	6810      	ldr	r0, [r2, #0]
 80046fe:	6018      	str	r0, [r3, #0]
 8004700:	8892      	ldrh	r2, [r2, #4]
 8004702:	809a      	strh	r2, [r3, #4]
   memcpy(_uid, uid, uidLen);
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	461a      	mov	r2, r3
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	482c      	ldr	r0, [pc, #176]	; (80047bc <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 800470c:	f002 fcbe 	bl	800708c <memcpy>
   _uidLen = uidLen;
 8004710:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8004716:	701a      	strb	r2, [r3, #0]
   PN532DEBUGPRINT.print(F(": "));
   Adafruit_PN532::PrintHex(_key, 6);
 #endif
*/
   // Prepare the authentication command //
   pn532_packetbuffer[0] =
 8004718:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800471a:	2240      	movs	r2, #64	; 0x40
 800471c:	701a      	strb	r2, [r3, #0]
       PN532_COMMAND_INDATAEXCHANGE; /* Data Exchange Header */
   pn532_packetbuffer[1] = 1;        /* Max card numbers */
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004720:	2201      	movs	r2, #1
 8004722:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
 8004724:	7abb      	ldrb	r3, [r7, #10]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <PN532_mifareclassic_AuthenticateBlock+0x4a>
 800472a:	2261      	movs	r2, #97	; 0x61
 800472c:	e000      	b.n	8004730 <PN532_mifareclassic_AuthenticateBlock+0x4c>
 800472e:	2260      	movs	r2, #96	; 0x60
 8004730:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004732:	709a      	strb	r2, [r3, #2]
   //pn532_packetbuffer[2] = 0x61;
   pn532_packetbuffer[3] =
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800473a:	70da      	strb	r2, [r3, #3]
       blockNumber; /* Block Number (1K = 0..63, 4K = 0..255 */
   memcpy(pn532_packetbuffer + 4, _key, 6);
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <PN532_mifareclassic_AuthenticateBlock+0xe4>)
 800473e:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 8004740:	6810      	ldr	r0, [r2, #0]
 8004742:	6018      	str	r0, [r3, #0]
 8004744:	8892      	ldrh	r2, [r2, #4]
 8004746:	809a      	strh	r2, [r3, #4]
   for (i = 0; i < _uidLen; i++) {
 8004748:	2300      	movs	r3, #0
 800474a:	75fb      	strb	r3, [r7, #23]
 800474c:	e00a      	b.n	8004764 <PN532_mifareclassic_AuthenticateBlock+0x80>
     pn532_packetbuffer[10 + i] = _uid[i]; /* 4 byte card ID */
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 8004752:	56d2      	ldrsb	r2, [r2, r3]
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	330a      	adds	r3, #10
 8004758:	b2d1      	uxtb	r1, r2
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 800475c:	54d1      	strb	r1, [r2, r3]
   for (i = 0; i < _uidLen; i++) {
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	3301      	adds	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8004768:	f992 2000 	ldrsb.w	r2, [r2]
 800476c:	4293      	cmp	r3, r2
 800476e:	dbee      	blt.n	800474e <PN532_mifareclassic_AuthenticateBlock+0x6a>
  	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
  	    	USART_SendData(USART2_NUM,pn532_packetbuffer[i]);
  	    }
*/

   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 10 + _uidLen,100))
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8004772:	f993 3000 	ldrsb.w	r3, [r3]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	330a      	adds	r3, #10
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2264      	movs	r2, #100	; 0x64
 800477e:	4619      	mov	r1, r3
 8004780:	4810      	ldr	r0, [pc, #64]	; (80047c4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004782:	f7ff fce5 	bl	8004150 <PN532_sendCommandCheckAck>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <PN532_mifareclassic_AuthenticateBlock+0xac>
     return 0;
 800478c:	2300      	movs	r3, #0
 800478e:	e00e      	b.n	80047ae <PN532_mifareclassic_AuthenticateBlock+0xca>
   Delay(10);
 8004790:	200a      	movs	r0, #10
 8004792:	f7fe ff83 	bl	800369c <Delay>
   // Read the response packet
   PN532_readdata(pn532_readbuffer, 12,0xFF);
 8004796:	22ff      	movs	r2, #255	; 0xff
 8004798:	210c      	movs	r1, #12
 800479a:	480c      	ldr	r0, [pc, #48]	; (80047cc <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 800479c:	f7ff fde0 	bl	8004360 <PN532_readdata>
*/
   // check if the response is valid and we are authenticated???
   // for an auth success it should be bytes 5-7: 0xD5 0x41 0x00
   // Mifare auth error is technically byte 7: 0x14 but anything other and 0x00
   // is not good
   if (pn532_readbuffer[7] != 0x00) {
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 80047a2:	79db      	ldrb	r3, [r3, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <PN532_mifareclassic_AuthenticateBlock+0xc8>
	   for (uint8_t i = 0; i < 12; i++) {
	 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
	 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	 	    }
 #endif
     return 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <PN532_mifareclassic_AuthenticateBlock+0xca>
   }

   return 1;
 80047ac:	2301      	movs	r3, #1
 }
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000d08 	.word	0x20000d08
 80047bc:	20000d00 	.word	0x20000d00
 80047c0:	20000d07 	.word	0x20000d07
 80047c4:	20000c80 	.word	0x20000c80
 80047c8:	20000c84 	.word	0x20000c84
 80047cc:	20000cc0 	.word	0x20000cc0

080047d0 <PN532_mifareclassic_ReadDataBlock>:
                           retrieved data (if any)
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_ReadDataBlock(uint8_t blockNumber,
                                                     uint8_t *data) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	71fb      	strb	r3, [r7, #7]
 //  PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));
   //PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;               /* Card number */
 80047e2:	4b16      	ldr	r3, [pc, #88]	; (800483c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_READ; /* Mifare Read command = 0x30 */
 80047e8:	4b14      	ldr	r3, [pc, #80]	; (800483c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80047ea:	2230      	movs	r2, #48	; 0x30
 80047ec:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] = blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
 80047ee:	4a13      	ldr	r2, [pc, #76]	; (800483c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	70d3      	strb	r3, [r2, #3]

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,100)) {
 80047f4:	2264      	movs	r2, #100	; 0x64
 80047f6:	2104      	movs	r1, #4
 80047f8:	4810      	ldr	r0, [pc, #64]	; (800483c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 80047fa:	f7ff fca9 	bl	8004150 <PN532_sendCommandCheckAck>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <PN532_mifareclassic_ReadDataBlock+0x38>
 #ifdef MIFAREDEBUG
   //  PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
 #endif
     return 0;
 8004804:	2300      	movs	r3, #0
 8004806:	e014      	b.n	8004832 <PN532_mifareclassic_ReadDataBlock+0x62>
   }
Delay(10);
 8004808:	200a      	movs	r0, #10
 800480a:	f7fe ff47 	bl	800369c <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 800480e:	22ff      	movs	r2, #255	; 0xff
 8004810:	211a      	movs	r1, #26
 8004812:	480b      	ldr	r0, [pc, #44]	; (8004840 <PN532_mifareclassic_ReadDataBlock+0x70>)
 8004814:	f7ff fda4 	bl	8004360 <PN532_readdata>

   /* If byte 8 isn't 0x00 we probably have an error */
   if (pn532_readbuffer[7] != 0x00) {
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <PN532_mifareclassic_ReadDataBlock+0x70>)
 800481a:	79db      	ldrb	r3, [r3, #7]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <PN532_mifareclassic_ReadDataBlock+0x54>
 #ifdef MIFAREDEBUG
  //   PN532DEBUGPRINT.println(F("Unexpected response"));
    // Adafruit_PN532::PrintHexChar(pn532_packetbuffer, 26);
 #endif
     return 0;
 8004820:	2300      	movs	r3, #0
 8004822:	e006      	b.n	8004832 <PN532_mifareclassic_ReadDataBlock+0x62>
   }

   /* Copy the 16 data bytes to the output buffer        */
   /* Block content starts at byte 9 of a valid response */
   memcpy(data, pn532_readbuffer + 8, 16);
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <PN532_mifareclassic_ReadDataBlock+0x74>)
 8004826:	2210      	movs	r2, #16
 8004828:	4619      	mov	r1, r3
 800482a:	6838      	ldr	r0, [r7, #0]
 800482c:	f002 fc2e 	bl	800708c <memcpy>
  // PN532DEBUGPRINT.print(F("Block "));
  // PN532DEBUGPRINT.println(blockNumber);
  // Adafruit_PN532::PrintHexChar(data, 16);
 #endif

   return 1;
 8004830:	2301      	movs	r3, #1
 }
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000c80 	.word	0x20000c80
 8004840:	20000cc0 	.word	0x20000cc0
 8004844:	20000cc8 	.word	0x20000cc8

08004848 <PN532_mifareclassic_WriteDataBlock>:
     @param  data          The byte array that contains the data to write.
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_WriteDataBlock(uint8_t blockNumber,
                                                      uint8_t *data) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	71fb      	strb	r3, [r7, #7]
  // PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));
  // PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the first command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8004854:	4b15      	ldr	r3, [pc, #84]	; (80048ac <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;                /* Card number */
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <PN532_mifareclassic_WriteDataBlock+0x64>)
 800485c:	2201      	movs	r2, #1
 800485e:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_WRITE; /* Mifare Write command = 0xA0 */
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004862:	22a0      	movs	r2, #160	; 0xa0
 8004864:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] =
 8004866:	4a11      	ldr	r2, [pc, #68]	; (80048ac <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	70d3      	strb	r3, [r2, #3]
       blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
   memcpy(pn532_packetbuffer + 4, data, 16); /* Data Payload */
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <PN532_mifareclassic_WriteDataBlock+0x68>)
 800486e:	2210      	movs	r2, #16
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f002 fc0a 	bl	800708c <memcpy>

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 20,100)) {
 8004878:	2264      	movs	r2, #100	; 0x64
 800487a:	2114      	movs	r1, #20
 800487c:	480b      	ldr	r0, [pc, #44]	; (80048ac <PN532_mifareclassic_WriteDataBlock+0x64>)
 800487e:	f7ff fc67 	bl	8004150 <PN532_sendCommandCheckAck>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <PN532_mifareclassic_WriteDataBlock+0x44>
 #ifdef MIFAREDEBUG
 //    PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
 #endif
     return 0;
 8004888:	2300      	movs	r3, #0
 800488a:	e00b      	b.n	80048a4 <PN532_mifareclassic_WriteDataBlock+0x5c>
   }
   Delay(10);
 800488c:	200a      	movs	r0, #10
 800488e:	f7fe ff05 	bl	800369c <Delay>
   Delay(10);
 8004892:	200a      	movs	r0, #10
 8004894:	f7fe ff02 	bl	800369c <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 8004898:	22ff      	movs	r2, #255	; 0xff
 800489a:	211a      	movs	r1, #26
 800489c:	4805      	ldr	r0, [pc, #20]	; (80048b4 <PN532_mifareclassic_WriteDataBlock+0x6c>)
 800489e:	f7ff fd5f 	bl	8004360 <PN532_readdata>
   for (uint8_t i = 0; i < 26; i++) {
 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
 	    }
*/
   return 1;
 80048a2:	2301      	movs	r3, #1
 }
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000c80 	.word	0x20000c80
 80048b0:	20000c84 	.word	0x20000c84
 80048b4:	20000cc0 	.word	0x20000cc0

080048b8 <RTC_INIT>:
#include "rtc.h"



void RTC_INIT(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
	if((RCC->BDCR & RCC_BDCR_RTCEN) != RCC_BDCR_RTCEN){		// проверка работы часов, если не включены, то инициализировать
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <RTC_INIT+0xf4>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c8:	d06c      	beq.n	80049a4 <RTC_INIT+0xec>
		RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <RTC_INIT+0xf4>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	4a37      	ldr	r2, [pc, #220]	; (80049ac <RTC_INIT+0xf4>)
 80048d0:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 80048d4:	61d3      	str	r3, [r2, #28]
		PWR->CR |= PWR_CR_DBP;		// разрешение доступа к Backup области
 80048d6:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <RTC_INIT+0xf8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a35      	ldr	r2, [pc, #212]	; (80049b0 <RTC_INIT+0xf8>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	6013      	str	r3, [r2, #0]
		RCC->BDCR |= RCC_BDCR_BDRST;	// сброс Backup области
 80048e2:	4b32      	ldr	r3, [pc, #200]	; (80049ac <RTC_INIT+0xf4>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4a31      	ldr	r2, [pc, #196]	; (80049ac <RTC_INIT+0xf4>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ec:	6213      	str	r3, [r2, #32]
		RCC->BDCR &= ~RCC_BDCR_BDRST;
 80048ee:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <RTC_INIT+0xf4>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4a2e      	ldr	r2, [pc, #184]	; (80049ac <RTC_INIT+0xf4>)
 80048f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f8:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_LSE;	// выбор LSE источника (кварц 32768) и подача тактирования
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <RTC_INIT+0xf4>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	4a2b      	ldr	r2, [pc, #172]	; (80049ac <RTC_INIT+0xf4>)
 8004900:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004904:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_LSEON;
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <RTC_INIT+0xf4>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	4a28      	ldr	r2, [pc, #160]	; (80049ac <RTC_INIT+0xf4>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6213      	str	r3, [r2, #32]
		while((RCC->BDCR&RCC_BDCR_LSEON) != RCC_BDCR_LSEON){}	// ожидание включения
 8004912:	bf00      	nop
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <RTC_INIT+0xf4>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d1f9      	bne.n	8004914 <RTC_INIT+0x5c>
		BKP->RTCCR |= 3;	// калибровка RTC
 8004920:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <RTC_INIT+0xfc>)
 8004922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004924:	b29b      	uxth	r3, r3
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <RTC_INIT+0xfc>)
 8004928:	f043 0303 	orr.w	r3, r3, #3
 800492c:	b29b      	uxth	r3, r3
 800492e:	8593      	strh	r3, [r2, #44]	; 0x2c
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// проверка на конец изменений регистров RTC
 8004930:	bf00      	nop
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <RTC_INIT+0x100>)
 8004934:	889b      	ldrh	r3, [r3, #4]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f8      	beq.n	8004932 <RTC_INIT+0x7a>
		RTC->CRL |= RTC_CRL_CNF;		// разрешение записи в регистры RTC
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <RTC_INIT+0x100>)
 8004942:	889b      	ldrh	r3, [r3, #4]
 8004944:	b29b      	uxth	r3, r3
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <RTC_INIT+0x100>)
 8004948:	f043 0310 	orr.w	r3, r3, #16
 800494c:	b29b      	uxth	r3, r3
 800494e:	8093      	strh	r3, [r2, #4]
		RTC->PRLL = 0x7FFF;		// настройка делителя на 32768
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <RTC_INIT+0x100>)
 8004952:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004956:	819a      	strh	r2, [r3, #12]
		RTC->CRL &= ~RTC_CRL_CNF;	// запрет записи в регистры RTC
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <RTC_INIT+0x100>)
 800495a:	889b      	ldrh	r3, [r3, #4]
 800495c:	b29b      	uxth	r3, r3
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <RTC_INIT+0x100>)
 8004960:	f023 0310 	bic.w	r3, r3, #16
 8004964:	b29b      	uxth	r3, r3
 8004966:	8093      	strh	r3, [r2, #4]
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// ожидание конца записи
 8004968:	bf00      	nop
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <RTC_INIT+0x100>)
 800496c:	889b      	ldrh	r3, [r3, #4]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f8      	beq.n	800496a <RTC_INIT+0xb2>
		RTC->CRL &= (uint16_t)~RTC_CRL_CNF;		//синхронизация RTC
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <RTC_INIT+0x100>)
 800497a:	889b      	ldrh	r3, [r3, #4]
 800497c:	b29b      	uxth	r3, r3
 800497e:	4a0e      	ldr	r2, [pc, #56]	; (80049b8 <RTC_INIT+0x100>)
 8004980:	f023 0310 	bic.w	r3, r3, #16
 8004984:	b29b      	uxth	r3, r3
 8004986:	8093      	strh	r3, [r2, #4]
		while((RTC->CRL&RTC_CRL_RSF) != RTC_CRL_RSF){}	// ожидание синхронизации
 8004988:	bf00      	nop
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <RTC_INIT+0x100>)
 800498c:	889b      	ldrh	r3, [r3, #4]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d1f8      	bne.n	800498a <RTC_INIT+0xd2>
		PWR->CR &= ~(PWR_CR_DBP);	// запрет доступа к Backup области
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <RTC_INIT+0xf8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <RTC_INIT+0xf8>)
 800499e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a2:	6013      	str	r3, [r2, #0]

	}
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
 80049b4:	40006c00 	.word	0x40006c00
 80049b8:	40002800 	.word	0x40002800

080049bc <RTC_GET_COUNTER>:


uint32_t RTC_GET_COUNTER(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
	return (uint32_t)((RTC->CNTH << 16) | RTC->CNTL);	// получение значения счетчика
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <RTC_GET_COUNTER+0x1c>)
 80049c2:	8b1b      	ldrh	r3, [r3, #24]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	4a03      	ldr	r2, [pc, #12]	; (80049d8 <RTC_GET_COUNTER+0x1c>)
 80049ca:	8b92      	ldrh	r2, [r2, #28]
 80049cc:	b292      	uxth	r2, r2
 80049ce:	4313      	orrs	r3, r2
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	40002800 	.word	0x40002800

080049dc <RTC_SET_COUNTER>:

void RTC_SET_COUNTER(uint32_t count)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <RTC_SET_COUNTER+0x88>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <RTC_SET_COUNTER+0x88>)
 80049ea:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 80049ee:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;	// разрешение доступа к Backup области
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <RTC_SET_COUNTER+0x8c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <RTC_SET_COUNTER+0x8c>)
 80049f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fa:	6013      	str	r3, [r2, #0]
	while(!(RTC->CRL & RTC_CRL_RTOFF)); // проверка конца изменения регистров RTC
 80049fc:	bf00      	nop
 80049fe:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a00:	889b      	ldrh	r3, [r3, #4]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f8      	beq.n	80049fe <RTC_SET_COUNTER+0x22>
	RTC->CRL |= RTC_CRL_CNF;	// разрешение записи в регистры RTC
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a0e:	889b      	ldrh	r3, [r3, #4]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a14:	f043 0310 	orr.w	r3, r3, #16
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8093      	strh	r3, [r2, #4]
	RTC->CNTH = count >> 16;	// запись нового значения счетного регистра
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0c1a      	lsrs	r2, r3, #16
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a22:	b292      	uxth	r2, r2
 8004a24:	831a      	strh	r2, [r3, #24]
	RTC->CNTL = count;
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	839a      	strh	r2, [r3, #28]
	RTC->CRL &= ~RTC_CRL_CNF;		// запрет записи в регистры RTC
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a30:	889b      	ldrh	r3, [r3, #4]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8093      	strh	r3, [r2, #4]
	while(!(RTC->CRL & RTC_CRL_RTOFF));	// ожидание конца записи
 8004a3e:	bf00      	nop
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <RTC_SET_COUNTER+0x90>)
 8004a42:	889b      	ldrh	r3, [r3, #4]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f8      	beq.n	8004a40 <RTC_SET_COUNTER+0x64>
	PWR->CR &= ~PWR_CR_DBP;		// запрет доступа к Backup области
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <RTC_SET_COUNTER+0x8c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <RTC_SET_COUNTER+0x8c>)
 8004a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a58:	6013      	str	r3, [r2, #0]

}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40007000 	.word	0x40007000
 8004a6c:	40002800 	.word	0x40002800

08004a70 <timer_to_cal>:
#include "rtc_time.h"

extern char s_cal_data[21];

void timer_to_cal (unsigned long timer, rtc_cal * rtc_time)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	char b;
	char c;
	char d;
	unsigned long time;

	time = timer%SEC_A_DAY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a65      	ldr	r2, [pc, #404]	; (8004c14 <timer_to_cal+0x1a4>)
 8004a7e:	fba2 1203 	umull	r1, r2, r2, r3
 8004a82:	0c12      	lsrs	r2, r2, #16
 8004a84:	4964      	ldr	r1, [pc, #400]	; (8004c18 <timer_to_cal+0x1a8>)
 8004a86:	fb01 f202 	mul.w	r2, r1, r2
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
	a = ((timer+43200)/(86400>>1)) + (2440587<<1) + 1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8004a94:	33c0      	adds	r3, #192	; 0xc0
 8004a96:	4a5f      	ldr	r2, [pc, #380]	; (8004c14 <timer_to_cal+0x1a4>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	0bda      	lsrs	r2, r3, #15
 8004a9e:	4b5f      	ldr	r3, [pc, #380]	; (8004c1c <timer_to_cal+0x1ac>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
	a>>=1;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	613b      	str	r3, [r7, #16]
	rtc_time->wday = a%7;
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4b5c      	ldr	r3, [pc, #368]	; (8004c20 <timer_to_cal+0x1b0>)
 8004aae:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab2:	1ad1      	subs	r1, r2, r3
 8004ab4:	0849      	lsrs	r1, r1, #1
 8004ab6:	440b      	add	r3, r1
 8004ab8:	0899      	lsrs	r1, r3, #2
 8004aba:	460b      	mov	r3, r1
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	1a5b      	subs	r3, r3, r1
 8004ac0:	1ad1      	subs	r1, r2, r3
 8004ac2:	b2ca      	uxtb	r2, r1
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	725a      	strb	r2, [r3, #9]
	a+=32044;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8004ace:	332c      	adds	r3, #44	; 0x2c
 8004ad0:	613b      	str	r3, [r7, #16]
	b=(4*a+3)/146097;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	3303      	adds	r3, #3
 8004ad8:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <timer_to_cal+0x1b4>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0bdb      	lsrs	r3, r3, #15
 8004ae0:	73fb      	strb	r3, [r7, #15]
	a=a-(146097*b)/4;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	4a50      	ldr	r2, [pc, #320]	; (8004c28 <timer_to_cal+0x1b8>)
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da00      	bge.n	8004af0 <timer_to_cal+0x80>
 8004aee:	3303      	adds	r3, #3
 8004af0:	109b      	asrs	r3, r3, #2
 8004af2:	461a      	mov	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
	c=(4*a+3)/1461;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3303      	adds	r3, #3
 8004b00:	4a4a      	ldr	r2, [pc, #296]	; (8004c2c <timer_to_cal+0x1bc>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	09db      	lsrs	r3, r3, #7
 8004b08:	73bb      	strb	r3, [r7, #14]
	a=a-(1461*c)/4;
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
 8004b0c:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	da00      	bge.n	8004b1a <timer_to_cal+0xaa>
 8004b18:	3303      	adds	r3, #3
 8004b1a:	109b      	asrs	r3, r3, #2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
	d=(5*a+2)/153;
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	4a40      	ldr	r2, [pc, #256]	; (8004c30 <timer_to_cal+0x1c0>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	09db      	lsrs	r3, r3, #7
 8004b36:	737b      	strb	r3, [r7, #13]
	rtc_time->mday=a-(153*d+2)/5+1;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	b2d9      	uxtb	r1, r3
 8004b3c:	7b7a      	ldrb	r2, [r7, #13]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4413      	add	r3, r2
 8004b44:	011a      	lsls	r2, r3, #4
 8004b46:	4413      	add	r3, r2
 8004b48:	3302      	adds	r3, #2
 8004b4a:	4a3a      	ldr	r2, [pc, #232]	; (8004c34 <timer_to_cal+0x1c4>)
 8004b4c:	fb82 0203 	smull	r0, r2, r2, r3
 8004b50:	1052      	asrs	r2, r2, #1
 8004b52:	17db      	asrs	r3, r3, #31
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	1acb      	subs	r3, r1, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	715a      	strb	r2, [r3, #5]
	rtc_time->mon=d+3-12*(d/10);
 8004b64:	7b7b      	ldrb	r3, [r7, #13]
 8004b66:	4a34      	ldr	r2, [pc, #208]	; (8004c38 <timer_to_cal+0x1c8>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	08db      	lsrs	r3, r3, #3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	7b7b      	ldrb	r3, [r7, #13]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	3303      	adds	r3, #3
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	711a      	strb	r2, [r3, #4]
	rtc_time->year=100*b+c-4800+(d/10);
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2264      	movs	r2, #100	; 0x64
 8004b8c:	fb03 f202 	mul.w	r2, r3, r2
 8004b90:	7bbb      	ldrb	r3, [r7, #14]
 8004b92:	4413      	add	r3, r2
 8004b94:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8004b98:	7b7a      	ldrb	r2, [r7, #13]
 8004b9a:	4927      	ldr	r1, [pc, #156]	; (8004c38 <timer_to_cal+0x1c8>)
 8004b9c:	fba1 1202 	umull	r1, r2, r1, r2
 8004ba0:	08d2      	lsrs	r2, r2, #3
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	601a      	str	r2, [r3, #0]
	rtc_time->hour=time/3600;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <timer_to_cal+0x1cc>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0adb      	lsrs	r3, r3, #11
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	719a      	strb	r2, [r3, #6]
	rtc_time->min=(time%3600)/60;
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <timer_to_cal+0x1cc>)
 8004bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc2:	0adb      	lsrs	r3, r3, #11
 8004bc4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <timer_to_cal+0x1d0>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	71da      	strb	r2, [r3, #7]
	rtc_time->sec=(time%3600)%60;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <timer_to_cal+0x1cc>)
 8004be0:	fba2 1203 	umull	r1, r2, r2, r3
 8004be4:	0ad2      	lsrs	r2, r2, #11
 8004be6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004bea:	fb01 f202 	mul.w	r2, r1, r2
 8004bee:	1a9a      	subs	r2, r3, r2
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <timer_to_cal+0x1d0>)
 8004bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf6:	0959      	lsrs	r1, r3, #5
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	1a5b      	subs	r3, r3, r1
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	1ad1      	subs	r1, r2, r3
 8004c02:	b2ca      	uxtb	r2, r1
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	721a      	strb	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	c22e4507 	.word	0xc22e4507
 8004c18:	00015180 	.word	0x00015180
 8004c1c:	004a7b17 	.word	0x004a7b17
 8004c20:	24924925 	.word	0x24924925
 8004c24:	396b06bd 	.word	0x396b06bd
 8004c28:	00023ab1 	.word	0x00023ab1
 8004c2c:	166db073 	.word	0x166db073
 8004c30:	d62b80d7 	.word	0xd62b80d7
 8004c34:	66666667 	.word	0x66666667
 8004c38:	cccccccd 	.word	0xcccccccd
 8004c3c:	91a2b3c5 	.word	0x91a2b3c5
 8004c40:	88888889 	.word	0x88888889

08004c44 <cal_to_timer>:

unsigned long cal_to_timer (rtc_cal * rtc_time)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	int y;
	char m;
	unsigned long Uday;
	unsigned long time;

	a=((14-rtc_time->mon)/12);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	791b      	ldrb	r3, [r3, #4]
 8004c50:	f1c3 030e 	rsb	r3, r3, #14
 8004c54:	4a35      	ldr	r2, [pc, #212]	; (8004d2c <cal_to_timer+0xe8>)
 8004c56:	fb82 1203 	smull	r1, r2, r2, r3
 8004c5a:	1052      	asrs	r2, r2, #1
 8004c5c:	17db      	asrs	r3, r3, #31
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	77fb      	strb	r3, [r7, #31]
	y=rtc_time->year+4800-a;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
 8004c6a:	7ffb      	ldrb	r3, [r7, #31]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	61bb      	str	r3, [r7, #24]
	m=rtc_time->mon+(12*a)-3;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	791a      	ldrb	r2, [r3, #4]
 8004c74:	7ffb      	ldrb	r3, [r7, #31]
 8004c76:	4619      	mov	r1, r3
 8004c78:	0049      	lsls	r1, r1, #1
 8004c7a:	440b      	add	r3, r1
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	4413      	add	r3, r2
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	3b03      	subs	r3, #3
 8004c86:	75fb      	strb	r3, [r7, #23]
	Uday=(rtc_time->mday+((153*m+2)/5)+365*y+(y/4)-(y/100)+(y/400)-32045)-2440588;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	795b      	ldrb	r3, [r3, #5]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	7dfa      	ldrb	r2, [r7, #23]
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	011a      	lsls	r2, r3, #4
 8004c98:	4413      	add	r3, r2
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	4a24      	ldr	r2, [pc, #144]	; (8004d30 <cal_to_timer+0xec>)
 8004c9e:	fb82 0203 	smull	r0, r2, r2, r3
 8004ca2:	1052      	asrs	r2, r2, #1
 8004ca4:	17db      	asrs	r3, r3, #31
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	18ca      	adds	r2, r1, r3
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f240 116d 	movw	r1, #365	; 0x16d
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	441a      	add	r2, r3
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	da00      	bge.n	8004cbe <cal_to_timer+0x7a>
 8004cbc:	3303      	adds	r3, #3
 8004cbe:	109b      	asrs	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	491b      	ldr	r1, [pc, #108]	; (8004d34 <cal_to_timer+0xf0>)
 8004cc6:	fb81 0103 	smull	r0, r1, r1, r3
 8004cca:	1149      	asrs	r1, r1, #5
 8004ccc:	17db      	asrs	r3, r3, #31
 8004cce:	1a5b      	subs	r3, r3, r1
 8004cd0:	441a      	add	r2, r3
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	4917      	ldr	r1, [pc, #92]	; (8004d34 <cal_to_timer+0xf0>)
 8004cd6:	fb81 0103 	smull	r0, r1, r1, r3
 8004cda:	11c9      	asrs	r1, r1, #7
 8004cdc:	17db      	asrs	r3, r3, #31
 8004cde:	1acb      	subs	r3, r1, r3
 8004ce0:	441a      	add	r2, r3
 8004ce2:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <cal_to_timer+0xf4>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
	time=Uday*86400;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <cal_to_timer+0xf8>)
 8004cec:	fb02 f303 	mul.w	r3, r2, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
	time+=rtc_time->sec+rtc_time->min*60+rtc_time->hour*3600;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	7a1b      	ldrb	r3, [r3, #8]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	79db      	ldrb	r3, [r3, #7]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	18ca      	adds	r2, r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	799b      	ldrb	r3, [r3, #6]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
	return time;
 8004d20:	68fb      	ldr	r3, [r7, #12]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3724      	adds	r7, #36	; 0x24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	2aaaaaab 	.word	0x2aaaaaab
 8004d30:	66666667 	.word	0x66666667
 8004d34:	51eb851f 	.word	0x51eb851f
 8004d38:	ffda4547 	.word	0xffda4547
 8004d3c:	00015180 	.word	0x00015180

08004d40 <convert_time_from_android>:

uint8_t convert_time_from_android(rtc_cal *rtc_time, char *date){
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b096      	sub	sp, #88	; 0x58
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]

	//*xxx*yyyy-MM-dd HH:mm:ss

	uint8_t res_date = DATE_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int s;
	char buf[64];

	char *p_rtc = date;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50

	*p_rtc++;
 8004d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d56:	3301      	adds	r3, #1
 8004d58:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8004d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d62:	3301      	adds	r3, #1
 8004d64:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8004d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d68:	3301      	adds	r3, #1
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	3301      	adds	r3, #1
 8004d70:	653b      	str	r3, [r7, #80]	; 0x50

	for(s = 0; s < 4; s++){
 8004d72:	2300      	movs	r3, #0
 8004d74:	657b      	str	r3, [r7, #84]	; 0x54
 8004d76:	e00c      	b.n	8004d92 <convert_time_from_android+0x52>
		buf[s] = *p_rtc++;
 8004d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	653a      	str	r2, [r7, #80]	; 0x50
 8004d7e:	7819      	ldrb	r1, [r3, #0]
 8004d80:	f107 020c 	add.w	r2, r7, #12
 8004d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d86:	4413      	add	r3, r2
 8004d88:	460a      	mov	r2, r1
 8004d8a:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 4; s++){
 8004d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d8e:	3301      	adds	r3, #1
 8004d90:	657b      	str	r3, [r7, #84]	; 0x54
 8004d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	ddef      	ble.n	8004d78 <convert_time_from_android+0x38>
	}
	rtc_time->year=atoi(buf);
 8004d98:	f107 030c 	add.w	r3, r7, #12
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f002 f937 	bl	8007010 <atoi>
 8004da2:	4602      	mov	r2, r0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
			if(rtc_time->year == 0 || rtc_time->year < 1980)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <convert_time_from_android+0x7c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8004db8:	4293      	cmp	r3, r2
 8004dba:	dc05      	bgt.n	8004dc8 <convert_time_from_android+0x88>
				return res_date = INCORRECT_YEAR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004dc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004dc6:	e0f4      	b.n	8004fb2 <convert_time_from_android+0x272>
	*p_rtc++;
 8004dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dca:	3301      	adds	r3, #1
 8004dcc:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb f9ba 	bl	800014c <strlen>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	f107 030c 	add.w	r3, r7, #12
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 f97b 	bl	80070dc <memset>
	for(s = 0; s < 2; s++){
 8004de6:	2300      	movs	r3, #0
 8004de8:	657b      	str	r3, [r7, #84]	; 0x54
 8004dea:	e00c      	b.n	8004e06 <convert_time_from_android+0xc6>
		buf[s] = *p_rtc++;
 8004dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	653a      	str	r2, [r7, #80]	; 0x50
 8004df2:	7819      	ldrb	r1, [r3, #0]
 8004df4:	f107 020c 	add.w	r2, r7, #12
 8004df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfa:	4413      	add	r3, r2
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e02:	3301      	adds	r3, #1
 8004e04:	657b      	str	r3, [r7, #84]	; 0x54
 8004e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	ddef      	ble.n	8004dec <convert_time_from_android+0xac>
	}
	rtc_time->mon=(char)atoi(buf);
 8004e0c:	f107 030c 	add.w	r3, r7, #12
 8004e10:	4618      	mov	r0, r3
 8004e12:	f002 f8fd 	bl	8007010 <atoi>
 8004e16:	4603      	mov	r3, r0
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	711a      	strb	r2, [r3, #4]
			if(rtc_time->mon == 0 || rtc_time->mon > 12)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	791b      	ldrb	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <convert_time_from_android+0xee>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	791b      	ldrb	r3, [r3, #4]
 8004e2a:	2b0c      	cmp	r3, #12
 8004e2c:	d905      	bls.n	8004e3a <convert_time_from_android+0xfa>
					return res_date = INCORRECT_MONTH;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004e34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e38:	e0bb      	b.n	8004fb2 <convert_time_from_android+0x272>
	*p_rtc++;
 8004e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb f981 	bl	800014c <strlen>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	f107 030c 	add.w	r3, r7, #12
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 f942 	bl	80070dc <memset>
	for(s = 0; s < 2; s++){
 8004e58:	2300      	movs	r3, #0
 8004e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e5c:	e00c      	b.n	8004e78 <convert_time_from_android+0x138>
		buf[s] = *p_rtc++;
 8004e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	653a      	str	r2, [r7, #80]	; 0x50
 8004e64:	7819      	ldrb	r1, [r3, #0]
 8004e66:	f107 020c 	add.w	r2, r7, #12
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6c:	4413      	add	r3, r2
 8004e6e:	460a      	mov	r2, r1
 8004e70:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e74:	3301      	adds	r3, #1
 8004e76:	657b      	str	r3, [r7, #84]	; 0x54
 8004e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	ddef      	ble.n	8004e5e <convert_time_from_android+0x11e>
	}
	rtc_time->mday=(char)atoi(buf);
 8004e7e:	f107 030c 	add.w	r3, r7, #12
 8004e82:	4618      	mov	r0, r3
 8004e84:	f002 f8c4 	bl	8007010 <atoi>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	715a      	strb	r2, [r3, #5]
			if(rtc_time->mday == 0 || rtc_time->mday > 31)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	795b      	ldrb	r3, [r3, #5]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <convert_time_from_android+0x160>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	795b      	ldrb	r3, [r3, #5]
 8004e9c:	2b1f      	cmp	r3, #31
 8004e9e:	d905      	bls.n	8004eac <convert_time_from_android+0x16c>
					return res_date = INCORRECT_DAY;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004ea6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004eaa:	e082      	b.n	8004fb2 <convert_time_from_android+0x272>
	*p_rtc++;
 8004eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eae:	3301      	adds	r3, #1
 8004eb0:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb f948 	bl	800014c <strlen>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f107 030c 	add.w	r3, r7, #12
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 f909 	bl	80070dc <memset>
	for(s = 0; s < 2; s++){
 8004eca:	2300      	movs	r3, #0
 8004ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8004ece:	e00c      	b.n	8004eea <convert_time_from_android+0x1aa>
		buf[s] = *p_rtc++;
 8004ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	653a      	str	r2, [r7, #80]	; 0x50
 8004ed6:	7819      	ldrb	r1, [r3, #0]
 8004ed8:	f107 020c 	add.w	r2, r7, #12
 8004edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ede:	4413      	add	r3, r2
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8004eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	ddef      	ble.n	8004ed0 <convert_time_from_android+0x190>
	}
	rtc_time->hour=(char)atoi(buf);
 8004ef0:	f107 030c 	add.w	r3, r7, #12
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f002 f88b 	bl	8007010 <atoi>
 8004efa:	4603      	mov	r3, r0
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	719a      	strb	r2, [r3, #6]
	*p_rtc++;
 8004f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f04:	3301      	adds	r3, #1
 8004f06:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8004f08:	f107 030c 	add.w	r3, r7, #12
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb f91d 	bl	800014c <strlen>
 8004f12:	4602      	mov	r2, r0
 8004f14:	f107 030c 	add.w	r3, r7, #12
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 f8de 	bl	80070dc <memset>
	for(s = 0; s < 2; s++){
 8004f20:	2300      	movs	r3, #0
 8004f22:	657b      	str	r3, [r7, #84]	; 0x54
 8004f24:	e00c      	b.n	8004f40 <convert_time_from_android+0x200>
		buf[s] = *p_rtc++;
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	653a      	str	r2, [r7, #80]	; 0x50
 8004f2c:	7819      	ldrb	r1, [r3, #0]
 8004f2e:	f107 020c 	add.w	r2, r7, #12
 8004f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f34:	4413      	add	r3, r2
 8004f36:	460a      	mov	r2, r1
 8004f38:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	ddef      	ble.n	8004f26 <convert_time_from_android+0x1e6>
	}
	rtc_time->min=(char)atoi(buf);
 8004f46:	f107 030c 	add.w	r3, r7, #12
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f002 f860 	bl	8007010 <atoi>
 8004f50:	4603      	mov	r3, r0
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	71da      	strb	r2, [r3, #7]
	*p_rtc++;
 8004f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb f8f2 	bl	800014c <strlen>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f107 030c 	add.w	r3, r7, #12
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f002 f8b3 	bl	80070dc <memset>
	for(s = 0; s < 2; s++){
 8004f76:	2300      	movs	r3, #0
 8004f78:	657b      	str	r3, [r7, #84]	; 0x54
 8004f7a:	e00c      	b.n	8004f96 <convert_time_from_android+0x256>
		buf[s] = *p_rtc++;
 8004f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	653a      	str	r2, [r7, #80]	; 0x50
 8004f82:	7819      	ldrb	r1, [r3, #0]
 8004f84:	f107 020c 	add.w	r2, r7, #12
 8004f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8a:	4413      	add	r3, r2
 8004f8c:	460a      	mov	r2, r1
 8004f8e:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f92:	3301      	adds	r3, #1
 8004f94:	657b      	str	r3, [r7, #84]	; 0x54
 8004f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	ddef      	ble.n	8004f7c <convert_time_from_android+0x23c>
	}
	rtc_time->sec=(char)atoi(buf);
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 f835 	bl	8007010 <atoi>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	721a      	strb	r2, [r3, #8]

	return res_date;
 8004fae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
//	if(date[])

}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3758      	adds	r7, #88	; 0x58
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <convert_time_2android>:


void convert_time_2android(rtc_cal *rtc_time){
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	s_cal_data[0] = 0x30 + (rtc_time->year/1000%10);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a71      	ldr	r2, [pc, #452]	; (8005190 <convert_time_2android+0x1d4>)
 8004fca:	fb82 1203 	smull	r1, r2, r2, r3
 8004fce:	1192      	asrs	r2, r2, #6
 8004fd0:	17db      	asrs	r3, r3, #31
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	; (8005194 <convert_time_2android+0x1d8>)
 8004fd6:	fb83 1302 	smull	r1, r3, r3, r2
 8004fda:	1099      	asrs	r1, r3, #2
 8004fdc:	17d3      	asrs	r3, r2, #31
 8004fde:	1ac9      	subs	r1, r1, r3
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	1ad1      	subs	r1, r2, r3
 8004fea:	b2cb      	uxtb	r3, r1
 8004fec:	3330      	adds	r3, #48	; 0x30
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	4b69      	ldr	r3, [pc, #420]	; (8005198 <convert_time_2android+0x1dc>)
 8004ff2:	701a      	strb	r2, [r3, #0]
	s_cal_data[1] = 0x30 + (rtc_time->year/100%10);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a68      	ldr	r2, [pc, #416]	; (800519c <convert_time_2android+0x1e0>)
 8004ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8004ffe:	1152      	asrs	r2, r2, #5
 8005000:	17db      	asrs	r3, r3, #31
 8005002:	1ad2      	subs	r2, r2, r3
 8005004:	4b63      	ldr	r3, [pc, #396]	; (8005194 <convert_time_2android+0x1d8>)
 8005006:	fb83 1302 	smull	r1, r3, r3, r2
 800500a:	1099      	asrs	r1, r3, #2
 800500c:	17d3      	asrs	r3, r2, #31
 800500e:	1ac9      	subs	r1, r1, r3
 8005010:	460b      	mov	r3, r1
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	1ad1      	subs	r1, r2, r3
 800501a:	b2cb      	uxtb	r3, r1
 800501c:	3330      	adds	r3, #48	; 0x30
 800501e:	b2da      	uxtb	r2, r3
 8005020:	4b5d      	ldr	r3, [pc, #372]	; (8005198 <convert_time_2android+0x1dc>)
 8005022:	705a      	strb	r2, [r3, #1]
	s_cal_data[2] = 0x30 + (rtc_time->year/10%10);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5a      	ldr	r2, [pc, #360]	; (8005194 <convert_time_2android+0x1d8>)
 800502a:	fb82 1203 	smull	r1, r2, r2, r3
 800502e:	1092      	asrs	r2, r2, #2
 8005030:	17db      	asrs	r3, r3, #31
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	4b57      	ldr	r3, [pc, #348]	; (8005194 <convert_time_2android+0x1d8>)
 8005036:	fb83 1302 	smull	r1, r3, r3, r2
 800503a:	1099      	asrs	r1, r3, #2
 800503c:	17d3      	asrs	r3, r2, #31
 800503e:	1ac9      	subs	r1, r1, r3
 8005040:	460b      	mov	r3, r1
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	1ad1      	subs	r1, r2, r3
 800504a:	b2cb      	uxtb	r3, r1
 800504c:	3330      	adds	r3, #48	; 0x30
 800504e:	b2da      	uxtb	r2, r3
 8005050:	4b51      	ldr	r3, [pc, #324]	; (8005198 <convert_time_2android+0x1dc>)
 8005052:	709a      	strb	r2, [r3, #2]
	s_cal_data[3] = 0x30 + (rtc_time->year%10);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <convert_time_2android+0x1d8>)
 800505a:	fb83 1302 	smull	r1, r3, r3, r2
 800505e:	1099      	asrs	r1, r3, #2
 8005060:	17d3      	asrs	r3, r2, #31
 8005062:	1ac9      	subs	r1, r1, r3
 8005064:	460b      	mov	r3, r1
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	1ad1      	subs	r1, r2, r3
 800506e:	b2cb      	uxtb	r3, r1
 8005070:	3330      	adds	r3, #48	; 0x30
 8005072:	b2da      	uxtb	r2, r3
 8005074:	4b48      	ldr	r3, [pc, #288]	; (8005198 <convert_time_2android+0x1dc>)
 8005076:	70da      	strb	r2, [r3, #3]

	s_cal_data[5] = 0x30 + (rtc_time->mon/10);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	4a48      	ldr	r2, [pc, #288]	; (80051a0 <convert_time_2android+0x1e4>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	08db      	lsrs	r3, r3, #3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	3330      	adds	r3, #48	; 0x30
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4b43      	ldr	r3, [pc, #268]	; (8005198 <convert_time_2android+0x1dc>)
 800508c:	715a      	strb	r2, [r3, #5]
	s_cal_data[6] = 0x30 + (rtc_time->mon%10);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	791a      	ldrb	r2, [r3, #4]
 8005092:	4b43      	ldr	r3, [pc, #268]	; (80051a0 <convert_time_2android+0x1e4>)
 8005094:	fba3 1302 	umull	r1, r3, r3, r2
 8005098:	08d9      	lsrs	r1, r3, #3
 800509a:	460b      	mov	r3, r1
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	3330      	adds	r3, #48	; 0x30
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <convert_time_2android+0x1dc>)
 80050ac:	719a      	strb	r2, [r3, #6]

	s_cal_data[8] = 0x30 + (rtc_time->mday/10);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	795b      	ldrb	r3, [r3, #5]
 80050b2:	4a3b      	ldr	r2, [pc, #236]	; (80051a0 <convert_time_2android+0x1e4>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	3330      	adds	r3, #48	; 0x30
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b35      	ldr	r3, [pc, #212]	; (8005198 <convert_time_2android+0x1dc>)
 80050c2:	721a      	strb	r2, [r3, #8]
	s_cal_data[9] = 0x30 + (rtc_time->mday%10);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	795a      	ldrb	r2, [r3, #5]
 80050c8:	4b35      	ldr	r3, [pc, #212]	; (80051a0 <convert_time_2android+0x1e4>)
 80050ca:	fba3 1302 	umull	r1, r3, r3, r2
 80050ce:	08d9      	lsrs	r1, r3, #3
 80050d0:	460b      	mov	r3, r1
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	3330      	adds	r3, #48	; 0x30
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <convert_time_2android+0x1dc>)
 80050e2:	725a      	strb	r2, [r3, #9]

	s_cal_data[11] = 0x30 + (rtc_time->hour/10);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	799b      	ldrb	r3, [r3, #6]
 80050e8:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <convert_time_2android+0x1e4>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	08db      	lsrs	r3, r3, #3
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	3330      	adds	r3, #48	; 0x30
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	4b28      	ldr	r3, [pc, #160]	; (8005198 <convert_time_2android+0x1dc>)
 80050f8:	72da      	strb	r2, [r3, #11]
	s_cal_data[12] = 0x30 + (rtc_time->hour%10);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	799a      	ldrb	r2, [r3, #6]
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <convert_time_2android+0x1e4>)
 8005100:	fba3 1302 	umull	r1, r3, r3, r2
 8005104:	08d9      	lsrs	r1, r3, #3
 8005106:	460b      	mov	r3, r1
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	3330      	adds	r3, #48	; 0x30
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4b20      	ldr	r3, [pc, #128]	; (8005198 <convert_time_2android+0x1dc>)
 8005118:	731a      	strb	r2, [r3, #12]

	s_cal_data[14] = 0x30 + (rtc_time->min/10);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	79db      	ldrb	r3, [r3, #7]
 800511e:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <convert_time_2android+0x1e4>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	08db      	lsrs	r3, r3, #3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	3330      	adds	r3, #48	; 0x30
 800512a:	b2da      	uxtb	r2, r3
 800512c:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <convert_time_2android+0x1dc>)
 800512e:	739a      	strb	r2, [r3, #14]
	s_cal_data[15] = 0x30 + (rtc_time->min%10);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	79da      	ldrb	r2, [r3, #7]
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <convert_time_2android+0x1e4>)
 8005136:	fba3 1302 	umull	r1, r3, r3, r2
 800513a:	08d9      	lsrs	r1, r3, #3
 800513c:	460b      	mov	r3, r1
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	3330      	adds	r3, #48	; 0x30
 800514a:	b2da      	uxtb	r2, r3
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <convert_time_2android+0x1dc>)
 800514e:	73da      	strb	r2, [r3, #15]

	s_cal_data[17] = 0x30 + (rtc_time->sec/10);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	7a1b      	ldrb	r3, [r3, #8]
 8005154:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <convert_time_2android+0x1e4>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	08db      	lsrs	r3, r3, #3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	3330      	adds	r3, #48	; 0x30
 8005160:	b2da      	uxtb	r2, r3
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <convert_time_2android+0x1dc>)
 8005164:	745a      	strb	r2, [r3, #17]
	s_cal_data[18] = 0x30 + (rtc_time->sec%10);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	7a1a      	ldrb	r2, [r3, #8]
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <convert_time_2android+0x1e4>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	08d9      	lsrs	r1, r3, #3
 8005172:	460b      	mov	r3, r1
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	b2db      	uxtb	r3, r3
 800517e:	3330      	adds	r3, #48	; 0x30
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <convert_time_2android+0x1dc>)
 8005184:	749a      	strb	r2, [r3, #18]
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	10624dd3 	.word	0x10624dd3
 8005194:	66666667 	.word	0x66666667
 8005198:	20000260 	.word	0x20000260
 800519c:	51eb851f 	.word	0x51eb851f
 80051a0:	cccccccd 	.word	0xcccccccd

080051a4 <Write_data_2Flash>:


}


void Write_data_2Flash(uint32_t addr, uint16_t cnt_flash, uint8_t* pBuf){
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	460b      	mov	r3, r1
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	817b      	strh	r3, [r7, #10]

	wr_en = spiFlash_wrtEnbl();
 80051b2:	f000 fbd9 	bl	8005968 <spiFlash_wrtEnbl>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <Write_data_2Flash+0xc0>)
 80051bc:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80051be:	2005      	movs	r0, #5
 80051c0:	f000 fba0 	bl	8005904 <spiFlash_readStatus>
 80051c4:	4603      	mov	r3, r0
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <Write_data_2Flash+0xc4>)
 80051ca:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80051cc:	2035      	movs	r0, #53	; 0x35
 80051ce:	f000 fb99 	bl	8005904 <spiFlash_readStatus>
 80051d2:	4603      	mov	r3, r0
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	4b25      	ldr	r3, [pc, #148]	; (800526c <Write_data_2Flash+0xc8>)
 80051d8:	801a      	strh	r2, [r3, #0]
		if(stat_reg1!=2){
 80051da:	4b23      	ldr	r3, [pc, #140]	; (8005268 <Write_data_2Flash+0xc4>)
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d027      	beq.n	8005232 <Write_data_2Flash+0x8e>
			wr_stat_en = spiFlash_wrtStatReg();
 80051e2:	f000 fbed 	bl	80059c0 <spiFlash_wrtStatReg>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b21      	ldr	r3, [pc, #132]	; (8005270 <Write_data_2Flash+0xcc>)
 80051ec:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80051ee:	2005      	movs	r0, #5
 80051f0:	f000 fb88 	bl	8005904 <spiFlash_readStatus>
 80051f4:	4603      	mov	r3, r0
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <Write_data_2Flash+0xc4>)
 80051fa:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80051fc:	2035      	movs	r0, #53	; 0x35
 80051fe:	f000 fb81 	bl	8005904 <spiFlash_readStatus>
 8005202:	4603      	mov	r3, r0
 8005204:	b29a      	uxth	r2, r3
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <Write_data_2Flash+0xc8>)
 8005208:	801a      	strh	r2, [r3, #0]
			wr_en = spiFlash_wrtEnbl();
 800520a:	f000 fbad 	bl	8005968 <spiFlash_wrtEnbl>
 800520e:	4603      	mov	r3, r0
 8005210:	461a      	mov	r2, r3
 8005212:	4b14      	ldr	r3, [pc, #80]	; (8005264 <Write_data_2Flash+0xc0>)
 8005214:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005216:	2005      	movs	r0, #5
 8005218:	f000 fb74 	bl	8005904 <spiFlash_readStatus>
 800521c:	4603      	mov	r3, r0
 800521e:	b29a      	uxth	r2, r3
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <Write_data_2Flash+0xc4>)
 8005222:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005224:	2035      	movs	r0, #53	; 0x35
 8005226:	f000 fb6d 	bl	8005904 <spiFlash_readStatus>
 800522a:	4603      	mov	r3, r0
 800522c:	b29a      	uxth	r2, r3
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <Write_data_2Flash+0xc8>)
 8005230:	801a      	strh	r2, [r3, #0]
						}
	spiFlash_write(addr, cnt_flash, pBuf);
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4619      	mov	r1, r3
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 fb05 	bl	8005848 <spiFlash_write>
	do {
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800523e:	2005      	movs	r0, #5
 8005240:	f000 fb60 	bl	8005904 <spiFlash_readStatus>
 8005244:	4603      	mov	r3, r0
 8005246:	b29a      	uxth	r2, r3
 8005248:	4b07      	ldr	r3, [pc, #28]	; (8005268 <Write_data_2Flash+0xc4>)
 800524a:	801a      	strh	r2, [r3, #0]
	} while (stat_reg1 & 0x01 );
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <Write_data_2Flash+0xc4>)
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f2      	bne.n	800523e <Write_data_2Flash+0x9a>


}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000d14 	.word	0x20000d14
 8005268:	20000d10 	.word	0x20000d10
 800526c:	20000d12 	.word	0x20000d12
 8005270:	20000d15 	.word	0x20000d15

08005274 <Set_Cnt_to_Flash>:
	wr_stat_en = spiFlash_wrtStatReg();
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
}

void Set_Cnt_to_Flash(uint32_t addr, uint16_t cnt_flash, uint8_t* pBuf){
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	460b      	mov	r3, r1
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	817b      	strh	r3, [r7, #10]

	wr_en = spiFlash_wrtEnbl();
 8005282:	f000 fb71 	bl	8005968 <spiFlash_wrtEnbl>
 8005286:	4603      	mov	r3, r0
 8005288:	461a      	mov	r2, r3
 800528a:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <Set_Cnt_to_Flash+0xc0>)
 800528c:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800528e:	2005      	movs	r0, #5
 8005290:	f000 fb38 	bl	8005904 <spiFlash_readStatus>
 8005294:	4603      	mov	r3, r0
 8005296:	b29a      	uxth	r2, r3
 8005298:	4b27      	ldr	r3, [pc, #156]	; (8005338 <Set_Cnt_to_Flash+0xc4>)
 800529a:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 800529c:	2035      	movs	r0, #53	; 0x35
 800529e:	f000 fb31 	bl	8005904 <spiFlash_readStatus>
 80052a2:	4603      	mov	r3, r0
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	4b25      	ldr	r3, [pc, #148]	; (800533c <Set_Cnt_to_Flash+0xc8>)
 80052a8:	801a      	strh	r2, [r3, #0]
		if(stat_reg1!=2){
 80052aa:	4b23      	ldr	r3, [pc, #140]	; (8005338 <Set_Cnt_to_Flash+0xc4>)
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d027      	beq.n	8005302 <Set_Cnt_to_Flash+0x8e>
			wr_stat_en = spiFlash_wrtStatReg();
 80052b2:	f000 fb85 	bl	80059c0 <spiFlash_wrtStatReg>
 80052b6:	4603      	mov	r3, r0
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <Set_Cnt_to_Flash+0xcc>)
 80052bc:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80052be:	2005      	movs	r0, #5
 80052c0:	f000 fb20 	bl	8005904 <spiFlash_readStatus>
 80052c4:	4603      	mov	r3, r0
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <Set_Cnt_to_Flash+0xc4>)
 80052ca:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80052cc:	2035      	movs	r0, #53	; 0x35
 80052ce:	f000 fb19 	bl	8005904 <spiFlash_readStatus>
 80052d2:	4603      	mov	r3, r0
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	4b19      	ldr	r3, [pc, #100]	; (800533c <Set_Cnt_to_Flash+0xc8>)
 80052d8:	801a      	strh	r2, [r3, #0]
			wr_en = spiFlash_wrtEnbl();
 80052da:	f000 fb45 	bl	8005968 <spiFlash_wrtEnbl>
 80052de:	4603      	mov	r3, r0
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <Set_Cnt_to_Flash+0xc0>)
 80052e4:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80052e6:	2005      	movs	r0, #5
 80052e8:	f000 fb0c 	bl	8005904 <spiFlash_readStatus>
 80052ec:	4603      	mov	r3, r0
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	4b11      	ldr	r3, [pc, #68]	; (8005338 <Set_Cnt_to_Flash+0xc4>)
 80052f2:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80052f4:	2035      	movs	r0, #53	; 0x35
 80052f6:	f000 fb05 	bl	8005904 <spiFlash_readStatus>
 80052fa:	4603      	mov	r3, r0
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	4b0f      	ldr	r3, [pc, #60]	; (800533c <Set_Cnt_to_Flash+0xc8>)
 8005300:	801a      	strh	r2, [r3, #0]
						}
	spiFlash_write(addr, cnt_flash, pBuf);
 8005302:	897b      	ldrh	r3, [r7, #10]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4619      	mov	r1, r3
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fa9d 	bl	8005848 <spiFlash_write>
	do {
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800530e:	2005      	movs	r0, #5
 8005310:	f000 faf8 	bl	8005904 <spiFlash_readStatus>
 8005314:	4603      	mov	r3, r0
 8005316:	b29a      	uxth	r2, r3
 8005318:	4b07      	ldr	r3, [pc, #28]	; (8005338 <Set_Cnt_to_Flash+0xc4>)
 800531a:	801a      	strh	r2, [r3, #0]
	} while (stat_reg1 & 0x01 );
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <Set_Cnt_to_Flash+0xc4>)
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f2      	bne.n	800530e <Set_Cnt_to_Flash+0x9a>
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000d14 	.word	0x20000d14
 8005338:	20000d10 	.word	0x20000d10
 800533c:	20000d12 	.word	0x20000d12
 8005340:	20000d15 	.word	0x20000d15

08005344 <Safe_Flash_Erase>:

void Safe_Flash_Erase(uint32_t erase_addr){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	wr_en = spiFlash_wrtEnbl();
 800534c:	f000 fb0c 	bl	8005968 <spiFlash_wrtEnbl>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <Safe_Flash_Erase+0xbc>)
 8005356:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005358:	2005      	movs	r0, #5
 800535a:	f000 fad3 	bl	8005904 <spiFlash_readStatus>
 800535e:	4603      	mov	r3, r0
 8005360:	b29a      	uxth	r2, r3
 8005362:	4b28      	ldr	r3, [pc, #160]	; (8005404 <Safe_Flash_Erase+0xc0>)
 8005364:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005366:	2035      	movs	r0, #53	; 0x35
 8005368:	f000 facc 	bl	8005904 <spiFlash_readStatus>
 800536c:	4603      	mov	r3, r0
 800536e:	b29a      	uxth	r2, r3
 8005370:	4b25      	ldr	r3, [pc, #148]	; (8005408 <Safe_Flash_Erase+0xc4>)
 8005372:	801a      	strh	r2, [r3, #0]
	if(stat_reg1!=2){
 8005374:	4b23      	ldr	r3, [pc, #140]	; (8005404 <Safe_Flash_Erase+0xc0>)
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d027      	beq.n	80053cc <Safe_Flash_Erase+0x88>
		wr_stat_en = spiFlash_wrtStatReg();
 800537c:	f000 fb20 	bl	80059c0 <spiFlash_wrtStatReg>
 8005380:	4603      	mov	r3, r0
 8005382:	461a      	mov	r2, r3
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <Safe_Flash_Erase+0xc8>)
 8005386:	701a      	strb	r2, [r3, #0]
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005388:	2005      	movs	r0, #5
 800538a:	f000 fabb 	bl	8005904 <spiFlash_readStatus>
 800538e:	4603      	mov	r3, r0
 8005390:	b29a      	uxth	r2, r3
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <Safe_Flash_Erase+0xc0>)
 8005394:	801a      	strh	r2, [r3, #0]
		stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005396:	2035      	movs	r0, #53	; 0x35
 8005398:	f000 fab4 	bl	8005904 <spiFlash_readStatus>
 800539c:	4603      	mov	r3, r0
 800539e:	b29a      	uxth	r2, r3
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <Safe_Flash_Erase+0xc4>)
 80053a2:	801a      	strh	r2, [r3, #0]
		wr_en = spiFlash_wrtEnbl();
 80053a4:	f000 fae0 	bl	8005968 <spiFlash_wrtEnbl>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	4b14      	ldr	r3, [pc, #80]	; (8005400 <Safe_Flash_Erase+0xbc>)
 80053ae:	701a      	strb	r2, [r3, #0]
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80053b0:	2005      	movs	r0, #5
 80053b2:	f000 faa7 	bl	8005904 <spiFlash_readStatus>
 80053b6:	4603      	mov	r3, r0
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <Safe_Flash_Erase+0xc0>)
 80053bc:	801a      	strh	r2, [r3, #0]
		stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80053be:	2035      	movs	r0, #53	; 0x35
 80053c0:	f000 faa0 	bl	8005904 <spiFlash_readStatus>
 80053c4:	4603      	mov	r3, r0
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <Safe_Flash_Erase+0xc4>)
 80053ca:	801a      	strh	r2, [r3, #0]
	}

	res_erase = spiFlash_eraseSector(erase_addr);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fb27 	bl	8005a20 <spiFlash_eraseSector>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <Safe_Flash_Erase+0xcc>)
 80053d8:	701a      	strb	r2, [r3, #0]
	do {
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80053da:	2005      	movs	r0, #5
 80053dc:	f000 fa92 	bl	8005904 <spiFlash_readStatus>
 80053e0:	4603      	mov	r3, r0
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	4b07      	ldr	r3, [pc, #28]	; (8005404 <Safe_Flash_Erase+0xc0>)
 80053e6:	801a      	strh	r2, [r3, #0]
	} while (stat_reg1 & 0x01 );
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <Safe_Flash_Erase+0xc0>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f2      	bne.n	80053da <Safe_Flash_Erase+0x96>
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000d14 	.word	0x20000d14
 8005404:	20000d10 	.word	0x20000d10
 8005408:	20000d12 	.word	0x20000d12
 800540c:	20000d15 	.word	0x20000d15
 8005410:	20000914 	.word	0x20000914

08005414 <NVIC_EnableIRQ>:
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	2201      	movs	r2, #1
 8005426:	fa02 f103 	lsl.w	r1, r2, r3
 800542a:	4a05      	ldr	r2, [pc, #20]	; (8005440 <NVIC_EnableIRQ+0x2c>)
 800542c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	e000e100 	.word	0xe000e100

08005444 <NVIC_DisableIRQ>:
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	2201      	movs	r2, #1
 8005456:	fa02 f103 	lsl.w	r1, r2, r3
 800545a:	4a06      	ldr	r2, [pc, #24]	; (8005474 <NVIC_DisableIRQ+0x30>)
 800545c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	3320      	adds	r3, #32
 8005464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	e000e100 	.word	0xe000e100

08005478 <NVIC_SetPriority>:
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	6039      	str	r1, [r7, #0]
 8005482:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8005484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005488:	2b00      	cmp	r3, #0
 800548a:	da0b      	bge.n	80054a4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	490c      	ldr	r1, [pc, #48]	; (80054c4 <NVIC_SetPriority+0x4c>)
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	3b04      	subs	r3, #4
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	440b      	add	r3, r1
 80054a0:	761a      	strb	r2, [r3, #24]
}
 80054a2:	e009      	b.n	80054b8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	4907      	ldr	r1, [pc, #28]	; (80054c8 <NVIC_SetPriority+0x50>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	440b      	add	r3, r1
 80054b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	e000ed00 	.word	0xe000ed00
 80054c8:	e000e100 	.word	0xe000e100

080054cc <PN532_SPIInit>:

volatile uint8_t SpiActive;					// флаг активной передачи



void PN532_SPIInit(void){
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0

	SpiActive = 1;
 80054d2:	4b20      	ldr	r3, [pc, #128]	; (8005554 <PN532_SPIInit+0x88>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]



//------------------------------------------------------------------------------
	//SPI_StructInit( &SPI_PN532_InitStruct);
	SPI_Cmd(SPI2, DISABLE);
 80054d8:	2100      	movs	r1, #0
 80054da:	481f      	ldr	r0, [pc, #124]	; (8005558 <PN532_SPIInit+0x8c>)
 80054dc:	f000 ffa1 	bl	8006422 <SPI_Cmd>
	NVIC_DisableIRQ(SPI2_IRQn);
 80054e0:	2024      	movs	r0, #36	; 0x24
 80054e2:	f7ff ffaf 	bl	8005444 <NVIC_DisableIRQ>

	/* Initialize the SPI_Direction member */
	SPI_PN532_InitStruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 80054e6:	2300      	movs	r3, #0
 80054e8:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_PN532_InitStruct.SPI_Mode = SPI_Mode_Master;
 80054ea:	f44f 7382 	mov.w	r3, #260	; 0x104
 80054ee:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_PN532_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80054f0:	2300      	movs	r3, #0
 80054f2:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_PN532_InitStruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 80054f4:	2300      	movs	r3, #0
 80054f6:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_PN532_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80054f8:	2300      	movs	r3, #0
 80054fa:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_PN532_InitStruct.SPI_NSS = SPI_NSS_Hard;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 80054fc:	2300      	movs	r3, #0
 80054fe:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_PN532_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 8005500:	2338      	movs	r3, #56	; 0x38
 8005502:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_PN532_InitStruct.SPI_FirstBit = SPI_FirstBit_LSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_PN532_InitStruct.SPI_CRCPolynomial = 7;
 8005508:	2307      	movs	r3, #7
 800550a:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_PN532_InitStruct);
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4811      	ldr	r0, [pc, #68]	; (8005558 <PN532_SPIInit+0x8c>)
 8005512:	f000 ff43 	bl	800639c <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, DISABLE );
 8005516:	2200      	movs	r2, #0
 8005518:	2160      	movs	r1, #96	; 0x60
 800551a:	480f      	ldr	r0, [pc, #60]	; (8005558 <PN532_SPIInit+0x8c>)
 800551c:	f000 ffa0 	bl	8006460 <SPI_I2S_ITConfig>

	SPI_CalculateCRC ( SPI2, DISABLE);
 8005520:	2100      	movs	r1, #0
 8005522:	480d      	ldr	r0, [pc, #52]	; (8005558 <PN532_SPIInit+0x8c>)
 8005524:	f001 f805 	bl	8006532 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8005528:	2201      	movs	r2, #1
 800552a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800552e:	480b      	ldr	r0, [pc, #44]	; (800555c <PN532_SPIInit+0x90>)
 8005530:	f000 fc29 	bl	8005d86 <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8005534:	2101      	movs	r1, #1
 8005536:	4808      	ldr	r0, [pc, #32]	; (8005558 <PN532_SPIInit+0x8c>)
 8005538:	f000 ffdc 	bl	80064f4 <SPI_SSOutputCmd>
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/

	SPI_Cmd(SPI2, ENABLE);
 800553c:	2101      	movs	r1, #1
 800553e:	4806      	ldr	r0, [pc, #24]	; (8005558 <PN532_SPIInit+0x8c>)
 8005540:	f000 ff6f 	bl	8006422 <SPI_Cmd>

	SpiActive = 0;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <PN532_SPIInit+0x88>)
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]

}
 800554a:	bf00      	nop
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000d26 	.word	0x20000d26
 8005558:	40003800 	.word	0x40003800
 800555c:	40010c00 	.word	0x40010c00

08005560 <SPI_Send_Recv>:
	return SPI_OK;
}


void SPI_Send_Recv(uint8_t *buf_tx, uint8_t *buf_rx, uint16_t len)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
	SpiActive = 1;
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <SPI_Send_Recv+0x68>)
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]

	pBufTx = buf_tx;
 8005574:	4a15      	ldr	r2, [pc, #84]	; (80055cc <SPI_Send_Recv+0x6c>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6013      	str	r3, [r2, #0]
	pBufRx = buf_rx;
 800557a:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <SPI_Send_Recv+0x70>)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6013      	str	r3, [r2, #0]
	usBufPosRx = 0;
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <SPI_Send_Recv+0x74>)
 8005582:	2200      	movs	r2, #0
 8005584:	801a      	strh	r2, [r3, #0]
	usBufPosTx = 1;
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <SPI_Send_Recv+0x78>)
 8005588:	2201      	movs	r2, #1
 800558a:	801a      	strh	r2, [r3, #0]
	usBufCnt = len;
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <SPI_Send_Recv+0x7c>)
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	8013      	strh	r3, [r2, #0]

	while (!(SPI2->SR & SPI_SR_TXE)); //ожидание установки 1 в TXE(окончание передачи)
 8005592:	bf00      	nop
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <SPI_Send_Recv+0x80>)
 8005596:	891b      	ldrh	r3, [r3, #8]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f8      	beq.n	8005594 <SPI_Send_Recv+0x34>
	if (pBufTx)
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <SPI_Send_Recv+0x6c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <SPI_Send_Recv+0x56>
		*(uint8_t*)&SPI2->DR = *pBufTx;
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <SPI_Send_Recv+0x6c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <SPI_Send_Recv+0x84>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	7013      	strb	r3, [r2, #0]
	//_SPI->DR = 5;
	else
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
//	while(SpiActive);
}
 80055b4:	e002      	b.n	80055bc <SPI_Send_Recv+0x5c>
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <SPI_Send_Recv+0x84>)
 80055b8:	22ff      	movs	r2, #255	; 0xff
 80055ba:	701a      	strb	r2, [r3, #0]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000d26 	.word	0x20000d26
 80055cc:	20000d18 	.word	0x20000d18
 80055d0:	20000d1c 	.word	0x20000d1c
 80055d4:	20000d20 	.word	0x20000d20
 80055d8:	20000d22 	.word	0x20000d22
 80055dc:	20000d24 	.word	0x20000d24
 80055e0:	40003800 	.word	0x40003800
 80055e4:	4000380c 	.word	0x4000380c

080055e8 <SpiSendRecvFlash>:


void SpiSendRecvFlash(uint8_t **a_buf_tx, uint8_t **a_buf_rx, uint16_t *a_buf_len, uint8_t cnt)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < cnt; i++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]
 80055fa:	e01a      	b.n	8005632 <SpiSendRecvFlash+0x4a>
			{

				SPI_Send_Recv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4413      	add	r3, r2
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	7dfb      	ldrb	r3, [r7, #23]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	f7ff ffa0 	bl	8005560 <SPI_Send_Recv>

				while(SpiActive);
 8005620:	bf00      	nop
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <SpiSendRecvFlash+0x5c>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1fa      	bne.n	8005622 <SpiSendRecvFlash+0x3a>
			for (uint8_t i = 0; i < cnt; i++)
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	3301      	adds	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
 8005632:	7dfa      	ldrb	r2, [r7, #23]
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	429a      	cmp	r2, r3
 8005638:	d3e0      	bcc.n	80055fc <SpiSendRecvFlash+0x14>
			}
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000d26 	.word	0x20000d26

08005648 <SPI2_IRQHandler>:

}


void SPI2_IRQHandler(void)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
	{
		volatile uint8_t ucByte = *(uint8_t*)&SPI2->DR;
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <SPI2_IRQHandler+0x84>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	71fb      	strb	r3, [r7, #7]

		if (pBufRx)
 8005654:	4b1e      	ldr	r3, [pc, #120]	; (80056d0 <SPI2_IRQHandler+0x88>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <SPI2_IRQHandler+0x24>
			pBufRx[usBufPosRx] = ucByte;
 800565c:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <SPI2_IRQHandler+0x88>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <SPI2_IRQHandler+0x8c>)
 8005662:	8812      	ldrh	r2, [r2, #0]
 8005664:	4413      	add	r3, r2
 8005666:	79fa      	ldrb	r2, [r7, #7]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
	}

	{
		if (usBufPosTx < usBufCnt)
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <SPI2_IRQHandler+0x90>)
 800566e:	881a      	ldrh	r2, [r3, #0]
 8005670:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <SPI2_IRQHandler+0x94>)
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d215      	bcs.n	80056a4 <SPI2_IRQHandler+0x5c>
		{
			if (pBufTx)
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <SPI2_IRQHandler+0x98>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <SPI2_IRQHandler+0x4a>
				*(uint8_t*)&SPI2->DR = pBufTx[usBufPosTx];
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <SPI2_IRQHandler+0x98>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <SPI2_IRQHandler+0x90>)
 8005686:	8812      	ldrh	r2, [r2, #0]
 8005688:	4413      	add	r3, r2
 800568a:	4a10      	ldr	r2, [pc, #64]	; (80056cc <SPI2_IRQHandler+0x84>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	7013      	strb	r3, [r2, #0]
 8005690:	e002      	b.n	8005698 <SPI2_IRQHandler+0x50>
			else
				*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <SPI2_IRQHandler+0x84>)
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	701a      	strb	r2, [r3, #0]

			usBufPosTx++;
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <SPI2_IRQHandler+0x90>)
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <SPI2_IRQHandler+0x90>)
 80056a2:	801a      	strh	r2, [r3, #0]
	/*	else{
			GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		}*/
	}

	if (++usBufPosRx >= usBufCnt)
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <SPI2_IRQHandler+0x8c>)
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <SPI2_IRQHandler+0x8c>)
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <SPI2_IRQHandler+0x8c>)
 80056b2:	881a      	ldrh	r2, [r3, #0]
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <SPI2_IRQHandler+0x94>)
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <SPI2_IRQHandler+0x7a>
	{
		SpiActive = 0;
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <SPI2_IRQHandler+0x9c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
	//	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		//SPI_ON_READY_ISR_CB(0);
	}

}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	4000380c 	.word	0x4000380c
 80056d0:	20000d1c 	.word	0x20000d1c
 80056d4:	20000d20 	.word	0x20000d20
 80056d8:	20000d22 	.word	0x20000d22
 80056dc:	20000d24 	.word	0x20000d24
 80056e0:	20000d18 	.word	0x20000d18
 80056e4:	20000d26 	.word	0x20000d26

080056e8 <SPI_FLASH_CONFIG>:



void SPI_FLASH_CONFIG(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80056ee:	2201      	movs	r2, #1
 80056f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056f4:	4825      	ldr	r0, [pc, #148]	; (800578c <SPI_FLASH_CONFIG+0xa4>)
 80056f6:	f000 fb46 	bl	8005d86 <GPIO_WriteBit>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80056fa:	2201      	movs	r2, #1
 80056fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005700:	4822      	ldr	r0, [pc, #136]	; (800578c <SPI_FLASH_CONFIG+0xa4>)
 8005702:	f000 fb40 	bl	8005d86 <GPIO_WriteBit>
//	SPI2->CR1 |= SPI_CR1_SPE;


	SPI_InitTypeDef			SPI_FLASH_Initstruct;

	SPI_Cmd(SPI2, DISABLE);
 8005706:	2100      	movs	r1, #0
 8005708:	4821      	ldr	r0, [pc, #132]	; (8005790 <SPI_FLASH_CONFIG+0xa8>)
 800570a:	f000 fe8a 	bl	8006422 <SPI_Cmd>
//	NVIC_DisableIRQ(SPI2_IRQn);

	/* Initialize the SPI_Direction member */
	SPI_FLASH_Initstruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 800570e:	2300      	movs	r3, #0
 8005710:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_FLASH_Initstruct.SPI_Mode = SPI_Mode_Master;
 8005712:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005716:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_FLASH_Initstruct.SPI_DataSize = SPI_DataSize_8b;
 8005718:	2300      	movs	r3, #0
 800571a:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_FLASH_Initstruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 800571c:	2300      	movs	r3, #0
 800571e:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_FLASH_Initstruct.SPI_CPHA = SPI_CPHA_1Edge;
 8005720:	2300      	movs	r3, #0
 8005722:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_FLASH_Initstruct.SPI_NSS = SPI_NSS_Soft;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 8005724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005728:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_FLASH_Initstruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 800572a:	2338      	movs	r3, #56	; 0x38
 800572c:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_FLASH_Initstruct.SPI_FirstBit = SPI_FirstBit_MSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 800572e:	2300      	movs	r3, #0
 8005730:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_FLASH_Initstruct.SPI_CRCPolynomial = 7;
 8005732:	2307      	movs	r3, #7
 8005734:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_FLASH_Initstruct);
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4815      	ldr	r0, [pc, #84]	; (8005790 <SPI_FLASH_CONFIG+0xa8>)
 800573c:	f000 fe2e 	bl	800639c <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);

	SPI_CalculateCRC ( SPI2, DISABLE);
 8005740:	2100      	movs	r1, #0
 8005742:	4813      	ldr	r0, [pc, #76]	; (8005790 <SPI_FLASH_CONFIG+0xa8>)
 8005744:	f000 fef5 	bl	8006532 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8005748:	2201      	movs	r2, #1
 800574a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800574e:	480f      	ldr	r0, [pc, #60]	; (800578c <SPI_FLASH_CONFIG+0xa4>)
 8005750:	f000 fb19 	bl	8005d86 <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8005754:	2101      	movs	r1, #1
 8005756:	480e      	ldr	r0, [pc, #56]	; (8005790 <SPI_FLASH_CONFIG+0xa8>)
 8005758:	f000 fecc 	bl	80064f4 <SPI_SSOutputCmd>
	uint32_t tmpreg = 0;
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, ENABLE );
 800575c:	2201      	movs	r2, #1
 800575e:	2160      	movs	r1, #96	; 0x60
 8005760:	480b      	ldr	r0, [pc, #44]	; (8005790 <SPI_FLASH_CONFIG+0xa8>)
 8005762:	f000 fe7d 	bl	8006460 <SPI_I2S_ITConfig>
	NVIC_SetPriority(SPI2_IRQn, 3);
 8005766:	2103      	movs	r1, #3
 8005768:	2024      	movs	r0, #36	; 0x24
 800576a:	f7ff fe85 	bl	8005478 <NVIC_SetPriority>
	NVIC_EnableIRQ(SPI2_IRQn);
 800576e:	2024      	movs	r0, #36	; 0x24
 8005770:	f7ff fe50 	bl	8005414 <NVIC_EnableIRQ>



	SPI_Cmd(SPI2, ENABLE);
 8005774:	2101      	movs	r1, #1
 8005776:	4806      	ldr	r0, [pc, #24]	; (8005790 <SPI_FLASH_CONFIG+0xa8>)
 8005778:	f000 fe53 	bl	8006422 <SPI_Cmd>

	SpiActive = 0;
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <SPI_FLASH_CONFIG+0xac>)
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init ( &NVIC_InitStruct );
*/


}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40010c00 	.word	0x40010c00
 8005790:	40003800 	.word	0x40003800
 8005794:	20000d26 	.word	0x20000d26

08005798 <spiFlash_Read>:

extern volatile uint8_t SpiActive;


void spiFlash_Read( uint32_t dwAddrRead, uint16_t bCnt, uint8_t* pBuf )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	460b      	mov	r3, r1
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	817b      	strh	r3, [r7, #10]
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80057a6:	2201      	movs	r2, #1
 80057a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057ac:	4820      	ldr	r0, [pc, #128]	; (8005830 <spiFlash_Read+0x98>)
 80057ae:	f000 faea 	bl	8005d86 <GPIO_WriteBit>
	buf_txrx[0] = CMD_READ_DATA;
 80057b2:	4b20      	ldr	r3, [pc, #128]	; (8005834 <spiFlash_Read+0x9c>)
 80057b4:	2203      	movs	r2, #3
 80057b6:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrRead >> 16);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	0c1b      	lsrs	r3, r3, #16
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <spiFlash_Read+0x9c>)
 80057c0:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrRead >> 8);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <spiFlash_Read+0x9c>)
 80057ca:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrRead >> 0);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <spiFlash_Read+0x9c>)
 80057d2:	70da      	strb	r2, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 80057d4:	4b18      	ldr	r3, [pc, #96]	; (8005838 <spiFlash_Read+0xa0>)
 80057d6:	4a17      	ldr	r2, [pc, #92]	; (8005834 <spiFlash_Read+0x9c>)
 80057d8:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 80057da:	4b18      	ldr	r3, [pc, #96]	; (800583c <spiFlash_Read+0xa4>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 4;
 80057e0:	4b17      	ldr	r3, [pc, #92]	; (8005840 <spiFlash_Read+0xa8>)
 80057e2:	2204      	movs	r2, #4
 80057e4:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = NULL;
 80057e6:	4b14      	ldr	r3, [pc, #80]	; (8005838 <spiFlash_Read+0xa0>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	605a      	str	r2, [r3, #4]
	a_buf_rx[1] = pBuf;
 80057ec:	4a13      	ldr	r2, [pc, #76]	; (800583c <spiFlash_Read+0xa4>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6053      	str	r3, [r2, #4]
	a_buf_len[1] = bCnt;
 80057f2:	4a13      	ldr	r2, [pc, #76]	; (8005840 <spiFlash_Read+0xa8>)
 80057f4:	897b      	ldrh	r3, [r7, #10]
 80057f6:	8053      	strh	r3, [r2, #2]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 80057f8:	2200      	movs	r2, #0
 80057fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057fe:	480c      	ldr	r0, [pc, #48]	; (8005830 <spiFlash_Read+0x98>)
 8005800:	f000 fac1 	bl	8005d86 <GPIO_WriteBit>

	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 8005804:	2302      	movs	r3, #2
 8005806:	4a0e      	ldr	r2, [pc, #56]	; (8005840 <spiFlash_Read+0xa8>)
 8005808:	490c      	ldr	r1, [pc, #48]	; (800583c <spiFlash_Read+0xa4>)
 800580a:	480b      	ldr	r0, [pc, #44]	; (8005838 <spiFlash_Read+0xa0>)
 800580c:	f7ff feec 	bl	80055e8 <SpiSendRecvFlash>
	while(SpiActive);
 8005810:	bf00      	nop
 8005812:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <spiFlash_Read+0xac>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1fa      	bne.n	8005812 <spiFlash_Read+0x7a>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800581c:	2201      	movs	r2, #1
 800581e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005822:	4803      	ldr	r0, [pc, #12]	; (8005830 <spiFlash_Read+0x98>)
 8005824:	f000 faaf 	bl	8005d86 <GPIO_WriteBit>

}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40010c00 	.word	0x40010c00
 8005834:	20000d3c 	.word	0x20000d3c
 8005838:	20000d28 	.word	0x20000d28
 800583c:	20000d30 	.word	0x20000d30
 8005840:	20000d38 	.word	0x20000d38
 8005844:	20000d26 	.word	0x20000d26

08005848 <spiFlash_write>:

uint8_t spiFlash_write( uint32_t dwAddrWrite, uint16_t bCnt, uint8_t* pBuf )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	460b      	mov	r3, r1
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	817b      	strh	r3, [r7, #10]
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 8005856:	230a      	movs	r3, #10
 8005858:	75fb      	strb	r3, [r7, #23]
	uint16_t i;
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800585a:	2201      	movs	r2, #1
 800585c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005860:	4822      	ldr	r0, [pc, #136]	; (80058ec <spiFlash_write+0xa4>)
 8005862:	f000 fa90 	bl	8005d86 <GPIO_WriteBit>
	buf_txrx[0] = CMD_PAGE_PROGRAMM;
 8005866:	4b22      	ldr	r3, [pc, #136]	; (80058f0 <spiFlash_write+0xa8>)
 8005868:	2202      	movs	r2, #2
 800586a:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrWrite >> 16);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <spiFlash_write+0xa8>)
 8005874:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrWrite >> 8);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	0a1b      	lsrs	r3, r3, #8
 800587a:	b2da      	uxtb	r2, r3
 800587c:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <spiFlash_write+0xa8>)
 800587e:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrWrite >> 0);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <spiFlash_write+0xa8>)
 8005886:	70da      	strb	r2, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <spiFlash_write+0xac>)
 800588a:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <spiFlash_write+0xa8>)
 800588c:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 800588e:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <spiFlash_write+0xb0>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 4;
 8005894:	4b19      	ldr	r3, [pc, #100]	; (80058fc <spiFlash_write+0xb4>)
 8005896:	2204      	movs	r2, #4
 8005898:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = pBuf;
 800589a:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <spiFlash_write+0xac>)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6053      	str	r3, [r2, #4]
	a_buf_rx[1] = NULL;
 80058a0:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <spiFlash_write+0xb0>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	605a      	str	r2, [r3, #4]
	a_buf_len[1] = bCnt;
 80058a6:	4a15      	ldr	r2, [pc, #84]	; (80058fc <spiFlash_write+0xb4>)
 80058a8:	897b      	ldrh	r3, [r7, #10]
 80058aa:	8053      	strh	r3, [r2, #2]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058b2:	480e      	ldr	r0, [pc, #56]	; (80058ec <spiFlash_write+0xa4>)
 80058b4:	f000 fa67 	bl	8005d86 <GPIO_WriteBit>

	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 80058b8:	2302      	movs	r3, #2
 80058ba:	4a10      	ldr	r2, [pc, #64]	; (80058fc <spiFlash_write+0xb4>)
 80058bc:	490e      	ldr	r1, [pc, #56]	; (80058f8 <spiFlash_write+0xb0>)
 80058be:	480d      	ldr	r0, [pc, #52]	; (80058f4 <spiFlash_write+0xac>)
 80058c0:	f7ff fe92 	bl	80055e8 <SpiSendRecvFlash>
	while(SpiActive);
 80058c4:	bf00      	nop
 80058c6:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <spiFlash_write+0xb8>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1fa      	bne.n	80058c6 <spiFlash_write+0x7e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80058d0:	2201      	movs	r2, #1
 80058d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058d6:	4805      	ldr	r0, [pc, #20]	; (80058ec <spiFlash_write+0xa4>)
 80058d8:	f000 fa55 	bl	8005d86 <GPIO_WriteBit>

	res = FLASH_RES_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	75fb      	strb	r3, [r7, #23]

	return res;
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40010c00 	.word	0x40010c00
 80058f0:	20000d3c 	.word	0x20000d3c
 80058f4:	20000d28 	.word	0x20000d28
 80058f8:	20000d30 	.word	0x20000d30
 80058fc:	20000d38 	.word	0x20000d38
 8005900:	20000d26 	.word	0x20000d26

08005904 <spiFlash_readStatus>:

uint8_t spiFlash_readStatus( uint8_t cmd )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	71fb      	strb	r3, [r7, #7]
	uint8_t bRegStatus;
//	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
	spi_buf_tx[0] = cmd;
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <spiFlash_readStatus+0x54>)
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	7013      	strb	r3, [r2, #0]
	spi_buf_tx[1] = 0xff;
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <spiFlash_readStatus+0x54>)
 8005916:	22ff      	movs	r2, #255	; 0xff
 8005918:	705a      	strb	r2, [r3, #1]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 800591a:	2200      	movs	r2, #0
 800591c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005920:	480e      	ldr	r0, [pc, #56]	; (800595c <spiFlash_readStatus+0x58>)
 8005922:	f000 fa30 	bl	8005d86 <GPIO_WriteBit>

	SPI_Send_Recv(spi_buf_tx, spi_buf_rx, 2);
 8005926:	2202      	movs	r2, #2
 8005928:	490d      	ldr	r1, [pc, #52]	; (8005960 <spiFlash_readStatus+0x5c>)
 800592a:	480b      	ldr	r0, [pc, #44]	; (8005958 <spiFlash_readStatus+0x54>)
 800592c:	f7ff fe18 	bl	8005560 <SPI_Send_Recv>
	while(SpiActive);
 8005930:	bf00      	nop
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <spiFlash_readStatus+0x60>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1fa      	bne.n	8005932 <spiFlash_readStatus+0x2e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800593c:	2201      	movs	r2, #1
 800593e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005942:	4806      	ldr	r0, [pc, #24]	; (800595c <spiFlash_readStatus+0x58>)
 8005944:	f000 fa1f 	bl	8005d86 <GPIO_WriteBit>

	bRegStatus = spi_buf_rx[1];
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <spiFlash_readStatus+0x5c>)
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	73fb      	strb	r3, [r7, #15]


	return bRegStatus;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000d44 	.word	0x20000d44
 800595c:	40010c00 	.word	0x40010c00
 8005960:	20000d64 	.word	0x20000d64
 8005964:	20000d26 	.word	0x20000d26

08005968 <spiFlash_wrtEnbl>:

uint8_t spiFlash_wrtEnbl()
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 800596e:	230a      	movs	r3, #10
 8005970:	71fb      	strb	r3, [r7, #7]
	//GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);

	buf_txrx[0] = CMD_WRITE_ENABLE;
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <spiFlash_wrtEnbl+0x4c>)
 8005974:	2206      	movs	r2, #6
 8005976:	701a      	strb	r2, [r3, #0]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005978:	2200      	movs	r2, #0
 800597a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800597e:	480e      	ldr	r0, [pc, #56]	; (80059b8 <spiFlash_wrtEnbl+0x50>)
 8005980:	f000 fa01 	bl	8005d86 <GPIO_WriteBit>
	SPI_Send_Recv(buf_txrx, NULL, 1);
 8005984:	2201      	movs	r2, #1
 8005986:	2100      	movs	r1, #0
 8005988:	480a      	ldr	r0, [pc, #40]	; (80059b4 <spiFlash_wrtEnbl+0x4c>)
 800598a:	f7ff fde9 	bl	8005560 <SPI_Send_Recv>
	while(SpiActive);
 800598e:	bf00      	nop
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <spiFlash_wrtEnbl+0x54>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1fa      	bne.n	8005990 <spiFlash_wrtEnbl+0x28>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 800599a:	2201      	movs	r2, #1
 800599c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059a0:	4805      	ldr	r0, [pc, #20]	; (80059b8 <spiFlash_wrtEnbl+0x50>)
 80059a2:	f000 f9f0 	bl	8005d86 <GPIO_WriteBit>

	res = FLASH_RES_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	71fb      	strb	r3, [r7, #7]

	return res;
 80059aa:	79fb      	ldrb	r3, [r7, #7]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000d3c 	.word	0x20000d3c
 80059b8:	40010c00 	.word	0x40010c00
 80059bc:	20000d26 	.word	0x20000d26

080059c0 <spiFlash_wrtStatReg>:


uint8_t spiFlash_wrtStatReg()
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 80059c6:	230a      	movs	r3, #10
 80059c8:	71fb      	strb	r3, [r7, #7]
	//GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);

	buf_txrx[0] = CMD_WRITE_STATUS_REGISTER;
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <spiFlash_wrtStatReg+0x54>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = NULL;
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <spiFlash_wrtStatReg+0x54>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	705a      	strb	r2, [r3, #1]
	//buf_txrx[2] = 0xff;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 80059d6:	2200      	movs	r2, #0
 80059d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059dc:	480e      	ldr	r0, [pc, #56]	; (8005a18 <spiFlash_wrtStatReg+0x58>)
 80059de:	f000 f9d2 	bl	8005d86 <GPIO_WriteBit>
	SPI_Send_Recv(buf_txrx, NULL, 2);
 80059e2:	2202      	movs	r2, #2
 80059e4:	2100      	movs	r1, #0
 80059e6:	480b      	ldr	r0, [pc, #44]	; (8005a14 <spiFlash_wrtStatReg+0x54>)
 80059e8:	f7ff fdba 	bl	8005560 <SPI_Send_Recv>
	while(SpiActive);
 80059ec:	bf00      	nop
 80059ee:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <spiFlash_wrtStatReg+0x5c>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1fa      	bne.n	80059ee <spiFlash_wrtStatReg+0x2e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80059f8:	2201      	movs	r2, #1
 80059fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059fe:	4806      	ldr	r0, [pc, #24]	; (8005a18 <spiFlash_wrtStatReg+0x58>)
 8005a00:	f000 f9c1 	bl	8005d86 <GPIO_WriteBit>

	res = FLASH_RES_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	71fb      	strb	r3, [r7, #7]

	return res;
 8005a08:	79fb      	ldrb	r3, [r7, #7]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000d3c 	.word	0x20000d3c
 8005a18:	40010c00 	.word	0x40010c00
 8005a1c:	20000d26 	.word	0x20000d26

08005a20 <spiFlash_eraseSector>:
	return result;
}


uint8_t spiFlash_eraseSector( uint32_t dwSectAddr )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 8005a28:	230a      	movs	r3, #10
 8005a2a:	73fb      	strb	r3, [r7, #15]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a32:	4819      	ldr	r0, [pc, #100]	; (8005a98 <spiFlash_eraseSector+0x78>)
 8005a34:	f000 f9a7 	bl	8005d86 <GPIO_WriteBit>

	buf_txrx[0] = CMD_ERASE_4KB;
 8005a38:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <spiFlash_eraseSector+0x7c>)
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwSectAddr >> 16);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <spiFlash_eraseSector+0x7c>)
 8005a46:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwSectAddr >> 8);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <spiFlash_eraseSector+0x7c>)
 8005a50:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwSectAddr >> 0);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <spiFlash_eraseSector+0x7c>)
 8005a58:	70da      	strb	r2, [r3, #3]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a60:	480d      	ldr	r0, [pc, #52]	; (8005a98 <spiFlash_eraseSector+0x78>)
 8005a62:	f000 f990 	bl	8005d86 <GPIO_WriteBit>

	SPI_Send_Recv(buf_txrx, NULL, 4);
 8005a66:	2204      	movs	r2, #4
 8005a68:	2100      	movs	r1, #0
 8005a6a:	480c      	ldr	r0, [pc, #48]	; (8005a9c <spiFlash_eraseSector+0x7c>)
 8005a6c:	f7ff fd78 	bl	8005560 <SPI_Send_Recv>
	while(SpiActive){};
 8005a70:	bf00      	nop
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <spiFlash_eraseSector+0x80>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1fa      	bne.n	8005a72 <spiFlash_eraseSector+0x52>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a82:	4805      	ldr	r0, [pc, #20]	; (8005a98 <spiFlash_eraseSector+0x78>)
 8005a84:	f000 f97f 	bl	8005d86 <GPIO_WriteBit>

	res = FLASH_RES_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	73fb      	strb	r3, [r7, #15]

	return res;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40010c00 	.word	0x40010c00
 8005a9c:	20000d3c 	.word	0x20000d3c
 8005aa0:	20000d26 	.word	0x20000d26

08005aa4 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005aac:	4a05      	ldr	r2, [pc, #20]	; (8005ac4 <NVIC_PriorityGroupConfig+0x20>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab8:	60d3      	str	r3, [r2, #12]
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	e000ed00 	.word	0xe000ed00

08005ac8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	230f      	movs	r3, #15
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d03a      	beq.n	8005b5a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005ae4:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <NVIC_Init+0xbc>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f1c3 0304 	rsb	r3, r3, #4
 8005af8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	789b      	ldrb	r3, [r3, #2]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <NVIC_Init+0xc0>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	b2c9      	uxtb	r1, r1
 8005b32:	4413      	add	r3, r2
 8005b34:	460a      	mov	r2, r1
 8005b36:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b42:	4911      	ldr	r1, [pc, #68]	; (8005b88 <NVIC_Init+0xc0>)
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	0952      	lsrs	r2, r2, #5
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b4e:	2201      	movs	r2, #1
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b54:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005b58:	e00f      	b.n	8005b7a <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b62:	4909      	ldr	r1, [pc, #36]	; (8005b88 <NVIC_Init+0xc0>)
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	0952      	lsrs	r2, r2, #5
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b6e:	2201      	movs	r2, #1
 8005b70:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b72:	f100 0320 	add.w	r3, r0, #32
 8005b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr
 8005b84:	e000ed00 	.word	0xe000ed00
 8005b88:	e000e100 	.word	0xe000e100

08005b8c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <EXTI_GetFlagStatus+0x30>)
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e001      	b.n	8005bae <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40010400 	.word	0x40010400

08005bc0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005bc8:	4a03      	ldr	r2, [pc, #12]	; (8005bd8 <EXTI_ClearITPendingBit+0x18>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6153      	str	r3, [r2, #20]
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr
 8005bd8:	40010400 	.word	0x40010400

08005bdc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	78db      	ldrb	r3, [r3, #3]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	78db      	ldrb	r3, [r3, #3]
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <GPIO_Init+0x44>
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	789b      	ldrb	r3, [r3, #2]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d044      	beq.n	8005cb4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005c30:	2300      	movs	r3, #0
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e038      	b.n	8005ca8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8005c36:	2201      	movs	r2, #1
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d126      	bne.n	8005ca2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005c5a:	220f      	movs	r2, #15
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	78db      	ldrb	r3, [r3, #3]
 8005c80:	2b28      	cmp	r3, #40	; 0x28
 8005c82:	d105      	bne.n	8005c90 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8005c84:	2201      	movs	r2, #1
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	409a      	lsls	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	615a      	str	r2, [r3, #20]
 8005c8e:	e008      	b.n	8005ca2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	78db      	ldrb	r3, [r3, #3]
 8005c94:	2b48      	cmp	r3, #72	; 0x48
 8005c96:	d104      	bne.n	8005ca2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8005c98:	2201      	movs	r2, #1
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b07      	cmp	r3, #7
 8005cac:	d9c3      	bls.n	8005c36 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	2bff      	cmp	r3, #255	; 0xff
 8005cba:	d946      	bls.n	8005d4a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e03a      	b.n	8005d3e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	2201      	movs	r2, #1
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d127      	bne.n	8005d38 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005cee:	220f      	movs	r2, #15
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	78db      	ldrb	r3, [r3, #3]
 8005d14:	2b28      	cmp	r3, #40	; 0x28
 8005d16:	d105      	bne.n	8005d24 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	78db      	ldrb	r3, [r3, #3]
 8005d28:	2b48      	cmp	r3, #72	; 0x48
 8005d2a:	d105      	bne.n	8005d38 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	2201      	movs	r2, #1
 8005d32:	409a      	lsls	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b07      	cmp	r3, #7
 8005d42:	d9c1      	bls.n	8005cc8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	605a      	str	r2, [r3, #4]
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3724      	adds	r7, #36	; 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	887b      	ldrh	r3, [r7, #2]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
 8005d74:	e001      	b.n	8005d7a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	807b      	strh	r3, [r7, #2]
 8005d92:	4613      	mov	r3, r2
 8005d94:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 8005d96:	787b      	ldrb	r3, [r7, #1]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d9c:	887a      	ldrh	r2, [r7, #2]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8005da2:	e002      	b.n	8005daa <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8005da4:	887a      	ldrh	r2, [r7, #2]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	615a      	str	r2, [r3, #20]
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8005dc6:	2304      	movs	r3, #4
 8005dc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8005dca:	4b57      	ldr	r3, [pc, #348]	; (8005f28 <I2C_Init+0x174>)
 8005dcc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	889b      	ldrh	r3, [r3, #4]
 8005dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8005dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dda:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8005ddc:	f107 0308 	add.w	r3, r7, #8
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f9d9 	bl	8006198 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4a4f      	ldr	r2, [pc, #316]	; (8005f2c <I2C_Init+0x178>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	0c9b      	lsrs	r3, r3, #18
 8005df4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8005df6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005df8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e02:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f023 0301 	bic.w	r3, r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a44      	ldr	r2, [pc, #272]	; (8005f30 <I2C_Init+0x17c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d815      	bhi.n	8005e4e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8005e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d801      	bhi.n	8005e3a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8005e36:	2304      	movs	r3, #4
 8005e38:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8005e3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8005e42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e44:	3301      	adds	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	841a      	strh	r2, [r3, #32]
 8005e4c:	e040      	b.n	8005ed0 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	88db      	ldrh	r3, [r3, #6]
 8005e52:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d109      	bne.n	8005e6e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e6c:	e00e      	b.n	8005e8c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009a      	lsls	r2, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e82:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8005e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8005e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8005e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8005e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eae:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8005eb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	4a1e      	ldr	r2, [pc, #120]	; (8005f34 <I2C_Init+0x180>)
 8005ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8005ec0:	1192      	asrs	r2, r2, #6
 8005ec2:	17db      	asrs	r3, r3, #31
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3301      	adds	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ed4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eee:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8005ef2:	f023 0302 	bic.w	r3, r3, #2
 8005ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	889a      	ldrh	r2, [r3, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	895b      	ldrh	r3, [r3, #10]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f06:	4313      	orrs	r3, r2
 8005f08:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f0e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	899a      	ldrh	r2, [r3, #12]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	891b      	ldrh	r3, [r3, #8]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	811a      	strh	r2, [r3, #8]
}
 8005f20:	bf00      	nop
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	007a1200 	.word	0x007a1200
 8005f2c:	431bde83 	.word	0x431bde83
 8005f30:	000186a0 	.word	0x000186a0
 8005f34:	10624dd3 	.word	0x10624dd3

08005f38 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8005f5a:	e007      	b.n	8005f6c <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	801a      	strh	r2, [r3, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8005f98:	e007      	b.n	8005faa <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	801a      	strh	r2, [r3, #0]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8005fd6:	e007      	b.n	8005fe8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	801a      	strh	r2, [r3, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	821a      	strh	r2, [r3, #16]
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
 800601c:	4613      	mov	r3, r2
 800601e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8006020:	78bb      	ldrb	r3, [r7, #2]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d004      	beq.n	8006030 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	70fb      	strb	r3, [r7, #3]
 800602e:	e003      	b.n	8006038 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	b29a      	uxth	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	821a      	strh	r2, [r3, #16]
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8006060:	2300      	movs	r3, #0
 8006062:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8a9b      	ldrh	r3, [r3, #20]
 8006068:	b29b      	uxth	r3, r3
 800606a:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8b1b      	ldrh	r3, [r3, #24]
 8006070:	b29b      	uxth	r3, r3
 8006072:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4313      	orrs	r3, r2
 8006080:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006084:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	4013      	ands	r3, r2
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d102      	bne.n	8006098 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
 8006096:	e001      	b.n	800609c <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8006098:	2300      	movs	r3, #0
 800609a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80060b0:	4b13      	ldr	r3, [pc, #76]	; (8006100 <RCC_HSEConfig+0x58>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a12      	ldr	r2, [pc, #72]	; (8006100 <RCC_HSEConfig+0x58>)
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80060bc:	4b10      	ldr	r3, [pc, #64]	; (8006100 <RCC_HSEConfig+0x58>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a0f      	ldr	r2, [pc, #60]	; (8006100 <RCC_HSEConfig+0x58>)
 80060c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060c6:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ce:	d004      	beq.n	80060da <RCC_HSEConfig+0x32>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060d6:	d007      	beq.n	80060e8 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80060d8:	e00d      	b.n	80060f6 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <RCC_HSEConfig+0x58>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a08      	ldr	r2, [pc, #32]	; (8006100 <RCC_HSEConfig+0x58>)
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
      break;
 80060e6:	e006      	b.n	80060f6 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <RCC_HSEConfig+0x58>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a04      	ldr	r2, [pc, #16]	; (8006100 <RCC_HSEConfig+0x58>)
 80060ee:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80060f2:	6013      	str	r3, [r2, #0]
      break;
 80060f4:	bf00      	nop
  }
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr
 8006100:	40021000 	.word	0x40021000

08006104 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]

  tmpreg = RCC->CFGR;
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <RCC_PLLConfig+0x38>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800611e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800612c:	4a03      	ldr	r2, [pc, #12]	; (800613c <RCC_PLLConfig+0x38>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6053      	str	r3, [r2, #4]
}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	40021000 	.word	0x40021000

08006140 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800614a:	4a04      	ldr	r2, [pc, #16]	; (800615c <RCC_PLLCmd+0x1c>)
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	6013      	str	r3, [r2, #0]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	42420060 	.word	0x42420060

08006160 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
  tmpreg = RCC->CFGR;
 800616c:	4b09      	ldr	r3, [pc, #36]	; (8006194 <RCC_SYSCLKConfig+0x34>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 0303 	bic.w	r3, r3, #3
 8006178:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006182:	4a04      	ldr	r2, [pc, #16]	; (8006194 <RCC_SYSCLKConfig+0x34>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6053      	str	r3, [r2, #4]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40021000 	.word	0x40021000

08006198 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	2300      	movs	r3, #0
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	2300      	movs	r3, #0
 80061ae:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80061b0:	4b4f      	ldr	r3, [pc, #316]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d011      	beq.n	80061e4 <RCC_GetClocksFreq+0x4c>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d83a      	bhi.n	800623c <RCC_GetClocksFreq+0xa4>
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <RCC_GetClocksFreq+0x3c>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d004      	beq.n	80061dc <RCC_GetClocksFreq+0x44>
 80061d2:	e033      	b.n	800623c <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a47      	ldr	r2, [pc, #284]	; (80062f4 <RCC_GetClocksFreq+0x15c>)
 80061d8:	601a      	str	r2, [r3, #0]
      break;
 80061da:	e033      	b.n	8006244 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a45      	ldr	r2, [pc, #276]	; (80062f4 <RCC_GetClocksFreq+0x15c>)
 80061e0:	601a      	str	r2, [r3, #0]
      break;
 80061e2:	e02f      	b.n	8006244 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80061e4:	4b42      	ldr	r3, [pc, #264]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80061ec:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80061ee:	4b40      	ldr	r3, [pc, #256]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	0c9b      	lsrs	r3, r3, #18
 80061fc:	3302      	adds	r3, #2
 80061fe:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4a3b      	ldr	r2, [pc, #236]	; (80062f8 <RCC_GetClocksFreq+0x160>)
 800620a:	fb03 f202 	mul.w	r2, r3, r2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8006212:	e017      	b.n	8006244 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8006214:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <RCC_GetClocksFreq+0x160>)
 8006224:	fb03 f202 	mul.w	r2, r3, r2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	601a      	str	r2, [r3, #0]
      break;
 800622c:	e00a      	b.n	8006244 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4a30      	ldr	r2, [pc, #192]	; (80062f4 <RCC_GetClocksFreq+0x15c>)
 8006232:	fb03 f202 	mul.w	r2, r3, r2
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	601a      	str	r2, [r3, #0]
      break;
 800623a:	e003      	b.n	8006244 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <RCC_GetClocksFreq+0x15c>)
 8006240:	601a      	str	r2, [r3, #0]
      break;
 8006242:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8006244:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800624c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8006254:	4a29      	ldr	r2, [pc, #164]	; (80062fc <RCC_GetClocksFreq+0x164>)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	40da      	lsrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006274:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800627c:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <RCC_GetClocksFreq+0x164>)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	40da      	lsrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8006294:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800629c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	0adb      	lsrs	r3, r3, #11
 80062a2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80062a4:	4a15      	ldr	r2, [pc, #84]	; (80062fc <RCC_GetClocksFreq+0x164>)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	40da      	lsrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <RCC_GetClocksFreq+0x158>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062c4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	0b9b      	lsrs	r3, r3, #14
 80062ca:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80062cc:	4a0c      	ldr	r2, [pc, #48]	; (8006300 <RCC_GetClocksFreq+0x168>)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	fbb2 f2f3 	udiv	r2, r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	611a      	str	r2, [r3, #16]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	40021000 	.word	0x40021000
 80062f4:	007a1200 	.word	0x007a1200
 80062f8:	003d0900 	.word	0x003d0900
 80062fc:	2000044c 	.word	0x2000044c
 8006300:	2000045c 	.word	0x2000045c

08006304 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <RCC_APB2PeriphClockCmd+0x38>)
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	4908      	ldr	r1, [pc, #32]	; (800633c <RCC_APB2PeriphClockCmd+0x38>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4313      	orrs	r3, r2
 8006320:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8006322:	e006      	b.n	8006332 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <RCC_APB2PeriphClockCmd+0x38>)
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	43db      	mvns	r3, r3
 800632c:	4903      	ldr	r1, [pc, #12]	; (800633c <RCC_APB2PeriphClockCmd+0x38>)
 800632e:	4013      	ands	r3, r2
 8006330:	618b      	str	r3, [r1, #24]
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr
 800633c:	40021000 	.word	0x40021000

08006340 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <RCC_APB1PeriphClockCmd+0x38>)
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	4908      	ldr	r1, [pc, #32]	; (8006378 <RCC_APB1PeriphClockCmd+0x38>)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4313      	orrs	r3, r2
 800635c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800635e:	e006      	b.n	800636e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <RCC_APB1PeriphClockCmd+0x38>)
 8006362:	69da      	ldr	r2, [r3, #28]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	43db      	mvns	r3, r3
 8006368:	4903      	ldr	r1, [pc, #12]	; (8006378 <RCC_APB1PeriphClockCmd+0x38>)
 800636a:	4013      	ands	r3, r2
 800636c:	61cb      	str	r3, [r1, #28]
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	40021000 	.word	0x40021000

0800637c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8006386:	4a04      	ldr	r2, [pc, #16]	; (8006398 <RCC_ClockSecuritySystemCmd+0x1c>)
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	4242004c 	.word	0x4242004c

0800639c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80063b0:	89fb      	ldrh	r3, [r7, #14]
 80063b2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80063b6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	881a      	ldrh	r2, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80063c8:	4313      	orrs	r3, r2
 80063ca:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80063d0:	4313      	orrs	r3, r2
 80063d2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80063d8:	4313      	orrs	r3, r2
 80063da:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80063e8:	4313      	orrs	r3, r2
 80063ea:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80063f0:	4313      	orrs	r3, r2
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	89fb      	ldrh	r3, [r7, #14]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	89fa      	ldrh	r2, [r7, #14]
 80063fe:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8b9b      	ldrh	r3, [r3, #28]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800640a:	b29a      	uxth	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	8a1a      	ldrh	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	821a      	strh	r2, [r3, #16]
}
 8006418:	bf00      	nop
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr

08006422 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8006444:	e007      	b.n	8006456 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	801a      	strh	r2, [r3, #0]
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
 800646c:	4613      	mov	r3, r2
 800646e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8006470:	2300      	movs	r3, #0
 8006472:	81fb      	strh	r3, [r7, #14]
 8006474:	2300      	movs	r3, #0
 8006476:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	b2db      	uxtb	r3, r3
 800647e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8006480:	89fb      	ldrh	r3, [r7, #14]
 8006482:	2201      	movs	r2, #1
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800648a:	78bb      	ldrb	r3, [r7, #2]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	889b      	ldrh	r3, [r3, #4]
 8006494:	b29a      	uxth	r2, r3
 8006496:	89bb      	ldrh	r3, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	b29a      	uxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80064a0:	e009      	b.n	80064b6 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	889b      	ldrh	r3, [r3, #4]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	89bb      	ldrh	r3, [r7, #12]
 80064aa:	43db      	mvns	r3, r3
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	4013      	ands	r3, r2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	809a      	strh	r2, [r3, #4]
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	819a      	strh	r2, [r3, #12]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	899b      	ldrh	r3, [r3, #12]
 80064e8:	b29b      	uxth	r3, r3
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr

080064f4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	889b      	ldrh	r3, [r3, #4]
 800650a:	b29b      	uxth	r3, r3
 800650c:	f043 0304 	orr.w	r3, r3, #4
 8006510:	b29a      	uxth	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8006516:	e007      	b.n	8006528 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	889b      	ldrh	r3, [r3, #4]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	b29a      	uxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	809a      	strh	r2, [r3, #4]
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr

08006532 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	460b      	mov	r3, r1
 800653c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800654e:	b29a      	uxth	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
  }
}
 8006554:	e007      	b.n	8006566 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= CR1_CRCEN_Reset;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006560:	b29a      	uxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	801a      	strh	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	891b      	ldrh	r3, [r3, #8]
 8006584:	b29a      	uxth	r2, r3
 8006586:	887b      	ldrh	r3, [r7, #2]
 8006588:	4013      	ands	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
 8006594:	e001      	b.n	800659a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
	...

080065a8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	81fb      	strh	r3, [r7, #14]

  tmpcr1 = TIMx->CR1;  
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a2e      	ldr	r2, [pc, #184]	; (8006678 <TIM_TimeBaseInit+0xd0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <TIM_TimeBaseInit+0x44>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a2d      	ldr	r2, [pc, #180]	; (800667c <TIM_TimeBaseInit+0xd4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00f      	beq.n	80065ec <TIM_TimeBaseInit+0x44>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d00b      	beq.n	80065ec <TIM_TimeBaseInit+0x44>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a2a      	ldr	r2, [pc, #168]	; (8006680 <TIM_TimeBaseInit+0xd8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_TimeBaseInit+0x44>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a29      	ldr	r2, [pc, #164]	; (8006684 <TIM_TimeBaseInit+0xdc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a28      	ldr	r2, [pc, #160]	; (8006688 <TIM_TimeBaseInit+0xe0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d108      	bne.n	80065fe <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80065ec:	89fb      	ldrh	r3, [r7, #14]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	885a      	ldrh	r2, [r3, #2]
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a22      	ldr	r2, [pc, #136]	; (800668c <TIM_TimeBaseInit+0xe4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00c      	beq.n	8006620 <TIM_TimeBaseInit+0x78>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a21      	ldr	r2, [pc, #132]	; (8006690 <TIM_TimeBaseInit+0xe8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d008      	beq.n	8006620 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800660e:	89fb      	ldrh	r3, [r7, #14]
 8006610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006614:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	88da      	ldrh	r2, [r3, #6]
 800661a:	89fb      	ldrh	r3, [r7, #14]
 800661c:	4313      	orrs	r3, r2
 800661e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	89fa      	ldrh	r2, [r7, #14]
 8006624:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	889a      	ldrh	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	881a      	ldrh	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a0f      	ldr	r2, [pc, #60]	; (8006678 <TIM_TimeBaseInit+0xd0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00f      	beq.n	800665e <TIM_TimeBaseInit+0xb6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a0e      	ldr	r2, [pc, #56]	; (800667c <TIM_TimeBaseInit+0xd4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00b      	beq.n	800665e <TIM_TimeBaseInit+0xb6>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a12      	ldr	r2, [pc, #72]	; (8006694 <TIM_TimeBaseInit+0xec>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d007      	beq.n	800665e <TIM_TimeBaseInit+0xb6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a11      	ldr	r2, [pc, #68]	; (8006698 <TIM_TimeBaseInit+0xf0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_TimeBaseInit+0xb6>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a10      	ldr	r2, [pc, #64]	; (800669c <TIM_TimeBaseInit+0xf4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d104      	bne.n	8006668 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	7a1b      	ldrb	r3, [r3, #8]
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	829a      	strh	r2, [r3, #20]
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40013400 	.word	0x40013400
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40001000 	.word	0x40001000
 8006690:	40001400 	.word	0x40001400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800

080066a0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80066c2:	e007      	b.n	80066d4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	801a      	strh	r2, [r3, #0]
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	807b      	strh	r3, [r7, #2]
 80066ea:	4613      	mov	r3, r2
 80066ec:	707b      	strb	r3, [r7, #1]
  if (NewState != DISABLE)
 80066ee:	787b      	ldrb	r3, [r7, #1]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	899b      	ldrh	r3, [r3, #12]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	887b      	ldrh	r3, [r7, #2]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8006704:	e009      	b.n	800671a <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	899b      	ldrh	r3, [r3, #12]
 800670a:	b29a      	uxth	r2, r3
 800670c:	887b      	ldrh	r3, [r7, #2]
 800670e:	43db      	mvns	r3, r3
 8006710:	b29b      	uxth	r3, r3
 8006712:	4013      	ands	r3, r2
 8006714:	b29a      	uxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	819a      	strh	r2, [r3, #12]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8006734:	2300      	movs	r3, #0
 8006736:	81bb      	strh	r3, [r7, #12]
 8006738:	2300      	movs	r3, #0
 800673a:	817b      	strh	r3, [r7, #10]
   
  itstatus = TIMx->SR & TIM_IT;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8a1b      	ldrh	r3, [r3, #16]
 8006740:	b29a      	uxth	r2, r3
 8006742:	887b      	ldrh	r3, [r7, #2]
 8006744:	4013      	ands	r3, r2
 8006746:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	899b      	ldrh	r3, [r3, #12]
 800674c:	b29a      	uxth	r2, r3
 800674e:	887b      	ldrh	r3, [r7, #2]
 8006750:	4013      	ands	r3, r2
 8006752:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8006754:	89bb      	ldrh	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <TIM_GetITStatus+0x42>
 800675a:	897b      	ldrh	r3, [r7, #10]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e001      	b.n	800676a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	807b      	strh	r3, [r7, #2]
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	43db      	mvns	r3, r3
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	821a      	strh	r2, [r3, #16]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr
	...

08006798 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08c      	sub	sp, #48	; 0x30
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80067a2:	2300      	movs	r3, #0
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a6:	2300      	movs	r3, #0
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80067ae:	2300      	movs	r3, #0
 80067b0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  usartxbase = (uint32_t)USARTx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8a1b      	ldrh	r3, [r3, #16]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80067c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80067c8:	4013      	ands	r3, r2
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	88db      	ldrh	r3, [r3, #6]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	4313      	orrs	r3, r2
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	899b      	ldrh	r3, [r3, #12]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80067ee:	4013      	ands	r3, r2
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	889a      	ldrh	r2, [r3, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	891b      	ldrh	r3, [r3, #8]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006802:	4313      	orrs	r3, r2
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	4313      	orrs	r3, r2
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	b29a      	uxth	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	8a9b      	ldrh	r3, [r3, #20]
 800681a:	b29b      	uxth	r3, r3
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800681e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006820:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8006824:	4013      	ands	r3, r2
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	899b      	ldrh	r3, [r3, #12]
 800682c:	461a      	mov	r2, r3
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	4313      	orrs	r3, r2
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800683c:	f107 0308 	add.w	r3, r7, #8
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fca9 	bl	8006198 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4a2e      	ldr	r2, [pc, #184]	; (8006904 <USART_Init+0x16c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d102      	bne.n	8006854 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
 8006852:	e001      	b.n	8006858 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	899b      	ldrh	r3, [r3, #12]
 800685c:	b29b      	uxth	r3, r3
 800685e:	b21b      	sxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	da0c      	bge.n	800687e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8006864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009a      	lsls	r2, r3, #2
 800686e:	441a      	add	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	e00b      	b.n	8006896 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800687e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009a      	lsls	r2, r3, #2
 8006888:	441a      	add	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	fbb2 f3f3 	udiv	r3, r2, r3
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	4a1b      	ldr	r2, [pc, #108]	; (8006908 <USART_Init+0x170>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	2264      	movs	r2, #100	; 0x64
 80068aa:	fb02 f303 	mul.w	r3, r2, r3
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	899b      	ldrh	r3, [r3, #12]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	b21b      	sxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	da0c      	bge.n	80068da <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	3332      	adds	r3, #50	; 0x32
 80068c6:	4a10      	ldr	r2, [pc, #64]	; (8006908 <USART_Init+0x170>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d4:	4313      	orrs	r3, r2
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	e00b      	b.n	80068f2 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	3332      	adds	r3, #50	; 0x32
 80068e0:	4a09      	ldr	r2, [pc, #36]	; (8006908 <USART_Init+0x170>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	095b      	lsrs	r3, r3, #5
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ee:	4313      	orrs	r3, r2
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	811a      	strh	r2, [r3, #8]
}
 80068fa:	bf00      	nop
 80068fc:	3730      	adds	r7, #48	; 0x30
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40013800 	.word	0x40013800
 8006908:	51eb851f 	.word	0x51eb851f

0800690c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	899b      	ldrh	r3, [r3, #12]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006928:	b29a      	uxth	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800692e:	e007      	b.n	8006940 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	899b      	ldrh	r3, [r3, #12]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	819a      	strh	r2, [r3, #12]
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr

0800694a <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800694a:	b480      	push	{r7}
 800694c:	b087      	sub	sp, #28
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	807b      	strh	r3, [r7, #2]
 8006956:	4613      	mov	r3, r2
 8006958:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
  /* The CTS interrupt is not available for UART4 and UART5 */
  
  usartxbase = (uint32_t)USARTx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800696e:	887b      	ldrh	r3, [r7, #2]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	b2db      	uxtb	r3, r3
 8006976:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8006978:	887b      	ldrh	r3, [r7, #2]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8006980:	2201      	movs	r2, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d103      	bne.n	8006998 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	330c      	adds	r3, #12
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	e009      	b.n	80069ac <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d103      	bne.n	80069a6 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	3310      	adds	r3, #16
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e002      	b.n	80069ac <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	3314      	adds	r3, #20
 80069aa:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80069ac:	787b      	ldrb	r3, [r7, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d006      	beq.n	80069c0 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6819      	ldr	r1, [r3, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80069be:	e006      	b.n	80069ce <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	43da      	mvns	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	400a      	ands	r2, r1
 80069cc:	601a      	str	r2, [r3, #0]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	807b      	strh	r3, [r7, #2]
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80069e4:	887b      	ldrh	r3, [r7, #2]
 80069e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	809a      	strh	r2, [r3, #4]
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr

080069fa <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	889b      	ldrh	r3, [r3, #4]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0c:	b29b      	uxth	r3, r3
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
  /* The CTS flag is not available for UART4 and UART5 */
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	887b      	ldrh	r3, [r7, #2]
 8006a30:	4013      	ands	r3, r2
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
 8006a3c:	e001      	b.n	8006a42 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	81fb      	strh	r3, [r7, #14]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	81bb      	strh	r3, [r7, #12]
  
  bitpos = USART_IT >> 0x08;
 8006a62:	887b      	ldrh	r3, [r7, #2]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8006a72:	89bb      	ldrh	r3, [r7, #12]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	801a      	strh	r2, [r3, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
	...

08006a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a88:	480c      	ldr	r0, [pc, #48]	; (8006abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006a8a:	490d      	ldr	r1, [pc, #52]	; (8006ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006a8c:	4a0d      	ldr	r2, [pc, #52]	; (8006ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a90:	e002      	b.n	8006a98 <LoopCopyDataInit>

08006a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a96:	3304      	adds	r3, #4

08006a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a9c:	d3f9      	bcc.n	8006a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a9e:	4a0a      	ldr	r2, [pc, #40]	; (8006ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006aa0:	4c0a      	ldr	r4, [pc, #40]	; (8006acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8006aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006aa4:	e001      	b.n	8006aaa <LoopFillZerobss>

08006aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006aa8:	3204      	adds	r2, #4

08006aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006aac:	d3fb      	bcc.n	8006aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006aae:	f7f9 fb55 	bl	800015c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ab2:	f000 fab7 	bl	8007024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006ab6:	f7f9 fd39 	bl	800052c <main>
  bx lr
 8006aba:	4770      	bx	lr
  ldr r0, =_sdata
 8006abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ac0:	200004c4 	.word	0x200004c4
  ldr r2, =_sidata
 8006ac4:	08008670 	.word	0x08008670
  ldr r2, =_sbss
 8006ac8:	200004c8 	.word	0x200004c8
  ldr r4, =_ebss
 8006acc:	20000e78 	.word	0x20000e78

08006ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ad0:	e7fe      	b.n	8006ad0 <ADC1_2_IRQHandler>
	...

08006ad4 <Usart2Init>:
static int g_iEnd = 0;

int flag_usart = 0;

//USART2 для передачи на компьютер
void Usart2Init(void) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART2_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART2 initialization: PA2 - USART2_TX, PA3 - USART2_RX */

	USART2_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_PORT, ENABLE );
 8006ada:	2101      	movs	r1, #1
 8006adc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006ae0:	f7ff fc2e 	bl	8006340 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8006ae8:	2318      	movs	r3, #24
 8006aea:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_TX_PIN;
 8006aec:	2304      	movs	r3, #4
 8006aee:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 8006af0:	f107 0314 	add.w	r3, r7, #20
 8006af4:	4619      	mov	r1, r3
 8006af6:	4821      	ldr	r0, [pc, #132]	; (8006b7c <Usart2Init+0xa8>)
 8006af8:	f7ff f870 	bl	8005bdc <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8006afc:	2348      	movs	r3, #72	; 0x48
 8006afe:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_RX_PIN;
 8006b00:	2308      	movs	r3, #8
 8006b02:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4619      	mov	r1, r3
 8006b0a:	481c      	ldr	r0, [pc, #112]	; (8006b7c <Usart2Init+0xa8>)
 8006b0c:	f7ff f866 	bl	8005bdc <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_APBPORT, ENABLE );
 8006b10:	2101      	movs	r1, #1
 8006b12:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006b16:	f7ff fbf5 	bl	8006304 <RCC_APB2PeriphClockCmd>

	USART2_InitStruct.USART_BaudRate = 9600;//для работы с SPI2 только эта скорость подходит
 8006b1a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006b1e:	607b      	str	r3, [r7, #4]
	USART2_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8006b20:	2300      	movs	r3, #0
 8006b22:	823b      	strh	r3, [r7, #16]
	USART2_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8006b24:	230c      	movs	r3, #12
 8006b26:	81fb      	strh	r3, [r7, #14]
	USART2_InitStruct.USART_Parity = USART_Parity_No;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	81bb      	strh	r3, [r7, #12]
	USART2_InitStruct.USART_StopBits = USART_StopBits_1;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	817b      	strh	r3, [r7, #10]
	USART2_InitStruct.USART_WordLength = USART_WordLength_8b;
 8006b30:	2300      	movs	r3, #0
 8006b32:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART2_NUM, &USART2_InitStruct );
 8006b34:	1d3b      	adds	r3, r7, #4
 8006b36:	4619      	mov	r1, r3
 8006b38:	4811      	ldr	r0, [pc, #68]	; (8006b80 <Usart2Init+0xac>)
 8006b3a:	f7ff fe2d 	bl	8006798 <USART_Init>

	USART_Cmd ( USART2_NUM, ENABLE );
 8006b3e:	2101      	movs	r1, #1
 8006b40:	480f      	ldr	r0, [pc, #60]	; (8006b80 <Usart2Init+0xac>)
 8006b42:	f7ff fee3 	bl	800690c <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 8006b46:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8006b4a:	f7fe ffab 	bl	8005aa4 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQ;
 8006b4e:	2326      	movs	r3, #38	; 0x26
 8006b50:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8006b5e:	463b      	mov	r3, r7
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe ffb1 	bl	8005ac8 <NVIC_Init>

	USART_ITConfig ( USART2_NUM, USART_IT_RXNE, ENABLE );
 8006b66:	2201      	movs	r2, #1
 8006b68:	f240 5125 	movw	r1, #1317	; 0x525
 8006b6c:	4804      	ldr	r0, [pc, #16]	; (8006b80 <Usart2Init+0xac>)
 8006b6e:	f7ff feec 	bl	800694a <USART_ITConfig>

}
 8006b72:	bf00      	nop
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40010800 	.word	0x40010800
 8006b80:	40004400 	.word	0x40004400

08006b84 <Usart2_SendData>:
//******************************************************************


//******************************************************************
void Usart2_SendData (char* strcmd, int sz_cmd){
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
//Передача на копьютер до символа окончания строки (0x00).
	for(int ik=0;ik<sz_cmd;ik++){
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e013      	b.n	8006bbc <Usart2_SendData+0x38>
	    //if(strcmd[ik]!=0x00){
 		  while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE) == RESET){}
 8006b94:	bf00      	nop
 8006b96:	2180      	movs	r1, #128	; 0x80
 8006b98:	480d      	ldr	r0, [pc, #52]	; (8006bd0 <Usart2_SendData+0x4c>)
 8006b9a:	f7ff ff3d 	bl	8006a18 <USART_GetFlagStatus>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f8      	beq.n	8006b96 <Usart2_SendData+0x12>
		  USART_SendData(USART2_NUM, strcmd[ik]);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4413      	add	r3, r2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4807      	ldr	r0, [pc, #28]	; (8006bd0 <Usart2_SendData+0x4c>)
 8006bb2:	f7ff ff11 	bl	80069d8 <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	dbe7      	blt.n	8006b94 <Usart2_SendData+0x10>
	    //}
	}

}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40004400 	.word	0x40004400

08006bd4 <SCAN_UsartInit>:

//******************************************************************
//******************************************************************
void SCAN_UsartInit(void) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART1 initialization: PA9 - USART1_TX, PA10 - USART1_RX */

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_PORT, ENABLE );
 8006bda:	2101      	movs	r1, #1
 8006bdc:	2004      	movs	r0, #4
 8006bde:	f7ff fb91 	bl	8006304 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8006be2:	2302      	movs	r3, #2
 8006be4:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8006be6:	2318      	movs	r3, #24
 8006be8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_TX_PIN;
 8006bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bee:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4821      	ldr	r0, [pc, #132]	; (8006c7c <SCAN_UsartInit+0xa8>)
 8006bf8:	f7fe fff0 	bl	8005bdc <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8006bfc:	2348      	movs	r3, #72	; 0x48
 8006bfe:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_RX_PIN;
 8006c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c04:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 8006c06:	f107 0314 	add.w	r3, r7, #20
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	481b      	ldr	r0, [pc, #108]	; (8006c7c <SCAN_UsartInit+0xa8>)
 8006c0e:	f7fe ffe5 	bl	8005bdc <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_APBPORT, ENABLE );
 8006c12:	2101      	movs	r1, #1
 8006c14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006c18:	f7ff fb74 	bl	8006304 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 9600;
 8006c1c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006c20:	607b      	str	r3, [r7, #4]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8006c22:	2300      	movs	r3, #0
 8006c24:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8006c26:	230c      	movs	r3, #12
 8006c28:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8006c32:	2300      	movs	r3, #0
 8006c34:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART_NUM, &USART_InitStruct );
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4811      	ldr	r0, [pc, #68]	; (8006c80 <SCAN_UsartInit+0xac>)
 8006c3c:	f7ff fdac 	bl	8006798 <USART_Init>

	USART_Cmd ( USART_NUM, ENABLE );
 8006c40:	2101      	movs	r1, #1
 8006c42:	480f      	ldr	r0, [pc, #60]	; (8006c80 <SCAN_UsartInit+0xac>)
 8006c44:	f7ff fe62 	bl	800690c <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 8006c48:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8006c4c:	f7fe ff2a 	bl	8005aa4 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART_IRQ;
 8006c50:	2325      	movs	r3, #37	; 0x25
 8006c52:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8006c54:	2301      	movs	r3, #1
 8006c56:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8006c60:	463b      	mov	r3, r7
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe ff30 	bl	8005ac8 <NVIC_Init>

	USART_ITConfig ( USART_NUM, USART_IT_RXNE, ENABLE );
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f240 5125 	movw	r1, #1317	; 0x525
 8006c6e:	4804      	ldr	r0, [pc, #16]	; (8006c80 <SCAN_UsartInit+0xac>)
 8006c70:	f7ff fe6b 	bl	800694a <USART_ITConfig>
}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40010800 	.word	0x40010800
 8006c80:	40013800 	.word	0x40013800

08006c84 <SCAN_SendCMD>:



void SCAN_SendCMD (char* strcmd,int sz_cmd){
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]

	for(int ik=0;ik<sz_cmd;ik++){
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	e013      	b.n	8006cbc <SCAN_SendCMD+0x38>

		 while (READ_BIT(USART_NUM->SR, USART_SR_TXE) != (USART_SR_TXE)) {}
 8006c94:	bf00      	nop
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <SCAN_SendCMD+0x4c>)
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d1f8      	bne.n	8006c96 <SCAN_SendCMD+0x12>

		USART_SendData(USART_NUM, strcmd[ik]);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4413      	add	r3, r2
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4807      	ldr	r0, [pc, #28]	; (8006cd0 <SCAN_SendCMD+0x4c>)
 8006cb2:	f7ff fe91 	bl	80069d8 <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	dbe7      	blt.n	8006c94 <SCAN_SendCMD+0x10>
	}


}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40013800 	.word	0x40013800

08006cd4 <USART_NUM_IRQHandler>:

void USART_NUM_IRQHandler ( void ) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus ( USART_NUM, USART_FLAG_RXNE ) == SET) {
 8006cd8:	2120      	movs	r1, #32
 8006cda:	4824      	ldr	r0, [pc, #144]	; (8006d6c <USART_NUM_IRQHandler+0x98>)
 8006cdc:	f7ff fe9c 	bl	8006a18 <USART_GetFlagStatus>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d13f      	bne.n	8006d66 <USART_NUM_IRQHandler+0x92>
		if(b_getversion){
 8006ce6:	4b22      	ldr	r3, [pc, #136]	; (8006d70 <USART_NUM_IRQHandler+0x9c>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01e      	beq.n	8006d2c <USART_NUM_IRQHandler+0x58>

			USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 8006cee:	f240 5125 	movw	r1, #1317	; 0x525
 8006cf2:	481e      	ldr	r0, [pc, #120]	; (8006d6c <USART_NUM_IRQHandler+0x98>)
 8006cf4:	f7ff feab 	bl	8006a4e <USART_ClearITPendingBit>
			ScanerVersion [ cntbyteversion++ ] = USART_ReceiveData ( USART_NUM );
 8006cf8:	481c      	ldr	r0, [pc, #112]	; (8006d6c <USART_NUM_IRQHandler+0x98>)
 8006cfa:	f7ff fe7e 	bl	80069fa <USART_ReceiveData>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4618      	mov	r0, r3
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <USART_NUM_IRQHandler+0xa0>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	b2d1      	uxtb	r1, r2
 8006d0a:	4a1a      	ldr	r2, [pc, #104]	; (8006d74 <USART_NUM_IRQHandler+0xa0>)
 8006d0c:	7011      	strb	r1, [r2, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	b2c1      	uxtb	r1, r0
 8006d12:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <USART_NUM_IRQHandler+0xa4>)
 8006d14:	5499      	strb	r1, [r3, r2]
			if (cntbyteversion>71){
 8006d16:	4b17      	ldr	r3, [pc, #92]	; (8006d74 <USART_NUM_IRQHandler+0xa0>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b47      	cmp	r3, #71	; 0x47
 8006d1c:	d923      	bls.n	8006d66 <USART_NUM_IRQHandler+0x92>
				b_getversion=DISABLE;
 8006d1e:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <USART_NUM_IRQHandler+0x9c>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
				cntbyteversion=0;
 8006d24:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <USART_NUM_IRQHandler+0xa0>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
		g_iEnd %= QUEUE_LEN;
		}
	}
}
 8006d2a:	e01c      	b.n	8006d66 <USART_NUM_IRQHandler+0x92>
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 8006d2c:	f240 5125 	movw	r1, #1317	; 0x525
 8006d30:	480e      	ldr	r0, [pc, #56]	; (8006d6c <USART_NUM_IRQHandler+0x98>)
 8006d32:	f7ff fe8c 	bl	8006a4e <USART_ClearITPendingBit>
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
 8006d36:	480d      	ldr	r0, [pc, #52]	; (8006d6c <USART_NUM_IRQHandler+0x98>)
 8006d38:	f7ff fe5f 	bl	80069fa <USART_ReceiveData>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <USART_NUM_IRQHandler+0xa8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	490d      	ldr	r1, [pc, #52]	; (8006d7c <USART_NUM_IRQHandler+0xa8>)
 8006d48:	600a      	str	r2, [r1, #0]
 8006d4a:	b2c1      	uxtb	r1, r0
 8006d4c:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <USART_NUM_IRQHandler+0xac>)
 8006d4e:	54d1      	strb	r1, [r2, r3]
		g_iEnd %= QUEUE_LEN;
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <USART_NUM_IRQHandler+0xa8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	425a      	negs	r2, r3
 8006d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006d5e:	bf58      	it	pl
 8006d60:	4253      	negpl	r3, r2
 8006d62:	4a06      	ldr	r2, [pc, #24]	; (8006d7c <USART_NUM_IRQHandler+0xa8>)
 8006d64:	6013      	str	r3, [r2, #0]
}
 8006d66:	bf00      	nop
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40013800 	.word	0x40013800
 8006d70:	20000600 	.word	0x20000600
 8006d74:	20000d84 	.word	0x20000d84
 8006d78:	20000d88 	.word	0x20000d88
 8006d7c:	20000e5c 	.word	0x20000e5c
 8006d80:	20000e18 	.word	0x20000e18

08006d84 <FIFO_GetNextData>:




ErrorStatus FIFO_GetNextData ( char * pResult ) {
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]

	if ( g_iBegin != g_iEnd ) {
 8006d90:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <FIFO_GetNextData+0x50>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <FIFO_GetNextData+0x54>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d015      	beq.n	8006dc8 <FIFO_GetNextData+0x44>
		*pResult = g_aInputQueue [ g_iBegin++ ];
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <FIFO_GetNextData+0x50>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	490c      	ldr	r1, [pc, #48]	; (8006dd4 <FIFO_GetNextData+0x50>)
 8006da4:	600a      	str	r2, [r1, #0]
 8006da6:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <FIFO_GetNextData+0x58>)
 8006da8:	5cd2      	ldrb	r2, [r2, r3]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	701a      	strb	r2, [r3, #0]
		g_iBegin %= QUEUE_LEN;
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <FIFO_GetNextData+0x50>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	425a      	negs	r2, r3
 8006db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006dbc:	bf58      	it	pl
 8006dbe:	4253      	negpl	r3, r2
 8006dc0:	4a04      	ldr	r2, [pc, #16]	; (8006dd4 <FIFO_GetNextData+0x50>)
 8006dc2:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr
 8006dd4:	20000e58 	.word	0x20000e58
 8006dd8:	20000e5c 	.word	0x20000e5c
 8006ddc:	20000e18 	.word	0x20000e18

08006de0 <Date_GetNextDate>:



ErrorStatus Date_GetNextDate(char *dResult ){
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]
	if(date_iBegin != date_iEnd){
 8006dec:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <Date_GetNextDate+0x50>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <Date_GetNextDate+0x54>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d015      	beq.n	8006e24 <Date_GetNextDate+0x44>
		*dResult = date_InputQueue[date_iBegin++];
 8006df8:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <Date_GetNextDate+0x50>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	490c      	ldr	r1, [pc, #48]	; (8006e30 <Date_GetNextDate+0x50>)
 8006e00:	600a      	str	r2, [r1, #0]
 8006e02:	4a0d      	ldr	r2, [pc, #52]	; (8006e38 <Date_GetNextDate+0x58>)
 8006e04:	5cd2      	ldrb	r2, [r2, r3]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	701a      	strb	r2, [r3, #0]
		date_iBegin %= DATE_LEN;
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <Date_GetNextDate+0x50>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	425a      	negs	r2, r3
 8006e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006e18:	bf58      	it	pl
 8006e1a:	4253      	negpl	r3, r2
 8006e1c:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <Date_GetNextDate+0x50>)
 8006e1e:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr
 8006e30:	20000e10 	.word	0x20000e10
 8006e34:	20000e14 	.word	0x20000e14
 8006e38:	20000dd0 	.word	0x20000dd0

08006e3c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus ( USART2_NUM, USART_FLAG_RXNE) == SET){
 8006e40:	2120      	movs	r1, #32
 8006e42:	4814      	ldr	r0, [pc, #80]	; (8006e94 <USART2_IRQHandler+0x58>)
 8006e44:	f7ff fde8 	bl	8006a18 <USART_GetFlagStatus>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d11f      	bne.n	8006e8e <USART2_IRQHandler+0x52>
		flag_usart = 1;
 8006e4e:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <USART2_IRQHandler+0x5c>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
		USART_ClearITPendingBit(USART2_NUM, USART_IT_RXNE);
 8006e54:	f240 5125 	movw	r1, #1317	; 0x525
 8006e58:	480e      	ldr	r0, [pc, #56]	; (8006e94 <USART2_IRQHandler+0x58>)
 8006e5a:	f7ff fdf8 	bl	8006a4e <USART_ClearITPendingBit>
		date_InputQueue [ date_iEnd++ ] = USART_ReceiveData(USART2_NUM);
 8006e5e:	480d      	ldr	r0, [pc, #52]	; (8006e94 <USART2_IRQHandler+0x58>)
 8006e60:	f7ff fdcb 	bl	80069fa <USART_ReceiveData>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4618      	mov	r0, r3
 8006e68:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <USART2_IRQHandler+0x60>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	490b      	ldr	r1, [pc, #44]	; (8006e9c <USART2_IRQHandler+0x60>)
 8006e70:	600a      	str	r2, [r1, #0]
 8006e72:	b2c1      	uxtb	r1, r0
 8006e74:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <USART2_IRQHandler+0x64>)
 8006e76:	54d1      	strb	r1, [r2, r3]
		date_iEnd %= DATE_LEN;
 8006e78:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <USART2_IRQHandler+0x60>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	425a      	negs	r2, r3
 8006e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006e86:	bf58      	it	pl
 8006e88:	4253      	negpl	r3, r2
 8006e8a:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <USART2_IRQHandler+0x60>)
 8006e8c:	6013      	str	r3, [r2, #0]

	}
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40004400 	.word	0x40004400
 8006e98:	20000e60 	.word	0x20000e60
 8006e9c:	20000e14 	.word	0x20000e14
 8006ea0:	20000dd0 	.word	0x20000dd0

08006ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
	return 1;
 8006ea8:	2301      	movs	r3, #1
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <_kill>:

int _kill(int pid, int sig)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006ebc:	f000 f8ac 	bl	8007018 <__errno>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2216      	movs	r2, #22
 8006ec4:	601a      	str	r2, [r3, #0]
	return -1;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <_exit>:

void _exit (int status)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006eda:	f04f 31ff 	mov.w	r1, #4294967295
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ffe7 	bl	8006eb2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006ee4:	e7fe      	b.n	8006ee4 <_exit+0x12>

08006ee6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	e00a      	b.n	8006f0e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006ef8:	f3af 8000 	nop.w
 8006efc:	4601      	mov	r1, r0
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	60ba      	str	r2, [r7, #8]
 8006f04:	b2ca      	uxtb	r2, r1
 8006f06:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	dbf0      	blt.n	8006ef8 <_read+0x12>
	}

return len;
 8006f16:	687b      	ldr	r3, [r7, #4]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e009      	b.n	8006f46 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	60ba      	str	r2, [r7, #8]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3301      	adds	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	dbf1      	blt.n	8006f32 <_write+0x12>
	}
	return len;
 8006f4e:	687b      	ldr	r3, [r7, #4]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <_close>:

int _close(int file)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	return -1;
 8006f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <_isatty>:

int _isatty(int file)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	return 1;
 8006f94:	2301      	movs	r3, #1
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
	return 0;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006fc0:	4b11      	ldr	r3, [pc, #68]	; (8007008 <_sbrk+0x50>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <_sbrk+0x16>
		heap_end = &end;
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <_sbrk+0x50>)
 8006fca:	4a10      	ldr	r2, [pc, #64]	; (800700c <_sbrk+0x54>)
 8006fcc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006fce:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <_sbrk+0x50>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <_sbrk+0x50>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	466a      	mov	r2, sp
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d907      	bls.n	8006ff2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006fe2:	f000 f819 	bl	8007018 <__errno>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	220c      	movs	r2, #12
 8006fea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006fec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff0:	e006      	b.n	8007000 <_sbrk+0x48>
	}

	heap_end += incr;
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <_sbrk+0x50>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	4a03      	ldr	r2, [pc, #12]	; (8007008 <_sbrk+0x50>)
 8006ffc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20000e64 	.word	0x20000e64
 800700c:	20000e78 	.word	0x20000e78

08007010 <atoi>:
 8007010:	220a      	movs	r2, #10
 8007012:	2100      	movs	r1, #0
 8007014:	f000 b9b0 	b.w	8007378 <strtol>

08007018 <__errno>:
 8007018:	4b01      	ldr	r3, [pc, #4]	; (8007020 <__errno+0x8>)
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20000460 	.word	0x20000460

08007024 <__libc_init_array>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	2600      	movs	r6, #0
 8007028:	4d0c      	ldr	r5, [pc, #48]	; (800705c <__libc_init_array+0x38>)
 800702a:	4c0d      	ldr	r4, [pc, #52]	; (8007060 <__libc_init_array+0x3c>)
 800702c:	1b64      	subs	r4, r4, r5
 800702e:	10a4      	asrs	r4, r4, #2
 8007030:	42a6      	cmp	r6, r4
 8007032:	d109      	bne.n	8007048 <__libc_init_array+0x24>
 8007034:	f001 f9aa 	bl	800838c <_init>
 8007038:	2600      	movs	r6, #0
 800703a:	4d0a      	ldr	r5, [pc, #40]	; (8007064 <__libc_init_array+0x40>)
 800703c:	4c0a      	ldr	r4, [pc, #40]	; (8007068 <__libc_init_array+0x44>)
 800703e:	1b64      	subs	r4, r4, r5
 8007040:	10a4      	asrs	r4, r4, #2
 8007042:	42a6      	cmp	r6, r4
 8007044:	d105      	bne.n	8007052 <__libc_init_array+0x2e>
 8007046:	bd70      	pop	{r4, r5, r6, pc}
 8007048:	f855 3b04 	ldr.w	r3, [r5], #4
 800704c:	4798      	blx	r3
 800704e:	3601      	adds	r6, #1
 8007050:	e7ee      	b.n	8007030 <__libc_init_array+0xc>
 8007052:	f855 3b04 	ldr.w	r3, [r5], #4
 8007056:	4798      	blx	r3
 8007058:	3601      	adds	r6, #1
 800705a:	e7f2      	b.n	8007042 <__libc_init_array+0x1e>
 800705c:	08008668 	.word	0x08008668
 8007060:	08008668 	.word	0x08008668
 8007064:	08008668 	.word	0x08008668
 8007068:	0800866c 	.word	0x0800866c

0800706c <memcmp>:
 800706c:	b510      	push	{r4, lr}
 800706e:	3901      	subs	r1, #1
 8007070:	4402      	add	r2, r0
 8007072:	4290      	cmp	r0, r2
 8007074:	d101      	bne.n	800707a <memcmp+0xe>
 8007076:	2000      	movs	r0, #0
 8007078:	e005      	b.n	8007086 <memcmp+0x1a>
 800707a:	7803      	ldrb	r3, [r0, #0]
 800707c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007080:	42a3      	cmp	r3, r4
 8007082:	d001      	beq.n	8007088 <memcmp+0x1c>
 8007084:	1b18      	subs	r0, r3, r4
 8007086:	bd10      	pop	{r4, pc}
 8007088:	3001      	adds	r0, #1
 800708a:	e7f2      	b.n	8007072 <memcmp+0x6>

0800708c <memcpy>:
 800708c:	440a      	add	r2, r1
 800708e:	4291      	cmp	r1, r2
 8007090:	f100 33ff 	add.w	r3, r0, #4294967295
 8007094:	d100      	bne.n	8007098 <memcpy+0xc>
 8007096:	4770      	bx	lr
 8007098:	b510      	push	{r4, lr}
 800709a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800709e:	4291      	cmp	r1, r2
 80070a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a4:	d1f9      	bne.n	800709a <memcpy+0xe>
 80070a6:	bd10      	pop	{r4, pc}

080070a8 <memmove>:
 80070a8:	4288      	cmp	r0, r1
 80070aa:	b510      	push	{r4, lr}
 80070ac:	eb01 0402 	add.w	r4, r1, r2
 80070b0:	d902      	bls.n	80070b8 <memmove+0x10>
 80070b2:	4284      	cmp	r4, r0
 80070b4:	4623      	mov	r3, r4
 80070b6:	d807      	bhi.n	80070c8 <memmove+0x20>
 80070b8:	1e43      	subs	r3, r0, #1
 80070ba:	42a1      	cmp	r1, r4
 80070bc:	d008      	beq.n	80070d0 <memmove+0x28>
 80070be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070c6:	e7f8      	b.n	80070ba <memmove+0x12>
 80070c8:	4601      	mov	r1, r0
 80070ca:	4402      	add	r2, r0
 80070cc:	428a      	cmp	r2, r1
 80070ce:	d100      	bne.n	80070d2 <memmove+0x2a>
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070da:	e7f7      	b.n	80070cc <memmove+0x24>

080070dc <memset>:
 80070dc:	4603      	mov	r3, r0
 80070de:	4402      	add	r2, r0
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d100      	bne.n	80070e6 <memset+0xa>
 80070e4:	4770      	bx	lr
 80070e6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ea:	e7f9      	b.n	80070e0 <memset+0x4>

080070ec <strcat>:
 80070ec:	4602      	mov	r2, r0
 80070ee:	b510      	push	{r4, lr}
 80070f0:	7814      	ldrb	r4, [r2, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	3201      	adds	r2, #1
 80070f6:	2c00      	cmp	r4, #0
 80070f8:	d1fa      	bne.n	80070f0 <strcat+0x4>
 80070fa:	3b01      	subs	r3, #1
 80070fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007100:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007104:	2a00      	cmp	r2, #0
 8007106:	d1f9      	bne.n	80070fc <strcat+0x10>
 8007108:	bd10      	pop	{r4, pc}

0800710a <strcpy>:
 800710a:	4603      	mov	r3, r0
 800710c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007110:	f803 2b01 	strb.w	r2, [r3], #1
 8007114:	2a00      	cmp	r2, #0
 8007116:	d1f9      	bne.n	800710c <strcpy+0x2>
 8007118:	4770      	bx	lr

0800711a <strlcpy>:
 800711a:	460b      	mov	r3, r1
 800711c:	b510      	push	{r4, lr}
 800711e:	b162      	cbz	r2, 800713a <strlcpy+0x20>
 8007120:	3a01      	subs	r2, #1
 8007122:	d008      	beq.n	8007136 <strlcpy+0x1c>
 8007124:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007128:	f800 4b01 	strb.w	r4, [r0], #1
 800712c:	2c00      	cmp	r4, #0
 800712e:	d1f7      	bne.n	8007120 <strlcpy+0x6>
 8007130:	1a58      	subs	r0, r3, r1
 8007132:	3801      	subs	r0, #1
 8007134:	bd10      	pop	{r4, pc}
 8007136:	2200      	movs	r2, #0
 8007138:	7002      	strb	r2, [r0, #0]
 800713a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800713e:	2a00      	cmp	r2, #0
 8007140:	d1fb      	bne.n	800713a <strlcpy+0x20>
 8007142:	e7f5      	b.n	8007130 <strlcpy+0x16>

08007144 <strncat>:
 8007144:	b530      	push	{r4, r5, lr}
 8007146:	4604      	mov	r4, r0
 8007148:	7825      	ldrb	r5, [r4, #0]
 800714a:	4623      	mov	r3, r4
 800714c:	3401      	adds	r4, #1
 800714e:	2d00      	cmp	r5, #0
 8007150:	d1fa      	bne.n	8007148 <strncat+0x4>
 8007152:	3a01      	subs	r2, #1
 8007154:	d304      	bcc.n	8007160 <strncat+0x1c>
 8007156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800715a:	f803 4b01 	strb.w	r4, [r3], #1
 800715e:	b904      	cbnz	r4, 8007162 <strncat+0x1e>
 8007160:	bd30      	pop	{r4, r5, pc}
 8007162:	2a00      	cmp	r2, #0
 8007164:	d1f5      	bne.n	8007152 <strncat+0xe>
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e7f3      	b.n	8007152 <strncat+0xe>

0800716a <strpbrk>:
 800716a:	b570      	push	{r4, r5, r6, lr}
 800716c:	4603      	mov	r3, r0
 800716e:	7800      	ldrb	r0, [r0, #0]
 8007170:	b190      	cbz	r0, 8007198 <strpbrk+0x2e>
 8007172:	460c      	mov	r4, r1
 8007174:	4618      	mov	r0, r3
 8007176:	f813 5b01 	ldrb.w	r5, [r3], #1
 800717a:	b14d      	cbz	r5, 8007190 <strpbrk+0x26>
 800717c:	460a      	mov	r2, r1
 800717e:	e001      	b.n	8007184 <strpbrk+0x1a>
 8007180:	42ae      	cmp	r6, r5
 8007182:	d009      	beq.n	8007198 <strpbrk+0x2e>
 8007184:	4614      	mov	r4, r2
 8007186:	f812 6b01 	ldrb.w	r6, [r2], #1
 800718a:	2e00      	cmp	r6, #0
 800718c:	d1f8      	bne.n	8007180 <strpbrk+0x16>
 800718e:	e7f1      	b.n	8007174 <strpbrk+0xa>
 8007190:	7823      	ldrb	r3, [r4, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf08      	it	eq
 8007196:	2000      	moveq	r0, #0
 8007198:	bd70      	pop	{r4, r5, r6, pc}

0800719a <strstr>:
 800719a:	780a      	ldrb	r2, [r1, #0]
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	b96a      	cbnz	r2, 80071bc <strstr+0x22>
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d109      	bne.n	80071ba <strstr+0x20>
 80071a6:	460c      	mov	r4, r1
 80071a8:	4605      	mov	r5, r0
 80071aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f6      	beq.n	80071a0 <strstr+0x6>
 80071b2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80071b6:	429e      	cmp	r6, r3
 80071b8:	d0f7      	beq.n	80071aa <strstr+0x10>
 80071ba:	3001      	adds	r0, #1
 80071bc:	7803      	ldrb	r3, [r0, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1ef      	bne.n	80071a2 <strstr+0x8>
 80071c2:	4618      	mov	r0, r3
 80071c4:	e7ec      	b.n	80071a0 <strstr+0x6>
	...

080071c8 <strtok>:
 80071c8:	4b16      	ldr	r3, [pc, #88]	; (8007224 <strtok+0x5c>)
 80071ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ce:	681f      	ldr	r7, [r3, #0]
 80071d0:	4605      	mov	r5, r0
 80071d2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80071d4:	460e      	mov	r6, r1
 80071d6:	b9ec      	cbnz	r4, 8007214 <strtok+0x4c>
 80071d8:	2050      	movs	r0, #80	; 0x50
 80071da:	f000 f907 	bl	80073ec <malloc>
 80071de:	4602      	mov	r2, r0
 80071e0:	65b8      	str	r0, [r7, #88]	; 0x58
 80071e2:	b920      	cbnz	r0, 80071ee <strtok+0x26>
 80071e4:	2157      	movs	r1, #87	; 0x57
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <strtok+0x60>)
 80071e8:	4810      	ldr	r0, [pc, #64]	; (800722c <strtok+0x64>)
 80071ea:	f000 f8cf 	bl	800738c <__assert_func>
 80071ee:	e9c0 4400 	strd	r4, r4, [r0]
 80071f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80071f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80071fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80071fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007202:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007206:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800720a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800720e:	6184      	str	r4, [r0, #24]
 8007210:	7704      	strb	r4, [r0, #28]
 8007212:	6244      	str	r4, [r0, #36]	; 0x24
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800721a:	2301      	movs	r3, #1
 800721c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	f000 b806 	b.w	8007230 <__strtok_r>
 8007224:	20000460 	.word	0x20000460
 8007228:	08008424 	.word	0x08008424
 800722c:	0800843b 	.word	0x0800843b

08007230 <__strtok_r>:
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	b908      	cbnz	r0, 8007238 <__strtok_r+0x8>
 8007234:	6810      	ldr	r0, [r2, #0]
 8007236:	b188      	cbz	r0, 800725c <__strtok_r+0x2c>
 8007238:	4604      	mov	r4, r0
 800723a:	460f      	mov	r7, r1
 800723c:	4620      	mov	r0, r4
 800723e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007242:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007246:	b91e      	cbnz	r6, 8007250 <__strtok_r+0x20>
 8007248:	b965      	cbnz	r5, 8007264 <__strtok_r+0x34>
 800724a:	4628      	mov	r0, r5
 800724c:	6015      	str	r5, [r2, #0]
 800724e:	e005      	b.n	800725c <__strtok_r+0x2c>
 8007250:	42b5      	cmp	r5, r6
 8007252:	d1f6      	bne.n	8007242 <__strtok_r+0x12>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1f0      	bne.n	800723a <__strtok_r+0xa>
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	7003      	strb	r3, [r0, #0]
 800725c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725e:	461c      	mov	r4, r3
 8007260:	e00c      	b.n	800727c <__strtok_r+0x4c>
 8007262:	b915      	cbnz	r5, 800726a <__strtok_r+0x3a>
 8007264:	460e      	mov	r6, r1
 8007266:	f814 3b01 	ldrb.w	r3, [r4], #1
 800726a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800726e:	42ab      	cmp	r3, r5
 8007270:	d1f7      	bne.n	8007262 <__strtok_r+0x32>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f3      	beq.n	800725e <__strtok_r+0x2e>
 8007276:	2300      	movs	r3, #0
 8007278:	f804 3c01 	strb.w	r3, [r4, #-1]
 800727c:	6014      	str	r4, [r2, #0]
 800727e:	e7ed      	b.n	800725c <__strtok_r+0x2c>

08007280 <_strtol_l.constprop.0>:
 8007280:	2b01      	cmp	r3, #1
 8007282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007286:	4680      	mov	r8, r0
 8007288:	d001      	beq.n	800728e <_strtol_l.constprop.0+0xe>
 800728a:	2b24      	cmp	r3, #36	; 0x24
 800728c:	d906      	bls.n	800729c <_strtol_l.constprop.0+0x1c>
 800728e:	f7ff fec3 	bl	8007018 <__errno>
 8007292:	2316      	movs	r3, #22
 8007294:	6003      	str	r3, [r0, #0]
 8007296:	2000      	movs	r0, #0
 8007298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729c:	460d      	mov	r5, r1
 800729e:	4f35      	ldr	r7, [pc, #212]	; (8007374 <_strtol_l.constprop.0+0xf4>)
 80072a0:	4628      	mov	r0, r5
 80072a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072a6:	5de6      	ldrb	r6, [r4, r7]
 80072a8:	f016 0608 	ands.w	r6, r6, #8
 80072ac:	d1f8      	bne.n	80072a0 <_strtol_l.constprop.0+0x20>
 80072ae:	2c2d      	cmp	r4, #45	; 0x2d
 80072b0:	d12f      	bne.n	8007312 <_strtol_l.constprop.0+0x92>
 80072b2:	2601      	movs	r6, #1
 80072b4:	782c      	ldrb	r4, [r5, #0]
 80072b6:	1c85      	adds	r5, r0, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d057      	beq.n	800736c <_strtol_l.constprop.0+0xec>
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d109      	bne.n	80072d4 <_strtol_l.constprop.0+0x54>
 80072c0:	2c30      	cmp	r4, #48	; 0x30
 80072c2:	d107      	bne.n	80072d4 <_strtol_l.constprop.0+0x54>
 80072c4:	7828      	ldrb	r0, [r5, #0]
 80072c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072ca:	2858      	cmp	r0, #88	; 0x58
 80072cc:	d149      	bne.n	8007362 <_strtol_l.constprop.0+0xe2>
 80072ce:	2310      	movs	r3, #16
 80072d0:	786c      	ldrb	r4, [r5, #1]
 80072d2:	3502      	adds	r5, #2
 80072d4:	2700      	movs	r7, #0
 80072d6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80072da:	f10e 3eff 	add.w	lr, lr, #4294967295
 80072de:	fbbe f9f3 	udiv	r9, lr, r3
 80072e2:	4638      	mov	r0, r7
 80072e4:	fb03 ea19 	mls	sl, r3, r9, lr
 80072e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80072ec:	f1bc 0f09 	cmp.w	ip, #9
 80072f0:	d814      	bhi.n	800731c <_strtol_l.constprop.0+0x9c>
 80072f2:	4664      	mov	r4, ip
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	dd22      	ble.n	800733e <_strtol_l.constprop.0+0xbe>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	db1d      	blt.n	8007338 <_strtol_l.constprop.0+0xb8>
 80072fc:	4581      	cmp	r9, r0
 80072fe:	d31b      	bcc.n	8007338 <_strtol_l.constprop.0+0xb8>
 8007300:	d101      	bne.n	8007306 <_strtol_l.constprop.0+0x86>
 8007302:	45a2      	cmp	sl, r4
 8007304:	db18      	blt.n	8007338 <_strtol_l.constprop.0+0xb8>
 8007306:	2701      	movs	r7, #1
 8007308:	fb00 4003 	mla	r0, r0, r3, r4
 800730c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007310:	e7ea      	b.n	80072e8 <_strtol_l.constprop.0+0x68>
 8007312:	2c2b      	cmp	r4, #43	; 0x2b
 8007314:	bf04      	itt	eq
 8007316:	782c      	ldrbeq	r4, [r5, #0]
 8007318:	1c85      	addeq	r5, r0, #2
 800731a:	e7cd      	b.n	80072b8 <_strtol_l.constprop.0+0x38>
 800731c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007320:	f1bc 0f19 	cmp.w	ip, #25
 8007324:	d801      	bhi.n	800732a <_strtol_l.constprop.0+0xaa>
 8007326:	3c37      	subs	r4, #55	; 0x37
 8007328:	e7e4      	b.n	80072f4 <_strtol_l.constprop.0+0x74>
 800732a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800732e:	f1bc 0f19 	cmp.w	ip, #25
 8007332:	d804      	bhi.n	800733e <_strtol_l.constprop.0+0xbe>
 8007334:	3c57      	subs	r4, #87	; 0x57
 8007336:	e7dd      	b.n	80072f4 <_strtol_l.constprop.0+0x74>
 8007338:	f04f 37ff 	mov.w	r7, #4294967295
 800733c:	e7e6      	b.n	800730c <_strtol_l.constprop.0+0x8c>
 800733e:	2f00      	cmp	r7, #0
 8007340:	da07      	bge.n	8007352 <_strtol_l.constprop.0+0xd2>
 8007342:	2322      	movs	r3, #34	; 0x22
 8007344:	4670      	mov	r0, lr
 8007346:	f8c8 3000 	str.w	r3, [r8]
 800734a:	2a00      	cmp	r2, #0
 800734c:	d0a4      	beq.n	8007298 <_strtol_l.constprop.0+0x18>
 800734e:	1e69      	subs	r1, r5, #1
 8007350:	e005      	b.n	800735e <_strtol_l.constprop.0+0xde>
 8007352:	b106      	cbz	r6, 8007356 <_strtol_l.constprop.0+0xd6>
 8007354:	4240      	negs	r0, r0
 8007356:	2a00      	cmp	r2, #0
 8007358:	d09e      	beq.n	8007298 <_strtol_l.constprop.0+0x18>
 800735a:	2f00      	cmp	r7, #0
 800735c:	d1f7      	bne.n	800734e <_strtol_l.constprop.0+0xce>
 800735e:	6011      	str	r1, [r2, #0]
 8007360:	e79a      	b.n	8007298 <_strtol_l.constprop.0+0x18>
 8007362:	2430      	movs	r4, #48	; 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1b5      	bne.n	80072d4 <_strtol_l.constprop.0+0x54>
 8007368:	2308      	movs	r3, #8
 800736a:	e7b3      	b.n	80072d4 <_strtol_l.constprop.0+0x54>
 800736c:	2c30      	cmp	r4, #48	; 0x30
 800736e:	d0a9      	beq.n	80072c4 <_strtol_l.constprop.0+0x44>
 8007370:	230a      	movs	r3, #10
 8007372:	e7af      	b.n	80072d4 <_strtol_l.constprop.0+0x54>
 8007374:	080084d5 	.word	0x080084d5

08007378 <strtol>:
 8007378:	4613      	mov	r3, r2
 800737a:	460a      	mov	r2, r1
 800737c:	4601      	mov	r1, r0
 800737e:	4802      	ldr	r0, [pc, #8]	; (8007388 <strtol+0x10>)
 8007380:	6800      	ldr	r0, [r0, #0]
 8007382:	f7ff bf7d 	b.w	8007280 <_strtol_l.constprop.0>
 8007386:	bf00      	nop
 8007388:	20000460 	.word	0x20000460

0800738c <__assert_func>:
 800738c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800738e:	4614      	mov	r4, r2
 8007390:	461a      	mov	r2, r3
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <__assert_func+0x2c>)
 8007394:	4605      	mov	r5, r0
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68d8      	ldr	r0, [r3, #12]
 800739a:	b14c      	cbz	r4, 80073b0 <__assert_func+0x24>
 800739c:	4b07      	ldr	r3, [pc, #28]	; (80073bc <__assert_func+0x30>)
 800739e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073a2:	9100      	str	r1, [sp, #0]
 80073a4:	462b      	mov	r3, r5
 80073a6:	4906      	ldr	r1, [pc, #24]	; (80073c0 <__assert_func+0x34>)
 80073a8:	f000 f80e 	bl	80073c8 <fiprintf>
 80073ac:	f000 fcc0 	bl	8007d30 <abort>
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <__assert_func+0x38>)
 80073b2:	461c      	mov	r4, r3
 80073b4:	e7f3      	b.n	800739e <__assert_func+0x12>
 80073b6:	bf00      	nop
 80073b8:	20000460 	.word	0x20000460
 80073bc:	08008498 	.word	0x08008498
 80073c0:	080084a5 	.word	0x080084a5
 80073c4:	080084d3 	.word	0x080084d3

080073c8 <fiprintf>:
 80073c8:	b40e      	push	{r1, r2, r3}
 80073ca:	b503      	push	{r0, r1, lr}
 80073cc:	4601      	mov	r1, r0
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	4805      	ldr	r0, [pc, #20]	; (80073e8 <fiprintf+0x20>)
 80073d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d6:	6800      	ldr	r0, [r0, #0]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	f000 f913 	bl	8007604 <_vfiprintf_r>
 80073de:	b002      	add	sp, #8
 80073e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073e4:	b003      	add	sp, #12
 80073e6:	4770      	bx	lr
 80073e8:	20000460 	.word	0x20000460

080073ec <malloc>:
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <malloc+0xc>)
 80073ee:	4601      	mov	r1, r0
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f000 b86b 	b.w	80074cc <_malloc_r>
 80073f6:	bf00      	nop
 80073f8:	20000460 	.word	0x20000460

080073fc <_free_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4605      	mov	r5, r0
 8007400:	2900      	cmp	r1, #0
 8007402:	d040      	beq.n	8007486 <_free_r+0x8a>
 8007404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007408:	1f0c      	subs	r4, r1, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfb8      	it	lt
 800740e:	18e4      	addlt	r4, r4, r3
 8007410:	f000 fec0 	bl	8008194 <__malloc_lock>
 8007414:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <_free_r+0x8c>)
 8007416:	6813      	ldr	r3, [r2, #0]
 8007418:	b933      	cbnz	r3, 8007428 <_free_r+0x2c>
 800741a:	6063      	str	r3, [r4, #4]
 800741c:	6014      	str	r4, [r2, #0]
 800741e:	4628      	mov	r0, r5
 8007420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007424:	f000 bebc 	b.w	80081a0 <__malloc_unlock>
 8007428:	42a3      	cmp	r3, r4
 800742a:	d908      	bls.n	800743e <_free_r+0x42>
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	1821      	adds	r1, r4, r0
 8007430:	428b      	cmp	r3, r1
 8007432:	bf01      	itttt	eq
 8007434:	6819      	ldreq	r1, [r3, #0]
 8007436:	685b      	ldreq	r3, [r3, #4]
 8007438:	1809      	addeq	r1, r1, r0
 800743a:	6021      	streq	r1, [r4, #0]
 800743c:	e7ed      	b.n	800741a <_free_r+0x1e>
 800743e:	461a      	mov	r2, r3
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	b10b      	cbz	r3, 8007448 <_free_r+0x4c>
 8007444:	42a3      	cmp	r3, r4
 8007446:	d9fa      	bls.n	800743e <_free_r+0x42>
 8007448:	6811      	ldr	r1, [r2, #0]
 800744a:	1850      	adds	r0, r2, r1
 800744c:	42a0      	cmp	r0, r4
 800744e:	d10b      	bne.n	8007468 <_free_r+0x6c>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	4401      	add	r1, r0
 8007454:	1850      	adds	r0, r2, r1
 8007456:	4283      	cmp	r3, r0
 8007458:	6011      	str	r1, [r2, #0]
 800745a:	d1e0      	bne.n	800741e <_free_r+0x22>
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	4401      	add	r1, r0
 8007462:	6011      	str	r1, [r2, #0]
 8007464:	6053      	str	r3, [r2, #4]
 8007466:	e7da      	b.n	800741e <_free_r+0x22>
 8007468:	d902      	bls.n	8007470 <_free_r+0x74>
 800746a:	230c      	movs	r3, #12
 800746c:	602b      	str	r3, [r5, #0]
 800746e:	e7d6      	b.n	800741e <_free_r+0x22>
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	1821      	adds	r1, r4, r0
 8007474:	428b      	cmp	r3, r1
 8007476:	bf01      	itttt	eq
 8007478:	6819      	ldreq	r1, [r3, #0]
 800747a:	685b      	ldreq	r3, [r3, #4]
 800747c:	1809      	addeq	r1, r1, r0
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6063      	str	r3, [r4, #4]
 8007482:	6054      	str	r4, [r2, #4]
 8007484:	e7cb      	b.n	800741e <_free_r+0x22>
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	20000e68 	.word	0x20000e68

0800748c <sbrk_aligned>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0e      	ldr	r6, [pc, #56]	; (80074c8 <sbrk_aligned+0x3c>)
 8007490:	460c      	mov	r4, r1
 8007492:	6831      	ldr	r1, [r6, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	b911      	cbnz	r1, 800749e <sbrk_aligned+0x12>
 8007498:	f000 fb7a 	bl	8007b90 <_sbrk_r>
 800749c:	6030      	str	r0, [r6, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fb75 	bl	8007b90 <_sbrk_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d00a      	beq.n	80074c0 <sbrk_aligned+0x34>
 80074aa:	1cc4      	adds	r4, r0, #3
 80074ac:	f024 0403 	bic.w	r4, r4, #3
 80074b0:	42a0      	cmp	r0, r4
 80074b2:	d007      	beq.n	80074c4 <sbrk_aligned+0x38>
 80074b4:	1a21      	subs	r1, r4, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fb6a 	bl	8007b90 <_sbrk_r>
 80074bc:	3001      	adds	r0, #1
 80074be:	d101      	bne.n	80074c4 <sbrk_aligned+0x38>
 80074c0:	f04f 34ff 	mov.w	r4, #4294967295
 80074c4:	4620      	mov	r0, r4
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	20000e6c 	.word	0x20000e6c

080074cc <_malloc_r>:
 80074cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d0:	1ccd      	adds	r5, r1, #3
 80074d2:	f025 0503 	bic.w	r5, r5, #3
 80074d6:	3508      	adds	r5, #8
 80074d8:	2d0c      	cmp	r5, #12
 80074da:	bf38      	it	cc
 80074dc:	250c      	movcc	r5, #12
 80074de:	2d00      	cmp	r5, #0
 80074e0:	4607      	mov	r7, r0
 80074e2:	db01      	blt.n	80074e8 <_malloc_r+0x1c>
 80074e4:	42a9      	cmp	r1, r5
 80074e6:	d905      	bls.n	80074f4 <_malloc_r+0x28>
 80074e8:	230c      	movs	r3, #12
 80074ea:	2600      	movs	r6, #0
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4630      	mov	r0, r6
 80074f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f4:	4e2e      	ldr	r6, [pc, #184]	; (80075b0 <_malloc_r+0xe4>)
 80074f6:	f000 fe4d 	bl	8008194 <__malloc_lock>
 80074fa:	6833      	ldr	r3, [r6, #0]
 80074fc:	461c      	mov	r4, r3
 80074fe:	bb34      	cbnz	r4, 800754e <_malloc_r+0x82>
 8007500:	4629      	mov	r1, r5
 8007502:	4638      	mov	r0, r7
 8007504:	f7ff ffc2 	bl	800748c <sbrk_aligned>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	4604      	mov	r4, r0
 800750c:	d14d      	bne.n	80075aa <_malloc_r+0xde>
 800750e:	6834      	ldr	r4, [r6, #0]
 8007510:	4626      	mov	r6, r4
 8007512:	2e00      	cmp	r6, #0
 8007514:	d140      	bne.n	8007598 <_malloc_r+0xcc>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	4631      	mov	r1, r6
 800751a:	4638      	mov	r0, r7
 800751c:	eb04 0803 	add.w	r8, r4, r3
 8007520:	f000 fb36 	bl	8007b90 <_sbrk_r>
 8007524:	4580      	cmp	r8, r0
 8007526:	d13a      	bne.n	800759e <_malloc_r+0xd2>
 8007528:	6821      	ldr	r1, [r4, #0]
 800752a:	3503      	adds	r5, #3
 800752c:	1a6d      	subs	r5, r5, r1
 800752e:	f025 0503 	bic.w	r5, r5, #3
 8007532:	3508      	adds	r5, #8
 8007534:	2d0c      	cmp	r5, #12
 8007536:	bf38      	it	cc
 8007538:	250c      	movcc	r5, #12
 800753a:	4638      	mov	r0, r7
 800753c:	4629      	mov	r1, r5
 800753e:	f7ff ffa5 	bl	800748c <sbrk_aligned>
 8007542:	3001      	adds	r0, #1
 8007544:	d02b      	beq.n	800759e <_malloc_r+0xd2>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	442b      	add	r3, r5
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	e00e      	b.n	800756c <_malloc_r+0xa0>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	1b52      	subs	r2, r2, r5
 8007552:	d41e      	bmi.n	8007592 <_malloc_r+0xc6>
 8007554:	2a0b      	cmp	r2, #11
 8007556:	d916      	bls.n	8007586 <_malloc_r+0xba>
 8007558:	1961      	adds	r1, r4, r5
 800755a:	42a3      	cmp	r3, r4
 800755c:	6025      	str	r5, [r4, #0]
 800755e:	bf18      	it	ne
 8007560:	6059      	strne	r1, [r3, #4]
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	bf08      	it	eq
 8007566:	6031      	streq	r1, [r6, #0]
 8007568:	5162      	str	r2, [r4, r5]
 800756a:	604b      	str	r3, [r1, #4]
 800756c:	4638      	mov	r0, r7
 800756e:	f104 060b 	add.w	r6, r4, #11
 8007572:	f000 fe15 	bl	80081a0 <__malloc_unlock>
 8007576:	f026 0607 	bic.w	r6, r6, #7
 800757a:	1d23      	adds	r3, r4, #4
 800757c:	1af2      	subs	r2, r6, r3
 800757e:	d0b6      	beq.n	80074ee <_malloc_r+0x22>
 8007580:	1b9b      	subs	r3, r3, r6
 8007582:	50a3      	str	r3, [r4, r2]
 8007584:	e7b3      	b.n	80074ee <_malloc_r+0x22>
 8007586:	6862      	ldr	r2, [r4, #4]
 8007588:	42a3      	cmp	r3, r4
 800758a:	bf0c      	ite	eq
 800758c:	6032      	streq	r2, [r6, #0]
 800758e:	605a      	strne	r2, [r3, #4]
 8007590:	e7ec      	b.n	800756c <_malloc_r+0xa0>
 8007592:	4623      	mov	r3, r4
 8007594:	6864      	ldr	r4, [r4, #4]
 8007596:	e7b2      	b.n	80074fe <_malloc_r+0x32>
 8007598:	4634      	mov	r4, r6
 800759a:	6876      	ldr	r6, [r6, #4]
 800759c:	e7b9      	b.n	8007512 <_malloc_r+0x46>
 800759e:	230c      	movs	r3, #12
 80075a0:	4638      	mov	r0, r7
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	f000 fdfc 	bl	80081a0 <__malloc_unlock>
 80075a8:	e7a1      	b.n	80074ee <_malloc_r+0x22>
 80075aa:	6025      	str	r5, [r4, #0]
 80075ac:	e7de      	b.n	800756c <_malloc_r+0xa0>
 80075ae:	bf00      	nop
 80075b0:	20000e68 	.word	0x20000e68

080075b4 <__sfputc_r>:
 80075b4:	6893      	ldr	r3, [r2, #8]
 80075b6:	b410      	push	{r4}
 80075b8:	3b01      	subs	r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	6093      	str	r3, [r2, #8]
 80075be:	da07      	bge.n	80075d0 <__sfputc_r+0x1c>
 80075c0:	6994      	ldr	r4, [r2, #24]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	db01      	blt.n	80075ca <__sfputc_r+0x16>
 80075c6:	290a      	cmp	r1, #10
 80075c8:	d102      	bne.n	80075d0 <__sfputc_r+0x1c>
 80075ca:	bc10      	pop	{r4}
 80075cc:	f000 baf0 	b.w	8007bb0 <__swbuf_r>
 80075d0:	6813      	ldr	r3, [r2, #0]
 80075d2:	1c58      	adds	r0, r3, #1
 80075d4:	6010      	str	r0, [r2, #0]
 80075d6:	7019      	strb	r1, [r3, #0]
 80075d8:	4608      	mov	r0, r1
 80075da:	bc10      	pop	{r4}
 80075dc:	4770      	bx	lr

080075de <__sfputs_r>:
 80075de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e0:	4606      	mov	r6, r0
 80075e2:	460f      	mov	r7, r1
 80075e4:	4614      	mov	r4, r2
 80075e6:	18d5      	adds	r5, r2, r3
 80075e8:	42ac      	cmp	r4, r5
 80075ea:	d101      	bne.n	80075f0 <__sfputs_r+0x12>
 80075ec:	2000      	movs	r0, #0
 80075ee:	e007      	b.n	8007600 <__sfputs_r+0x22>
 80075f0:	463a      	mov	r2, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f8:	f7ff ffdc 	bl	80075b4 <__sfputc_r>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d1f3      	bne.n	80075e8 <__sfputs_r+0xa>
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007604 <_vfiprintf_r>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	460d      	mov	r5, r1
 800760a:	4614      	mov	r4, r2
 800760c:	4698      	mov	r8, r3
 800760e:	4606      	mov	r6, r0
 8007610:	b09d      	sub	sp, #116	; 0x74
 8007612:	b118      	cbz	r0, 800761c <_vfiprintf_r+0x18>
 8007614:	6983      	ldr	r3, [r0, #24]
 8007616:	b90b      	cbnz	r3, 800761c <_vfiprintf_r+0x18>
 8007618:	f000 fca8 	bl	8007f6c <__sinit>
 800761c:	4b89      	ldr	r3, [pc, #548]	; (8007844 <_vfiprintf_r+0x240>)
 800761e:	429d      	cmp	r5, r3
 8007620:	d11b      	bne.n	800765a <_vfiprintf_r+0x56>
 8007622:	6875      	ldr	r5, [r6, #4]
 8007624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007626:	07d9      	lsls	r1, r3, #31
 8007628:	d405      	bmi.n	8007636 <_vfiprintf_r+0x32>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	059a      	lsls	r2, r3, #22
 800762e:	d402      	bmi.n	8007636 <_vfiprintf_r+0x32>
 8007630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007632:	f000 fd39 	bl	80080a8 <__retarget_lock_acquire_recursive>
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	071b      	lsls	r3, r3, #28
 800763a:	d501      	bpl.n	8007640 <_vfiprintf_r+0x3c>
 800763c:	692b      	ldr	r3, [r5, #16]
 800763e:	b9eb      	cbnz	r3, 800767c <_vfiprintf_r+0x78>
 8007640:	4629      	mov	r1, r5
 8007642:	4630      	mov	r0, r6
 8007644:	f000 fb06 	bl	8007c54 <__swsetup_r>
 8007648:	b1c0      	cbz	r0, 800767c <_vfiprintf_r+0x78>
 800764a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800764c:	07dc      	lsls	r4, r3, #31
 800764e:	d50e      	bpl.n	800766e <_vfiprintf_r+0x6a>
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	b01d      	add	sp, #116	; 0x74
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765a:	4b7b      	ldr	r3, [pc, #492]	; (8007848 <_vfiprintf_r+0x244>)
 800765c:	429d      	cmp	r5, r3
 800765e:	d101      	bne.n	8007664 <_vfiprintf_r+0x60>
 8007660:	68b5      	ldr	r5, [r6, #8]
 8007662:	e7df      	b.n	8007624 <_vfiprintf_r+0x20>
 8007664:	4b79      	ldr	r3, [pc, #484]	; (800784c <_vfiprintf_r+0x248>)
 8007666:	429d      	cmp	r5, r3
 8007668:	bf08      	it	eq
 800766a:	68f5      	ldreq	r5, [r6, #12]
 800766c:	e7da      	b.n	8007624 <_vfiprintf_r+0x20>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	0598      	lsls	r0, r3, #22
 8007672:	d4ed      	bmi.n	8007650 <_vfiprintf_r+0x4c>
 8007674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007676:	f000 fd18 	bl	80080aa <__retarget_lock_release_recursive>
 800767a:	e7e9      	b.n	8007650 <_vfiprintf_r+0x4c>
 800767c:	2300      	movs	r3, #0
 800767e:	9309      	str	r3, [sp, #36]	; 0x24
 8007680:	2320      	movs	r3, #32
 8007682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007686:	2330      	movs	r3, #48	; 0x30
 8007688:	f04f 0901 	mov.w	r9, #1
 800768c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007690:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007850 <_vfiprintf_r+0x24c>
 8007694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007698:	4623      	mov	r3, r4
 800769a:	469a      	mov	sl, r3
 800769c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076a0:	b10a      	cbz	r2, 80076a6 <_vfiprintf_r+0xa2>
 80076a2:	2a25      	cmp	r2, #37	; 0x25
 80076a4:	d1f9      	bne.n	800769a <_vfiprintf_r+0x96>
 80076a6:	ebba 0b04 	subs.w	fp, sl, r4
 80076aa:	d00b      	beq.n	80076c4 <_vfiprintf_r+0xc0>
 80076ac:	465b      	mov	r3, fp
 80076ae:	4622      	mov	r2, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ff93 	bl	80075de <__sfputs_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	f000 80aa 	beq.w	8007812 <_vfiprintf_r+0x20e>
 80076be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076c0:	445a      	add	r2, fp
 80076c2:	9209      	str	r2, [sp, #36]	; 0x24
 80076c4:	f89a 3000 	ldrb.w	r3, [sl]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 80a2 	beq.w	8007812 <_vfiprintf_r+0x20e>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d8:	f10a 0a01 	add.w	sl, sl, #1
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076e4:	931a      	str	r3, [sp, #104]	; 0x68
 80076e6:	4654      	mov	r4, sl
 80076e8:	2205      	movs	r2, #5
 80076ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ee:	4858      	ldr	r0, [pc, #352]	; (8007850 <_vfiprintf_r+0x24c>)
 80076f0:	f000 fd42 	bl	8008178 <memchr>
 80076f4:	9a04      	ldr	r2, [sp, #16]
 80076f6:	b9d8      	cbnz	r0, 8007730 <_vfiprintf_r+0x12c>
 80076f8:	06d1      	lsls	r1, r2, #27
 80076fa:	bf44      	itt	mi
 80076fc:	2320      	movmi	r3, #32
 80076fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007702:	0713      	lsls	r3, r2, #28
 8007704:	bf44      	itt	mi
 8007706:	232b      	movmi	r3, #43	; 0x2b
 8007708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b2a      	cmp	r3, #42	; 0x2a
 8007712:	d015      	beq.n	8007740 <_vfiprintf_r+0x13c>
 8007714:	4654      	mov	r4, sl
 8007716:	2000      	movs	r0, #0
 8007718:	f04f 0c0a 	mov.w	ip, #10
 800771c:	9a07      	ldr	r2, [sp, #28]
 800771e:	4621      	mov	r1, r4
 8007720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007724:	3b30      	subs	r3, #48	; 0x30
 8007726:	2b09      	cmp	r3, #9
 8007728:	d94e      	bls.n	80077c8 <_vfiprintf_r+0x1c4>
 800772a:	b1b0      	cbz	r0, 800775a <_vfiprintf_r+0x156>
 800772c:	9207      	str	r2, [sp, #28]
 800772e:	e014      	b.n	800775a <_vfiprintf_r+0x156>
 8007730:	eba0 0308 	sub.w	r3, r0, r8
 8007734:	fa09 f303 	lsl.w	r3, r9, r3
 8007738:	4313      	orrs	r3, r2
 800773a:	46a2      	mov	sl, r4
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	e7d2      	b.n	80076e6 <_vfiprintf_r+0xe2>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	1d19      	adds	r1, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	9103      	str	r1, [sp, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfbb      	ittet	lt
 800774c:	425b      	neglt	r3, r3
 800774e:	f042 0202 	orrlt.w	r2, r2, #2
 8007752:	9307      	strge	r3, [sp, #28]
 8007754:	9307      	strlt	r3, [sp, #28]
 8007756:	bfb8      	it	lt
 8007758:	9204      	strlt	r2, [sp, #16]
 800775a:	7823      	ldrb	r3, [r4, #0]
 800775c:	2b2e      	cmp	r3, #46	; 0x2e
 800775e:	d10c      	bne.n	800777a <_vfiprintf_r+0x176>
 8007760:	7863      	ldrb	r3, [r4, #1]
 8007762:	2b2a      	cmp	r3, #42	; 0x2a
 8007764:	d135      	bne.n	80077d2 <_vfiprintf_r+0x1ce>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	3402      	adds	r4, #2
 800776a:	1d1a      	adds	r2, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	9203      	str	r2, [sp, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfb8      	it	lt
 8007774:	f04f 33ff 	movlt.w	r3, #4294967295
 8007778:	9305      	str	r3, [sp, #20]
 800777a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007854 <_vfiprintf_r+0x250>
 800777e:	2203      	movs	r2, #3
 8007780:	4650      	mov	r0, sl
 8007782:	7821      	ldrb	r1, [r4, #0]
 8007784:	f000 fcf8 	bl	8008178 <memchr>
 8007788:	b140      	cbz	r0, 800779c <_vfiprintf_r+0x198>
 800778a:	2340      	movs	r3, #64	; 0x40
 800778c:	eba0 000a 	sub.w	r0, r0, sl
 8007790:	fa03 f000 	lsl.w	r0, r3, r0
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	3401      	adds	r4, #1
 8007798:	4303      	orrs	r3, r0
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a0:	2206      	movs	r2, #6
 80077a2:	482d      	ldr	r0, [pc, #180]	; (8007858 <_vfiprintf_r+0x254>)
 80077a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a8:	f000 fce6 	bl	8008178 <memchr>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d03f      	beq.n	8007830 <_vfiprintf_r+0x22c>
 80077b0:	4b2a      	ldr	r3, [pc, #168]	; (800785c <_vfiprintf_r+0x258>)
 80077b2:	bb1b      	cbnz	r3, 80077fc <_vfiprintf_r+0x1f8>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	3307      	adds	r3, #7
 80077b8:	f023 0307 	bic.w	r3, r3, #7
 80077bc:	3308      	adds	r3, #8
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	443b      	add	r3, r7
 80077c4:	9309      	str	r3, [sp, #36]	; 0x24
 80077c6:	e767      	b.n	8007698 <_vfiprintf_r+0x94>
 80077c8:	460c      	mov	r4, r1
 80077ca:	2001      	movs	r0, #1
 80077cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80077d0:	e7a5      	b.n	800771e <_vfiprintf_r+0x11a>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f04f 0c0a 	mov.w	ip, #10
 80077d8:	4619      	mov	r1, r3
 80077da:	3401      	adds	r4, #1
 80077dc:	9305      	str	r3, [sp, #20]
 80077de:	4620      	mov	r0, r4
 80077e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e4:	3a30      	subs	r2, #48	; 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d903      	bls.n	80077f2 <_vfiprintf_r+0x1ee>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c5      	beq.n	800777a <_vfiprintf_r+0x176>
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	e7c3      	b.n	800777a <_vfiprintf_r+0x176>
 80077f2:	4604      	mov	r4, r0
 80077f4:	2301      	movs	r3, #1
 80077f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077fa:	e7f0      	b.n	80077de <_vfiprintf_r+0x1da>
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	462a      	mov	r2, r5
 8007802:	4630      	mov	r0, r6
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <_vfiprintf_r+0x25c>)
 8007806:	a904      	add	r1, sp, #16
 8007808:	f3af 8000 	nop.w
 800780c:	4607      	mov	r7, r0
 800780e:	1c78      	adds	r0, r7, #1
 8007810:	d1d6      	bne.n	80077c0 <_vfiprintf_r+0x1bc>
 8007812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007814:	07d9      	lsls	r1, r3, #31
 8007816:	d405      	bmi.n	8007824 <_vfiprintf_r+0x220>
 8007818:	89ab      	ldrh	r3, [r5, #12]
 800781a:	059a      	lsls	r2, r3, #22
 800781c:	d402      	bmi.n	8007824 <_vfiprintf_r+0x220>
 800781e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007820:	f000 fc43 	bl	80080aa <__retarget_lock_release_recursive>
 8007824:	89ab      	ldrh	r3, [r5, #12]
 8007826:	065b      	lsls	r3, r3, #25
 8007828:	f53f af12 	bmi.w	8007650 <_vfiprintf_r+0x4c>
 800782c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782e:	e711      	b.n	8007654 <_vfiprintf_r+0x50>
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	462a      	mov	r2, r5
 8007836:	4630      	mov	r0, r6
 8007838:	4b09      	ldr	r3, [pc, #36]	; (8007860 <_vfiprintf_r+0x25c>)
 800783a:	a904      	add	r1, sp, #16
 800783c:	f000 f882 	bl	8007944 <_printf_i>
 8007840:	e7e4      	b.n	800780c <_vfiprintf_r+0x208>
 8007842:	bf00      	nop
 8007844:	08008628 	.word	0x08008628
 8007848:	08008648 	.word	0x08008648
 800784c:	08008608 	.word	0x08008608
 8007850:	080085d5 	.word	0x080085d5
 8007854:	080085db 	.word	0x080085db
 8007858:	080085df 	.word	0x080085df
 800785c:	00000000 	.word	0x00000000
 8007860:	080075df 	.word	0x080075df

08007864 <_printf_common>:
 8007864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	4616      	mov	r6, r2
 800786a:	4699      	mov	r9, r3
 800786c:	688a      	ldr	r2, [r1, #8]
 800786e:	690b      	ldr	r3, [r1, #16]
 8007870:	4607      	mov	r7, r0
 8007872:	4293      	cmp	r3, r2
 8007874:	bfb8      	it	lt
 8007876:	4613      	movlt	r3, r2
 8007878:	6033      	str	r3, [r6, #0]
 800787a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800787e:	460c      	mov	r4, r1
 8007880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007884:	b10a      	cbz	r2, 800788a <_printf_common+0x26>
 8007886:	3301      	adds	r3, #1
 8007888:	6033      	str	r3, [r6, #0]
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	0699      	lsls	r1, r3, #26
 800788e:	bf42      	ittt	mi
 8007890:	6833      	ldrmi	r3, [r6, #0]
 8007892:	3302      	addmi	r3, #2
 8007894:	6033      	strmi	r3, [r6, #0]
 8007896:	6825      	ldr	r5, [r4, #0]
 8007898:	f015 0506 	ands.w	r5, r5, #6
 800789c:	d106      	bne.n	80078ac <_printf_common+0x48>
 800789e:	f104 0a19 	add.w	sl, r4, #25
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	6832      	ldr	r2, [r6, #0]
 80078a6:	1a9b      	subs	r3, r3, r2
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	dc28      	bgt.n	80078fe <_printf_common+0x9a>
 80078ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078b0:	1e13      	subs	r3, r2, #0
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	bf18      	it	ne
 80078b6:	2301      	movne	r3, #1
 80078b8:	0692      	lsls	r2, r2, #26
 80078ba:	d42d      	bmi.n	8007918 <_printf_common+0xb4>
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078c4:	47c0      	blx	r8
 80078c6:	3001      	adds	r0, #1
 80078c8:	d020      	beq.n	800790c <_printf_common+0xa8>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	68e5      	ldr	r5, [r4, #12]
 80078ce:	f003 0306 	and.w	r3, r3, #6
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	bf18      	it	ne
 80078d6:	2500      	movne	r5, #0
 80078d8:	6832      	ldr	r2, [r6, #0]
 80078da:	f04f 0600 	mov.w	r6, #0
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	bf08      	it	eq
 80078e2:	1aad      	subeq	r5, r5, r2
 80078e4:	6922      	ldr	r2, [r4, #16]
 80078e6:	bf08      	it	eq
 80078e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bfc4      	itt	gt
 80078f0:	1a9b      	subgt	r3, r3, r2
 80078f2:	18ed      	addgt	r5, r5, r3
 80078f4:	341a      	adds	r4, #26
 80078f6:	42b5      	cmp	r5, r6
 80078f8:	d11a      	bne.n	8007930 <_printf_common+0xcc>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e008      	b.n	8007910 <_printf_common+0xac>
 80078fe:	2301      	movs	r3, #1
 8007900:	4652      	mov	r2, sl
 8007902:	4649      	mov	r1, r9
 8007904:	4638      	mov	r0, r7
 8007906:	47c0      	blx	r8
 8007908:	3001      	adds	r0, #1
 800790a:	d103      	bne.n	8007914 <_printf_common+0xb0>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007914:	3501      	adds	r5, #1
 8007916:	e7c4      	b.n	80078a2 <_printf_common+0x3e>
 8007918:	2030      	movs	r0, #48	; 0x30
 800791a:	18e1      	adds	r1, r4, r3
 800791c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007926:	4422      	add	r2, r4
 8007928:	3302      	adds	r3, #2
 800792a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800792e:	e7c5      	b.n	80078bc <_printf_common+0x58>
 8007930:	2301      	movs	r3, #1
 8007932:	4622      	mov	r2, r4
 8007934:	4649      	mov	r1, r9
 8007936:	4638      	mov	r0, r7
 8007938:	47c0      	blx	r8
 800793a:	3001      	adds	r0, #1
 800793c:	d0e6      	beq.n	800790c <_printf_common+0xa8>
 800793e:	3601      	adds	r6, #1
 8007940:	e7d9      	b.n	80078f6 <_printf_common+0x92>
	...

08007944 <_printf_i>:
 8007944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	7e0f      	ldrb	r7, [r1, #24]
 800794a:	4691      	mov	r9, r2
 800794c:	2f78      	cmp	r7, #120	; 0x78
 800794e:	4680      	mov	r8, r0
 8007950:	460c      	mov	r4, r1
 8007952:	469a      	mov	sl, r3
 8007954:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800795a:	d807      	bhi.n	800796c <_printf_i+0x28>
 800795c:	2f62      	cmp	r7, #98	; 0x62
 800795e:	d80a      	bhi.n	8007976 <_printf_i+0x32>
 8007960:	2f00      	cmp	r7, #0
 8007962:	f000 80d9 	beq.w	8007b18 <_printf_i+0x1d4>
 8007966:	2f58      	cmp	r7, #88	; 0x58
 8007968:	f000 80a4 	beq.w	8007ab4 <_printf_i+0x170>
 800796c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007974:	e03a      	b.n	80079ec <_printf_i+0xa8>
 8007976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800797a:	2b15      	cmp	r3, #21
 800797c:	d8f6      	bhi.n	800796c <_printf_i+0x28>
 800797e:	a101      	add	r1, pc, #4	; (adr r1, 8007984 <_printf_i+0x40>)
 8007980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007984:	080079dd 	.word	0x080079dd
 8007988:	080079f1 	.word	0x080079f1
 800798c:	0800796d 	.word	0x0800796d
 8007990:	0800796d 	.word	0x0800796d
 8007994:	0800796d 	.word	0x0800796d
 8007998:	0800796d 	.word	0x0800796d
 800799c:	080079f1 	.word	0x080079f1
 80079a0:	0800796d 	.word	0x0800796d
 80079a4:	0800796d 	.word	0x0800796d
 80079a8:	0800796d 	.word	0x0800796d
 80079ac:	0800796d 	.word	0x0800796d
 80079b0:	08007aff 	.word	0x08007aff
 80079b4:	08007a21 	.word	0x08007a21
 80079b8:	08007ae1 	.word	0x08007ae1
 80079bc:	0800796d 	.word	0x0800796d
 80079c0:	0800796d 	.word	0x0800796d
 80079c4:	08007b21 	.word	0x08007b21
 80079c8:	0800796d 	.word	0x0800796d
 80079cc:	08007a21 	.word	0x08007a21
 80079d0:	0800796d 	.word	0x0800796d
 80079d4:	0800796d 	.word	0x0800796d
 80079d8:	08007ae9 	.word	0x08007ae9
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	1d1a      	adds	r2, r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	602a      	str	r2, [r5, #0]
 80079e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0a4      	b.n	8007b3a <_printf_i+0x1f6>
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	6829      	ldr	r1, [r5, #0]
 80079f4:	0606      	lsls	r6, r0, #24
 80079f6:	f101 0304 	add.w	r3, r1, #4
 80079fa:	d50a      	bpl.n	8007a12 <_printf_i+0xce>
 80079fc:	680e      	ldr	r6, [r1, #0]
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	da03      	bge.n	8007a0c <_printf_i+0xc8>
 8007a04:	232d      	movs	r3, #45	; 0x2d
 8007a06:	4276      	negs	r6, r6
 8007a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a0c:	230a      	movs	r3, #10
 8007a0e:	485e      	ldr	r0, [pc, #376]	; (8007b88 <_printf_i+0x244>)
 8007a10:	e019      	b.n	8007a46 <_printf_i+0x102>
 8007a12:	680e      	ldr	r6, [r1, #0]
 8007a14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	bf18      	it	ne
 8007a1c:	b236      	sxthne	r6, r6
 8007a1e:	e7ef      	b.n	8007a00 <_printf_i+0xbc>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	1d19      	adds	r1, r3, #4
 8007a26:	6029      	str	r1, [r5, #0]
 8007a28:	0601      	lsls	r1, r0, #24
 8007a2a:	d501      	bpl.n	8007a30 <_printf_i+0xec>
 8007a2c:	681e      	ldr	r6, [r3, #0]
 8007a2e:	e002      	b.n	8007a36 <_printf_i+0xf2>
 8007a30:	0646      	lsls	r6, r0, #25
 8007a32:	d5fb      	bpl.n	8007a2c <_printf_i+0xe8>
 8007a34:	881e      	ldrh	r6, [r3, #0]
 8007a36:	2f6f      	cmp	r7, #111	; 0x6f
 8007a38:	bf0c      	ite	eq
 8007a3a:	2308      	moveq	r3, #8
 8007a3c:	230a      	movne	r3, #10
 8007a3e:	4852      	ldr	r0, [pc, #328]	; (8007b88 <_printf_i+0x244>)
 8007a40:	2100      	movs	r1, #0
 8007a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a46:	6865      	ldr	r5, [r4, #4]
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	bfa8      	it	ge
 8007a4c:	6821      	ldrge	r1, [r4, #0]
 8007a4e:	60a5      	str	r5, [r4, #8]
 8007a50:	bfa4      	itt	ge
 8007a52:	f021 0104 	bicge.w	r1, r1, #4
 8007a56:	6021      	strge	r1, [r4, #0]
 8007a58:	b90e      	cbnz	r6, 8007a5e <_printf_i+0x11a>
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	d04d      	beq.n	8007afa <_printf_i+0x1b6>
 8007a5e:	4615      	mov	r5, r2
 8007a60:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a64:	fb03 6711 	mls	r7, r3, r1, r6
 8007a68:	5dc7      	ldrb	r7, [r0, r7]
 8007a6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a6e:	4637      	mov	r7, r6
 8007a70:	42bb      	cmp	r3, r7
 8007a72:	460e      	mov	r6, r1
 8007a74:	d9f4      	bls.n	8007a60 <_printf_i+0x11c>
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d10b      	bne.n	8007a92 <_printf_i+0x14e>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	07de      	lsls	r6, r3, #31
 8007a7e:	d508      	bpl.n	8007a92 <_printf_i+0x14e>
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	6861      	ldr	r1, [r4, #4]
 8007a84:	4299      	cmp	r1, r3
 8007a86:	bfde      	ittt	le
 8007a88:	2330      	movle	r3, #48	; 0x30
 8007a8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a92:	1b52      	subs	r2, r2, r5
 8007a94:	6122      	str	r2, [r4, #16]
 8007a96:	464b      	mov	r3, r9
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f8cd a000 	str.w	sl, [sp]
 8007aa0:	aa03      	add	r2, sp, #12
 8007aa2:	f7ff fedf 	bl	8007864 <_printf_common>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d14c      	bne.n	8007b44 <_printf_i+0x200>
 8007aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007aae:	b004      	add	sp, #16
 8007ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab4:	4834      	ldr	r0, [pc, #208]	; (8007b88 <_printf_i+0x244>)
 8007ab6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007aba:	6829      	ldr	r1, [r5, #0]
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ac2:	6029      	str	r1, [r5, #0]
 8007ac4:	061d      	lsls	r5, r3, #24
 8007ac6:	d514      	bpl.n	8007af2 <_printf_i+0x1ae>
 8007ac8:	07df      	lsls	r7, r3, #31
 8007aca:	bf44      	itt	mi
 8007acc:	f043 0320 	orrmi.w	r3, r3, #32
 8007ad0:	6023      	strmi	r3, [r4, #0]
 8007ad2:	b91e      	cbnz	r6, 8007adc <_printf_i+0x198>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	f023 0320 	bic.w	r3, r3, #32
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	2310      	movs	r3, #16
 8007ade:	e7af      	b.n	8007a40 <_printf_i+0xfc>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	f043 0320 	orr.w	r3, r3, #32
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	2378      	movs	r3, #120	; 0x78
 8007aea:	4828      	ldr	r0, [pc, #160]	; (8007b8c <_printf_i+0x248>)
 8007aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007af0:	e7e3      	b.n	8007aba <_printf_i+0x176>
 8007af2:	0659      	lsls	r1, r3, #25
 8007af4:	bf48      	it	mi
 8007af6:	b2b6      	uxthmi	r6, r6
 8007af8:	e7e6      	b.n	8007ac8 <_printf_i+0x184>
 8007afa:	4615      	mov	r5, r2
 8007afc:	e7bb      	b.n	8007a76 <_printf_i+0x132>
 8007afe:	682b      	ldr	r3, [r5, #0]
 8007b00:	6826      	ldr	r6, [r4, #0]
 8007b02:	1d18      	adds	r0, r3, #4
 8007b04:	6961      	ldr	r1, [r4, #20]
 8007b06:	6028      	str	r0, [r5, #0]
 8007b08:	0635      	lsls	r5, r6, #24
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	d501      	bpl.n	8007b12 <_printf_i+0x1ce>
 8007b0e:	6019      	str	r1, [r3, #0]
 8007b10:	e002      	b.n	8007b18 <_printf_i+0x1d4>
 8007b12:	0670      	lsls	r0, r6, #25
 8007b14:	d5fb      	bpl.n	8007b0e <_printf_i+0x1ca>
 8007b16:	8019      	strh	r1, [r3, #0]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4615      	mov	r5, r2
 8007b1c:	6123      	str	r3, [r4, #16]
 8007b1e:	e7ba      	b.n	8007a96 <_printf_i+0x152>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	2100      	movs	r1, #0
 8007b24:	1d1a      	adds	r2, r3, #4
 8007b26:	602a      	str	r2, [r5, #0]
 8007b28:	681d      	ldr	r5, [r3, #0]
 8007b2a:	6862      	ldr	r2, [r4, #4]
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f000 fb23 	bl	8008178 <memchr>
 8007b32:	b108      	cbz	r0, 8007b38 <_printf_i+0x1f4>
 8007b34:	1b40      	subs	r0, r0, r5
 8007b36:	6060      	str	r0, [r4, #4]
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b42:	e7a8      	b.n	8007a96 <_printf_i+0x152>
 8007b44:	462a      	mov	r2, r5
 8007b46:	4649      	mov	r1, r9
 8007b48:	4640      	mov	r0, r8
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	47d0      	blx	sl
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d0ab      	beq.n	8007aaa <_printf_i+0x166>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	079b      	lsls	r3, r3, #30
 8007b56:	d413      	bmi.n	8007b80 <_printf_i+0x23c>
 8007b58:	68e0      	ldr	r0, [r4, #12]
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	4298      	cmp	r0, r3
 8007b5e:	bfb8      	it	lt
 8007b60:	4618      	movlt	r0, r3
 8007b62:	e7a4      	b.n	8007aae <_printf_i+0x16a>
 8007b64:	2301      	movs	r3, #1
 8007b66:	4632      	mov	r2, r6
 8007b68:	4649      	mov	r1, r9
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	47d0      	blx	sl
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d09b      	beq.n	8007aaa <_printf_i+0x166>
 8007b72:	3501      	adds	r5, #1
 8007b74:	68e3      	ldr	r3, [r4, #12]
 8007b76:	9903      	ldr	r1, [sp, #12]
 8007b78:	1a5b      	subs	r3, r3, r1
 8007b7a:	42ab      	cmp	r3, r5
 8007b7c:	dcf2      	bgt.n	8007b64 <_printf_i+0x220>
 8007b7e:	e7eb      	b.n	8007b58 <_printf_i+0x214>
 8007b80:	2500      	movs	r5, #0
 8007b82:	f104 0619 	add.w	r6, r4, #25
 8007b86:	e7f5      	b.n	8007b74 <_printf_i+0x230>
 8007b88:	080085e6 	.word	0x080085e6
 8007b8c:	080085f7 	.word	0x080085f7

08007b90 <_sbrk_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	2300      	movs	r3, #0
 8007b94:	4d05      	ldr	r5, [pc, #20]	; (8007bac <_sbrk_r+0x1c>)
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	f7ff fa0c 	bl	8006fb8 <_sbrk>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_sbrk_r+0x1a>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_sbrk_r+0x1a>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	20000e74 	.word	0x20000e74

08007bb0 <__swbuf_r>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	460e      	mov	r6, r1
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	b118      	cbz	r0, 8007bc2 <__swbuf_r+0x12>
 8007bba:	6983      	ldr	r3, [r0, #24]
 8007bbc:	b90b      	cbnz	r3, 8007bc2 <__swbuf_r+0x12>
 8007bbe:	f000 f9d5 	bl	8007f6c <__sinit>
 8007bc2:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <__swbuf_r+0x98>)
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	d12b      	bne.n	8007c20 <__swbuf_r+0x70>
 8007bc8:	686c      	ldr	r4, [r5, #4]
 8007bca:	69a3      	ldr	r3, [r4, #24]
 8007bcc:	60a3      	str	r3, [r4, #8]
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	071a      	lsls	r2, r3, #28
 8007bd2:	d52f      	bpl.n	8007c34 <__swbuf_r+0x84>
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	b36b      	cbz	r3, 8007c34 <__swbuf_r+0x84>
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	b2f6      	uxtb	r6, r6
 8007bde:	1ac0      	subs	r0, r0, r3
 8007be0:	6963      	ldr	r3, [r4, #20]
 8007be2:	4637      	mov	r7, r6
 8007be4:	4283      	cmp	r3, r0
 8007be6:	dc04      	bgt.n	8007bf2 <__swbuf_r+0x42>
 8007be8:	4621      	mov	r1, r4
 8007bea:	4628      	mov	r0, r5
 8007bec:	f000 f92a 	bl	8007e44 <_fflush_r>
 8007bf0:	bb30      	cbnz	r0, 8007c40 <__swbuf_r+0x90>
 8007bf2:	68a3      	ldr	r3, [r4, #8]
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	60a3      	str	r3, [r4, #8]
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	701e      	strb	r6, [r3, #0]
 8007c02:	6963      	ldr	r3, [r4, #20]
 8007c04:	4283      	cmp	r3, r0
 8007c06:	d004      	beq.n	8007c12 <__swbuf_r+0x62>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	07db      	lsls	r3, r3, #31
 8007c0c:	d506      	bpl.n	8007c1c <__swbuf_r+0x6c>
 8007c0e:	2e0a      	cmp	r6, #10
 8007c10:	d104      	bne.n	8007c1c <__swbuf_r+0x6c>
 8007c12:	4621      	mov	r1, r4
 8007c14:	4628      	mov	r0, r5
 8007c16:	f000 f915 	bl	8007e44 <_fflush_r>
 8007c1a:	b988      	cbnz	r0, 8007c40 <__swbuf_r+0x90>
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <__swbuf_r+0x9c>)
 8007c22:	429c      	cmp	r4, r3
 8007c24:	d101      	bne.n	8007c2a <__swbuf_r+0x7a>
 8007c26:	68ac      	ldr	r4, [r5, #8]
 8007c28:	e7cf      	b.n	8007bca <__swbuf_r+0x1a>
 8007c2a:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <__swbuf_r+0xa0>)
 8007c2c:	429c      	cmp	r4, r3
 8007c2e:	bf08      	it	eq
 8007c30:	68ec      	ldreq	r4, [r5, #12]
 8007c32:	e7ca      	b.n	8007bca <__swbuf_r+0x1a>
 8007c34:	4621      	mov	r1, r4
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 f80c 	bl	8007c54 <__swsetup_r>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d0cb      	beq.n	8007bd8 <__swbuf_r+0x28>
 8007c40:	f04f 37ff 	mov.w	r7, #4294967295
 8007c44:	e7ea      	b.n	8007c1c <__swbuf_r+0x6c>
 8007c46:	bf00      	nop
 8007c48:	08008628 	.word	0x08008628
 8007c4c:	08008648 	.word	0x08008648
 8007c50:	08008608 	.word	0x08008608

08007c54 <__swsetup_r>:
 8007c54:	4b32      	ldr	r3, [pc, #200]	; (8007d20 <__swsetup_r+0xcc>)
 8007c56:	b570      	push	{r4, r5, r6, lr}
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	b125      	cbz	r5, 8007c6a <__swsetup_r+0x16>
 8007c60:	69ab      	ldr	r3, [r5, #24]
 8007c62:	b913      	cbnz	r3, 8007c6a <__swsetup_r+0x16>
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f981 	bl	8007f6c <__sinit>
 8007c6a:	4b2e      	ldr	r3, [pc, #184]	; (8007d24 <__swsetup_r+0xd0>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d10f      	bne.n	8007c90 <__swsetup_r+0x3c>
 8007c70:	686c      	ldr	r4, [r5, #4]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c78:	0719      	lsls	r1, r3, #28
 8007c7a:	d42c      	bmi.n	8007cd6 <__swsetup_r+0x82>
 8007c7c:	06dd      	lsls	r5, r3, #27
 8007c7e:	d411      	bmi.n	8007ca4 <__swsetup_r+0x50>
 8007c80:	2309      	movs	r3, #9
 8007c82:	6033      	str	r3, [r6, #0]
 8007c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	e03e      	b.n	8007d0e <__swsetup_r+0xba>
 8007c90:	4b25      	ldr	r3, [pc, #148]	; (8007d28 <__swsetup_r+0xd4>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	d101      	bne.n	8007c9a <__swsetup_r+0x46>
 8007c96:	68ac      	ldr	r4, [r5, #8]
 8007c98:	e7eb      	b.n	8007c72 <__swsetup_r+0x1e>
 8007c9a:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <__swsetup_r+0xd8>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	bf08      	it	eq
 8007ca0:	68ec      	ldreq	r4, [r5, #12]
 8007ca2:	e7e6      	b.n	8007c72 <__swsetup_r+0x1e>
 8007ca4:	0758      	lsls	r0, r3, #29
 8007ca6:	d512      	bpl.n	8007cce <__swsetup_r+0x7a>
 8007ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007caa:	b141      	cbz	r1, 8007cbe <__swsetup_r+0x6a>
 8007cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	d002      	beq.n	8007cba <__swsetup_r+0x66>
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f7ff fba1 	bl	80073fc <_free_r>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6063      	str	r3, [r4, #4]
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	f043 0308 	orr.w	r3, r3, #8
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	b94b      	cbnz	r3, 8007cee <__swsetup_r+0x9a>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce4:	d003      	beq.n	8007cee <__swsetup_r+0x9a>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 fa05 	bl	80080f8 <__smakebuf_r>
 8007cee:	89a0      	ldrh	r0, [r4, #12]
 8007cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cf4:	f010 0301 	ands.w	r3, r0, #1
 8007cf8:	d00a      	beq.n	8007d10 <__swsetup_r+0xbc>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	6963      	ldr	r3, [r4, #20]
 8007d00:	425b      	negs	r3, r3
 8007d02:	61a3      	str	r3, [r4, #24]
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	b943      	cbnz	r3, 8007d1a <__swsetup_r+0xc6>
 8007d08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d0c:	d1ba      	bne.n	8007c84 <__swsetup_r+0x30>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	0781      	lsls	r1, r0, #30
 8007d12:	bf58      	it	pl
 8007d14:	6963      	ldrpl	r3, [r4, #20]
 8007d16:	60a3      	str	r3, [r4, #8]
 8007d18:	e7f4      	b.n	8007d04 <__swsetup_r+0xb0>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e7f7      	b.n	8007d0e <__swsetup_r+0xba>
 8007d1e:	bf00      	nop
 8007d20:	20000460 	.word	0x20000460
 8007d24:	08008628 	.word	0x08008628
 8007d28:	08008648 	.word	0x08008648
 8007d2c:	08008608 	.word	0x08008608

08007d30 <abort>:
 8007d30:	2006      	movs	r0, #6
 8007d32:	b508      	push	{r3, lr}
 8007d34:	f000 fa62 	bl	80081fc <raise>
 8007d38:	2001      	movs	r0, #1
 8007d3a:	f7ff f8ca 	bl	8006ed2 <_exit>
	...

08007d40 <__sflush_r>:
 8007d40:	898a      	ldrh	r2, [r1, #12]
 8007d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d44:	4605      	mov	r5, r0
 8007d46:	0710      	lsls	r0, r2, #28
 8007d48:	460c      	mov	r4, r1
 8007d4a:	d457      	bmi.n	8007dfc <__sflush_r+0xbc>
 8007d4c:	684b      	ldr	r3, [r1, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dc04      	bgt.n	8007d5c <__sflush_r+0x1c>
 8007d52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	dc01      	bgt.n	8007d5c <__sflush_r+0x1c>
 8007d58:	2000      	movs	r0, #0
 8007d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d0fa      	beq.n	8007d58 <__sflush_r+0x18>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d68:	682f      	ldr	r7, [r5, #0]
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	d032      	beq.n	8007dd4 <__sflush_r+0x94>
 8007d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	075a      	lsls	r2, r3, #29
 8007d74:	d505      	bpl.n	8007d82 <__sflush_r+0x42>
 8007d76:	6863      	ldr	r3, [r4, #4]
 8007d78:	1ac0      	subs	r0, r0, r3
 8007d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d7c:	b10b      	cbz	r3, 8007d82 <__sflush_r+0x42>
 8007d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d80:	1ac0      	subs	r0, r0, r3
 8007d82:	2300      	movs	r3, #0
 8007d84:	4602      	mov	r2, r0
 8007d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d88:	4628      	mov	r0, r5
 8007d8a:	6a21      	ldr	r1, [r4, #32]
 8007d8c:	47b0      	blx	r6
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	d106      	bne.n	8007da2 <__sflush_r+0x62>
 8007d94:	6829      	ldr	r1, [r5, #0]
 8007d96:	291d      	cmp	r1, #29
 8007d98:	d82c      	bhi.n	8007df4 <__sflush_r+0xb4>
 8007d9a:	4a29      	ldr	r2, [pc, #164]	; (8007e40 <__sflush_r+0x100>)
 8007d9c:	40ca      	lsrs	r2, r1
 8007d9e:	07d6      	lsls	r6, r2, #31
 8007da0:	d528      	bpl.n	8007df4 <__sflush_r+0xb4>
 8007da2:	2200      	movs	r2, #0
 8007da4:	6062      	str	r2, [r4, #4]
 8007da6:	6922      	ldr	r2, [r4, #16]
 8007da8:	04d9      	lsls	r1, r3, #19
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	d504      	bpl.n	8007db8 <__sflush_r+0x78>
 8007dae:	1c42      	adds	r2, r0, #1
 8007db0:	d101      	bne.n	8007db6 <__sflush_r+0x76>
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	b903      	cbnz	r3, 8007db8 <__sflush_r+0x78>
 8007db6:	6560      	str	r0, [r4, #84]	; 0x54
 8007db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dba:	602f      	str	r7, [r5, #0]
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d0cb      	beq.n	8007d58 <__sflush_r+0x18>
 8007dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	d002      	beq.n	8007dce <__sflush_r+0x8e>
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f7ff fb17 	bl	80073fc <_free_r>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8007dd2:	e7c2      	b.n	8007d5a <__sflush_r+0x1a>
 8007dd4:	6a21      	ldr	r1, [r4, #32]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b0      	blx	r6
 8007ddc:	1c41      	adds	r1, r0, #1
 8007dde:	d1c7      	bne.n	8007d70 <__sflush_r+0x30>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c4      	beq.n	8007d70 <__sflush_r+0x30>
 8007de6:	2b1d      	cmp	r3, #29
 8007de8:	d001      	beq.n	8007dee <__sflush_r+0xae>
 8007dea:	2b16      	cmp	r3, #22
 8007dec:	d101      	bne.n	8007df2 <__sflush_r+0xb2>
 8007dee:	602f      	str	r7, [r5, #0]
 8007df0:	e7b2      	b.n	8007d58 <__sflush_r+0x18>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	e7ae      	b.n	8007d5a <__sflush_r+0x1a>
 8007dfc:	690f      	ldr	r7, [r1, #16]
 8007dfe:	2f00      	cmp	r7, #0
 8007e00:	d0aa      	beq.n	8007d58 <__sflush_r+0x18>
 8007e02:	0793      	lsls	r3, r2, #30
 8007e04:	bf18      	it	ne
 8007e06:	2300      	movne	r3, #0
 8007e08:	680e      	ldr	r6, [r1, #0]
 8007e0a:	bf08      	it	eq
 8007e0c:	694b      	ldreq	r3, [r1, #20]
 8007e0e:	1bf6      	subs	r6, r6, r7
 8007e10:	600f      	str	r7, [r1, #0]
 8007e12:	608b      	str	r3, [r1, #8]
 8007e14:	2e00      	cmp	r6, #0
 8007e16:	dd9f      	ble.n	8007d58 <__sflush_r+0x18>
 8007e18:	4633      	mov	r3, r6
 8007e1a:	463a      	mov	r2, r7
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	6a21      	ldr	r1, [r4, #32]
 8007e20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e24:	47e0      	blx	ip
 8007e26:	2800      	cmp	r0, #0
 8007e28:	dc06      	bgt.n	8007e38 <__sflush_r+0xf8>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	e790      	b.n	8007d5a <__sflush_r+0x1a>
 8007e38:	4407      	add	r7, r0
 8007e3a:	1a36      	subs	r6, r6, r0
 8007e3c:	e7ea      	b.n	8007e14 <__sflush_r+0xd4>
 8007e3e:	bf00      	nop
 8007e40:	20400001 	.word	0x20400001

08007e44 <_fflush_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	690b      	ldr	r3, [r1, #16]
 8007e48:	4605      	mov	r5, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	b913      	cbnz	r3, 8007e54 <_fflush_r+0x10>
 8007e4e:	2500      	movs	r5, #0
 8007e50:	4628      	mov	r0, r5
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	b118      	cbz	r0, 8007e5e <_fflush_r+0x1a>
 8007e56:	6983      	ldr	r3, [r0, #24]
 8007e58:	b90b      	cbnz	r3, 8007e5e <_fflush_r+0x1a>
 8007e5a:	f000 f887 	bl	8007f6c <__sinit>
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <_fflush_r+0x6c>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d11b      	bne.n	8007e9c <_fflush_r+0x58>
 8007e64:	686c      	ldr	r4, [r5, #4]
 8007e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0ef      	beq.n	8007e4e <_fflush_r+0xa>
 8007e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e70:	07d0      	lsls	r0, r2, #31
 8007e72:	d404      	bmi.n	8007e7e <_fflush_r+0x3a>
 8007e74:	0599      	lsls	r1, r3, #22
 8007e76:	d402      	bmi.n	8007e7e <_fflush_r+0x3a>
 8007e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7a:	f000 f915 	bl	80080a8 <__retarget_lock_acquire_recursive>
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4621      	mov	r1, r4
 8007e82:	f7ff ff5d 	bl	8007d40 <__sflush_r>
 8007e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e88:	4605      	mov	r5, r0
 8007e8a:	07da      	lsls	r2, r3, #31
 8007e8c:	d4e0      	bmi.n	8007e50 <_fflush_r+0xc>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	059b      	lsls	r3, r3, #22
 8007e92:	d4dd      	bmi.n	8007e50 <_fflush_r+0xc>
 8007e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e96:	f000 f908 	bl	80080aa <__retarget_lock_release_recursive>
 8007e9a:	e7d9      	b.n	8007e50 <_fflush_r+0xc>
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <_fflush_r+0x70>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d101      	bne.n	8007ea6 <_fflush_r+0x62>
 8007ea2:	68ac      	ldr	r4, [r5, #8]
 8007ea4:	e7df      	b.n	8007e66 <_fflush_r+0x22>
 8007ea6:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <_fflush_r+0x74>)
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	bf08      	it	eq
 8007eac:	68ec      	ldreq	r4, [r5, #12]
 8007eae:	e7da      	b.n	8007e66 <_fflush_r+0x22>
 8007eb0:	08008628 	.word	0x08008628
 8007eb4:	08008648 	.word	0x08008648
 8007eb8:	08008608 	.word	0x08008608

08007ebc <std>:
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eca:	6083      	str	r3, [r0, #8]
 8007ecc:	8181      	strh	r1, [r0, #12]
 8007ece:	6643      	str	r3, [r0, #100]	; 0x64
 8007ed0:	81c2      	strh	r2, [r0, #14]
 8007ed2:	6183      	str	r3, [r0, #24]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	305c      	adds	r0, #92	; 0x5c
 8007eda:	f7ff f8ff 	bl	80070dc <memset>
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <std+0x38>)
 8007ee0:	6224      	str	r4, [r4, #32]
 8007ee2:	6263      	str	r3, [r4, #36]	; 0x24
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <std+0x3c>)
 8007ee6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ee8:	4b04      	ldr	r3, [pc, #16]	; (8007efc <std+0x40>)
 8007eea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <std+0x44>)
 8007eee:	6323      	str	r3, [r4, #48]	; 0x30
 8007ef0:	bd10      	pop	{r4, pc}
 8007ef2:	bf00      	nop
 8007ef4:	08008235 	.word	0x08008235
 8007ef8:	08008257 	.word	0x08008257
 8007efc:	0800828f 	.word	0x0800828f
 8007f00:	080082b3 	.word	0x080082b3

08007f04 <_cleanup_r>:
 8007f04:	4901      	ldr	r1, [pc, #4]	; (8007f0c <_cleanup_r+0x8>)
 8007f06:	f000 b8af 	b.w	8008068 <_fwalk_reent>
 8007f0a:	bf00      	nop
 8007f0c:	08007e45 	.word	0x08007e45

08007f10 <__sfmoreglue>:
 8007f10:	2268      	movs	r2, #104	; 0x68
 8007f12:	b570      	push	{r4, r5, r6, lr}
 8007f14:	1e4d      	subs	r5, r1, #1
 8007f16:	4355      	muls	r5, r2
 8007f18:	460e      	mov	r6, r1
 8007f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f1e:	f7ff fad5 	bl	80074cc <_malloc_r>
 8007f22:	4604      	mov	r4, r0
 8007f24:	b140      	cbz	r0, 8007f38 <__sfmoreglue+0x28>
 8007f26:	2100      	movs	r1, #0
 8007f28:	e9c0 1600 	strd	r1, r6, [r0]
 8007f2c:	300c      	adds	r0, #12
 8007f2e:	60a0      	str	r0, [r4, #8]
 8007f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f34:	f7ff f8d2 	bl	80070dc <memset>
 8007f38:	4620      	mov	r0, r4
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}

08007f3c <__sfp_lock_acquire>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__sfp_lock_acquire+0x8>)
 8007f3e:	f000 b8b3 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	20000e71 	.word	0x20000e71

08007f48 <__sfp_lock_release>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__sfp_lock_release+0x8>)
 8007f4a:	f000 b8ae 	b.w	80080aa <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20000e71 	.word	0x20000e71

08007f54 <__sinit_lock_acquire>:
 8007f54:	4801      	ldr	r0, [pc, #4]	; (8007f5c <__sinit_lock_acquire+0x8>)
 8007f56:	f000 b8a7 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 8007f5a:	bf00      	nop
 8007f5c:	20000e72 	.word	0x20000e72

08007f60 <__sinit_lock_release>:
 8007f60:	4801      	ldr	r0, [pc, #4]	; (8007f68 <__sinit_lock_release+0x8>)
 8007f62:	f000 b8a2 	b.w	80080aa <__retarget_lock_release_recursive>
 8007f66:	bf00      	nop
 8007f68:	20000e72 	.word	0x20000e72

08007f6c <__sinit>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4604      	mov	r4, r0
 8007f70:	f7ff fff0 	bl	8007f54 <__sinit_lock_acquire>
 8007f74:	69a3      	ldr	r3, [r4, #24]
 8007f76:	b11b      	cbz	r3, 8007f80 <__sinit+0x14>
 8007f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f7c:	f7ff bff0 	b.w	8007f60 <__sinit_lock_release>
 8007f80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f84:	6523      	str	r3, [r4, #80]	; 0x50
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <__sinit+0x68>)
 8007f88:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <__sinit+0x6c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	bf08      	it	eq
 8007f92:	2301      	moveq	r3, #1
 8007f94:	4620      	mov	r0, r4
 8007f96:	bf08      	it	eq
 8007f98:	61a3      	streq	r3, [r4, #24]
 8007f9a:	f000 f81f 	bl	8007fdc <__sfp>
 8007f9e:	6060      	str	r0, [r4, #4]
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 f81b 	bl	8007fdc <__sfp>
 8007fa6:	60a0      	str	r0, [r4, #8]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 f817 	bl	8007fdc <__sfp>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2104      	movs	r1, #4
 8007fb2:	60e0      	str	r0, [r4, #12]
 8007fb4:	6860      	ldr	r0, [r4, #4]
 8007fb6:	f7ff ff81 	bl	8007ebc <std>
 8007fba:	2201      	movs	r2, #1
 8007fbc:	2109      	movs	r1, #9
 8007fbe:	68a0      	ldr	r0, [r4, #8]
 8007fc0:	f7ff ff7c 	bl	8007ebc <std>
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	2112      	movs	r1, #18
 8007fc8:	68e0      	ldr	r0, [r4, #12]
 8007fca:	f7ff ff77 	bl	8007ebc <std>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	61a3      	str	r3, [r4, #24]
 8007fd2:	e7d1      	b.n	8007f78 <__sinit+0xc>
 8007fd4:	08008420 	.word	0x08008420
 8007fd8:	08007f05 	.word	0x08007f05

08007fdc <__sfp>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	4607      	mov	r7, r0
 8007fe0:	f7ff ffac 	bl	8007f3c <__sfp_lock_acquire>
 8007fe4:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <__sfp+0x84>)
 8007fe6:	681e      	ldr	r6, [r3, #0]
 8007fe8:	69b3      	ldr	r3, [r6, #24]
 8007fea:	b913      	cbnz	r3, 8007ff2 <__sfp+0x16>
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7ff ffbd 	bl	8007f6c <__sinit>
 8007ff2:	3648      	adds	r6, #72	; 0x48
 8007ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	d503      	bpl.n	8008004 <__sfp+0x28>
 8007ffc:	6833      	ldr	r3, [r6, #0]
 8007ffe:	b30b      	cbz	r3, 8008044 <__sfp+0x68>
 8008000:	6836      	ldr	r6, [r6, #0]
 8008002:	e7f7      	b.n	8007ff4 <__sfp+0x18>
 8008004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008008:	b9d5      	cbnz	r5, 8008040 <__sfp+0x64>
 800800a:	4b16      	ldr	r3, [pc, #88]	; (8008064 <__sfp+0x88>)
 800800c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008010:	60e3      	str	r3, [r4, #12]
 8008012:	6665      	str	r5, [r4, #100]	; 0x64
 8008014:	f000 f847 	bl	80080a6 <__retarget_lock_init_recursive>
 8008018:	f7ff ff96 	bl	8007f48 <__sfp_lock_release>
 800801c:	2208      	movs	r2, #8
 800801e:	4629      	mov	r1, r5
 8008020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008028:	6025      	str	r5, [r4, #0]
 800802a:	61a5      	str	r5, [r4, #24]
 800802c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008030:	f7ff f854 	bl	80070dc <memset>
 8008034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800803c:	4620      	mov	r0, r4
 800803e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008040:	3468      	adds	r4, #104	; 0x68
 8008042:	e7d9      	b.n	8007ff8 <__sfp+0x1c>
 8008044:	2104      	movs	r1, #4
 8008046:	4638      	mov	r0, r7
 8008048:	f7ff ff62 	bl	8007f10 <__sfmoreglue>
 800804c:	4604      	mov	r4, r0
 800804e:	6030      	str	r0, [r6, #0]
 8008050:	2800      	cmp	r0, #0
 8008052:	d1d5      	bne.n	8008000 <__sfp+0x24>
 8008054:	f7ff ff78 	bl	8007f48 <__sfp_lock_release>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	e7ee      	b.n	800803c <__sfp+0x60>
 800805e:	bf00      	nop
 8008060:	08008420 	.word	0x08008420
 8008064:	ffff0001 	.word	0xffff0001

08008068 <_fwalk_reent>:
 8008068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800806c:	4606      	mov	r6, r0
 800806e:	4688      	mov	r8, r1
 8008070:	2700      	movs	r7, #0
 8008072:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800807a:	f1b9 0901 	subs.w	r9, r9, #1
 800807e:	d505      	bpl.n	800808c <_fwalk_reent+0x24>
 8008080:	6824      	ldr	r4, [r4, #0]
 8008082:	2c00      	cmp	r4, #0
 8008084:	d1f7      	bne.n	8008076 <_fwalk_reent+0xe>
 8008086:	4638      	mov	r0, r7
 8008088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808c:	89ab      	ldrh	r3, [r5, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d907      	bls.n	80080a2 <_fwalk_reent+0x3a>
 8008092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008096:	3301      	adds	r3, #1
 8008098:	d003      	beq.n	80080a2 <_fwalk_reent+0x3a>
 800809a:	4629      	mov	r1, r5
 800809c:	4630      	mov	r0, r6
 800809e:	47c0      	blx	r8
 80080a0:	4307      	orrs	r7, r0
 80080a2:	3568      	adds	r5, #104	; 0x68
 80080a4:	e7e9      	b.n	800807a <_fwalk_reent+0x12>

080080a6 <__retarget_lock_init_recursive>:
 80080a6:	4770      	bx	lr

080080a8 <__retarget_lock_acquire_recursive>:
 80080a8:	4770      	bx	lr

080080aa <__retarget_lock_release_recursive>:
 80080aa:	4770      	bx	lr

080080ac <__swhatbuf_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	460e      	mov	r6, r1
 80080b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b4:	4614      	mov	r4, r2
 80080b6:	2900      	cmp	r1, #0
 80080b8:	461d      	mov	r5, r3
 80080ba:	b096      	sub	sp, #88	; 0x58
 80080bc:	da08      	bge.n	80080d0 <__swhatbuf_r+0x24>
 80080be:	2200      	movs	r2, #0
 80080c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080c4:	602a      	str	r2, [r5, #0]
 80080c6:	061a      	lsls	r2, r3, #24
 80080c8:	d410      	bmi.n	80080ec <__swhatbuf_r+0x40>
 80080ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ce:	e00e      	b.n	80080ee <__swhatbuf_r+0x42>
 80080d0:	466a      	mov	r2, sp
 80080d2:	f000 f915 	bl	8008300 <_fstat_r>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	dbf1      	blt.n	80080be <__swhatbuf_r+0x12>
 80080da:	9a01      	ldr	r2, [sp, #4]
 80080dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080e4:	425a      	negs	r2, r3
 80080e6:	415a      	adcs	r2, r3
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	e7ee      	b.n	80080ca <__swhatbuf_r+0x1e>
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	2000      	movs	r0, #0
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	b016      	add	sp, #88	; 0x58
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080080f8 <__smakebuf_r>:
 80080f8:	898b      	ldrh	r3, [r1, #12]
 80080fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080fc:	079d      	lsls	r5, r3, #30
 80080fe:	4606      	mov	r6, r0
 8008100:	460c      	mov	r4, r1
 8008102:	d507      	bpl.n	8008114 <__smakebuf_r+0x1c>
 8008104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	2301      	movs	r3, #1
 800810e:	6163      	str	r3, [r4, #20]
 8008110:	b002      	add	sp, #8
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	466a      	mov	r2, sp
 8008116:	ab01      	add	r3, sp, #4
 8008118:	f7ff ffc8 	bl	80080ac <__swhatbuf_r>
 800811c:	9900      	ldr	r1, [sp, #0]
 800811e:	4605      	mov	r5, r0
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff f9d3 	bl	80074cc <_malloc_r>
 8008126:	b948      	cbnz	r0, 800813c <__smakebuf_r+0x44>
 8008128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812c:	059a      	lsls	r2, r3, #22
 800812e:	d4ef      	bmi.n	8008110 <__smakebuf_r+0x18>
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e7e3      	b.n	8008104 <__smakebuf_r+0xc>
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <__smakebuf_r+0x7c>)
 800813e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	6020      	str	r0, [r4, #0]
 8008144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	9b00      	ldr	r3, [sp, #0]
 800814c:	6120      	str	r0, [r4, #16]
 800814e:	6163      	str	r3, [r4, #20]
 8008150:	9b01      	ldr	r3, [sp, #4]
 8008152:	b15b      	cbz	r3, 800816c <__smakebuf_r+0x74>
 8008154:	4630      	mov	r0, r6
 8008156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800815a:	f000 f8e3 	bl	8008324 <_isatty_r>
 800815e:	b128      	cbz	r0, 800816c <__smakebuf_r+0x74>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f023 0303 	bic.w	r3, r3, #3
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	89a0      	ldrh	r0, [r4, #12]
 800816e:	4305      	orrs	r5, r0
 8008170:	81a5      	strh	r5, [r4, #12]
 8008172:	e7cd      	b.n	8008110 <__smakebuf_r+0x18>
 8008174:	08007f05 	.word	0x08007f05

08008178 <memchr>:
 8008178:	4603      	mov	r3, r0
 800817a:	b510      	push	{r4, lr}
 800817c:	b2c9      	uxtb	r1, r1
 800817e:	4402      	add	r2, r0
 8008180:	4293      	cmp	r3, r2
 8008182:	4618      	mov	r0, r3
 8008184:	d101      	bne.n	800818a <memchr+0x12>
 8008186:	2000      	movs	r0, #0
 8008188:	e003      	b.n	8008192 <memchr+0x1a>
 800818a:	7804      	ldrb	r4, [r0, #0]
 800818c:	3301      	adds	r3, #1
 800818e:	428c      	cmp	r4, r1
 8008190:	d1f6      	bne.n	8008180 <memchr+0x8>
 8008192:	bd10      	pop	{r4, pc}

08008194 <__malloc_lock>:
 8008194:	4801      	ldr	r0, [pc, #4]	; (800819c <__malloc_lock+0x8>)
 8008196:	f7ff bf87 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 800819a:	bf00      	nop
 800819c:	20000e70 	.word	0x20000e70

080081a0 <__malloc_unlock>:
 80081a0:	4801      	ldr	r0, [pc, #4]	; (80081a8 <__malloc_unlock+0x8>)
 80081a2:	f7ff bf82 	b.w	80080aa <__retarget_lock_release_recursive>
 80081a6:	bf00      	nop
 80081a8:	20000e70 	.word	0x20000e70

080081ac <_raise_r>:
 80081ac:	291f      	cmp	r1, #31
 80081ae:	b538      	push	{r3, r4, r5, lr}
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	d904      	bls.n	80081c0 <_raise_r+0x14>
 80081b6:	2316      	movs	r3, #22
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081c2:	b112      	cbz	r2, 80081ca <_raise_r+0x1e>
 80081c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081c8:	b94b      	cbnz	r3, 80081de <_raise_r+0x32>
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f830 	bl	8008230 <_getpid_r>
 80081d0:	462a      	mov	r2, r5
 80081d2:	4601      	mov	r1, r0
 80081d4:	4620      	mov	r0, r4
 80081d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081da:	f000 b817 	b.w	800820c <_kill_r>
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d00a      	beq.n	80081f8 <_raise_r+0x4c>
 80081e2:	1c59      	adds	r1, r3, #1
 80081e4:	d103      	bne.n	80081ee <_raise_r+0x42>
 80081e6:	2316      	movs	r3, #22
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	2001      	movs	r0, #1
 80081ec:	e7e7      	b.n	80081be <_raise_r+0x12>
 80081ee:	2400      	movs	r4, #0
 80081f0:	4628      	mov	r0, r5
 80081f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081f6:	4798      	blx	r3
 80081f8:	2000      	movs	r0, #0
 80081fa:	e7e0      	b.n	80081be <_raise_r+0x12>

080081fc <raise>:
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <raise+0xc>)
 80081fe:	4601      	mov	r1, r0
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	f7ff bfd3 	b.w	80081ac <_raise_r>
 8008206:	bf00      	nop
 8008208:	20000460 	.word	0x20000460

0800820c <_kill_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	2300      	movs	r3, #0
 8008210:	4d06      	ldr	r5, [pc, #24]	; (800822c <_kill_r+0x20>)
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	f7fe fe4a 	bl	8006eb2 <_kill>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d102      	bne.n	8008228 <_kill_r+0x1c>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	b103      	cbz	r3, 8008228 <_kill_r+0x1c>
 8008226:	6023      	str	r3, [r4, #0]
 8008228:	bd38      	pop	{r3, r4, r5, pc}
 800822a:	bf00      	nop
 800822c:	20000e74 	.word	0x20000e74

08008230 <_getpid_r>:
 8008230:	f7fe be38 	b.w	8006ea4 <_getpid>

08008234 <__sread>:
 8008234:	b510      	push	{r4, lr}
 8008236:	460c      	mov	r4, r1
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	f000 f894 	bl	8008368 <_read_r>
 8008240:	2800      	cmp	r0, #0
 8008242:	bfab      	itete	ge
 8008244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008246:	89a3      	ldrhlt	r3, [r4, #12]
 8008248:	181b      	addge	r3, r3, r0
 800824a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800824e:	bfac      	ite	ge
 8008250:	6563      	strge	r3, [r4, #84]	; 0x54
 8008252:	81a3      	strhlt	r3, [r4, #12]
 8008254:	bd10      	pop	{r4, pc}

08008256 <__swrite>:
 8008256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825a:	461f      	mov	r7, r3
 800825c:	898b      	ldrh	r3, [r1, #12]
 800825e:	4605      	mov	r5, r0
 8008260:	05db      	lsls	r3, r3, #23
 8008262:	460c      	mov	r4, r1
 8008264:	4616      	mov	r6, r2
 8008266:	d505      	bpl.n	8008274 <__swrite+0x1e>
 8008268:	2302      	movs	r3, #2
 800826a:	2200      	movs	r2, #0
 800826c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008270:	f000 f868 	bl	8008344 <_lseek_r>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	4632      	mov	r2, r6
 8008278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	4628      	mov	r0, r5
 8008280:	463b      	mov	r3, r7
 8008282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800828a:	f000 b817 	b.w	80082bc <_write_r>

0800828e <__sseek>:
 800828e:	b510      	push	{r4, lr}
 8008290:	460c      	mov	r4, r1
 8008292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008296:	f000 f855 	bl	8008344 <_lseek_r>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	bf15      	itete	ne
 80082a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80082a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082aa:	81a3      	strheq	r3, [r4, #12]
 80082ac:	bf18      	it	ne
 80082ae:	81a3      	strhne	r3, [r4, #12]
 80082b0:	bd10      	pop	{r4, pc}

080082b2 <__sclose>:
 80082b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b6:	f000 b813 	b.w	80082e0 <_close_r>
	...

080082bc <_write_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	4611      	mov	r1, r2
 80082c4:	2200      	movs	r2, #0
 80082c6:	4d05      	ldr	r5, [pc, #20]	; (80082dc <_write_r+0x20>)
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7fe fe28 	bl	8006f20 <_write>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_write_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_write_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20000e74 	.word	0x20000e74

080082e0 <_close_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	2300      	movs	r3, #0
 80082e4:	4d05      	ldr	r5, [pc, #20]	; (80082fc <_close_r+0x1c>)
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	f7fe fe34 	bl	8006f58 <_close>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_close_r+0x1a>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_close_r+0x1a>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20000e74 	.word	0x20000e74

08008300 <_fstat_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	2300      	movs	r3, #0
 8008304:	4d06      	ldr	r5, [pc, #24]	; (8008320 <_fstat_r+0x20>)
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	f7fe fe2e 	bl	8006f6e <_fstat>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	d102      	bne.n	800831c <_fstat_r+0x1c>
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	b103      	cbz	r3, 800831c <_fstat_r+0x1c>
 800831a:	6023      	str	r3, [r4, #0]
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	bf00      	nop
 8008320:	20000e74 	.word	0x20000e74

08008324 <_isatty_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	2300      	movs	r3, #0
 8008328:	4d05      	ldr	r5, [pc, #20]	; (8008340 <_isatty_r+0x1c>)
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	602b      	str	r3, [r5, #0]
 8008330:	f7fe fe2c 	bl	8006f8c <_isatty>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_isatty_r+0x1a>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_isatty_r+0x1a>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	20000e74 	.word	0x20000e74

08008344 <_lseek_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	4611      	mov	r1, r2
 800834c:	2200      	movs	r2, #0
 800834e:	4d05      	ldr	r5, [pc, #20]	; (8008364 <_lseek_r+0x20>)
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	f7fe fe24 	bl	8006fa0 <_lseek>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_lseek_r+0x1e>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_lseek_r+0x1e>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000e74 	.word	0x20000e74

08008368 <_read_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	4611      	mov	r1, r2
 8008370:	2200      	movs	r2, #0
 8008372:	4d05      	ldr	r5, [pc, #20]	; (8008388 <_read_r+0x20>)
 8008374:	602a      	str	r2, [r5, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f7fe fdb5 	bl	8006ee6 <_read>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_read_r+0x1e>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_read_r+0x1e>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	20000e74 	.word	0x20000e74

0800838c <_init>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	bf00      	nop
 8008390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008392:	bc08      	pop	{r3}
 8008394:	469e      	mov	lr, r3
 8008396:	4770      	bx	lr

08008398 <_fini>:
 8008398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839a:	bf00      	nop
 800839c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839e:	bc08      	pop	{r3}
 80083a0:	469e      	mov	lr, r3
 80083a2:	4770      	bx	lr
