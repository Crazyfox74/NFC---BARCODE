
NFC_and_Barcode_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007128  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  0002047c  2**0
                  CONTENTS
  4 .ARM          00000000  080074f8  080074f8  0002047c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074f8  080074f8  0002047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000047c  20000000  08007500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000480  0800797c  00020480  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d30  0800797c  00020d30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d45c  00000000  00000000  000204a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281d  00000000  00000000  0002d901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00030120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00030ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001098f  00000000  00000000  00031b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2c1  00000000  00000000  000424df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ca93  00000000  00000000  0004f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009c233  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004580  00000000  00000000  0009c284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000480 	.word	0x20000480
 8000128:	00000000 	.word	0x00000000
 800012c:	0800721c 	.word	0x0800721c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000484 	.word	0x20000484
 8000148:	0800721c 	.word	0x0800721c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SystemInit>:
    *         SystemCoreClock variable.
    * @note   This function should be used only after reset.
    * @param  None
    * @retval None
    */
void SystemInit() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	SetSysClock();
 8000160:	f000 f802 	bl	8000168 <SetSysClock>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800016c:	f000 f802 	bl	8000174 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}

08000174 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	2300      	movs	r3, #0
 8000180:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000182:	4b3a      	ldr	r3, [pc, #232]	; (800026c <SetSysClockTo72+0xf8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a39      	ldr	r2, [pc, #228]	; (800026c <SetSysClockTo72+0xf8>)
 8000188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800018c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800018e:	4b37      	ldr	r3, [pc, #220]	; (800026c <SetSysClockTo72+0xf8>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000196:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <SetSysClockTo72+0x38>
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001aa:	d1f0      	bne.n	800018e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001ac:	4b2f      	ldr	r3, [pc, #188]	; (800026c <SetSysClockTo72+0xf8>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80001b8:	2301      	movs	r3, #1
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	e001      	b.n	80001c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d14b      	bne.n	8000260 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001c8:	4b29      	ldr	r3, [pc, #164]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a28      	ldr	r2, [pc, #160]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001d4:	4b26      	ldr	r3, [pc, #152]	; (8000270 <SetSysClockTo72+0xfc>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <SetSysClockTo72+0xfc>)
 80001da:	f023 0303 	bic.w	r3, r3, #3
 80001de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a22      	ldr	r2, [pc, #136]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001ec:	4b1f      	ldr	r3, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f6:	4a1d      	ldr	r2, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <SetSysClockTo72+0xf8>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <SetSysClockTo72+0xf8>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <SetSysClockTo72+0xf8>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <SetSysClockTo72+0xf8>)
 800020e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000212:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <SetSysClockTo72+0xf8>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <SetSysClockTo72+0xf8>)
 800021a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800021e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <SetSysClockTo72+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <SetSysClockTo72+0xf8>)
 8000226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800022c:	bf00      	nop
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <SetSysClockTo72+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SetSysClockTo72+0xf8>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <SetSysClockTo72+0xf8>)
 8000240:	f023 0303 	bic.w	r3, r3, #3
 8000244:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <SetSysClockTo72+0xf8>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <SetSysClockTo72+0xf8>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000252:	bf00      	nop
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SetSysClockTo72+0xf8>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	f003 030c 	and.w	r3, r3, #12
 800025c:	2b08      	cmp	r3, #8
 800025e:	d1f9      	bne.n	8000254 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000
 8000270:	40022000 	.word	0x40022000

08000274 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da0b      	bge.n	80002a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <NVIC_SetPriority+0x4c>)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 030f 	and.w	r3, r3, #15
 8000294:	3b04      	subs	r3, #4
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800029e:	e009      	b.n	80002b4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <NVIC_SetPriority+0x50>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	0112      	lsls	r2, r2, #4
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002d6:	d301      	bcc.n	80002dc <SysTick_Config+0x14>
 80002d8:	2301      	movs	r3, #1
 80002da:	e011      	b.n	8000300 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <SysTick_Config+0x40>)
 80002e4:	3b01      	subs	r3, #1
 80002e6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80002e8:	210f      	movs	r1, #15
 80002ea:	f04f 30ff 	mov.w	r0, #4294967295
 80002ee:	f7ff ffc1 	bl	8000274 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SysTick_Config+0x40>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SysTick_Config+0x40>)
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e010 	.word	0xe000e010

0800030c <LCD_PN532_CreateRunInfoString>:

uint8_t start_nfc_addr[4]={0x00,0x00,0x20,0x00};	//начальный адрес для меток
uint8_t start_bar_addr[4]={0x00,0x00,0x10,0x00};	//начальный адрес для штрих-кодов


void LCD_PN532_CreateRunInfoString(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	strcpy( s_pn_info, s_pn_fchip);	//копирую первую заготовку в пустую строку
 8000310:	4912      	ldr	r1, [pc, #72]	; (800035c <LCD_PN532_CreateRunInfoString+0x50>)
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000314:	f005 fe41 	bl	8005f9a <strcpy>
	strcat(s_pn_info, s_pn_nchip);	//копирую в заготовку пробельную строку
 8000318:	4912      	ldr	r1, [pc, #72]	; (8000364 <LCD_PN532_CreateRunInfoString+0x58>)
 800031a:	4811      	ldr	r0, [pc, #68]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800031c:	f005 fe2e 	bl	8005f7c <strcat>
	strcat(s_pn_info,s_space );
 8000320:	4911      	ldr	r1, [pc, #68]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000324:	f005 fe2a 	bl	8005f7c <strcat>
	strcat(s_pn_info,s_pn_wfchip );
 8000328:	4910      	ldr	r1, [pc, #64]	; (800036c <LCD_PN532_CreateRunInfoString+0x60>)
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800032c:	f005 fe26 	bl	8005f7c <strcat>
	strcat(s_pn_info, s_pn_fw1nchip);
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <LCD_PN532_CreateRunInfoString+0x64>)
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000334:	f005 fe22 	bl	8005f7c <strcat>
	strcat(s_pn_info,s_pn_fw2nchip );
 8000338:	490e      	ldr	r1, [pc, #56]	; (8000374 <LCD_PN532_CreateRunInfoString+0x68>)
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800033c:	f005 fe1e 	bl	8005f7c <strcat>
	strcat(s_pn_info,s_space );
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000344:	f005 fe1a 	bl	8005f7c <strcat>
	strcat(s_pn_info,s_pn_suppchip);
 8000348:	490b      	ldr	r1, [pc, #44]	; (8000378 <LCD_PN532_CreateRunInfoString+0x6c>)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800034c:	f005 fe16 	bl	8005f7c <strcat>
	strcat(s_pn_info,s_pn_suchip);
 8000350:	490a      	ldr	r1, [pc, #40]	; (800037c <LCD_PN532_CreateRunInfoString+0x70>)
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000354:	f005 fe12 	bl	8005f7c <strcat>

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200001ec 	.word	0x200001ec
 8000360:	200006c8 	.word	0x200006c8
 8000364:	200001dc 	.word	0x200001dc
 8000368:	200001d0 	.word	0x200001d0
 800036c:	200001fc 	.word	0x200001fc
 8000370:	200001e0 	.word	0x200001e0
 8000374:	200001e4 	.word	0x200001e4
 8000378:	2000020c 	.word	0x2000020c
 800037c:	200001e8 	.word	0x200001e8

08000380 <LCD_BAR_CreateRunInfoString>:


//Сборка сборка бегущей строки с версией ПО сканера штрих-кодов модуля для LCD
void LCD_BAR_CreateRunInfoString(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
//				s_bar_info++;
//			}
//		}
//	}

	char *ptr_bar_ver_info=strtok(ScanerVersion,"\r\n");
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LCD_BAR_CreateRunInfoString+0x40>)
 800038a:	f005 fe65 	bl	8006058 <strtok>
 800038e:	6078      	str	r0, [r7, #4]
	strcpy(s_bar_info,ptr_bar_ver_info);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 8000394:	f005 fe01 	bl	8005f9a <strcpy>
	strcat(s_bar_info,s_space);
 8000398:	490b      	ldr	r1, [pc, #44]	; (80003c8 <LCD_BAR_CreateRunInfoString+0x48>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 800039c:	f005 fdee 	bl	8005f7c <strcat>
	ptr_bar_ver_info=strtok(NULL,"\r\n");
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 80003a2:	2000      	movs	r0, #0
 80003a4:	f005 fe58 	bl	8006058 <strtok>
 80003a8:	6078      	str	r0, [r7, #4]
	strcat(s_bar_info,ptr_bar_ver_info);
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 80003ae:	f005 fde5 	bl	8005f7c <strcat>

//	char *s_bar_info=strcat(s_bar_ver_info,s_bar_site_info);
//	strcpy(s_bar_info,s_bar_ver_info);


}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	08007234 	.word	0x08007234
 80003c0:	20000c40 	.word	0x20000c40
 80003c4:	20000748 	.word	0x20000748
 80003c8:	200001d0 	.word	0x200001d0

080003cc <PN532_Write_Data>:


uint8_t PN532_Write_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b092      	sub	sp, #72	; 0x48
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	72fb      	strb	r3, [r7, #11]
 80003da:	4613      	mov	r3, r2
 80003dc:	72bb      	strb	r3, [r7, #10]
//	uint8_t success=0;	// Flag to check if there was an error with the PN532
	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 80003de:	4a51      	ldr	r2, [pc, #324]	; (8000524 <PN532_Write_Data+0x158>)
 80003e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e8:	6018      	str	r0, [r3, #0]
 80003ea:	3304      	adds	r3, #4
 80003ec:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

	bool authenticated = FALSE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t blockBuffer[16];                  // Buffer to store block contents
	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 80003f4:	4a4c      	ldr	r2, [pc, #304]	; (8000528 <PN532_Write_Data+0x15c>)
 80003f6:	f107 0320 	add.w	r3, r7, #32
 80003fa:	6812      	ldr	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	8019      	strh	r1, [r3, #0]
 8000400:	3302      	adds	r3, #2
 8000402:	0c12      	lsrs	r2, r2, #16
 8000404:	701a      	strb	r2, [r3, #0]
	//uint8_t idx = 0;
	uint8_t numOfSector = 16;                 // Assume Mifare Classic 1K for now (16 4-block sectors)
 8000406:	2310      	movs	r3, #16
 8000408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t i=0;
 800040c:	2300      	movs	r3, #0
 800040e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    uint8_t RdWrDataBlock[16];


	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8000412:	7af9      	ldrb	r1, [r7, #11]
 8000414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2301      	movs	r3, #1
 800041c:	2200      	movs	r2, #0
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f003 fbb0 	bl	8003b84 <PN532_mifareclassic_AuthenticateBlock>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d105      	bne.n	8000436 <PN532_Write_Data+0x6a>
	        {
	          return res_excep=1;	//выход из-за ошибки аутентификации блока
 800042a:	2301      	movs	r3, #1
 800042c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000430:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000434:	e072      	b.n	800051c <PN532_Write_Data+0x150>
	        }

	        res_excep=PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f003 fc17 	bl	8003c70 <PN532_mifareclassic_ReadDataBlock>
 8000442:	4603      	mov	r3, r0
 8000444:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	        if (!(PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock)))
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	f003 fc0e 	bl	8003c70 <PN532_mifareclassic_ReadDataBlock>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d105      	bne.n	8000466 <PN532_Write_Data+0x9a>
	        {
	          return res_excep=2;	//выход из-за ошибки чтения блока
 800045a:	2302      	movs	r3, #2
 800045c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000460:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000464:	e05a      	b.n	800051c <PN532_Write_Data+0x150>
	        }
	        else{

	    		  for(i=0;i<4;i++){
 8000466:	2300      	movs	r3, #0
 8000468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800046c:	e00f      	b.n	800048e <PN532_Write_Data+0xc2>
	    			  RdWrDataBlock[i]=data[i];
 800046e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	441a      	add	r2, r3
 8000476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	3340      	adds	r3, #64	; 0x40
 800047e:	443b      	add	r3, r7
 8000480:	f803 2c30 	strb.w	r2, [r3, #-48]
	    		  for(i=0;i<4;i++){
 8000484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000488:	3301      	adds	r3, #1
 800048a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800048e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000492:	2b03      	cmp	r3, #3
 8000494:	d9eb      	bls.n	800046e <PN532_Write_Data+0xa2>
	    		}



	    		  if(!(PN532_mifareclassic_WriteDataBlock(1,RdWrDataBlock))){
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	2001      	movs	r0, #1
 800049e:	f003 fc23 	bl	8003ce8 <PN532_mifareclassic_WriteDataBlock>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d105      	bne.n	80004b4 <PN532_Write_Data+0xe8>
	    			  return res_excep=3;	//выход из-за ошибки запииси блока
 80004a8:	2303      	movs	r3, #3
 80004aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80004ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80004b2:	e033      	b.n	800051c <PN532_Write_Data+0x150>
	    		  }

	        // Step 3: Reset both keys to 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
	        memcpy(blockBuffer, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80004bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c0:	6018      	str	r0, [r3, #0]
 80004c2:	3304      	adds	r3, #4
 80004c4:	8019      	strh	r1, [r3, #0]
	        memcpy(blockBuffer + 6, blankAccessBits, sizeof(blankAccessBits));
 80004c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ca:	3306      	adds	r3, #6
 80004cc:	461a      	mov	r2, r3
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	8819      	ldrh	r1, [r3, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	8011      	strh	r1, [r2, #0]
 80004d8:	7093      	strb	r3, [r2, #2]
	        blockBuffer[9] = 0x69;
 80004da:	2369      	movs	r3, #105	; 0x69
 80004dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	        memcpy(blockBuffer + 10, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e4:	330a      	adds	r3, #10
 80004e6:	461a      	mov	r2, r3
 80004e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	6010      	str	r0, [r2, #0]
 80004f0:	889b      	ldrh	r3, [r3, #4]
 80004f2:	8093      	strh	r3, [r2, #4]

	         //Step 4: Write the trailer block
	        if (!(PN532_mifareclassic_WriteDataBlock(3, blockBuffer)))
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4619      	mov	r1, r3
 80004fa:	2003      	movs	r0, #3
 80004fc:	f003 fbf4 	bl	8003ce8 <PN532_mifareclassic_WriteDataBlock>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d105      	bne.n	8000512 <PN532_Write_Data+0x146>
	        {
	          return res_excep=4;	//выход из-за ошибки записи ключа блока
 8000506:	2304      	movs	r3, #4
 8000508:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800050c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000510:	e004      	b.n	800051c <PN532_Write_Data+0x150>
	        }else return res_excep=0;
 8000512:	2300      	movs	r3, #0
 8000514:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000518:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c

	        }

}
 800051c:	4618      	mov	r0, r3
 800051e:	3740      	adds	r7, #64	; 0x40
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	08007238 	.word	0x08007238
 8000528:	08007240 	.word	0x08007240

0800052c <main>:





int main(void){
 800052c:	b580      	push	{r7, lr}
 800052e:	b090      	sub	sp, #64	; 0x40
 8000530:	af00      	add	r7, sp, #0

	g_sSum[SUM_STR_LEN + 1] = '\0';
 8000532:	4ba5      	ldr	r3, [pc, #660]	; (80007c8 <main+0x29c>)
 8000534:	2200      	movs	r2, #0
 8000536:	721a      	strb	r2, [r3, #8]


	rtc_cal rtc_time;
	RTC_INIT();
 8000538:	f003 fc60 	bl	8003dfc <RTC_INIT>

	RCC_PLLCmd(DISABLE);
 800053c:	2000      	movs	r0, #0
 800053e:	f004 fd47 	bl	8004fd0 <RCC_PLLCmd>
		RCC_HSEConfig(RCC_HSE_ON);
 8000542:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000546:	f004 fcf7 	bl	8004f38 <RCC_HSEConfig>
		RCC_ClockSecuritySystemCmd(ENABLE);
 800054a:	2001      	movs	r0, #1
 800054c:	f004 fe5e 	bl	800520c <RCC_ClockSecuritySystemCmd>
	    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000550:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000554:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000558:	f004 fd1c 	bl	8004f94 <RCC_PLLConfig>
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800055c:	2002      	movs	r0, #2
 800055e:	f004 fd47 	bl	8004ff0 <RCC_SYSCLKConfig>

		uint32_t tmpreg = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
		tmpreg=RCC->CFGR;
 8000566:	4b99      	ldr	r3, [pc, #612]	; (80007cc <main+0x2a0>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC->CFGR=tmpreg & 0xFFFFF0FF;
 800056c:	4a97      	ldr	r2, [pc, #604]	; (80007cc <main+0x2a0>)
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000574:	6053      	str	r3, [r2, #4]
		//RCC->CFGR=tmpreg|0x00000400;//HCLK / 2 - значение по умолчанию? (36МГц)
		RCC->CFGR=tmpreg|0x00000500;//HCLK / 4
 8000576:	4a95      	ldr	r2, [pc, #596]	; (80007cc <main+0x2a0>)
 8000578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800057e:	6053      	str	r3, [r2, #4]

		RCC->CFGR|=RCC_CFGR_USBPRE;	//предделитель для usb
 8000580:	4b92      	ldr	r3, [pc, #584]	; (80007cc <main+0x2a0>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a91      	ldr	r2, [pc, #580]	; (80007cc <main+0x2a0>)
 8000586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058a:	6053      	str	r3, [r2, #4]

		//RCC->CFGR=tmpreg | 0x00000600;//HCLK / 8

	    RCC_PLLCmd(ENABLE);
 800058c:	2001      	movs	r0, #1
 800058e:	f004 fd1f 	bl	8004fd0 <RCC_PLLCmd>

		/* SysTick end of count event each 1 ms */
		RCC_GetClocksFreq ( &RCC_Clocks );
 8000592:	488f      	ldr	r0, [pc, #572]	; (80007d0 <main+0x2a4>)
 8000594:	f004 fd48 	bl	8005028 <RCC_GetClocksFreq>
		SysTick_Config ( RCC_Clocks.HCLK_Frequency / 1000 );
 8000598:	4b8d      	ldr	r3, [pc, #564]	; (80007d0 <main+0x2a4>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a8d      	ldr	r2, [pc, #564]	; (80007d4 <main+0x2a8>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe8f 	bl	80002c8 <SysTick_Config>

		btnpress=0;
 80005aa:	4b8b      	ldr	r3, [pc, #556]	; (80007d8 <main+0x2ac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

		RTC_SET_COUNTER(timer);
 80005b0:	4b8a      	ldr	r3, [pc, #552]	; (80007dc <main+0x2b0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fcb3 	bl	8003f20 <RTC_SET_COUNTER>


		 LCD_Init();
 80005ba:	f002 fe89 	bl	80032d0 <LCD_Init>
		BTN_Init();
 80005be:	f001 fc9b 	bl	8001ef8 <BTN_Init>
		u8_btnstate=GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN );
 80005c2:	2101      	movs	r1, #1
 80005c4:	4886      	ldr	r0, [pc, #536]	; (80007e0 <main+0x2b4>)
 80005c6:	f004 fb0d 	bl	8004be4 <GPIO_ReadInputDataBit>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <main+0x2b8>)
 80005d0:	701a      	strb	r2, [r3, #0]
		previousState=u8_btnstate;
 80005d2:	4b84      	ldr	r3, [pc, #528]	; (80007e4 <main+0x2b8>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b84      	ldr	r3, [pc, #528]	; (80007e8 <main+0x2bc>)
 80005d8:	701a      	strb	r2, [r3, #0]
		 LED_Init();
 80005da:	f001 fc6d 	bl	8001eb8 <LED_Init>

		 spi_gpio_init();
 80005de:	f002 f919 	bl	8002814 <spi_gpio_init>

		   Usart2Init();
 80005e2:	f005 f9bf 	bl	8005964 <Usart2Init>
			SCAN_UsartInit();
 80005e6:	f005 fa3d 	bl	8005a64 <SCAN_UsartInit>
			PN532_SPIInit();
 80005ea:	f003 ffe5 	bl	80045b8 <PN532_SPIInit>
	//		SPI_FLASH_INIT();
	//		jedec_test = spiFlash_readJEDECDesc();



			nfc_cntcomand=0;
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <main+0x2c0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]


			statusDevice=ST_DEV_ALL_ERR;
 80005f4:	4b7e      	ldr	r3, [pc, #504]	; (80007f0 <main+0x2c4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]

				uint32_t buttonTick = GetTickCount();
 80005fa:	f001 fe59 	bl	80022b0 <GetTickCount>
 80005fe:	62b8      	str	r0, [r7, #40]	; 0x28
				uint32_t ledTick1 = GetTickCount();
 8000600:	f001 fe56 	bl	80022b0 <GetTickCount>
 8000604:	6278      	str	r0, [r7, #36]	; 0x24
				uint32_t ledTick2 = ledTick1;
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	623b      	str	r3, [r7, #32]

				uint32_t versiondata;
				uint32_t st;


				Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
 800060a:	487a      	ldr	r0, [pc, #488]	; (80007f4 <main+0x2c8>)
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	4619      	mov	r1, r3
 8000614:	4877      	ldr	r0, [pc, #476]	; (80007f4 <main+0x2c8>)
 8000616:	f005 f9fd 	bl	8005a14 <Usart2_SendData>
				Usart2_SendData(s_pc_scanner,strlen(s_pc_scanner));
 800061a:	4877      	ldr	r0, [pc, #476]	; (80007f8 <main+0x2cc>)
 800061c:	f7ff fd96 	bl	800014c <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	4619      	mov	r1, r3
 8000624:	4874      	ldr	r0, [pc, #464]	; (80007f8 <main+0x2cc>)
 8000626:	f005 f9f5 	bl	8005a14 <Usart2_SendData>
				Usart2_SendData(s_pc_test,strlen(s_pc_test));
 800062a:	4874      	ldr	r0, [pc, #464]	; (80007fc <main+0x2d0>)
 800062c:	f7ff fd8e 	bl	800014c <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	4871      	ldr	r0, [pc, #452]	; (80007fc <main+0x2d0>)
 8000636:	f005 f9ed 	bl	8005a14 <Usart2_SendData>


			LCD_RunStringDevInfo ( s_lcd_hello,s_lcd_scanner,RUN_STR_DELAY_TST);
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4970      	ldr	r1, [pc, #448]	; (8000800 <main+0x2d4>)
 800063e:	4871      	ldr	r0, [pc, #452]	; (8000804 <main+0x2d8>)
 8000640:	f002 fc08 	bl	8002e54 <LCD_RunStringDevInfo>


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000644:	bf00      	nop
 8000646:	4b70      	ldr	r3, [pc, #448]	; (8000808 <main+0x2dc>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d006      	beq.n	800065e <main+0x132>
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	486e      	ldr	r0, [pc, #440]	; (800080c <main+0x2e0>)
 8000654:	f004 fed4 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f3      	bne.n	8000646 <main+0x11a>
				SpiActive = 1;
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <main+0x2dc>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
			b_wakeup=PN532_WakeUp();
 8000664:	f002 fe94 	bl	8003390 <PN532_WakeUp>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b68      	ldr	r3, [pc, #416]	; (8000810 <main+0x2e4>)
 800066e:	701a      	strb	r2, [r3, #0]
			b_samconfig=PN532_SAMConfig();
 8000670:	f002 ff32 	bl	80034d8 <PN532_SAMConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b66      	ldr	r3, [pc, #408]	; (8000814 <main+0x2e8>)
 800067a:	701a      	strb	r2, [r3, #0]

			versiondata = PN532_getFirmwareVersion();//Получениe версии ПО PN532
 800067c:	f002 ff58 	bl	8003530 <PN532_getFirmwareVersion>
 8000680:	61f8      	str	r0, [r7, #28]

				if(versiondata){
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d013      	beq.n	80006b0 <main+0x184>
					statusDevice=statusDevice|ST_DEV_NFC_NOERR;//установка флага успешного теста NFC
 8000688:	4b59      	ldr	r3, [pc, #356]	; (80007f0 <main+0x2c4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b57      	ldr	r3, [pc, #348]	; (80007f0 <main+0x2c4>)
 8000694:	701a      	strb	r2, [r3, #0]
					PN532_FirmWareVersion2String (versiondata);
 8000696:	69f8      	ldr	r0, [r7, #28]
 8000698:	f001 fe14 	bl	80022c4 <PN532_FirmWareVersion2String>
					b_rertyes=PN532_setPassiveActivationRetries(0xFF);
 800069c:	20ff      	movs	r0, #255	; 0xff
 800069e:	f002 fe8d 	bl	80033bc <PN532_setPassiveActivationRetries>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <main+0x2ec>)
 80006a8:	701a      	strb	r2, [r3, #0]
					b_discannfc=0;
 80006aa:	4b5c      	ldr	r3, [pc, #368]	; (800081c <main+0x2f0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				}
				 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};
 80006b0:	bf00      	nop
 80006b2:	2102      	movs	r1, #2
 80006b4:	4855      	ldr	r0, [pc, #340]	; (800080c <main+0x2e0>)
 80006b6:	f004 fea3 	bl	8005400 <SPI_I2S_GetFlagStatus>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f8      	beq.n	80006b2 <main+0x186>
				SpiActive = 0;
 80006c0:	4b51      	ldr	r3, [pc, #324]	; (8000808 <main+0x2dc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]


				while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 80006c6:	bf00      	nop
 80006c8:	4b4f      	ldr	r3, [pc, #316]	; (8000808 <main+0x2dc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <main+0x1b4>
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	484d      	ldr	r0, [pc, #308]	; (800080c <main+0x2e0>)
 80006d6:	f004 fe93 	bl	8005400 <SPI_I2S_GetFlagStatus>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f3      	bne.n	80006c8 <main+0x19c>
				SPI_FLASH_CONFIG();
 80006e0:	f004 f878 	bl	80047d4 <SPI_FLASH_CONFIG>
bcd_addr_start = 0;
 80006e4:	4b4e      	ldr	r3, [pc, #312]	; (8000820 <main+0x2f4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
bcd_cnt_addr_start = 32;
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <main+0x2f8>)
 80006ec:	2220      	movs	r2, #32
 80006ee:	601a      	str	r2, [r3, #0]
bcd_max_cnt_addr = 64;
 80006f0:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <main+0x2fc>)
 80006f2:	2240      	movs	r2, #64	; 0x40
 80006f4:	601a      	str	r2, [r3, #0]

nfc_addr_start = 96;
 80006f6:	4b4d      	ldr	r3, [pc, #308]	; (800082c <main+0x300>)
 80006f8:	2260      	movs	r2, #96	; 0x60
 80006fa:	601a      	str	r2, [r3, #0]
nfc_cnt_addr_start = 128;
 80006fc:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <main+0x304>)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	601a      	str	r2, [r3, #0]
nfc_max_cnt_addr = 160;
 8000702:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <main+0x308>)
 8000704:	22a0      	movs	r2, #160	; 0xa0
 8000706:	601a      	str	r2, [r3, #0]

cnt_addr_2Flash = 4;
 8000708:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <main+0x30c>)
 800070a:	2204      	movs	r2, #4
 800070c:	701a      	strb	r2, [r3, #0]
cnt_4cnt = 1;
 800070e:	4b4b      	ldr	r3, [pc, #300]	; (800083c <main+0x310>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]

val_max_cnt = 255;
 8000714:	4b4a      	ldr	r3, [pc, #296]	; (8000840 <main+0x314>)
 8000716:	22ff      	movs	r2, #255	; 0xff
 8000718:	701a      	strb	r2, [r3, #0]
val_start_cnt = 0;
 800071a:	4b4a      	ldr	r3, [pc, #296]	; (8000844 <main+0x318>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]

erase_addr = 0;
 8000720:	4b49      	ldr	r3, [pc, #292]	; (8000848 <main+0x31c>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
cnt_flash_t = 255;
 8000726:	4b49      	ldr	r3, [pc, #292]	; (800084c <main+0x320>)
 8000728:	22ff      	movs	r2, #255	; 0xff
 800072a:	701a      	strb	r2, [r3, #0]
			Set_Cnt_to_Flash(nfc_cnt_addr_start, cnt_4cnt, &val_start_cnt);	//количество штрих-кодов
			Set_Cnt_to_Flash(nfc_max_cnt_addr, cnt_4cnt, &val_max_cnt);	//макс количесто штрих-кодов

*/

			memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	2100      	movs	r1, #0
 8000730:	4847      	ldr	r0, [pc, #284]	; (8000850 <main+0x324>)
 8000732:	f005 fc1b 	bl	8005f6c <memset>
			spiFlash_Read(bcd_addr_start, cnt_addr_2Flash, rd_test_buff);
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <main+0x2f4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a3f      	ldr	r2, [pc, #252]	; (8000838 <main+0x30c>)
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	b291      	uxth	r1, r2
 8000740:	4a43      	ldr	r2, [pc, #268]	; (8000850 <main+0x324>)
 8000742:	4618      	mov	r0, r3
 8000744:	f004 f89e 	bl	8004884 <spiFlash_Read>
			bar_flash_addr = flash_conv2_addr(rd_test_buff);
 8000748:	4841      	ldr	r0, [pc, #260]	; (8000850 <main+0x324>)
 800074a:	f002 f9c3 	bl	8002ad4 <flash_conv2_addr>
 800074e:	4603      	mov	r3, r0
 8000750:	4a40      	ldr	r2, [pc, #256]	; (8000854 <main+0x328>)
 8000752:	6013      	str	r3, [r2, #0]

			memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	2100      	movs	r1, #0
 8000758:	483d      	ldr	r0, [pc, #244]	; (8000850 <main+0x324>)
 800075a:	f005 fc07 	bl	8005f6c <memset>
			spiFlash_Read(nfc_addr_start, cnt_addr_2Flash, rd_test_buff);
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <main+0x300>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a35      	ldr	r2, [pc, #212]	; (8000838 <main+0x30c>)
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	b291      	uxth	r1, r2
 8000768:	4a39      	ldr	r2, [pc, #228]	; (8000850 <main+0x324>)
 800076a:	4618      	mov	r0, r3
 800076c:	f004 f88a 	bl	8004884 <spiFlash_Read>
			nfc_flash_addr = flash_conv2_addr(rd_test_buff);
 8000770:	4837      	ldr	r0, [pc, #220]	; (8000850 <main+0x324>)
 8000772:	f002 f9af 	bl	8002ad4 <flash_conv2_addr>
 8000776:	4603      	mov	r3, r0
 8000778:	4a37      	ldr	r2, [pc, #220]	; (8000858 <main+0x32c>)
 800077a:	6013      	str	r3, [r2, #0]

				memset(rd_test_buff,0x00,sizeof(rd_test_buff));
				spiFlash_Read(erase_addr, cnt_flash_t, rd_test_buff);
*/

				SpiActive = 0;
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <main+0x2dc>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]





			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000782:	bf00      	nop
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <main+0x2dc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d006      	beq.n	800079c <main+0x270>
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	481e      	ldr	r0, [pc, #120]	; (800080c <main+0x2e0>)
 8000792:	f004 fe35 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f3      	bne.n	8000784 <main+0x258>
				PN532_SPIInit();
 800079c:	f003 ff0c 	bl	80045b8 <PN532_SPIInit>
							b_rertyes=PN532_setPassiveActivationRetries(0xFF);
							b_discannfc=0;
						}
*/

				 b_getversion=ENABLE;
 80007a0:	4b2e      	ldr	r3, [pc, #184]	; (800085c <main+0x330>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
				 cntbyteversion=0;
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <main+0x334>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]

				 SCAN_SendCMD(cmd_Version,STR_CMD_LENGTH);//Запрос версии  ПО сканера штрих-кодов
 80007ac:	210c      	movs	r1, #12
 80007ae:	482d      	ldr	r0, [pc, #180]	; (8000864 <main+0x338>)
 80007b0:	f005 f9b0 	bl	8005b14 <SCAN_SendCMD>

				uint32_t tick1 = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
				uint32_t tick2 = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c

					tick1=GetTickCount();
 80007bc:	f001 fd78 	bl	80022b0 <GetTickCount>
 80007c0:	61b8      	str	r0, [r7, #24]
					tick2=tick1;
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
				while(b_getversion || (tick2 - tick1 > 1000)){
 80007c6:	e052      	b.n	800086e <main+0x342>
 80007c8:	2000049c 	.word	0x2000049c
 80007cc:	40021000 	.word	0x40021000
 80007d0:	200004ac 	.word	0x200004ac
 80007d4:	10624dd3 	.word	0x10624dd3
 80007d8:	2000057f 	.word	0x2000057f
 80007dc:	20000338 	.word	0x20000338
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	200006b9 	.word	0x200006b9
 80007e8:	200006b8 	.word	0x200006b8
 80007ec:	2000068d 	.word	0x2000068d
 80007f0:	200007c8 	.word	0x200007c8
 80007f4:	200000e8 	.word	0x200000e8
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	20000134 	.word	0x20000134
 8000800:	20000040 	.word	0x20000040
 8000804:	20000028 	.word	0x20000028
 8000808:	20000c22 	.word	0x20000c22
 800080c:	40003800 	.word	0x40003800
 8000810:	2000068e 	.word	0x2000068e
 8000814:	2000068f 	.word	0x2000068f
 8000818:	20000690 	.word	0x20000690
 800081c:	20000691 	.word	0x20000691
 8000820:	20000878 	.word	0x20000878
 8000824:	20000880 	.word	0x20000880
 8000828:	2000087c 	.word	0x2000087c
 800082c:	20000884 	.word	0x20000884
 8000830:	2000088c 	.word	0x2000088c
 8000834:	20000888 	.word	0x20000888
 8000838:	20000890 	.word	0x20000890
 800083c:	20000891 	.word	0x20000891
 8000840:	20000892 	.word	0x20000892
 8000844:	20000893 	.word	0x20000893
 8000848:	20000864 	.word	0x20000864
 800084c:	20000868 	.word	0x20000868
 8000850:	200008f8 	.word	0x200008f8
 8000854:	20000894 	.word	0x20000894
 8000858:	20000898 	.word	0x20000898
 800085c:	20000580 	.word	0x20000580
 8000860:	20000c3e 	.word	0x20000c3e
 8000864:	20000000 	.word	0x20000000
						// b_getversion=ENABLE;
						tick2=GetTickCount();
 8000868:	f001 fd22 	bl	80022b0 <GetTickCount>
 800086c:	63f8      	str	r0, [r7, #60]	; 0x3c
				while(b_getversion || (tick2 - tick1 > 1000)){
 800086e:	4bb3      	ldr	r3, [pc, #716]	; (8000b3c <main+0x610>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f8      	bne.n	8000868 <main+0x33c>
 8000876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000880:	d8f2      	bhi.n	8000868 <main+0x33c>
					}

					if(!b_getversion){//Получена версия сканера штрих-кодов
 8000882:	4bae      	ldr	r3, [pc, #696]	; (8000b3c <main+0x610>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d106      	bne.n	8000898 <main+0x36c>
						statusDevice=statusDevice|ST_DEV_BAR_NOERR;//установка флага успешного теста сканера штрих-кодов
 800088a:	4bad      	ldr	r3, [pc, #692]	; (8000b40 <main+0x614>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4baa      	ldr	r3, [pc, #680]	; (8000b40 <main+0x614>)
 8000896:	701a      	strb	r2, [r3, #0]
					}



switch(statusDevice){
 8000898:	4ba9      	ldr	r3, [pc, #676]	; (8000b40 <main+0x614>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b11      	cmp	r3, #17
 800089e:	f200 8129 	bhi.w	8000af4 <main+0x5c8>
 80008a2:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <main+0x37c>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008f1 	.word	0x080008f1
 80008ac:	08000935 	.word	0x08000935
 80008b0:	08000af5 	.word	0x08000af5
 80008b4:	08000af5 	.word	0x08000af5
 80008b8:	08000af5 	.word	0x08000af5
 80008bc:	08000af5 	.word	0x08000af5
 80008c0:	08000af5 	.word	0x08000af5
 80008c4:	08000af5 	.word	0x08000af5
 80008c8:	08000af5 	.word	0x08000af5
 80008cc:	08000af5 	.word	0x08000af5
 80008d0:	08000af5 	.word	0x08000af5
 80008d4:	08000af5 	.word	0x08000af5
 80008d8:	08000af5 	.word	0x08000af5
 80008dc:	08000af5 	.word	0x08000af5
 80008e0:	08000af5 	.word	0x08000af5
 80008e4:	08000af5 	.word	0x08000af5
 80008e8:	080009cf 	.word	0x080009cf
 80008ec:	08000a27 	.word	0x08000a27
	case ST_DEV_ALL_ERR://Оба устройства не ответили

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 80008f0:	4894      	ldr	r0, [pc, #592]	; (8000b44 <main+0x618>)
 80008f2:	f7ff fc2b 	bl	800014c <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4893      	ldr	r0, [pc, #588]	; (8000b48 <main+0x61c>)
 80008fc:	f005 f88a 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000900:	4892      	ldr	r0, [pc, #584]	; (8000b4c <main+0x620>)
 8000902:	f7ff fc23 	bl	800014c <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	4619      	mov	r1, r3
 800090a:	4890      	ldr	r0, [pc, #576]	; (8000b4c <main+0x620>)
 800090c:	f005 f882 	bl	8005a14 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 8000910:	211c      	movs	r1, #28
 8000912:	488f      	ldr	r0, [pc, #572]	; (8000b50 <main+0x624>)
 8000914:	f005 f87e 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000918:	488c      	ldr	r0, [pc, #560]	; (8000b4c <main+0x620>)
 800091a:	f7ff fc17 	bl	800014c <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	4619      	mov	r1, r3
 8000922:	488a      	ldr	r0, [pc, #552]	; (8000b4c <main+0x620>)
 8000924:	f005 f876 	bl	8005a14 <Usart2_SendData>

		LCD_RunStringDevInfo ( s_lcd_bar_err,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000928:	22c8      	movs	r2, #200	; 0xc8
 800092a:	4989      	ldr	r1, [pc, #548]	; (8000b50 <main+0x624>)
 800092c:	4886      	ldr	r0, [pc, #536]	; (8000b48 <main+0x61c>)
 800092e:	f002 fa91 	bl	8002e54 <LCD_RunStringDevInfo>

	break;
 8000932:	e0df      	b.n	8000af4 <main+0x5c8>

	case ST_DEV_NFC_NOERR://Ответил только NFC

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000934:	4883      	ldr	r0, [pc, #524]	; (8000b44 <main+0x618>)
 8000936:	f7ff fc09 	bl	800014c <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	4619      	mov	r1, r3
 800093e:	4882      	ldr	r0, [pc, #520]	; (8000b48 <main+0x61c>)
 8000940:	f005 f868 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000944:	4881      	ldr	r0, [pc, #516]	; (8000b4c <main+0x620>)
 8000946:	f7ff fc01 	bl	800014c <strlen>
 800094a:	4603      	mov	r3, r0
 800094c:	4619      	mov	r1, r3
 800094e:	487f      	ldr	r0, [pc, #508]	; (8000b4c <main+0x620>)
 8000950:	f005 f860 	bl	8005a14 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000954:	487f      	ldr	r0, [pc, #508]	; (8000b54 <main+0x628>)
 8000956:	f7ff fbf9 	bl	800014c <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	4619      	mov	r1, r3
 800095e:	487d      	ldr	r0, [pc, #500]	; (8000b54 <main+0x628>)
 8000960:	f005 f858 	bl	8005a14 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 8000964:	2102      	movs	r1, #2
 8000966:	487c      	ldr	r0, [pc, #496]	; (8000b58 <main+0x62c>)
 8000968:	f005 f854 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 800096c:	2102      	movs	r1, #2
 800096e:	487b      	ldr	r0, [pc, #492]	; (8000b5c <main+0x630>)
 8000970:	f005 f850 	bl	8005a14 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 8000974:	487a      	ldr	r0, [pc, #488]	; (8000b60 <main+0x634>)
 8000976:	f7ff fbe9 	bl	800014c <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	4619      	mov	r1, r3
 800097e:	4878      	ldr	r0, [pc, #480]	; (8000b60 <main+0x634>)
 8000980:	f005 f848 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 8000984:	2103      	movs	r1, #3
 8000986:	4877      	ldr	r0, [pc, #476]	; (8000b64 <main+0x638>)
 8000988:	f005 f844 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 800098c:	2300      	movs	r3, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4875      	ldr	r0, [pc, #468]	; (8000b68 <main+0x63c>)
 8000992:	f005 f83f 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 8000996:	2103      	movs	r1, #3
 8000998:	4874      	ldr	r0, [pc, #464]	; (8000b6c <main+0x640>)
 800099a:	f005 f83b 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 800099e:	2102      	movs	r1, #2
 80009a0:	486e      	ldr	r0, [pc, #440]	; (8000b5c <main+0x630>)
 80009a2:	f005 f837 	bl	8005a14 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 80009a6:	210a      	movs	r1, #10
 80009a8:	4871      	ldr	r0, [pc, #452]	; (8000b70 <main+0x644>)
 80009aa:	f005 f833 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 80009ae:	2102      	movs	r1, #2
 80009b0:	4870      	ldr	r0, [pc, #448]	; (8000b74 <main+0x648>)
 80009b2:	f005 f82f 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009b6:	2102      	movs	r1, #2
 80009b8:	4868      	ldr	r0, [pc, #416]	; (8000b5c <main+0x630>)
 80009ba:	f005 f82b 	bl	8005a14 <Usart2_SendData>


		LCD_PN532_CreateRunInfoString();
 80009be:	f7ff fca5 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_lcd_bar_err,s_pn_info,RUN_STR_DELAY_TST);
 80009c2:	22c8      	movs	r2, #200	; 0xc8
 80009c4:	496c      	ldr	r1, [pc, #432]	; (8000b78 <main+0x64c>)
 80009c6:	4860      	ldr	r0, [pc, #384]	; (8000b48 <main+0x61c>)
 80009c8:	f002 fa44 	bl	8002e54 <LCD_RunStringDevInfo>

	break;
 80009cc:	e092      	b.n	8000af4 <main+0x5c8>

	case ST_DEV_BAR_NOERR://Ответил только сканер штрих-кодов

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 80009ce:	485d      	ldr	r0, [pc, #372]	; (8000b44 <main+0x618>)
 80009d0:	f7ff fbbc 	bl	800014c <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4619      	mov	r1, r3
 80009d8:	485a      	ldr	r0, [pc, #360]	; (8000b44 <main+0x618>)
 80009da:	f005 f81b 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 80009de:	4867      	ldr	r0, [pc, #412]	; (8000b7c <main+0x650>)
 80009e0:	f7ff fbb4 	bl	800014c <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4864      	ldr	r0, [pc, #400]	; (8000b7c <main+0x650>)
 80009ea:	f005 f813 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 80009ee:	4857      	ldr	r0, [pc, #348]	; (8000b4c <main+0x620>)
 80009f0:	f7ff fbac 	bl	800014c <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4619      	mov	r1, r3
 80009f8:	4854      	ldr	r0, [pc, #336]	; (8000b4c <main+0x620>)
 80009fa:	f005 f80b 	bl	8005a14 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 80009fe:	211c      	movs	r1, #28
 8000a00:	4853      	ldr	r0, [pc, #332]	; (8000b50 <main+0x624>)
 8000a02:	f005 f807 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a06:	4851      	ldr	r0, [pc, #324]	; (8000b4c <main+0x620>)
 8000a08:	f7ff fba0 	bl	800014c <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	484e      	ldr	r0, [pc, #312]	; (8000b4c <main+0x620>)
 8000a12:	f004 ffff 	bl	8005a14 <Usart2_SendData>

		LCD_BAR_CreateRunInfoString();
 8000a16:	f7ff fcb3 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000a1a:	22c8      	movs	r2, #200	; 0xc8
 8000a1c:	494c      	ldr	r1, [pc, #304]	; (8000b50 <main+0x624>)
 8000a1e:	4858      	ldr	r0, [pc, #352]	; (8000b80 <main+0x654>)
 8000a20:	f002 fa18 	bl	8002e54 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

	break;
 8000a24:	e066      	b.n	8000af4 <main+0x5c8>

	case ST_DEV_ALL_NOERR://Оба устройства ответили

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000a26:	4847      	ldr	r0, [pc, #284]	; (8000b44 <main+0x618>)
 8000a28:	f7ff fb90 	bl	800014c <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4844      	ldr	r0, [pc, #272]	; (8000b44 <main+0x618>)
 8000a32:	f004 ffef 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000a36:	4851      	ldr	r0, [pc, #324]	; (8000b7c <main+0x650>)
 8000a38:	f7ff fb88 	bl	800014c <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	484e      	ldr	r0, [pc, #312]	; (8000b7c <main+0x650>)
 8000a42:	f004 ffe7 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a46:	4841      	ldr	r0, [pc, #260]	; (8000b4c <main+0x620>)
 8000a48:	f7ff fb80 	bl	800014c <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	483e      	ldr	r0, [pc, #248]	; (8000b4c <main+0x620>)
 8000a52:	f004 ffdf 	bl	8005a14 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000a56:	483f      	ldr	r0, [pc, #252]	; (8000b54 <main+0x628>)
 8000a58:	f7ff fb78 	bl	800014c <strlen>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483c      	ldr	r0, [pc, #240]	; (8000b54 <main+0x628>)
 8000a62:	f004 ffd7 	bl	8005a14 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 8000a66:	2102      	movs	r1, #2
 8000a68:	483b      	ldr	r0, [pc, #236]	; (8000b58 <main+0x62c>)
 8000a6a:	f004 ffd3 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000a6e:	2102      	movs	r1, #2
 8000a70:	483a      	ldr	r0, [pc, #232]	; (8000b5c <main+0x630>)
 8000a72:	f004 ffcf 	bl	8005a14 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 8000a76:	483a      	ldr	r0, [pc, #232]	; (8000b60 <main+0x634>)
 8000a78:	f7ff fb68 	bl	800014c <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4837      	ldr	r0, [pc, #220]	; (8000b60 <main+0x634>)
 8000a82:	f004 ffc7 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 8000a86:	2103      	movs	r1, #3
 8000a88:	4836      	ldr	r0, [pc, #216]	; (8000b64 <main+0x638>)
 8000a8a:	f004 ffc3 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 8000a8e:	2300      	movs	r3, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	4835      	ldr	r0, [pc, #212]	; (8000b68 <main+0x63c>)
 8000a94:	f004 ffbe 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 8000a98:	2103      	movs	r1, #3
 8000a9a:	4834      	ldr	r0, [pc, #208]	; (8000b6c <main+0x640>)
 8000a9c:	f004 ffba 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	482e      	ldr	r0, [pc, #184]	; (8000b5c <main+0x630>)
 8000aa4:	f004 ffb6 	bl	8005a14 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 8000aa8:	210a      	movs	r1, #10
 8000aaa:	4831      	ldr	r0, [pc, #196]	; (8000b70 <main+0x644>)
 8000aac:	f004 ffb2 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4830      	ldr	r0, [pc, #192]	; (8000b74 <main+0x648>)
 8000ab4:	f004 ffae 	bl	8005a14 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4828      	ldr	r0, [pc, #160]	; (8000b5c <main+0x630>)
 8000abc:	f004 ffaa 	bl	8005a14 <Usart2_SendData>


		LCD_BAR_CreateRunInfoString();
 8000ac0:	f7ff fc5e 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_PN532_CreateRunInfoString();
 8000ac4:	f7ff fc22 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_pn_info,RUN_STR_DELAY_TST);
 8000ac8:	22c8      	movs	r2, #200	; 0xc8
 8000aca:	492b      	ldr	r1, [pc, #172]	; (8000b78 <main+0x64c>)
 8000acc:	482c      	ldr	r0, [pc, #176]	; (8000b80 <main+0x654>)
 8000ace:	f002 f9c1 	bl	8002e54 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

		LCD_SetCursor ( LCD_CURSOR_1STR );
 8000ad2:	2080      	movs	r0, #128	; 0x80
 8000ad4:	f002 f8f0 	bl	8002cb8 <LCD_SetCursor>
		LCD_WriteString (s_lcd_scanner_rdy );
 8000ad8:	482a      	ldr	r0, [pc, #168]	; (8000b84 <main+0x658>)
 8000ada:	f002 f99d 	bl	8002e18 <LCD_WriteString>

		LCD_SetCursor ( LCD_CURSOR_2STR );
 8000ade:	20c0      	movs	r0, #192	; 0xc0
 8000ae0:	f002 f8ea 	bl	8002cb8 <LCD_SetCursor>
		LCD_WriteString (s_lcd_ready );
 8000ae4:	4828      	ldr	r0, [pc, #160]	; (8000b88 <main+0x65c>)
 8000ae6:	f002 f997 	bl	8002e18 <LCD_WriteString>

		Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000aea:	2121      	movs	r1, #33	; 0x21
 8000aec:	4827      	ldr	r0, [pc, #156]	; (8000b8c <main+0x660>)
 8000aee:	f004 ff91 	bl	8005a14 <Usart2_SendData>


	break;
 8000af2:	bf00      	nop

}

Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000af4:	2121      	movs	r1, #33	; 0x21
 8000af6:	4825      	ldr	r0, [pc, #148]	; (8000b8c <main+0x660>)
 8000af8:	f004 ff8c 	bl	8005a14 <Usart2_SendData>


Timer1Init();
 8000afc:	f001 fa60 	bl	8001fc0 <Timer1Init>
EnableTimer1Interrupt();
 8000b00:	f001 fa98 	bl	8002034 <EnableTimer1Interrupt>

		char cSymbol;

		char date_Symbol;

		if(timer1flag==1){
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <main+0x664>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d110      	bne.n	8000b2e <main+0x602>
			ValueInterrupToStr();
 8000b0c:	f001 fc8c 	bl	8002428 <ValueInterrupToStr>
			Usart2_SendData(b_bounce_value,sizeof(b_bounce_value));
 8000b10:	2106      	movs	r1, #6
 8000b12:	4820      	ldr	r0, [pc, #128]	; (8000b94 <main+0x668>)
 8000b14:	f004 ff7e 	bl	8005a14 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <main+0x620>)
 8000b1a:	f7ff fb17 	bl	800014c <strlen>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4619      	mov	r1, r3
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <main+0x620>)
 8000b24:	f004 ff76 	bl	8005a14 <Usart2_SendData>
			timer1flag=0;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <main+0x664>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
		}



		//если не режим записи метки NFC
		if(u8_wrnfcstatus==0){
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <main+0x66c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f041 8074 	bne.w	8001c20 <main+0x16f4>

				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000b38:	e04c      	b.n	8000bd4 <main+0x6a8>
 8000b3a:	bf00      	nop
 8000b3c:	20000580 	.word	0x20000580
 8000b40:	200007c8 	.word	0x200007c8
 8000b44:	2000014c 	.word	0x2000014c
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	20000168 	.word	0x20000168
 8000b50:	20000070 	.word	0x20000070
 8000b54:	200001ec 	.word	0x200001ec
 8000b58:	200001dc 	.word	0x200001dc
 8000b5c:	200001d8 	.word	0x200001d8
 8000b60:	200001fc 	.word	0x200001fc
 8000b64:	200001e0 	.word	0x200001e0
 8000b68:	200001d4 	.word	0x200001d4
 8000b6c:	200001e4 	.word	0x200001e4
 8000b70:	2000020c 	.word	0x2000020c
 8000b74:	200001e8 	.word	0x200001e8
 8000b78:	200006c8 	.word	0x200006c8
 8000b7c:	20000c40 	.word	0x20000c40
 8000b80:	20000748 	.word	0x20000748
 8000b84:	20000034 	.word	0x20000034
 8000b88:	20000064 	.word	0x20000064
 8000b8c:	20000110 	.word	0x20000110
 8000b90:	200006be 	.word	0x200006be
 8000b94:	20000218 	.word	0x20000218
 8000b98:	200006bf 	.word	0x200006bf
					g_sBuffer [ g_iBufferLength++ ] = cSymbol;
 8000b9c:	4b97      	ldr	r3, [pc, #604]	; (8000dfc <main+0x8d0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	4996      	ldr	r1, [pc, #600]	; (8000dfc <main+0x8d0>)
 8000ba4:	600a      	str	r2, [r1, #0]
 8000ba6:	78f9      	ldrb	r1, [r7, #3]
 8000ba8:	4a95      	ldr	r2, [pc, #596]	; (8000e00 <main+0x8d4>)
 8000baa:	54d1      	strb	r1, [r2, r3]
					g_sBuffer [ g_iBufferLength ] = '\0';
 8000bac:	4b93      	ldr	r3, [pc, #588]	; (8000dfc <main+0x8d0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a93      	ldr	r2, [pc, #588]	; (8000e00 <main+0x8d4>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	54d1      	strb	r1, [r2, r3]
					if ( g_iBufferLength >= BUFFER_LEN ) {
 8000bb6:	4b91      	ldr	r3, [pc, #580]	; (8000dfc <main+0x8d0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b7f      	cmp	r3, #127	; 0x7f
 8000bbc:	dd0a      	ble.n	8000bd4 <main+0x6a8>
						memmove ( g_sBuffer, g_sBuffer + 1, BUFFER_LEN );
 8000bbe:	4b91      	ldr	r3, [pc, #580]	; (8000e04 <main+0x8d8>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	488e      	ldr	r0, [pc, #568]	; (8000e00 <main+0x8d4>)
 8000bc6:	f005 f9b7 	bl	8005f38 <memmove>
						g_iBufferLength--;
 8000bca:	4b8c      	ldr	r3, [pc, #560]	; (8000dfc <main+0x8d0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	4a8a      	ldr	r2, [pc, #552]	; (8000dfc <main+0x8d0>)
 8000bd2:	6013      	str	r3, [r2, #0]
				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000bd4:	1cfb      	adds	r3, r7, #3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f005 f81c 	bl	8005c14 <FIFO_GetNextData>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d0dc      	beq.n	8000b9c <main+0x670>
					}
				}
		//	прием данных с телефона
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000be2:	e02b      	b.n	8000c3c <main+0x710>

				//	Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
				//	Usart2_SendData(s_newline,strlen(s_newline));


					date_sBuffer [ date_iBufferLength++ ] = date_Symbol;
 8000be4:	4b88      	ldr	r3, [pc, #544]	; (8000e08 <main+0x8dc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	4987      	ldr	r1, [pc, #540]	; (8000e08 <main+0x8dc>)
 8000bec:	600a      	str	r2, [r1, #0]
 8000bee:	78b9      	ldrb	r1, [r7, #2]
 8000bf0:	4a86      	ldr	r2, [pc, #536]	; (8000e0c <main+0x8e0>)
 8000bf2:	54d1      	strb	r1, [r2, r3]
					date_sBuffer [ date_iBufferLength] = '\0';
 8000bf4:	4b84      	ldr	r3, [pc, #528]	; (8000e08 <main+0x8dc>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a84      	ldr	r2, [pc, #528]	; (8000e0c <main+0x8e0>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	54d1      	strb	r1, [r2, r3]
					if( date_iBufferLength >= BUFFER_LEN){
 8000bfe:	4b82      	ldr	r3, [pc, #520]	; (8000e08 <main+0x8dc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b7f      	cmp	r3, #127	; 0x7f
 8000c04:	dd0a      	ble.n	8000c1c <main+0x6f0>
						memmove(date_sBuffer, date_sBuffer + 1, BUFFER_LEN);
 8000c06:	4b82      	ldr	r3, [pc, #520]	; (8000e10 <main+0x8e4>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	487f      	ldr	r0, [pc, #508]	; (8000e0c <main+0x8e0>)
 8000c0e:	f005 f993 	bl	8005f38 <memmove>
						date_iBufferLength--;
 8000c12:	4b7d      	ldr	r3, [pc, #500]	; (8000e08 <main+0x8dc>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	4a7b      	ldr	r2, [pc, #492]	; (8000e08 <main+0x8dc>)
 8000c1a:	6013      	str	r3, [r2, #0]
					}
						Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 8000c1c:	487b      	ldr	r0, [pc, #492]	; (8000e0c <main+0x8e0>)
 8000c1e:	f7ff fa95 	bl	800014c <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4619      	mov	r1, r3
 8000c26:	4879      	ldr	r0, [pc, #484]	; (8000e0c <main+0x8e0>)
 8000c28:	f004 fef4 	bl	8005a14 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8000c2c:	4879      	ldr	r0, [pc, #484]	; (8000e14 <main+0x8e8>)
 8000c2e:	f7ff fa8d 	bl	800014c <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4619      	mov	r1, r3
 8000c36:	4877      	ldr	r0, [pc, #476]	; (8000e14 <main+0x8e8>)
 8000c38:	f004 feec 	bl	8005a14 <Usart2_SendData>
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000c3c:	1cbb      	adds	r3, r7, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f005 f816 	bl	8005c70 <Date_GetNextDate>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d0cc      	beq.n	8000be4 <main+0x6b8>
		*/



		//	декодирование данных с телефона
				if(strstr(date_sBuffer, "\r\n") != NULL){
 8000c4a:	4973      	ldr	r1, [pc, #460]	; (8000e18 <main+0x8ec>)
 8000c4c:	486f      	ldr	r0, [pc, #444]	; (8000e0c <main+0x8e0>)
 8000c4e:	f005 f9ec 	bl	800602a <strstr>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 829c 	beq.w	8001192 <main+0xc66>

				//	Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
				//	Usart2_SendData(s_newline,strlen(s_newline));

					char *pstr = date_sBuffer;
 8000c5a:	4b6c      	ldr	r3, [pc, #432]	; (8000e0c <main+0x8e0>)
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38

					if( date_sBuffer[0] == CMD /*&& date_sBuffer[4] == CMD*//**pstr == CMD*/ /*&& *pstr+4 == CMD*/){
 8000c5e:	4b6b      	ldr	r3, [pc, #428]	; (8000e0c <main+0x8e0>)
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <main+0x8f0>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	f040 8245 	bne.w	80010f6 <main+0xbca>
						pstr++;
 8000c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c6e:	3301      	adds	r3, #1
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38

						for(int i = 0; i < SIZE_CMD ; i++){
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
 8000c76:	e00b      	b.n	8000c90 <main+0x764>
							test_buffer[i] = *pstr++;
 8000c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000c7e:	7819      	ldrb	r1, [r3, #0]
 8000c80:	4a67      	ldr	r2, [pc, #412]	; (8000e20 <main+0x8f4>)
 8000c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c84:	4413      	add	r3, r2
 8000c86:	460a      	mov	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
						for(int i = 0; i < SIZE_CMD ; i++){
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	ddf0      	ble.n	8000c78 <main+0x74c>

						}
						NUM_CMD = atoi(test_buffer);
 8000c96:	4862      	ldr	r0, [pc, #392]	; (8000e20 <main+0x8f4>)
 8000c98:	f005 f902 	bl	8005ea0 <atoi>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4a61      	ldr	r2, [pc, #388]	; (8000e24 <main+0x8f8>)
 8000ca0:	6013      	str	r3, [r2, #0]
						if(NUM_CMD == 0){
 8000ca2:	4b60      	ldr	r3, [pc, #384]	; (8000e24 <main+0x8f8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10f      	bne.n	8000cca <main+0x79e>
							Usart2_SendData(android_wron_cmd_form,strlen(android_wron_cmd_form));
 8000caa:	485f      	ldr	r0, [pc, #380]	; (8000e28 <main+0x8fc>)
 8000cac:	f7ff fa4e 	bl	800014c <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	485c      	ldr	r0, [pc, #368]	; (8000e28 <main+0x8fc>)
 8000cb6:	f004 fead 	bl	8005a14 <Usart2_SendData>
							Usart2_SendData(s_newline,strlen(s_newline));
 8000cba:	4856      	ldr	r0, [pc, #344]	; (8000e14 <main+0x8e8>)
 8000cbc:	f7ff fa46 	bl	800014c <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4853      	ldr	r0, [pc, #332]	; (8000e14 <main+0x8e8>)
 8000cc6:	f004 fea5 	bl	8005a14 <Usart2_SendData>
						}
						switch (NUM_CMD) {
 8000cca:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <main+0x8f8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2bcb      	cmp	r3, #203	; 0xcb
 8000cd0:	f000 81ef 	beq.w	80010b2 <main+0xb86>
 8000cd4:	2bcb      	cmp	r3, #203	; 0xcb
 8000cd6:	f300 81fd 	bgt.w	80010d4 <main+0xba8>
 8000cda:	2bca      	cmp	r3, #202	; 0xca
 8000cdc:	f000 81d8 	beq.w	8001090 <main+0xb64>
 8000ce0:	2bca      	cmp	r3, #202	; 0xca
 8000ce2:	f300 81f7 	bgt.w	80010d4 <main+0xba8>
 8000ce6:	2bc9      	cmp	r3, #201	; 0xc9
 8000ce8:	f000 81c1 	beq.w	800106e <main+0xb42>
 8000cec:	2bc9      	cmp	r3, #201	; 0xc9
 8000cee:	f300 81f1 	bgt.w	80010d4 <main+0xba8>
 8000cf2:	2b67      	cmp	r3, #103	; 0x67
 8000cf4:	f000 8210 	beq.w	8001118 <main+0xbec>
 8000cf8:	2b67      	cmp	r3, #103	; 0x67
 8000cfa:	f300 81eb 	bgt.w	80010d4 <main+0xba8>
 8000cfe:	2b65      	cmp	r3, #101	; 0x65
 8000d00:	d003      	beq.n	8000d0a <main+0x7de>
 8000d02:	2b66      	cmp	r3, #102	; 0x66
 8000d04:	f000 809c 	beq.w	8000e40 <main+0x914>
 8000d08:	e1e4      	b.n	80010d4 <main+0xba8>
							case 101:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000d0a:	4845      	ldr	r0, [pc, #276]	; (8000e20 <main+0x8f4>)
 8000d0c:	f7ff fa1e 	bl	800014c <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4842      	ldr	r0, [pc, #264]	; (8000e20 <main+0x8f4>)
 8000d16:	f004 fe7d 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000d1a:	483e      	ldr	r0, [pc, #248]	; (8000e14 <main+0x8e8>)
 8000d1c:	f7ff fa16 	bl	800014c <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4619      	mov	r1, r3
 8000d24:	483b      	ldr	r0, [pc, #236]	; (8000e14 <main+0x8e8>)
 8000d26:	f004 fe75 	bl	8005a14 <Usart2_SendData>

								uint8_t date_result;

								date_result = convert_time_from_android(&rtc_time, date_sBuffer);
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4937      	ldr	r1, [pc, #220]	; (8000e0c <main+0x8e0>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 faa8 	bl	8004284 <convert_time_from_android>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]
								switch(date_result){
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	f200 820c 	bhi.w	8001158 <main+0xc2c>
 8000d40:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <main+0x81c>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000d59 	.word	0x08000d59
 8000d4c:	08000d93 	.word	0x08000d93
 8000d50:	08000db5 	.word	0x08000db5
 8000d54:	08000dd7 	.word	0x08000dd7
								case 0:
									tim = cal_to_timer(&rtc_time);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fa14 	bl	8004188 <cal_to_timer>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a32      	ldr	r2, [pc, #200]	; (8000e2c <main+0x900>)
 8000d64:	6013      	str	r3, [r2, #0]
									RTC_SET_COUNTER(tim);
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <main+0x900>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 f8d8 	bl	8003f20 <RTC_SET_COUNTER>
									Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 8000d70:	482f      	ldr	r0, [pc, #188]	; (8000e30 <main+0x904>)
 8000d72:	f7ff f9eb 	bl	800014c <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482d      	ldr	r0, [pc, #180]	; (8000e30 <main+0x904>)
 8000d7c:	f004 fe4a 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000d80:	4824      	ldr	r0, [pc, #144]	; (8000e14 <main+0x8e8>)
 8000d82:	f7ff f9e3 	bl	800014c <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4822      	ldr	r0, [pc, #136]	; (8000e14 <main+0x8e8>)
 8000d8c:	f004 fe42 	bl	8005a14 <Usart2_SendData>
									break;
 8000d90:	e032      	b.n	8000df8 <main+0x8cc>
								case 1:
									Usart2_SendData(incorrect_rtc_year,strlen(incorrect_rtc_year));
 8000d92:	4828      	ldr	r0, [pc, #160]	; (8000e34 <main+0x908>)
 8000d94:	f7ff f9da 	bl	800014c <strlen>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4825      	ldr	r0, [pc, #148]	; (8000e34 <main+0x908>)
 8000d9e:	f004 fe39 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000da2:	481c      	ldr	r0, [pc, #112]	; (8000e14 <main+0x8e8>)
 8000da4:	f7ff f9d2 	bl	800014c <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4619      	mov	r1, r3
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <main+0x8e8>)
 8000dae:	f004 fe31 	bl	8005a14 <Usart2_SendData>
									break;
 8000db2:	e021      	b.n	8000df8 <main+0x8cc>
								case 2:
									Usart2_SendData(incorrect_rtc_mon,strlen(incorrect_rtc_mon));
 8000db4:	4820      	ldr	r0, [pc, #128]	; (8000e38 <main+0x90c>)
 8000db6:	f7ff f9c9 	bl	800014c <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481e      	ldr	r0, [pc, #120]	; (8000e38 <main+0x90c>)
 8000dc0:	f004 fe28 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <main+0x8e8>)
 8000dc6:	f7ff f9c1 	bl	800014c <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <main+0x8e8>)
 8000dd0:	f004 fe20 	bl	8005a14 <Usart2_SendData>
									break;
 8000dd4:	e010      	b.n	8000df8 <main+0x8cc>
								case 3:
									Usart2_SendData(incorrect_rtc_day,strlen(incorrect_rtc_day));
 8000dd6:	4819      	ldr	r0, [pc, #100]	; (8000e3c <main+0x910>)
 8000dd8:	f7ff f9b8 	bl	800014c <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4816      	ldr	r0, [pc, #88]	; (8000e3c <main+0x910>)
 8000de2:	f004 fe17 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <main+0x8e8>)
 8000de8:	f7ff f9b0 	bl	800014c <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4808      	ldr	r0, [pc, #32]	; (8000e14 <main+0x8e8>)
 8000df2:	f004 fe0f 	bl	8005a14 <Usart2_SendData>
									break;
 8000df6:	bf00      	nop

								}
								break;
 8000df8:	e1ae      	b.n	8001158 <main+0xc2c>
 8000dfa:	bf00      	nop
 8000dfc:	20000544 	.word	0x20000544
 8000e00:	200004c0 	.word	0x200004c0
 8000e04:	200004c1 	.word	0x200004c1
 8000e08:	20000608 	.word	0x20000608
 8000e0c:	20000584 	.word	0x20000584
 8000e10:	20000585 	.word	0x20000585
 8000e14:	20000168 	.word	0x20000168
 8000e18:	08007234 	.word	0x08007234
 8000e1c:	200003f6 	.word	0x200003f6
 8000e20:	2000060c 	.word	0x2000060c
 8000e24:	20000860 	.word	0x20000860
 8000e28:	2000035c 	.word	0x2000035c
 8000e2c:	2000085c 	.word	0x2000085c
 8000e30:	20000058 	.word	0x20000058
 8000e34:	20000370 	.word	0x20000370
 8000e38:	20000380 	.word	0x20000380
 8000e3c:	20000390 	.word	0x20000390
							case 102:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000e40:	48b6      	ldr	r0, [pc, #728]	; (800111c <main+0xbf0>)
 8000e42:	f7ff f983 	bl	800014c <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	48b4      	ldr	r0, [pc, #720]	; (800111c <main+0xbf0>)
 8000e4c:	f004 fde2 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000e50:	48b3      	ldr	r0, [pc, #716]	; (8001120 <main+0xbf4>)
 8000e52:	f7ff f97b 	bl	800014c <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	48b1      	ldr	r0, [pc, #708]	; (8001120 <main+0xbf4>)
 8000e5c:	f004 fdda 	bl	8005a14 <Usart2_SendData>

								timer = RTC_GET_COUNTER();
 8000e60:	f003 f84e 	bl	8003f00 <RTC_GET_COUNTER>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4aaf      	ldr	r2, [pc, #700]	; (8001124 <main+0xbf8>)
 8000e68:	6013      	str	r3, [r2, #0]
								timer_to_cal(timer, &rtc_time);
 8000e6a:	4bae      	ldr	r3, [pc, #696]	; (8001124 <main+0xbf8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1d3a      	adds	r2, r7, #4
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f89e 	bl	8003fb4 <timer_to_cal>
								tim = cal_to_timer(&rtc_time);
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 f984 	bl	8004188 <cal_to_timer>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4aa9      	ldr	r2, [pc, #676]	; (8001128 <main+0xbfc>)
 8000e84:	6013      	str	r3, [r2, #0]


								//*xxx*yyyy-MM-dd HH:mm:ss

								s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4aa8      	ldr	r2, [pc, #672]	; (800112c <main+0xc00>)
 8000e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8e:	1192      	asrs	r2, r2, #6
 8000e90:	17db      	asrs	r3, r3, #31
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	4ba6      	ldr	r3, [pc, #664]	; (8001130 <main+0xc04>)
 8000e96:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9a:	1099      	asrs	r1, r3, #2
 8000e9c:	17d3      	asrs	r3, r2, #31
 8000e9e:	1ac9      	subs	r1, r1, r3
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	1ad1      	subs	r1, r2, r3
 8000eaa:	b2cb      	uxtb	r3, r1
 8000eac:	3330      	adds	r3, #48	; 0x30
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4ba0      	ldr	r3, [pc, #640]	; (8001134 <main+0xc08>)
 8000eb2:	701a      	strb	r2, [r3, #0]
								s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4aa0      	ldr	r2, [pc, #640]	; (8001138 <main+0xc0c>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1152      	asrs	r2, r2, #5
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <main+0xc04>)
 8000ec4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ec8:	1099      	asrs	r1, r3, #2
 8000eca:	17d3      	asrs	r3, r2, #31
 8000ecc:	1ac9      	subs	r1, r1, r3
 8000ece:	460b      	mov	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1ad1      	subs	r1, r2, r3
 8000ed8:	b2cb      	uxtb	r3, r1
 8000eda:	3330      	adds	r3, #48	; 0x30
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b95      	ldr	r3, [pc, #596]	; (8001134 <main+0xc08>)
 8000ee0:	705a      	strb	r2, [r3, #1]
								s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a92      	ldr	r2, [pc, #584]	; (8001130 <main+0xc04>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1092      	asrs	r2, r2, #2
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1ad2      	subs	r2, r2, r3
 8000ef0:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <main+0xc04>)
 8000ef2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ef6:	1099      	asrs	r1, r3, #2
 8000ef8:	17d3      	asrs	r3, r2, #31
 8000efa:	1ac9      	subs	r1, r1, r3
 8000efc:	460b      	mov	r3, r1
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	1ad1      	subs	r1, r2, r3
 8000f06:	b2cb      	uxtb	r3, r1
 8000f08:	3330      	adds	r3, #48	; 0x30
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b89      	ldr	r3, [pc, #548]	; (8001134 <main+0xc08>)
 8000f0e:	709a      	strb	r2, [r3, #2]
								s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4b87      	ldr	r3, [pc, #540]	; (8001130 <main+0xc04>)
 8000f14:	fb83 1302 	smull	r1, r3, r3, r2
 8000f18:	1099      	asrs	r1, r3, #2
 8000f1a:	17d3      	asrs	r3, r2, #31
 8000f1c:	1ac9      	subs	r1, r1, r3
 8000f1e:	460b      	mov	r3, r1
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	1ad1      	subs	r1, r2, r3
 8000f28:	b2cb      	uxtb	r3, r1
 8000f2a:	3330      	adds	r3, #48	; 0x30
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b81      	ldr	r3, [pc, #516]	; (8001134 <main+0xc08>)
 8000f30:	70da      	strb	r2, [r3, #3]

								s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8000f32:	7a3b      	ldrb	r3, [r7, #8]
 8000f34:	4a81      	ldr	r2, [pc, #516]	; (800113c <main+0xc10>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3330      	adds	r3, #48	; 0x30
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b7c      	ldr	r3, [pc, #496]	; (8001134 <main+0xc08>)
 8000f44:	715a      	strb	r2, [r3, #5]
								s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8000f46:	7a3a      	ldrb	r2, [r7, #8]
 8000f48:	4b7c      	ldr	r3, [pc, #496]	; (800113c <main+0xc10>)
 8000f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f4e:	08d9      	lsrs	r1, r3, #3
 8000f50:	460b      	mov	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3330      	adds	r3, #48	; 0x30
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b74      	ldr	r3, [pc, #464]	; (8001134 <main+0xc08>)
 8000f62:	719a      	strb	r2, [r3, #6]

								s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8000f64:	7a7b      	ldrb	r3, [r7, #9]
 8000f66:	4a75      	ldr	r2, [pc, #468]	; (800113c <main+0xc10>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	3330      	adds	r3, #48	; 0x30
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <main+0xc08>)
 8000f76:	721a      	strb	r2, [r3, #8]
								s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8000f78:	7a7a      	ldrb	r2, [r7, #9]
 8000f7a:	4b70      	ldr	r3, [pc, #448]	; (800113c <main+0xc10>)
 8000f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f80:	08d9      	lsrs	r1, r3, #3
 8000f82:	460b      	mov	r3, r1
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3330      	adds	r3, #48	; 0x30
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b68      	ldr	r3, [pc, #416]	; (8001134 <main+0xc08>)
 8000f94:	725a      	strb	r2, [r3, #9]

								s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	4a68      	ldr	r2, [pc, #416]	; (800113c <main+0xc10>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	08db      	lsrs	r3, r3, #3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	3330      	adds	r3, #48	; 0x30
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <main+0xc08>)
 8000fa8:	72da      	strb	r2, [r3, #11]
								s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8000faa:	7aba      	ldrb	r2, [r7, #10]
 8000fac:	4b63      	ldr	r3, [pc, #396]	; (800113c <main+0xc10>)
 8000fae:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb2:	08d9      	lsrs	r1, r3, #3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3330      	adds	r3, #48	; 0x30
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <main+0xc08>)
 8000fc6:	731a      	strb	r2, [r3, #12]

								s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	4a5c      	ldr	r2, [pc, #368]	; (800113c <main+0xc10>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	3330      	adds	r3, #48	; 0x30
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b56      	ldr	r3, [pc, #344]	; (8001134 <main+0xc08>)
 8000fda:	739a      	strb	r2, [r3, #14]
								s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8000fdc:	7afa      	ldrb	r2, [r7, #11]
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <main+0xc10>)
 8000fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe4:	08d9      	lsrs	r1, r3, #3
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3330      	adds	r3, #48	; 0x30
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b4f      	ldr	r3, [pc, #316]	; (8001134 <main+0xc08>)
 8000ff8:	73da      	strb	r2, [r3, #15]

								s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8000ffa:	7b3b      	ldrb	r3, [r7, #12]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <main+0xc10>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3330      	adds	r3, #48	; 0x30
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <main+0xc08>)
 800100c:	745a      	strb	r2, [r3, #17]
								s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 800100e:	7b3a      	ldrb	r2, [r7, #12]
 8001010:	4b4a      	ldr	r3, [pc, #296]	; (800113c <main+0xc10>)
 8001012:	fba3 1302 	umull	r1, r3, r3, r2
 8001016:	08d9      	lsrs	r1, r3, #3
 8001018:	460b      	mov	r3, r1
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3330      	adds	r3, #48	; 0x30
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b42      	ldr	r3, [pc, #264]	; (8001134 <main+0xc08>)
 800102a:	749a      	strb	r2, [r3, #18]

								Usart2_SendData(s_cal_data,strlen(s_cal_data));
 800102c:	4841      	ldr	r0, [pc, #260]	; (8001134 <main+0xc08>)
 800102e:	f7ff f88d 	bl	800014c <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	483f      	ldr	r0, [pc, #252]	; (8001134 <main+0xc08>)
 8001038:	f004 fcec 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800103c:	4838      	ldr	r0, [pc, #224]	; (8001120 <main+0xbf4>)
 800103e:	f7ff f885 	bl	800014c <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	4619      	mov	r1, r3
 8001046:	4836      	ldr	r0, [pc, #216]	; (8001120 <main+0xbf4>)
 8001048:	f004 fce4 	bl	8005a14 <Usart2_SendData>


								Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 800104c:	483c      	ldr	r0, [pc, #240]	; (8001140 <main+0xc14>)
 800104e:	f7ff f87d 	bl	800014c <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	483a      	ldr	r0, [pc, #232]	; (8001140 <main+0xc14>)
 8001058:	f004 fcdc 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800105c:	4830      	ldr	r0, [pc, #192]	; (8001120 <main+0xbf4>)
 800105e:	f7ff f875 	bl	800014c <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	4619      	mov	r1, r3
 8001066:	482e      	ldr	r0, [pc, #184]	; (8001120 <main+0xbf4>)
 8001068:	f004 fcd4 	bl	8005a14 <Usart2_SendData>
								break;
 800106c:	e075      	b.n	800115a <main+0xc2e>
							case 103://отправка настроек устройства

								break;
							case 201://чтение последнего штрих-кода
								Usart2_SendData(android_last_barcode,strlen(android_last_barcode));
 800106e:	4835      	ldr	r0, [pc, #212]	; (8001144 <main+0xc18>)
 8001070:	f7ff f86c 	bl	800014c <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	4832      	ldr	r0, [pc, #200]	; (8001144 <main+0xc18>)
 800107a:	f004 fccb 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800107e:	4828      	ldr	r0, [pc, #160]	; (8001120 <main+0xbf4>)
 8001080:	f7ff f864 	bl	800014c <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	4619      	mov	r1, r3
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <main+0xbf4>)
 800108a:	f004 fcc3 	bl	8005a14 <Usart2_SendData>
								break;
 800108e:	e064      	b.n	800115a <main+0xc2e>
							case 202://чтение последней NFC-метки
								Usart2_SendData(android_last_nfc,strlen(android_last_nfc));
 8001090:	482d      	ldr	r0, [pc, #180]	; (8001148 <main+0xc1c>)
 8001092:	f7ff f85b 	bl	800014c <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	4619      	mov	r1, r3
 800109a:	482b      	ldr	r0, [pc, #172]	; (8001148 <main+0xc1c>)
 800109c:	f004 fcba 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <main+0xbf4>)
 80010a2:	f7ff f853 	bl	800014c <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4619      	mov	r1, r3
 80010aa:	481d      	ldr	r0, [pc, #116]	; (8001120 <main+0xbf4>)
 80010ac:	f004 fcb2 	bl	8005a14 <Usart2_SendData>
								break;
 80010b0:	e053      	b.n	800115a <main+0xc2e>
							case 203://чтение последних пяти записей
								Usart2_SendData(android_last_5records,strlen(android_last_5records));
 80010b2:	4826      	ldr	r0, [pc, #152]	; (800114c <main+0xc20>)
 80010b4:	f7ff f84a 	bl	800014c <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4823      	ldr	r0, [pc, #140]	; (800114c <main+0xc20>)
 80010be:	f004 fca9 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <main+0xbf4>)
 80010c4:	f7ff f842 	bl	800014c <strlen>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <main+0xbf4>)
 80010ce:	f004 fca1 	bl	8005a14 <Usart2_SendData>
								break;
 80010d2:	e042      	b.n	800115a <main+0xc2e>
							default:
								Usart2_SendData(android_no_such_cmd,strlen(android_no_such_cmd));
 80010d4:	481e      	ldr	r0, [pc, #120]	; (8001150 <main+0xc24>)
 80010d6:	f7ff f839 	bl	800014c <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	4619      	mov	r1, r3
 80010de:	481c      	ldr	r0, [pc, #112]	; (8001150 <main+0xc24>)
 80010e0:	f004 fc98 	bl	8005a14 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <main+0xbf4>)
 80010e6:	f7ff f831 	bl	800014c <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4619      	mov	r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <main+0xbf4>)
 80010f0:	f004 fc90 	bl	8005a14 <Usart2_SendData>
								break;
 80010f4:	e031      	b.n	800115a <main+0xc2e>
						}
					} else {
						Usart2_SendData(android_no_cmd_error,strlen(android_no_cmd_error));
 80010f6:	4817      	ldr	r0, [pc, #92]	; (8001154 <main+0xc28>)
 80010f8:	f7ff f828 	bl	800014c <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4619      	mov	r1, r3
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <main+0xc28>)
 8001102:	f004 fc87 	bl	8005a14 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <main+0xbf4>)
 8001108:	f7ff f820 	bl	800014c <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	4619      	mov	r1, r3
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <main+0xbf4>)
 8001112:	f004 fc7f 	bl	8005a14 <Usart2_SendData>
 8001116:	e020      	b.n	800115a <main+0xc2e>
								break;
 8001118:	bf00      	nop
 800111a:	e01e      	b.n	800115a <main+0xc2e>
 800111c:	2000060c 	.word	0x2000060c
 8001120:	20000168 	.word	0x20000168
 8001124:	20000338 	.word	0x20000338
 8001128:	2000085c 	.word	0x2000085c
 800112c:	10624dd3 	.word	0x10624dd3
 8001130:	66666667 	.word	0x66666667
 8001134:	20000220 	.word	0x20000220
 8001138:	51eb851f 	.word	0x51eb851f
 800113c:	cccccccd 	.word	0xcccccccd
 8001140:	20000058 	.word	0x20000058
 8001144:	200003a0 	.word	0x200003a0
 8001148:	200003bc 	.word	0x200003bc
 800114c:	200003d8 	.word	0x200003d8
 8001150:	20000350 	.word	0x20000350
 8001154:	2000033c 	.word	0x2000033c
								break;
 8001158:	bf00      	nop
					//strcat(date_sCode,dBuffer );

				//	Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
				//	Usart2_SendData(s_newline,strlen(s_newline));

					Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <main+0xc84>)
 800115c:	f7fe fff6 	bl	800014c <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	4619      	mov	r1, r3
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <main+0xc84>)
 8001166:	f004 fc55 	bl	8005a14 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <main+0xc88>)
 800116c:	f7fe ffee 	bl	800014c <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <main+0xc88>)
 8001176:	f004 fc4d 	bl	8005a14 <Usart2_SendData>



					date_iBufferLength=0;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <main+0xc8c>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
				//	date_iBufferLength -= strDateLength;
				/*	memmove ( date_sBuffer, date_sBuffer + strDateLength,

							BUFFER_LEN +1 - strDateLength );
*/
					memset(date_sBuffer, 0, strlen(date_sBuffer));
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <main+0xc84>)
 8001182:	f7fe ffe3 	bl	800014c <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <main+0xc84>)
 800118e:	f004 feed 	bl	8005f6c <memset>
				//GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);

				/*
				 * Декодирование данных сканера
				 */
				if (strstr(g_sBuffer, "\r\n") != NULL) {
 8001192:	490a      	ldr	r1, [pc, #40]	; (80011bc <main+0xc90>)
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <main+0xc94>)
 8001196:	f004 ff48 	bl	800602a <strstr>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 8184 	beq.w	80014aa <main+0xf7e>
					/* Выделение лексемы,
					 *  ограниченной справа одним из символов множества "\r\n"
					 */
					strtok ( g_sBuffer, "\r\n" );
 80011a2:	4906      	ldr	r1, [pc, #24]	; (80011bc <main+0xc90>)
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <main+0xc94>)
 80011a6:	f004 ff57 	bl	8006058 <strtok>

					char * pBuffer = g_sBuffer;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <main+0xc94>)
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 80011ae:	e00c      	b.n	80011ca <main+0xc9e>
 80011b0:	20000584 	.word	0x20000584
 80011b4:	20000168 	.word	0x20000168
 80011b8:	20000608 	.word	0x20000608
 80011bc:	08007234 	.word	0x08007234
 80011c0:	200004c0 	.word	0x200004c0
						pBuffer++;
 80011c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c6:	3301      	adds	r3, #1
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 80011ca:	49ba      	ldr	r1, [pc, #744]	; (80014b4 <main+0xf88>)
 80011cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011ce:	f004 ff14 	bl	8005ffa <strpbrk>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f5      	bne.n	80011c4 <main+0xc98>
					}

					memset(g_sBarCode,0,strlen(g_sBarCode));
 80011d8:	48b7      	ldr	r0, [pc, #732]	; (80014b8 <main+0xf8c>)
 80011da:	f7fe ffb7 	bl	800014c <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	48b4      	ldr	r0, [pc, #720]	; (80014b8 <main+0xf8c>)
 80011e6:	f004 fec1 	bl	8005f6c <memset>
					  strlcpy ( g_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 80011ea:	221a      	movs	r2, #26
 80011ec:	49b3      	ldr	r1, [pc, #716]	; (80014bc <main+0xf90>)
 80011ee:	48b2      	ldr	r0, [pc, #712]	; (80014b8 <main+0xf8c>)
 80011f0:	f004 fedb 	bl	8005faa <strlcpy>
					  strcat(g_sBarCode,pBuffer );
 80011f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011f6:	48b0      	ldr	r0, [pc, #704]	; (80014b8 <main+0xf8c>)
 80011f8:	f004 fec0 	bl	8005f7c <strcat>



						timer = RTC_GET_COUNTER();
 80011fc:	f002 fe80 	bl	8003f00 <RTC_GET_COUNTER>
 8001200:	4603      	mov	r3, r0
 8001202:	4aaf      	ldr	r2, [pc, #700]	; (80014c0 <main+0xf94>)
 8001204:	6013      	str	r3, [r2, #0]
						timer_to_cal(timer, &rtc_time);
 8001206:	4bae      	ldr	r3, [pc, #696]	; (80014c0 <main+0xf94>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1d3a      	adds	r2, r7, #4
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fed0 	bl	8003fb4 <timer_to_cal>
						tim = cal_to_timer(&rtc_time);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f002 ffb6 	bl	8004188 <cal_to_timer>
 800121c:	4603      	mov	r3, r0
 800121e:	4aa9      	ldr	r2, [pc, #676]	; (80014c4 <main+0xf98>)
 8001220:	6013      	str	r3, [r2, #0]
						bcdflash = bcode_conv_to_flash(tim, g_sBuffer);
 8001222:	4ba8      	ldr	r3, [pc, #672]	; (80014c4 <main+0xf98>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	49a8      	ldr	r1, [pc, #672]	; (80014c8 <main+0xf9c>)
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fb27 	bl	800287c <bcode_conv_to_flash>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	49a6      	ldr	r1, [pc, #664]	; (80014cc <main+0xfa0>)
 8001234:	e9c1 2300 	strd	r2, r3, [r1]
						data_conv2Flash(tim, bcdflash);
 8001238:	4ba2      	ldr	r3, [pc, #648]	; (80014c4 <main+0xf98>)
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	4ba3      	ldr	r3, [pc, #652]	; (80014cc <main+0xfa0>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	4608      	mov	r0, r1
 8001244:	f001 fba8 	bl	8002998 <data_conv2Flash>





						s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4aa1      	ldr	r2, [pc, #644]	; (80014d0 <main+0xfa4>)
 800124c:	fb82 1203 	smull	r1, r2, r2, r3
 8001250:	1192      	asrs	r2, r2, #6
 8001252:	17db      	asrs	r3, r3, #31
 8001254:	1ad2      	subs	r2, r2, r3
 8001256:	4b9f      	ldr	r3, [pc, #636]	; (80014d4 <main+0xfa8>)
 8001258:	fb83 1302 	smull	r1, r3, r3, r2
 800125c:	1099      	asrs	r1, r3, #2
 800125e:	17d3      	asrs	r3, r2, #31
 8001260:	1ac9      	subs	r1, r1, r3
 8001262:	460b      	mov	r3, r1
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	1ad1      	subs	r1, r2, r3
 800126c:	b2cb      	uxtb	r3, r1
 800126e:	3330      	adds	r3, #48	; 0x30
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <main+0xfac>)
 8001274:	701a      	strb	r2, [r3, #0]
						s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a98      	ldr	r2, [pc, #608]	; (80014dc <main+0xfb0>)
 800127a:	fb82 1203 	smull	r1, r2, r2, r3
 800127e:	1152      	asrs	r2, r2, #5
 8001280:	17db      	asrs	r3, r3, #31
 8001282:	1ad2      	subs	r2, r2, r3
 8001284:	4b93      	ldr	r3, [pc, #588]	; (80014d4 <main+0xfa8>)
 8001286:	fb83 1302 	smull	r1, r3, r3, r2
 800128a:	1099      	asrs	r1, r3, #2
 800128c:	17d3      	asrs	r3, r2, #31
 800128e:	1ac9      	subs	r1, r1, r3
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	1ad1      	subs	r1, r2, r3
 800129a:	b2cb      	uxtb	r3, r1
 800129c:	3330      	adds	r3, #48	; 0x30
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <main+0xfac>)
 80012a2:	705a      	strb	r2, [r3, #1]
						s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a8b      	ldr	r2, [pc, #556]	; (80014d4 <main+0xfa8>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	1092      	asrs	r2, r2, #2
 80012ae:	17db      	asrs	r3, r3, #31
 80012b0:	1ad2      	subs	r2, r2, r3
 80012b2:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <main+0xfa8>)
 80012b4:	fb83 1302 	smull	r1, r3, r3, r2
 80012b8:	1099      	asrs	r1, r3, #2
 80012ba:	17d3      	asrs	r3, r2, #31
 80012bc:	1ac9      	subs	r1, r1, r3
 80012be:	460b      	mov	r3, r1
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	1ad1      	subs	r1, r2, r3
 80012c8:	b2cb      	uxtb	r3, r1
 80012ca:	3330      	adds	r3, #48	; 0x30
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <main+0xfac>)
 80012d0:	709a      	strb	r2, [r3, #2]
						s_cal_data[3] = 0x30 + (rtc_time.year%10);
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4b7f      	ldr	r3, [pc, #508]	; (80014d4 <main+0xfa8>)
 80012d6:	fb83 1302 	smull	r1, r3, r3, r2
 80012da:	1099      	asrs	r1, r3, #2
 80012dc:	17d3      	asrs	r3, r2, #31
 80012de:	1ac9      	subs	r1, r1, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	1ad1      	subs	r1, r2, r3
 80012ea:	b2cb      	uxtb	r3, r1
 80012ec:	3330      	adds	r3, #48	; 0x30
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b79      	ldr	r3, [pc, #484]	; (80014d8 <main+0xfac>)
 80012f2:	70da      	strb	r2, [r3, #3]

						s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <main+0xfb4>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3330      	adds	r3, #48	; 0x30
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b74      	ldr	r3, [pc, #464]	; (80014d8 <main+0xfac>)
 8001306:	715a      	strb	r2, [r3, #5]
						s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8001308:	7a3a      	ldrb	r2, [r7, #8]
 800130a:	4b75      	ldr	r3, [pc, #468]	; (80014e0 <main+0xfb4>)
 800130c:	fba3 1302 	umull	r1, r3, r3, r2
 8001310:	08d9      	lsrs	r1, r3, #3
 8001312:	460b      	mov	r3, r1
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	3330      	adds	r3, #48	; 0x30
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b6d      	ldr	r3, [pc, #436]	; (80014d8 <main+0xfac>)
 8001324:	719a      	strb	r2, [r3, #6]

						s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001326:	7a7b      	ldrb	r3, [r7, #9]
 8001328:	4a6d      	ldr	r2, [pc, #436]	; (80014e0 <main+0xfb4>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3330      	adds	r3, #48	; 0x30
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <main+0xfac>)
 8001338:	721a      	strb	r2, [r3, #8]
						s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 800133a:	7a7a      	ldrb	r2, [r7, #9]
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <main+0xfb4>)
 800133e:	fba3 1302 	umull	r1, r3, r3, r2
 8001342:	08d9      	lsrs	r1, r3, #3
 8001344:	460b      	mov	r3, r1
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	3330      	adds	r3, #48	; 0x30
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <main+0xfac>)
 8001356:	725a      	strb	r2, [r3, #9]

						s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001358:	7abb      	ldrb	r3, [r7, #10]
 800135a:	4a61      	ldr	r2, [pc, #388]	; (80014e0 <main+0xfb4>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <main+0xfac>)
 800136a:	72da      	strb	r2, [r3, #11]
						s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 800136c:	7aba      	ldrb	r2, [r7, #10]
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <main+0xfb4>)
 8001370:	fba3 1302 	umull	r1, r3, r3, r2
 8001374:	08d9      	lsrs	r1, r3, #3
 8001376:	460b      	mov	r3, r1
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	3330      	adds	r3, #48	; 0x30
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <main+0xfac>)
 8001388:	731a      	strb	r2, [r3, #12]

						s_cal_data[14] = 0x30 + (rtc_time.min/10);
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <main+0xfb4>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3330      	adds	r3, #48	; 0x30
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <main+0xfac>)
 800139c:	739a      	strb	r2, [r3, #14]
						s_cal_data[15] = 0x30 + (rtc_time.min%10);
 800139e:	7afa      	ldrb	r2, [r7, #11]
 80013a0:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <main+0xfb4>)
 80013a2:	fba3 1302 	umull	r1, r3, r3, r2
 80013a6:	08d9      	lsrs	r1, r3, #3
 80013a8:	460b      	mov	r3, r1
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	3330      	adds	r3, #48	; 0x30
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <main+0xfac>)
 80013ba:	73da      	strb	r2, [r3, #15]

						s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	4a48      	ldr	r2, [pc, #288]	; (80014e0 <main+0xfb4>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3330      	adds	r3, #48	; 0x30
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <main+0xfac>)
 80013ce:	745a      	strb	r2, [r3, #17]
						s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 80013d0:	7b3a      	ldrb	r2, [r7, #12]
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <main+0xfb4>)
 80013d4:	fba3 1302 	umull	r1, r3, r3, r2
 80013d8:	08d9      	lsrs	r1, r3, #3
 80013da:	460b      	mov	r3, r1
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	3330      	adds	r3, #48	; 0x30
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <main+0xfac>)
 80013ec:	749a      	strb	r2, [r3, #18]
		*/
					//LCD_SetCursor ( LCD_CURSOR_1STR );
					//LCD_WriteString ( s_lcd_barcode );

					//if(b_firstrddata==DISABLE){
						LCD_SetCursor ( LCD_CURSOR_1STR );
 80013ee:	2080      	movs	r0, #128	; 0x80
 80013f0:	f001 fc62 	bl	8002cb8 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 80013f4:	483b      	ldr	r0, [pc, #236]	; (80014e4 <main+0xfb8>)
 80013f6:	f001 fd0f 	bl	8002e18 <LCD_WriteString>
						LCD_SetCursor ( LCD_CURSOR_2STR );
 80013fa:	20c0      	movs	r0, #192	; 0xc0
 80013fc:	f001 fc5c 	bl	8002cb8 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 8001400:	4838      	ldr	r0, [pc, #224]	; (80014e4 <main+0xfb8>)
 8001402:	f001 fd09 	bl	8002e18 <LCD_WriteString>
						//b_firstrddata=ENABLE;

					//}

					LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 7148 	mov.w	r1, #800	; 0x320
 800140c:	482a      	ldr	r0, [pc, #168]	; (80014b8 <main+0xf8c>)
 800140e:	f001 fe37 	bl	8003080 <LCD_RunStringBARCode>

					int strLength = strlen(g_sBuffer) + 1;
 8001412:	482d      	ldr	r0, [pc, #180]	; (80014c8 <main+0xf9c>)
 8001414:	f7fe fe9a 	bl	800014c <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	3301      	adds	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
					g_iBufferLength -= strLength;
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <main+0xfbc>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a30      	ldr	r2, [pc, #192]	; (80014e8 <main+0xfbc>)
 8001428:	6013      	str	r3, [r2, #0]
					memmove ( g_sBuffer, g_sBuffer + strLength,
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <main+0xf9c>)
 800142e:	1899      	adds	r1, r3, r2

							BUFFER_LEN + 1 - strLength );
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f1c3 0381 	rsb	r3, r3, #129	; 0x81
					memmove ( g_sBuffer, g_sBuffer + strLength,
 8001436:	461a      	mov	r2, r3
 8001438:	4823      	ldr	r0, [pc, #140]	; (80014c8 <main+0xf9c>)
 800143a:	f004 fd7d 	bl	8005f38 <memmove>
					//*xxx*yyyy-MM-dd HH:mm:ss




					strncat(s_scan_d_c, s_cal_data, 19);
 800143e:	2213      	movs	r2, #19
 8001440:	4925      	ldr	r1, [pc, #148]	; (80014d8 <main+0xfac>)
 8001442:	482a      	ldr	r0, [pc, #168]	; (80014ec <main+0xfc0>)
 8001444:	f004 fdc6 	bl	8005fd4 <strncat>
					strncat(s_scan_d_c, s_space, strlen(s_space));
 8001448:	2300      	movs	r3, #0
 800144a:	461a      	mov	r2, r3
 800144c:	4928      	ldr	r1, [pc, #160]	; (80014f0 <main+0xfc4>)
 800144e:	4827      	ldr	r0, [pc, #156]	; (80014ec <main+0xfc0>)
 8001450:	f004 fdc0 	bl	8005fd4 <strncat>
					strncat(s_scan_d_c, g_sBarCode, strlen(g_sBarCode));
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <main+0xf8c>)
 8001456:	f7fe fe79 	bl	800014c <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4916      	ldr	r1, [pc, #88]	; (80014b8 <main+0xf8c>)
 8001460:	4822      	ldr	r0, [pc, #136]	; (80014ec <main+0xfc0>)
 8001462:	f004 fdb7 	bl	8005fd4 <strncat>
					strncat(s_scan_d_c, s_newline, strlen(s_newline));
 8001466:	4823      	ldr	r0, [pc, #140]	; (80014f4 <main+0xfc8>)
 8001468:	f7fe fe70 	bl	800014c <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4920      	ldr	r1, [pc, #128]	; (80014f4 <main+0xfc8>)
 8001472:	481e      	ldr	r0, [pc, #120]	; (80014ec <main+0xfc0>)
 8001474:	f004 fdae 	bl	8005fd4 <strncat>



				//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
					Usart2_SendData(s_scan_d_c,strlen(s_scan_d_c));
 8001478:	481c      	ldr	r0, [pc, #112]	; (80014ec <main+0xfc0>)
 800147a:	f7fe fe67 	bl	800014c <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	481a      	ldr	r0, [pc, #104]	; (80014ec <main+0xfc0>)
 8001484:	f004 fac6 	bl	8005a14 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 8001488:	481a      	ldr	r0, [pc, #104]	; (80014f4 <main+0xfc8>)
 800148a:	f7fe fe5f 	bl	800014c <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	4818      	ldr	r0, [pc, #96]	; (80014f4 <main+0xfc8>)
 8001494:	f004 fabe 	bl	8005a14 <Usart2_SendData>

					memset(s_scan_d_c, 0, strlen(s_scan_d_c));
 8001498:	4814      	ldr	r0, [pc, #80]	; (80014ec <main+0xfc0>)
 800149a:	f7fe fe57 	bl	800014c <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	2100      	movs	r1, #0
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <main+0xfc0>)
 80014a6:	f004 fd61 	bl	8005f6c <memset>



				//*****************************************************************************
				//Если тест NFC пройден успешно,то сканируем ID
						if(statusDevice==ST_DEV_NFC_NOERR || statusDevice==ST_DEV_ALL_NOERR ){
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <main+0xfcc>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d029      	beq.n	8001506 <main+0xfda>
 80014b2:	e023      	b.n	80014fc <main+0xfd0>
 80014b4:	08007244 	.word	0x08007244
 80014b8:	20000548 	.word	0x20000548
 80014bc:	200000d4 	.word	0x200000d4
 80014c0:	20000338 	.word	0x20000338
 80014c4:	2000085c 	.word	0x2000085c
 80014c8:	200004c0 	.word	0x200004c0
 80014cc:	20000870 	.word	0x20000870
 80014d0:	10624dd3 	.word	0x10624dd3
 80014d4:	66666667 	.word	0x66666667
 80014d8:	20000220 	.word	0x20000220
 80014dc:	51eb851f 	.word	0x51eb851f
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	200000b4 	.word	0x200000b4
 80014e8:	20000544 	.word	0x20000544
 80014ec:	200007dc 	.word	0x200007dc
 80014f0:	200001d0 	.word	0x200001d0
 80014f4:	20000168 	.word	0x20000168
 80014f8:	200007c8 	.word	0x200007c8
 80014fc:	4bb9      	ldr	r3, [pc, #740]	; (80017e4 <main+0x12b8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b11      	cmp	r3, #17
 8001502:	f040 83cb 	bne.w	8001c9c <main+0x1770>
							if(cntlooppn532==CNT_LOOP_PN532){
 8001506:	4bb8      	ldr	r3, [pc, #736]	; (80017e8 <main+0x12bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800150e:	4293      	cmp	r3, r2
 8001510:	f040 837a 	bne.w	8001c08 <main+0x16dc>

								success=PN532_readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength,1500);
 8001514:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001518:	4ab4      	ldr	r2, [pc, #720]	; (80017ec <main+0x12c0>)
 800151a:	49b5      	ldr	r1, [pc, #724]	; (80017f0 <main+0x12c4>)
 800151c:	2000      	movs	r0, #0
 800151e:	f001 ff73 	bl	8003408 <PN532_readPassiveTargetID>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4bb3      	ldr	r3, [pc, #716]	; (80017f4 <main+0x12c8>)
 8001528:	701a      	strb	r2, [r3, #0]

								if(success && !b_discannfc){
 800152a:	4bb2      	ldr	r3, [pc, #712]	; (80017f4 <main+0x12c8>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8360 	beq.w	8001bf4 <main+0x16c8>
 8001534:	4bb0      	ldr	r3, [pc, #704]	; (80017f8 <main+0x12cc>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f040 835b 	bne.w	8001bf4 <main+0x16c8>

									b_discannfc=1;
 800153e:	4bae      	ldr	r3, [pc, #696]	; (80017f8 <main+0x12cc>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]

									s_pn_uidlengthdata[0] = 0x30+(uidLength/100);
 8001544:	4ba9      	ldr	r3, [pc, #676]	; (80017ec <main+0x12c0>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4aac      	ldr	r2, [pc, #688]	; (80017fc <main+0x12d0>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3330      	adds	r3, #48	; 0x30
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4baa      	ldr	r3, [pc, #680]	; (8001800 <main+0x12d4>)
 8001558:	701a      	strb	r2, [r3, #0]
									s_pn_uidlengthdata[1] = 0x30+(uidLength/10%10);
 800155a:	4ba4      	ldr	r3, [pc, #656]	; (80017ec <main+0x12c0>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4aa9      	ldr	r2, [pc, #676]	; (8001804 <main+0x12d8>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4ba6      	ldr	r3, [pc, #664]	; (8001804 <main+0x12d8>)
 800156a:	fba3 1302 	umull	r1, r3, r3, r2
 800156e:	08d9      	lsrs	r1, r3, #3
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3330      	adds	r3, #48	; 0x30
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b9f      	ldr	r3, [pc, #636]	; (8001800 <main+0x12d4>)
 8001582:	705a      	strb	r2, [r3, #1]
									s_pn_uidlengthdata[2] = 0x30+(uidLength%10);
 8001584:	4b99      	ldr	r3, [pc, #612]	; (80017ec <main+0x12c0>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b9e      	ldr	r3, [pc, #632]	; (8001804 <main+0x12d8>)
 800158a:	fba3 1302 	umull	r1, r3, r3, r2
 800158e:	08d9      	lsrs	r1, r3, #3
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3330      	adds	r3, #48	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b97      	ldr	r3, [pc, #604]	; (8001800 <main+0x12d4>)
 80015a2:	709a      	strb	r2, [r3, #2]

									Usart2_SendData(s_pn_foundcard,strlen(s_pn_foundcard));
 80015a4:	4898      	ldr	r0, [pc, #608]	; (8001808 <main+0x12dc>)
 80015a6:	f7fe fdd1 	bl	800014c <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4896      	ldr	r0, [pc, #600]	; (8001808 <main+0x12dc>)
 80015b0:	f004 fa30 	bl	8005a14 <Usart2_SendData>

									Usart2_SendData(s_pn_uidlength,strlen(s_pn_uidlength));
 80015b4:	4895      	ldr	r0, [pc, #596]	; (800180c <main+0x12e0>)
 80015b6:	f7fe fdc9 	bl	800014c <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	4893      	ldr	r0, [pc, #588]	; (800180c <main+0x12e0>)
 80015c0:	f004 fa28 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_pn_uidlengthdata,strlen(s_pn_uidlengthdata));
 80015c4:	488e      	ldr	r0, [pc, #568]	; (8001800 <main+0x12d4>)
 80015c6:	f7fe fdc1 	bl	800014c <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	488c      	ldr	r0, [pc, #560]	; (8001800 <main+0x12d4>)
 80015d0:	f004 fa20 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 80015d4:	488e      	ldr	r0, [pc, #568]	; (8001810 <main+0x12e4>)
 80015d6:	f7fe fdb9 	bl	800014c <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	4619      	mov	r1, r3
 80015de:	488c      	ldr	r0, [pc, #560]	; (8001810 <main+0x12e4>)
 80015e0:	f004 fa18 	bl	8005a14 <Usart2_SendData>

									b_hextostr = fourbytes2strhex (&uid[0], &uidhex2pc4b[0]);
 80015e4:	498b      	ldr	r1, [pc, #556]	; (8001814 <main+0x12e8>)
 80015e6:	4882      	ldr	r0, [pc, #520]	; (80017f0 <main+0x12c4>)
 80015e8:	f000 ff9a 	bl	8002520 <fourbytes2strhex>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b89      	ldr	r3, [pc, #548]	; (8001818 <main+0x12ec>)
 80015f2:	701a      	strb	r2, [r3, #0]

									Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 80015f4:	4889      	ldr	r0, [pc, #548]	; (800181c <main+0x12f0>)
 80015f6:	f7fe fda9 	bl	800014c <strlen>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4887      	ldr	r0, [pc, #540]	; (800181c <main+0x12f0>)
 8001600:	f004 fa08 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(uidhex2pc4b,strlen(uidhex2pc4b));
 8001604:	4883      	ldr	r0, [pc, #524]	; (8001814 <main+0x12e8>)
 8001606:	f7fe fda1 	bl	800014c <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	4619      	mov	r1, r3
 800160e:	4881      	ldr	r0, [pc, #516]	; (8001814 <main+0x12e8>)
 8001610:	f004 fa00 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8001614:	487e      	ldr	r0, [pc, #504]	; (8001810 <main+0x12e4>)
 8001616:	f7fe fd99 	bl	800014c <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	4619      	mov	r1, r3
 800161e:	487c      	ldr	r0, [pc, #496]	; (8001810 <main+0x12e4>)
 8001620:	f004 f9f8 	bl	8005a14 <Usart2_SendData>

									decuid = UIDResponse(&uid[0], uidLength);
 8001624:	4b71      	ldr	r3, [pc, #452]	; (80017ec <main+0x12c0>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4871      	ldr	r0, [pc, #452]	; (80017f0 <main+0x12c4>)
 800162c:	f000 ffec 	bl	8002608 <UIDResponse>
 8001630:	4603      	mov	r3, r0
 8001632:	4a7b      	ldr	r2, [pc, #492]	; (8001820 <main+0x12f4>)
 8001634:	6013      	str	r3, [r2, #0]

									timer = RTC_GET_COUNTER();
 8001636:	f002 fc63 	bl	8003f00 <RTC_GET_COUNTER>
 800163a:	4603      	mov	r3, r0
 800163c:	4a79      	ldr	r2, [pc, #484]	; (8001824 <main+0x12f8>)
 800163e:	6013      	str	r3, [r2, #0]
					 				timer_to_cal(timer, &rtc_time);
 8001640:	4b78      	ldr	r3, [pc, #480]	; (8001824 <main+0x12f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1d3a      	adds	r2, r7, #4
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f002 fcb3 	bl	8003fb4 <timer_to_cal>
					 				tim = cal_to_timer(&rtc_time);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fd99 	bl	8004188 <cal_to_timer>
 8001656:	4603      	mov	r3, r0
 8001658:	4a73      	ldr	r2, [pc, #460]	; (8001828 <main+0x12fc>)
 800165a:	6013      	str	r3, [r2, #0]
								//	nfctflash = (uint64_t)decuid;
									nfc_conv2Flash(tim, decuid);
 800165c:	4b72      	ldr	r3, [pc, #456]	; (8001828 <main+0x12fc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6f      	ldr	r2, [pc, #444]	; (8001820 <main+0x12f4>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fa02 	bl	8002a70 <nfc_conv2Flash>

									s_pn_uiddecdata[0] = 0x30+(decuid/1000000000);
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <main+0x12f4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0a5b      	lsrs	r3, r3, #9
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <main+0x1300>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	09db      	lsrs	r3, r3, #7
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3330      	adds	r3, #48	; 0x30
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <main+0x1304>)
 8001682:	701a      	strb	r2, [r3, #0]
									s_pn_uiddecdata[1] = 0x30+(decuid/100000000%10);
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <main+0x12f4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6a      	ldr	r2, [pc, #424]	; (8001834 <main+0x1308>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0e59      	lsrs	r1, r3, #25
 8001690:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <main+0x12d8>)
 8001692:	fba3 2301 	umull	r2, r3, r3, r1
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	1aca      	subs	r2, r1, r3
 80016a2:	b2d3      	uxtb	r3, r2
 80016a4:	3330      	adds	r3, #48	; 0x30
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b61      	ldr	r3, [pc, #388]	; (8001830 <main+0x1304>)
 80016aa:	705a      	strb	r2, [r3, #1]
									s_pn_uiddecdata[2] = 0x30+(decuid/10000000%10);
 80016ac:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <main+0x12f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a61      	ldr	r2, [pc, #388]	; (8001838 <main+0x130c>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0d99      	lsrs	r1, r3, #22
 80016b8:	4b52      	ldr	r3, [pc, #328]	; (8001804 <main+0x12d8>)
 80016ba:	fba3 2301 	umull	r2, r3, r3, r1
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	1aca      	subs	r2, r1, r3
 80016ca:	b2d3      	uxtb	r3, r2
 80016cc:	3330      	adds	r3, #48	; 0x30
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <main+0x1304>)
 80016d2:	709a      	strb	r2, [r3, #2]
									s_pn_uiddecdata[3] = 0x30+(decuid/1000000%10);
 80016d4:	4b52      	ldr	r3, [pc, #328]	; (8001820 <main+0x12f4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a58      	ldr	r2, [pc, #352]	; (800183c <main+0x1310>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0c99      	lsrs	r1, r3, #18
 80016e0:	4b48      	ldr	r3, [pc, #288]	; (8001804 <main+0x12d8>)
 80016e2:	fba3 2301 	umull	r2, r3, r3, r1
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	1aca      	subs	r2, r1, r3
 80016f2:	b2d3      	uxtb	r3, r2
 80016f4:	3330      	adds	r3, #48	; 0x30
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <main+0x1304>)
 80016fa:	70da      	strb	r2, [r3, #3]
									s_pn_uiddecdata[4] = 0x30+(decuid/100000%10);
 80016fc:	4b48      	ldr	r3, [pc, #288]	; (8001820 <main+0x12f4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <main+0x1314>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	09d9      	lsrs	r1, r3, #7
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <main+0x12d8>)
 800170c:	fba3 2301 	umull	r2, r3, r3, r1
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	1aca      	subs	r2, r1, r3
 800171c:	b2d3      	uxtb	r3, r2
 800171e:	3330      	adds	r3, #48	; 0x30
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b43      	ldr	r3, [pc, #268]	; (8001830 <main+0x1304>)
 8001724:	711a      	strb	r2, [r3, #4]
									s_pn_uiddecdata[5] = 0x30+(decuid/10000%10);
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <main+0x12f4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a46      	ldr	r2, [pc, #280]	; (8001844 <main+0x1318>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	0b59      	lsrs	r1, r3, #13
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <main+0x12d8>)
 8001734:	fba3 2301 	umull	r2, r3, r3, r1
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	1aca      	subs	r2, r1, r3
 8001744:	b2d3      	uxtb	r3, r2
 8001746:	3330      	adds	r3, #48	; 0x30
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <main+0x1304>)
 800174c:	715a      	strb	r2, [r3, #5]
									s_pn_uiddecdata[6] = 0x30+(decuid/1000%10);
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <main+0x12f4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <main+0x131c>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0999      	lsrs	r1, r3, #6
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <main+0x12d8>)
 800175c:	fba3 2301 	umull	r2, r3, r3, r1
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	1aca      	subs	r2, r1, r3
 800176c:	b2d3      	uxtb	r3, r2
 800176e:	3330      	adds	r3, #48	; 0x30
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <main+0x1304>)
 8001774:	719a      	strb	r2, [r3, #6]
									s_pn_uiddecdata[7] = 0x30+(decuid/100%10);
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <main+0x12f4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a20      	ldr	r2, [pc, #128]	; (80017fc <main+0x12d0>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0959      	lsrs	r1, r3, #5
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <main+0x12d8>)
 8001784:	fba3 2301 	umull	r2, r3, r3, r1
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1aca      	subs	r2, r1, r3
 8001794:	b2d3      	uxtb	r3, r2
 8001796:	3330      	adds	r3, #48	; 0x30
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <main+0x1304>)
 800179c:	71da      	strb	r2, [r3, #7]
									s_pn_uiddecdata[8] = 0x30+(decuid/10%10);
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <main+0x12f4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a18      	ldr	r2, [pc, #96]	; (8001804 <main+0x12d8>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	08d9      	lsrs	r1, r3, #3
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <main+0x12d8>)
 80017ac:	fba3 2301 	umull	r2, r3, r3, r1
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	1aca      	subs	r2, r1, r3
 80017bc:	b2d3      	uxtb	r3, r2
 80017be:	3330      	adds	r3, #48	; 0x30
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <main+0x1304>)
 80017c4:	721a      	strb	r2, [r3, #8]
									s_pn_uiddecdata[9] = 0x30+(decuid%10);
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <main+0x12f4>)
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <main+0x12d8>)
 80017cc:	fba3 2301 	umull	r2, r3, r3, r1
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	1aca      	subs	r2, r1, r3
 80017dc:	b2d3      	uxtb	r3, r2
 80017de:	3330      	adds	r3, #48	; 0x30
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	e033      	b.n	800184c <main+0x1320>
 80017e4:	200007c8 	.word	0x200007c8
 80017e8:	200006ac 	.word	0x200006ac
 80017ec:	200006a4 	.word	0x200006a4
 80017f0:	20000694 	.word	0x20000694
 80017f4:	20000692 	.word	0x20000692
 80017f8:	20000691 	.word	0x20000691
 80017fc:	51eb851f 	.word	0x51eb851f
 8001800:	200001ac 	.word	0x200001ac
 8001804:	cccccccd 	.word	0xcccccccd
 8001808:	2000016c 	.word	0x2000016c
 800180c:	20000180 	.word	0x20000180
 8001810:	20000168 	.word	0x20000168
 8001814:	2000000c 	.word	0x2000000c
 8001818:	20000693 	.word	0x20000693
 800181c:	20000198 	.word	0x20000198
 8001820:	200006a8 	.word	0x200006a8
 8001824:	20000338 	.word	0x20000338
 8001828:	2000085c 	.word	0x2000085c
 800182c:	00044b83 	.word	0x00044b83
 8001830:	200001b0 	.word	0x200001b0
 8001834:	55e63b89 	.word	0x55e63b89
 8001838:	6b5fca6b 	.word	0x6b5fca6b
 800183c:	431bde83 	.word	0x431bde83
 8001840:	0a7c5ac5 	.word	0x0a7c5ac5
 8001844:	d1b71759 	.word	0xd1b71759
 8001848:	10624dd3 	.word	0x10624dd3
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <main+0x140c>)
 800184e:	725a      	strb	r2, [r3, #9]

									Usart2_SendData(s_pn_uiddecvalue,strlen(s_pn_uiddecvalue));
 8001850:	483a      	ldr	r0, [pc, #232]	; (800193c <main+0x1410>)
 8001852:	f7fe fc7b 	bl	800014c <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	4838      	ldr	r0, [pc, #224]	; (800193c <main+0x1410>)
 800185c:	f004 f8da 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_pn_uiddecdata,strlen(s_pn_uiddecdata));
 8001860:	4835      	ldr	r0, [pc, #212]	; (8001938 <main+0x140c>)
 8001862:	f7fe fc73 	bl	800014c <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	4833      	ldr	r0, [pc, #204]	; (8001938 <main+0x140c>)
 800186c:	f004 f8d2 	bl	8005a14 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8001870:	4833      	ldr	r0, [pc, #204]	; (8001940 <main+0x1414>)
 8001872:	f7fe fc6b 	bl	800014c <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	4619      	mov	r1, r3
 800187a:	4831      	ldr	r0, [pc, #196]	; (8001940 <main+0x1414>)
 800187c:	f004 f8ca 	bl	8005a14 <Usart2_SendData>
									//memset(g_sBarCode,0,strlen(g_sBarCode));
									//strlcpy ( g_sBarCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );


									//if(b_firstrddata==DISABLE){
										LCD_SetCursor ( LCD_CURSOR_1STR );
 8001880:	2080      	movs	r0, #128	; 0x80
 8001882:	f001 fa19 	bl	8002cb8 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8001886:	482f      	ldr	r0, [pc, #188]	; (8001944 <main+0x1418>)
 8001888:	f001 fac6 	bl	8002e18 <LCD_WriteString>
										LCD_SetCursor ( LCD_CURSOR_2STR );
 800188c:	20c0      	movs	r0, #192	; 0xc0
 800188e:	f001 fa13 	bl	8002cb8 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8001892:	482c      	ldr	r0, [pc, #176]	; (8001944 <main+0x1418>)
 8001894:	f001 fac0 	bl	8002e18 <LCD_WriteString>
										//b_firstrddata=ENABLE;

									//}

									memset(g_sNfcCode,0,strlen(g_sNfcCode));
 8001898:	482b      	ldr	r0, [pc, #172]	; (8001948 <main+0x141c>)
 800189a:	f7fe fc57 	bl	800014c <strlen>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	4828      	ldr	r0, [pc, #160]	; (8001948 <main+0x141c>)
 80018a6:	f004 fb61 	bl	8005f6c <memset>

									  strlcpy ( g_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 80018aa:	221a      	movs	r2, #26
 80018ac:	4927      	ldr	r1, [pc, #156]	; (800194c <main+0x1420>)
 80018ae:	4826      	ldr	r0, [pc, #152]	; (8001948 <main+0x141c>)
 80018b0:	f004 fb7b 	bl	8005faa <strlcpy>
									  strcat(g_sNfcCode, s_pn_uiddecdata );
 80018b4:	4920      	ldr	r1, [pc, #128]	; (8001938 <main+0x140c>)
 80018b6:	4824      	ldr	r0, [pc, #144]	; (8001948 <main+0x141c>)
 80018b8:	f004 fb60 	bl	8005f7c <strcat>

									//strlcpy ( g_sNfcCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );

									//LCD_SetCursor ( LCD_CURSOR_1STR );
									//LCD_WriteString ( s_lcd_nfc );
									LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 0 );
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7148 	mov.w	r1, #800	; 0x320
 80018c2:	4821      	ldr	r0, [pc, #132]	; (8001948 <main+0x141c>)
 80018c4:	f001 fc70 	bl	80031a8 <LCD_RunStringNFCCode>


								//	PN532_WriteID();
									pn532_rd_stat=PN532_Read_Data(uid,uidLength,1,  rdDataBlock);
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <main+0x1424>)
 80018ca:	7819      	ldrb	r1, [r3, #0]
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <main+0x1428>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	4821      	ldr	r0, [pc, #132]	; (8001958 <main+0x142c>)
 80018d2:	f002 fa41 	bl	8003d58 <PN532_Read_Data>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <main+0x1430>)
 80018dc:	701a      	strb	r2, [r3, #0]

									switch(pn532_rd_stat){
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <main+0x1430>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d040      	beq.n	8001968 <main+0x143c>
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	dc4f      	bgt.n	800198a <main+0x145e>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <main+0x13c8>
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d011      	beq.n	8001916 <main+0x13ea>
 80018f2:	e04a      	b.n	800198a <main+0x145e>
									case 0:
										Usart2_SendData(s_pc_PN532_info1,strlen(s_pc_PN532_info1));
 80018f4:	481a      	ldr	r0, [pc, #104]	; (8001960 <main+0x1434>)
 80018f6:	f7fe fc29 	bl	800014c <strlen>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4818      	ldr	r0, [pc, #96]	; (8001960 <main+0x1434>)
 8001900:	f004 f888 	bl	8005a14 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001904:	480e      	ldr	r0, [pc, #56]	; (8001940 <main+0x1414>)
 8001906:	f7fe fc21 	bl	800014c <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	480c      	ldr	r0, [pc, #48]	; (8001940 <main+0x1414>)
 8001910:	f004 f880 	bl	8005a14 <Usart2_SendData>
										break;
 8001914:	e039      	b.n	800198a <main+0x145e>
									case 1:
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 8001916:	4813      	ldr	r0, [pc, #76]	; (8001964 <main+0x1438>)
 8001918:	f7fe fc18 	bl	800014c <strlen>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	4810      	ldr	r0, [pc, #64]	; (8001964 <main+0x1438>)
 8001922:	f004 f877 	bl	8005a14 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <main+0x1414>)
 8001928:	f7fe fc10 	bl	800014c <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	4619      	mov	r1, r3
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <main+0x1414>)
 8001932:	f004 f86f 	bl	8005a14 <Usart2_SendData>
										break;
 8001936:	e028      	b.n	800198a <main+0x145e>
 8001938:	200001b0 	.word	0x200001b0
 800193c:	200001bc 	.word	0x200001bc
 8001940:	20000168 	.word	0x20000168
 8001944:	200000b4 	.word	0x200000b4
 8001948:	20000564 	.word	0x20000564
 800194c:	200000e0 	.word	0x200000e0
 8001950:	200006a4 	.word	0x200006a4
 8001954:	200007cc 	.word	0x200007cc
 8001958:	20000694 	.word	0x20000694
 800195c:	200006c1 	.word	0x200006c1
 8001960:	20000238 	.word	0x20000238
 8001964:	20000270 	.word	0x20000270
									case 2:
										Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8001968:	48b3      	ldr	r0, [pc, #716]	; (8001c38 <main+0x170c>)
 800196a:	f7fe fbef 	bl	800014c <strlen>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	48b1      	ldr	r0, [pc, #708]	; (8001c38 <main+0x170c>)
 8001974:	f004 f84e 	bl	8005a14 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001978:	48b0      	ldr	r0, [pc, #704]	; (8001c3c <main+0x1710>)
 800197a:	f7fe fbe7 	bl	800014c <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	4619      	mov	r1, r3
 8001982:	48ae      	ldr	r0, [pc, #696]	; (8001c3c <main+0x1710>)
 8001984:	f004 f846 	bl	8005a14 <Usart2_SendData>
										break;
 8001988:	bf00      	nop
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
										Usart2_SendData(s_newline,strlen(s_newline));
									}
								*/

									Usart2_SendData(s_pn_data_block0,strlen(s_pn_data_block0));
 800198a:	48ad      	ldr	r0, [pc, #692]	; (8001c40 <main+0x1714>)
 800198c:	f7fe fbde 	bl	800014c <strlen>
 8001990:	4603      	mov	r3, r0
 8001992:	4619      	mov	r1, r3
 8001994:	48aa      	ldr	r0, [pc, #680]	; (8001c40 <main+0x1714>)
 8001996:	f004 f83d 	bl	8005a14 <Usart2_SendData>


									//if(pn532_rd_stat==0){
									BytesHex2Str(rdDataBlock, sizeof(rdDataBlock), DataHex2pc);
 800199a:	4aaa      	ldr	r2, [pc, #680]	; (8001c44 <main+0x1718>)
 800199c:	2110      	movs	r1, #16
 800199e:	48aa      	ldr	r0, [pc, #680]	; (8001c48 <main+0x171c>)
 80019a0:	f000 fe64 	bl	800266c <BytesHex2Str>
										Usart2_SendData(DataHex2pc,sizeof(DataHex2pc));
 80019a4:	212f      	movs	r1, #47	; 0x2f
 80019a6:	48a7      	ldr	r0, [pc, #668]	; (8001c44 <main+0x1718>)
 80019a8:	f004 f834 	bl	8005a14 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 80019ac:	48a3      	ldr	r0, [pc, #652]	; (8001c3c <main+0x1710>)
 80019ae:	f7fe fbcd 	bl	800014c <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4619      	mov	r1, r3
 80019b6:	48a1      	ldr	r0, [pc, #644]	; (8001c3c <main+0x1710>)
 80019b8:	f004 f82c 	bl	8005a14 <Usart2_SendData>

									//}
										timer = RTC_GET_COUNTER();
 80019bc:	f002 faa0 	bl	8003f00 <RTC_GET_COUNTER>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4aa2      	ldr	r2, [pc, #648]	; (8001c4c <main+0x1720>)
 80019c4:	6013      	str	r3, [r2, #0]
										timer_to_cal(timer, &rtc_time);
 80019c6:	4ba1      	ldr	r3, [pc, #644]	; (8001c4c <main+0x1720>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1d3a      	adds	r2, r7, #4
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 faf0 	bl	8003fb4 <timer_to_cal>
										tim = cal_to_timer(&rtc_time);
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fbd6 	bl	8004188 <cal_to_timer>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a9c      	ldr	r2, [pc, #624]	; (8001c50 <main+0x1724>)
 80019e0:	6013      	str	r3, [r2, #0]

										//*xxx*yyyy-MM-dd HH:mm:ss

										s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a9b      	ldr	r2, [pc, #620]	; (8001c54 <main+0x1728>)
 80019e6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ea:	1192      	asrs	r2, r2, #6
 80019ec:	17db      	asrs	r3, r3, #31
 80019ee:	1ad2      	subs	r2, r2, r3
 80019f0:	4b99      	ldr	r3, [pc, #612]	; (8001c58 <main+0x172c>)
 80019f2:	fb83 1302 	smull	r1, r3, r3, r2
 80019f6:	1099      	asrs	r1, r3, #2
 80019f8:	17d3      	asrs	r3, r2, #31
 80019fa:	1ac9      	subs	r1, r1, r3
 80019fc:	460b      	mov	r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	1ad1      	subs	r1, r2, r3
 8001a06:	b2cb      	uxtb	r3, r1
 8001a08:	3330      	adds	r3, #48	; 0x30
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <main+0x1730>)
 8001a0e:	701a      	strb	r2, [r3, #0]
										s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a93      	ldr	r2, [pc, #588]	; (8001c60 <main+0x1734>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	1152      	asrs	r2, r2, #5
 8001a1a:	17db      	asrs	r3, r3, #31
 8001a1c:	1ad2      	subs	r2, r2, r3
 8001a1e:	4b8e      	ldr	r3, [pc, #568]	; (8001c58 <main+0x172c>)
 8001a20:	fb83 1302 	smull	r1, r3, r3, r2
 8001a24:	1099      	asrs	r1, r3, #2
 8001a26:	17d3      	asrs	r3, r2, #31
 8001a28:	1ac9      	subs	r1, r1, r3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1ad1      	subs	r1, r2, r3
 8001a34:	b2cb      	uxtb	r3, r1
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <main+0x1730>)
 8001a3c:	705a      	strb	r2, [r3, #1]
										s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a85      	ldr	r2, [pc, #532]	; (8001c58 <main+0x172c>)
 8001a42:	fb82 1203 	smull	r1, r2, r2, r3
 8001a46:	1092      	asrs	r2, r2, #2
 8001a48:	17db      	asrs	r3, r3, #31
 8001a4a:	1ad2      	subs	r2, r2, r3
 8001a4c:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <main+0x172c>)
 8001a4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a52:	1099      	asrs	r1, r3, #2
 8001a54:	17d3      	asrs	r3, r2, #31
 8001a56:	1ac9      	subs	r1, r1, r3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	1ad1      	subs	r1, r2, r3
 8001a62:	b2cb      	uxtb	r3, r1
 8001a64:	3330      	adds	r3, #48	; 0x30
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <main+0x1730>)
 8001a6a:	709a      	strb	r2, [r3, #2]
										s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <main+0x172c>)
 8001a70:	fb83 1302 	smull	r1, r3, r3, r2
 8001a74:	1099      	asrs	r1, r3, #2
 8001a76:	17d3      	asrs	r3, r2, #31
 8001a78:	1ac9      	subs	r1, r1, r3
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	1ad1      	subs	r1, r2, r3
 8001a84:	b2cb      	uxtb	r3, r1
 8001a86:	3330      	adds	r3, #48	; 0x30
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <main+0x1730>)
 8001a8c:	70da      	strb	r2, [r3, #3]

										s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8001a8e:	7a3b      	ldrb	r3, [r7, #8]
 8001a90:	4a74      	ldr	r2, [pc, #464]	; (8001c64 <main+0x1738>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3330      	adds	r3, #48	; 0x30
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <main+0x1730>)
 8001aa0:	715a      	strb	r2, [r3, #5]
										s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8001aa2:	7a3a      	ldrb	r2, [r7, #8]
 8001aa4:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <main+0x1738>)
 8001aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aaa:	08d9      	lsrs	r1, r3, #3
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3330      	adds	r3, #48	; 0x30
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <main+0x1730>)
 8001abe:	719a      	strb	r2, [r3, #6]

										s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001ac0:	7a7b      	ldrb	r3, [r7, #9]
 8001ac2:	4a68      	ldr	r2, [pc, #416]	; (8001c64 <main+0x1738>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	3330      	adds	r3, #48	; 0x30
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <main+0x1730>)
 8001ad2:	721a      	strb	r2, [r3, #8]
										s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8001ad4:	7a7a      	ldrb	r2, [r7, #9]
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <main+0x1738>)
 8001ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8001adc:	08d9      	lsrs	r1, r3, #3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3330      	adds	r3, #48	; 0x30
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <main+0x1730>)
 8001af0:	725a      	strb	r2, [r3, #9]

										s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001af2:	7abb      	ldrb	r3, [r7, #10]
 8001af4:	4a5b      	ldr	r2, [pc, #364]	; (8001c64 <main+0x1738>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	08db      	lsrs	r3, r3, #3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3330      	adds	r3, #48	; 0x30
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <main+0x1730>)
 8001b04:	72da      	strb	r2, [r3, #11]
										s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001b06:	7aba      	ldrb	r2, [r7, #10]
 8001b08:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <main+0x1738>)
 8001b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b0e:	08d9      	lsrs	r1, r3, #3
 8001b10:	460b      	mov	r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3330      	adds	r3, #48	; 0x30
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <main+0x1730>)
 8001b22:	731a      	strb	r2, [r3, #12]

										s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001b24:	7afb      	ldrb	r3, [r7, #11]
 8001b26:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <main+0x1738>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3330      	adds	r3, #48	; 0x30
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <main+0x1730>)
 8001b36:	739a      	strb	r2, [r3, #14]
										s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8001b38:	7afa      	ldrb	r2, [r7, #11]
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <main+0x1738>)
 8001b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b40:	08d9      	lsrs	r1, r3, #3
 8001b42:	460b      	mov	r3, r1
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3330      	adds	r3, #48	; 0x30
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <main+0x1730>)
 8001b54:	73da      	strb	r2, [r3, #15]

										s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8001b56:	7b3b      	ldrb	r3, [r7, #12]
 8001b58:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <main+0x1738>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	3330      	adds	r3, #48	; 0x30
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <main+0x1730>)
 8001b68:	745a      	strb	r2, [r3, #17]
										s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8001b6a:	7b3a      	ldrb	r2, [r7, #12]
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <main+0x1738>)
 8001b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b72:	08d9      	lsrs	r1, r3, #3
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3330      	adds	r3, #48	; 0x30
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <main+0x1730>)
 8001b86:	749a      	strb	r2, [r3, #18]

										strncat(s_nfc_tag_date, s_cal_data, 19);
 8001b88:	2213      	movs	r2, #19
 8001b8a:	4934      	ldr	r1, [pc, #208]	; (8001c5c <main+0x1730>)
 8001b8c:	4836      	ldr	r0, [pc, #216]	; (8001c68 <main+0x173c>)
 8001b8e:	f004 fa21 	bl	8005fd4 <strncat>
										strncat(s_nfc_tag_date, s_space, strlen(s_space));
 8001b92:	2300      	movs	r3, #0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4935      	ldr	r1, [pc, #212]	; (8001c6c <main+0x1740>)
 8001b98:	4833      	ldr	r0, [pc, #204]	; (8001c68 <main+0x173c>)
 8001b9a:	f004 fa1b 	bl	8005fd4 <strncat>
										strncat(s_nfc_tag_date, g_sNfcCode, strlen(g_sNfcCode));
 8001b9e:	4834      	ldr	r0, [pc, #208]	; (8001c70 <main+0x1744>)
 8001ba0:	f7fe fad4 	bl	800014c <strlen>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4931      	ldr	r1, [pc, #196]	; (8001c70 <main+0x1744>)
 8001baa:	482f      	ldr	r0, [pc, #188]	; (8001c68 <main+0x173c>)
 8001bac:	f004 fa12 	bl	8005fd4 <strncat>
										strncat(s_nfc_tag_date, s_newline, strlen(s_newline));
 8001bb0:	4822      	ldr	r0, [pc, #136]	; (8001c3c <main+0x1710>)
 8001bb2:	f7fe facb 	bl	800014c <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4920      	ldr	r1, [pc, #128]	; (8001c3c <main+0x1710>)
 8001bbc:	482a      	ldr	r0, [pc, #168]	; (8001c68 <main+0x173c>)
 8001bbe:	f004 fa09 	bl	8005fd4 <strncat>



									//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
										Usart2_SendData(s_nfc_tag_date,strlen(s_nfc_tag_date));
 8001bc2:	4829      	ldr	r0, [pc, #164]	; (8001c68 <main+0x173c>)
 8001bc4:	f7fe fac2 	bl	800014c <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4826      	ldr	r0, [pc, #152]	; (8001c68 <main+0x173c>)
 8001bce:	f003 ff21 	bl	8005a14 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8001bd2:	481a      	ldr	r0, [pc, #104]	; (8001c3c <main+0x1710>)
 8001bd4:	f7fe faba 	bl	800014c <strlen>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4817      	ldr	r0, [pc, #92]	; (8001c3c <main+0x1710>)
 8001bde:	f003 ff19 	bl	8005a14 <Usart2_SendData>

										memset(s_nfc_tag_date, 0, strlen(s_nfc_tag_date));
 8001be2:	4821      	ldr	r0, [pc, #132]	; (8001c68 <main+0x173c>)
 8001be4:	f7fe fab2 	bl	800014c <strlen>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	2100      	movs	r1, #0
 8001bee:	481e      	ldr	r0, [pc, #120]	; (8001c68 <main+0x173c>)
 8001bf0:	f004 f9bc 	bl	8005f6c <memset>

								}
								if(!success)
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <main+0x1748>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <main+0x16d6>
								{

									//Usart2_SendData(s_pn_notfoundcard,sizeof(s_pn_notfoundcard));
									b_discannfc=0;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <main+0x174c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]

								}

								cntlooppn532=0;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <main+0x1750>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
							}//конец if(cntlooppn532==CNT_LOOP_PN532)

							cntlooppn532++;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <main+0x1750>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <main+0x1750>)
 8001c10:	6013      	str	r3, [r2, #0]

							LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 1 );
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001c18:	4815      	ldr	r0, [pc, #84]	; (8001c70 <main+0x1744>)
 8001c1a:	f001 fac5 	bl	80031a8 <LCD_RunStringNFCCode>
 8001c1e:	e03d      	b.n	8001c9c <main+0x1770>

		}//конец если не режим записи метки NFC
		else{ //если режим записи метки NFC


			if(!b_1secflg){
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <main+0x1754>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12f      	bne.n	8001c88 <main+0x175c>
				LCD_SetCursor ( LCD_CURSOR_2STR );
 8001c28:	20c0      	movs	r0, #192	; 0xc0
 8001c2a:	f001 f845 	bl	8002cb8 <LCD_SetCursor>
				LCD_WriteString (uidnfcwrdara );
 8001c2e:	4815      	ldr	r0, [pc, #84]	; (8001c84 <main+0x1758>)
 8001c30:	f001 f8f2 	bl	8002e18 <LCD_WriteString>
 8001c34:	e032      	b.n	8001c9c <main+0x1770>
 8001c36:	bf00      	nop
 8001c38:	200002d8 	.word	0x200002d8
 8001c3c:	20000168 	.word	0x20000168
 8001c40:	20000324 	.word	0x20000324
 8001c44:	200002f4 	.word	0x200002f4
 8001c48:	200007cc 	.word	0x200007cc
 8001c4c:	20000338 	.word	0x20000338
 8001c50:	2000085c 	.word	0x2000085c
 8001c54:	10624dd3 	.word	0x10624dd3
 8001c58:	66666667 	.word	0x66666667
 8001c5c:	20000220 	.word	0x20000220
 8001c60:	51eb851f 	.word	0x51eb851f
 8001c64:	cccccccd 	.word	0xcccccccd
 8001c68:	2000081c 	.word	0x2000081c
 8001c6c:	200001d0 	.word	0x200001d0
 8001c70:	20000564 	.word	0x20000564
 8001c74:	20000692 	.word	0x20000692
 8001c78:	20000691 	.word	0x20000691
 8001c7c:	200006ac 	.word	0x200006ac
 8001c80:	200006b0 	.word	0x200006b0
 8001c84:	20000020 	.word	0x20000020

			}
			else{
				LCD_SetCursor ( LCD_CURSOR_2STR+u8_cntindex );
 8001c88:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <main+0x1910>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3b40      	subs	r3, #64	; 0x40
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 f811 	bl	8002cb8 <LCD_SetCursor>
				LCD_WriteString (s_space);
 8001c96:	486a      	ldr	r0, [pc, #424]	; (8001e40 <main+0x1914>)
 8001c98:	f001 f8be 	bl	8002e18 <LCD_WriteString>

			}
		}


		if(u8_wrnfcstatus!=0 && b_wrstr1==TRUE){
 8001c9c:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <main+0x1918>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01a      	beq.n	8001cda <main+0x17ae>
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <main+0x191c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d116      	bne.n	8001cda <main+0x17ae>
			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8001cac:	4867      	ldr	r0, [pc, #412]	; (8001e4c <main+0x1920>)
 8001cae:	f7fe fa4d 	bl	800014c <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4864      	ldr	r0, [pc, #400]	; (8001e4c <main+0x1920>)
 8001cba:	f004 f957 	bl	8005f6c <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_wrnfc, USB_STATE_LEN );
 8001cbe:	221a      	movs	r2, #26
 8001cc0:	4963      	ldr	r1, [pc, #396]	; (8001e50 <main+0x1924>)
 8001cc2:	4862      	ldr	r0, [pc, #392]	; (8001e4c <main+0x1920>)
 8001cc4:	f004 f971 	bl	8005faa <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001cce:	485f      	ldr	r0, [pc, #380]	; (8001e4c <main+0x1920>)
 8001cd0:	f001 f9d6 	bl	8003080 <LCD_RunStringBARCode>
			  b_wrstr1=FALSE;
 8001cd4:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <main+0x191c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
		}

		LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 1 );
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001ce0:	485a      	ldr	r0, [pc, #360]	; (8001e4c <main+0x1920>)
 8001ce2:	f001 f9cd 	bl	8003080 <LCD_RunStringBARCode>

		if(u8_wrnfcstatus==9){
 8001ce6:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <main+0x1918>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b09      	cmp	r3, #9
 8001cec:	f47e af0a 	bne.w	8000b04 <main+0x5d8>
			PN532_WriteTagtoHex();
 8001cf0:	f000 fd20 	bl	8002734 <PN532_WriteTagtoHex>

			//b_hextostr = fourbytes2strhex (&outwrdata[0], &uidhex2pc4b[0]);

			Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 8001cf4:	4857      	ldr	r0, [pc, #348]	; (8001e54 <main+0x1928>)
 8001cf6:	f7fe fa29 	bl	800014c <strlen>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4855      	ldr	r0, [pc, #340]	; (8001e54 <main+0x1928>)
 8001d00:	f003 fe88 	bl	8005a14 <Usart2_SendData>
			Usart2_SendData(outwrdata,sizeof(outwrdata));
 8001d04:	2104      	movs	r1, #4
 8001d06:	4854      	ldr	r0, [pc, #336]	; (8001e58 <main+0x192c>)
 8001d08:	f003 fe84 	bl	8005a14 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8001d0c:	4853      	ldr	r0, [pc, #332]	; (8001e5c <main+0x1930>)
 8001d0e:	f7fe fa1d 	bl	800014c <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4851      	ldr	r0, [pc, #324]	; (8001e5c <main+0x1930>)
 8001d18:	f003 fe7c 	bl	8005a14 <Usart2_SendData>

			pn532_wr_stat=PN532_Write_Data(uid,uidLength, 1, outwrdata);
 8001d1c:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <main+0x1934>)
 8001d1e:	7819      	ldrb	r1, [r3, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <main+0x192c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	484f      	ldr	r0, [pc, #316]	; (8001e64 <main+0x1938>)
 8001d26:	f7fe fb51 	bl	80003cc <PN532_Write_Data>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <main+0x193c>)
 8001d30:	701a      	strb	r2, [r3, #0]

			switch(pn532_wr_stat){
 8001d32:	4b4d      	ldr	r3, [pc, #308]	; (8001e68 <main+0x193c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d861      	bhi.n	8001dfe <main+0x18d2>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <main+0x1814>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001d55 	.word	0x08001d55
 8001d44:	08001d77 	.word	0x08001d77
 8001d48:	08001d99 	.word	0x08001d99
 8001d4c:	08001dbb 	.word	0x08001dbb
 8001d50:	08001ddd 	.word	0x08001ddd
			case 0:
				Usart2_SendData(s_pc_PN532_info2,strlen(s_pc_PN532_info2));
 8001d54:	4845      	ldr	r0, [pc, #276]	; (8001e6c <main+0x1940>)
 8001d56:	f7fe f9f9 	bl	800014c <strlen>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4843      	ldr	r0, [pc, #268]	; (8001e6c <main+0x1940>)
 8001d60:	f003 fe58 	bl	8005a14 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001d64:	483d      	ldr	r0, [pc, #244]	; (8001e5c <main+0x1930>)
 8001d66:	f7fe f9f1 	bl	800014c <strlen>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	483b      	ldr	r0, [pc, #236]	; (8001e5c <main+0x1930>)
 8001d70:	f003 fe50 	bl	8005a14 <Usart2_SendData>
				break;
 8001d74:	e043      	b.n	8001dfe <main+0x18d2>
			case 1:
				Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 8001d76:	483e      	ldr	r0, [pc, #248]	; (8001e70 <main+0x1944>)
 8001d78:	f7fe f9e8 	bl	800014c <strlen>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	483b      	ldr	r0, [pc, #236]	; (8001e70 <main+0x1944>)
 8001d82:	f003 fe47 	bl	8005a14 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001d86:	4835      	ldr	r0, [pc, #212]	; (8001e5c <main+0x1930>)
 8001d88:	f7fe f9e0 	bl	800014c <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4832      	ldr	r0, [pc, #200]	; (8001e5c <main+0x1930>)
 8001d92:	f003 fe3f 	bl	8005a14 <Usart2_SendData>
				break;
 8001d96:	e032      	b.n	8001dfe <main+0x18d2>
			case 2:
				Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8001d98:	4836      	ldr	r0, [pc, #216]	; (8001e74 <main+0x1948>)
 8001d9a:	f7fe f9d7 	bl	800014c <strlen>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4834      	ldr	r0, [pc, #208]	; (8001e74 <main+0x1948>)
 8001da4:	f003 fe36 	bl	8005a14 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001da8:	482c      	ldr	r0, [pc, #176]	; (8001e5c <main+0x1930>)
 8001daa:	f7fe f9cf 	bl	800014c <strlen>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4619      	mov	r1, r3
 8001db2:	482a      	ldr	r0, [pc, #168]	; (8001e5c <main+0x1930>)
 8001db4:	f003 fe2e 	bl	8005a14 <Usart2_SendData>
				break;
 8001db8:	e021      	b.n	8001dfe <main+0x18d2>
			case 3:
				Usart2_SendData(s_pc_PN532_err2,strlen(s_pc_PN532_err2));
 8001dba:	482f      	ldr	r0, [pc, #188]	; (8001e78 <main+0x194c>)
 8001dbc:	f7fe f9c6 	bl	800014c <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	482c      	ldr	r0, [pc, #176]	; (8001e78 <main+0x194c>)
 8001dc6:	f003 fe25 	bl	8005a14 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001dca:	4824      	ldr	r0, [pc, #144]	; (8001e5c <main+0x1930>)
 8001dcc:	f7fe f9be 	bl	800014c <strlen>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4821      	ldr	r0, [pc, #132]	; (8001e5c <main+0x1930>)
 8001dd6:	f003 fe1d 	bl	8005a14 <Usart2_SendData>
				break;
 8001dda:	e010      	b.n	8001dfe <main+0x18d2>
			case 4:
				Usart2_SendData(s_pc_PN532_err3,strlen(s_pc_PN532_err3));
 8001ddc:	4827      	ldr	r0, [pc, #156]	; (8001e7c <main+0x1950>)
 8001dde:	f7fe f9b5 	bl	800014c <strlen>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4825      	ldr	r0, [pc, #148]	; (8001e7c <main+0x1950>)
 8001de8:	f003 fe14 	bl	8005a14 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8001dec:	481b      	ldr	r0, [pc, #108]	; (8001e5c <main+0x1930>)
 8001dee:	f7fe f9ad 	bl	800014c <strlen>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4619      	mov	r1, r3
 8001df6:	4819      	ldr	r0, [pc, #100]	; (8001e5c <main+0x1930>)
 8001df8:	f003 fe0c 	bl	8005a14 <Usart2_SendData>
				break;
 8001dfc:	bf00      	nop

			}

			//PN532_WriteID();

			u8_wrnfcstatus=0;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <main+0x1918>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8001e04:	4811      	ldr	r0, [pc, #68]	; (8001e4c <main+0x1920>)
 8001e06:	f7fe f9a1 	bl	800014c <strlen>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2100      	movs	r1, #0
 8001e10:	480e      	ldr	r0, [pc, #56]	; (8001e4c <main+0x1920>)
 8001e12:	f004 f8ab 	bl	8005f6c <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_scanner_rdy, USB_STATE_LEN );
 8001e16:	221a      	movs	r2, #26
 8001e18:	4919      	ldr	r1, [pc, #100]	; (8001e80 <main+0x1954>)
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <main+0x1920>)
 8001e1c:	f004 f8c5 	bl	8005faa <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <main+0x1920>)
 8001e28:	f001 f92a 	bl	8003080 <LCD_RunStringBARCode>


			//LCD_SetCursor ( LCD_CURSOR_1STR );
		//	LCD_WriteString (s_lcd_scanner_rdy );

			LCD_SetCursor ( LCD_CURSOR_2STR );
 8001e2c:	20c0      	movs	r0, #192	; 0xc0
 8001e2e:	f000 ff43 	bl	8002cb8 <LCD_SetCursor>
			LCD_WriteString (s_lcd_ready );
 8001e32:	4814      	ldr	r0, [pc, #80]	; (8001e84 <main+0x1958>)
 8001e34:	f000 fff0 	bl	8002e18 <LCD_WriteString>
	while(1){
 8001e38:	f7fe be64 	b.w	8000b04 <main+0x5d8>
 8001e3c:	2000069c 	.word	0x2000069c
 8001e40:	200001d0 	.word	0x200001d0
 8001e44:	200006bf 	.word	0x200006bf
 8001e48:	200006c0 	.word	0x200006c0
 8001e4c:	20000548 	.word	0x20000548
 8001e50:	200000c8 	.word	0x200000c8
 8001e54:	20000198 	.word	0x20000198
 8001e58:	200006a0 	.word	0x200006a0
 8001e5c:	20000168 	.word	0x20000168
 8001e60:	200006a4 	.word	0x200006a4
 8001e64:	20000694 	.word	0x20000694
 8001e68:	200006c2 	.word	0x200006c2
 8001e6c:	20000254 	.word	0x20000254
 8001e70:	20000270 	.word	0x20000270
 8001e74:	200002d8 	.word	0x200002d8
 8001e78:	20000294 	.word	0x20000294
 8001e7c:	200002b0 	.word	0x200002b0
 8001e80:	20000034 	.word	0x20000034
 8001e84:	20000064 	.word	0x20000064

08001e88 <NVIC_EnableIRQ>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2201      	movs	r2, #1
 8001e9a:	fa02 f103 	lsl.w	r1, r2, r3
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <NVIC_EnableIRQ+0x2c>)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <LED_Init>:

NVIC_InitTypeDef        NVIC_InitTmr1Structure;
EXTI_InitTypeDef		EXTI_InitExtiStruct;
NVIC_InitTypeDef		NVIC_InitExtiStruct;

void LED_Init(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0


	/*
	 * EXTI pin configure
	 */
	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	2004      	movs	r0, #4
 8001ec2:	f003 f967 	bl	8005194 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8001eca:	2310      	movs	r3, #16
 8001ecc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
 8001ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed2:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <LED_Init+0x3c>)
 8001eda:	f002 fdc7 	bl	8004a6c <GPIO_Init>
//#define LED_GPIO_PORT					GPIOA
//#define LED_PIN							GPIO_Pin_12


	GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <LED_Init+0x3c>)
 8001ee6:	f002 fe96 	bl	8004c16 <GPIO_WriteBit>
//	NVIC_InitStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitStruct );
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40010800 	.word	0x40010800

08001ef8 <BTN_Init>:





void BTN_Init(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	/*
	 * EXTI pin configure
	 */
	BTN_RCC_PERIPH_CLOCK_CMD ( BTN_RCC_GPIO_PORT, ENABLE );
 8001efe:	2101      	movs	r1, #1
 8001f00:	2008      	movs	r0, #8
 8001f02:	f003 f947 	bl	8005194 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8001f06:	2302      	movs	r3, #2
 8001f08:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8001f0a:	2348      	movs	r3, #72	; 0x48
 8001f0c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = BTN_PIN;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( BTN_GPIO_PORT, &GPIO_InitStruct );
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4803      	ldr	r0, [pc, #12]	; (8001f24 <BTN_Init+0x2c>)
 8001f18:	f002 fda8 	bl	8004a6c <GPIO_Init>
//	NVIC_InitExtiStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitExtiStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitExtiStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitExtiStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitExtiStruct );
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40010c00 	.word	0x40010c00

08001f28 <BTN_IRQHandler>:



void BTN_IRQHandler ( void ) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus ( BTN_EXTI_LINE ) == SET) {
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f002 fd75 	bl	8004a1c <EXTI_GetFlagStatus>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d134      	bne.n	8001fa2 <BTN_IRQHandler+0x7a>
		if(u8_btnstate==BTN_UNPRESSED){
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <BTN_IRQHandler+0x80>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d117      	bne.n	8001f70 <BTN_IRQHandler+0x48>

		  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <BTN_IRQHandler+0x84>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	70da      	strb	r2, [r3, #3]
		  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <BTN_IRQHandler+0x88>)
 8001f48:	2208      	movs	r2, #8
 8001f4a:	715a      	strb	r2, [r3, #5]
		  NVIC_Init ( &NVIC_InitExtiStruct );
 8001f4c:	4817      	ldr	r0, [pc, #92]	; (8001fac <BTN_IRQHandler+0x84>)
 8001f4e:	f002 fd03 	bl	8004958 <NVIC_Init>
		  cnttimer1=0;
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <BTN_IRQHandler+0x8c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	801a      	strh	r2, [r3, #0]
		  u8_btnstate=BTN_PRESSED;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <BTN_IRQHandler+0x80>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
		  EnableTimer1Interrupt();
 8001f5e:	f000 f869 	bl	8002034 <EnableTimer1Interrupt>
		  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 1);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <BTN_IRQHandler+0x90>)
 8001f6a:	f002 fe54 	bl	8004c16 <GPIO_WriteBit>
 8001f6e:	e015      	b.n	8001f9c <BTN_IRQHandler+0x74>
		}
		else{
			//DisableTimer1Interrupt
			  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <BTN_IRQHandler+0x84>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	70da      	strb	r2, [r3, #3]
			  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <BTN_IRQHandler+0x88>)
 8001f78:	220c      	movs	r2, #12
 8001f7a:	715a      	strb	r2, [r3, #5]
			  NVIC_Init ( &NVIC_InitExtiStruct );
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <BTN_IRQHandler+0x84>)
 8001f7e:	f002 fceb 	bl	8004958 <NVIC_Init>
			  timer1data=cnttimer1;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <BTN_IRQHandler+0x8c>)
 8001f84:	881a      	ldrh	r2, [r3, #0]
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <BTN_IRQHandler+0x94>)
 8001f88:	801a      	strh	r2, [r3, #0]
			  u8_btnstate=BTN_UNPRESSED;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <BTN_IRQHandler+0x80>)
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	701a      	strb	r2, [r3, #0]
			  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f96:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <BTN_IRQHandler+0x90>)
 8001f98:	f002 fe3d 	bl	8004c16 <GPIO_WriteBit>
//		}
//		else{
//			GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
//			b_ledbtnstate=FALSE;
//		}
		EXTI_ClearITPendingBit ( BTN_EXTI_LINE );
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f002 fd57 	bl	8004a50 <EXTI_ClearITPendingBit>


	}
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200006b9 	.word	0x200006b9
 8001fac:	20000a04 	.word	0x20000a04
 8001fb0:	200009fc 	.word	0x200009fc
 8001fb4:	200006b6 	.word	0x200006b6
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	200006ba 	.word	0x200006ba

08001fc0 <Timer1Init>:


void Timer1Init(void)	{		//	(функция инициализации таймера)
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
TIM_TimeBaseInitTypeDef		TIMER1_InitStruct;


//	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fcc:	f003 f8e2 	bl	8005194 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );

*/
	TIMER1_InitStruct.TIM_Prescaler=TIMER1_PRESCALER-1;	//предделитель 720-1
 8001fd0:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001fd4:	80bb      	strh	r3, [r7, #4]
	TIMER1_InitStruct.TIM_CounterMode=TIM_CounterMode_Up;	//режим прямого счета
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	80fb      	strh	r3, [r7, #6]
	TIMER1_InitStruct.TIM_Period=TIMER1_RELOAD_PERIOD;		//множитель периодов?
 8001fda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fde:	813b      	strh	r3, [r7, #8]
	TIMER1_InitStruct.TIM_ClockDivision=TIM_CKD_DIV1;		//делитель самого таймера(можно не ставить)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	817b      	strh	r3, [r7, #10]
	TIMER1_InitStruct.TIM_RepetitionCounter=0x0000;		//счетчик повторов?
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	733b      	strb	r3, [r7, #12]
	TIM_TimeBaseInit(TIM1,&TIMER1_InitStruct);
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	480f      	ldr	r0, [pc, #60]	; (800202c <Timer1Init+0x6c>)
 8001fee:	f003 fa23 	bl	8005438 <TIM_TimeBaseInit>


	//timer1data=1;
    NVIC_InitTmr1Structure.NVIC_IRQChannel = TIM1_UP_IRQn;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <Timer1Init+0x70>)
 8001ff4:	2219      	movs	r2, #25
 8001ff6:	701a      	strb	r2, [r3, #0]
    NVIC_InitTmr1Structure.NVIC_IRQChannelPreemptionPriority = 0;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <Timer1Init+0x70>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	705a      	strb	r2, [r3, #1]
    NVIC_InitTmr1Structure.NVIC_IRQChannelSubPriority = 1;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <Timer1Init+0x70>)
 8002000:	2201      	movs	r2, #1
 8002002:	709a      	strb	r2, [r3, #2]
    NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = DISABLE;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <Timer1Init+0x70>)
 8002006:	2200      	movs	r2, #0
 8002008:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitTmr1Structure);
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <Timer1Init+0x70>)
 800200c:	f002 fca4 	bl	8004958 <NVIC_Init>

	TIM_ITConfig(TIM1, TIM_IT_Update, DISABLE);
 8002010:	2200      	movs	r2, #0
 8002012:	2101      	movs	r1, #1
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <Timer1Init+0x6c>)
 8002016:	f003 faaa 	bl	800556e <TIM_ITConfig>
	TIM_Cmd(TIM1,DISABLE);
 800201a:	2100      	movs	r1, #0
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <Timer1Init+0x6c>)
 800201e:	f003 fa87 	bl	8005530 <TIM_Cmd>


	//NVIC_EnableIRQ(TIM1_UP_IRQn);


}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40012c00 	.word	0x40012c00
 8002030:	200009f8 	.word	0x200009f8

08002034 <EnableTimer1Interrupt>:



void EnableTimer1Interrupt()
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
    //NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = ENABLE;
    //NVIC_Init(&NVIC_InitTmr1Structure);
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8002038:	2201      	movs	r2, #1
 800203a:	2101      	movs	r1, #1
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <EnableTimer1Interrupt+0x20>)
 800203e:	f003 fa96 	bl	800556e <TIM_ITConfig>
	TIM_Cmd(TIM1,ENABLE);
 8002042:	2101      	movs	r1, #1
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <EnableTimer1Interrupt+0x20>)
 8002046:	f003 fa73 	bl	8005530 <TIM_Cmd>

    NVIC_EnableIRQ(TIM1_UP_IRQn);
 800204a:	2019      	movs	r0, #25
 800204c:	f7ff ff1c 	bl	8001e88 <NVIC_EnableIRQ>

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40012c00 	.word	0x40012c00

08002058 <TIM1_IRQHandler>:




void TIM1_IRQHandler()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
uint8_t u8_cntindex;
//--------------------------------------------------------------------------------------------

 */

	if(TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET){
 800205c:	2101      	movs	r1, #1
 800205e:	4887      	ldr	r0, [pc, #540]	; (800227c <TIM1_IRQHandler+0x224>)
 8002060:	f003 faa8 	bl	80055b4 <TIM_GetITStatus>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8105 	beq.w	8002276 <TIM1_IRQHandler+0x21e>


		if (GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN ) == Bit_RESET) {//если кнопка нажата
 800206c:	2101      	movs	r1, #1
 800206e:	4884      	ldr	r0, [pc, #528]	; (8002280 <TIM1_IRQHandler+0x228>)
 8002070:	f002 fdb8 	bl	8004be4 <GPIO_ReadInputDataBit>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d12d      	bne.n	80020d6 <TIM1_IRQHandler+0x7e>

			   if (previousState==1){
 800207a:	4b82      	ldr	r3, [pc, #520]	; (8002284 <TIM1_IRQHandler+0x22c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <TIM1_IRQHandler+0x38>
				   u8_btnstate=0;
 8002082:	4b81      	ldr	r3, [pc, #516]	; (8002288 <TIM1_IRQHandler+0x230>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
				   cnttimer1=0;
 8002088:	4b80      	ldr	r3, [pc, #512]	; (800228c <TIM1_IRQHandler+0x234>)
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	e0ea      	b.n	8002266 <TIM1_IRQHandler+0x20e>

				}
			   else{
				   cnttimer1++;
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <TIM1_IRQHandler+0x234>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b7c      	ldr	r3, [pc, #496]	; (800228c <TIM1_IRQHandler+0x234>)
 800209a:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==60 && u8_wrnfcstatus==0) {
 800209c:	4b7b      	ldr	r3, [pc, #492]	; (800228c <TIM1_IRQHandler+0x234>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b3c      	cmp	r3, #60	; 0x3c
 80020a2:	f040 80e0 	bne.w	8002266 <TIM1_IRQHandler+0x20e>
 80020a6:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <TIM1_IRQHandler+0x238>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 80db 	bne.w	8002266 <TIM1_IRQHandler+0x20e>

					   u8_wrnfcstatus=1; b_wrstr1=TRUE;//флаг выдачи первой строки в режиме записи
 80020b0:	4b77      	ldr	r3, [pc, #476]	; (8002290 <TIM1_IRQHandler+0x238>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	4b77      	ldr	r3, [pc, #476]	; (8002294 <TIM1_IRQHandler+0x23c>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
					   u8_cntchar=0; u8_cntindex=0;
 80020bc:	4b76      	ldr	r3, [pc, #472]	; (8002298 <TIM1_IRQHandler+0x240>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <TIM1_IRQHandler+0x244>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
					   b_1secflg=FALSE;
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <TIM1_IRQHandler+0x248>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
					   cnttimer1sec=0;
 80020ce:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <TIM1_IRQHandler+0x24c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	e0c7      	b.n	8002266 <TIM1_IRQHandler+0x20e>
			   }

		}
		else{//если кнопка не нажата

			 if(previousState==0){
 80020d6:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <TIM1_IRQHandler+0x22c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d131      	bne.n	8002142 <TIM1_IRQHandler+0xea>
				 u8_btnstate=1;
 80020de:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <TIM1_IRQHandler+0x230>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
				 cnttimer1=0;
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <TIM1_IRQHandler+0x234>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	801a      	strh	r2, [r3, #0]
				 cnttimer30sec=0;
 80020ea:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <TIM1_IRQHandler+0x250>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	801a      	strh	r2, [r3, #0]
				 switch (u8_wrnfcstatus){
 80020f0:	4b67      	ldr	r3, [pc, #412]	; (8002290 <TIM1_IRQHandler+0x238>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	2b07      	cmp	r3, #7
 80020f8:	f200 80b5 	bhi.w	8002266 <TIM1_IRQHandler+0x20e>
				 case 4:
				 case 5:
				 case 6:
				 case 7:
				 case 8:
					    u8_cntchar++;
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <TIM1_IRQHandler+0x240>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b64      	ldr	r3, [pc, #400]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002106:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar>15) u8_cntchar=0;
 8002108:	4b63      	ldr	r3, [pc, #396]	; (8002298 <TIM1_IRQHandler+0x240>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d902      	bls.n	8002116 <TIM1_IRQHandler+0xbe>
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar<10){
 8002116:	4b60      	ldr	r3, [pc, #384]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b09      	cmp	r3, #9
 800211c:	d808      	bhi.n	8002130 <TIM1_IRQHandler+0xd8>
					       uidnfcwrdara[u8_cntindex]= 48 + u8_cntchar;
 800211e:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4a5e      	ldr	r2, [pc, #376]	; (800229c <TIM1_IRQHandler+0x244>)
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	3330      	adds	r3, #48	; 0x30
 8002128:	b2d9      	uxtb	r1, r3
 800212a:	4b60      	ldr	r3, [pc, #384]	; (80022ac <TIM1_IRQHandler+0x254>)
 800212c:	5499      	strb	r1, [r3, r2]
					    }
					    else{
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
					    }
					 break;
 800212e:	e09a      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4a59      	ldr	r2, [pc, #356]	; (800229c <TIM1_IRQHandler+0x244>)
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	3337      	adds	r3, #55	; 0x37
 800213a:	b2d9      	uxtb	r1, r3
 800213c:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <TIM1_IRQHandler+0x254>)
 800213e:	5499      	strb	r1, [r3, r2]
					 break;
 8002140:	e091      	b.n	8002266 <TIM1_IRQHandler+0x20e>
				 }

				}

			   else{
				   cnttimer30sec++;
 8002142:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <TIM1_IRQHandler+0x250>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <TIM1_IRQHandler+0x250>)
 800214c:	801a      	strh	r2, [r3, #0]
				   if(cnttimer30sec==600){
 800214e:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <TIM1_IRQHandler+0x250>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002156:	d105      	bne.n	8002164 <TIM1_IRQHandler+0x10c>
					   u8_wrnfcstatus=0;
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <TIM1_IRQHandler+0x238>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
					   cnttimer30sec=0;
 800215e:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <TIM1_IRQHandler+0x250>)
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
				   }


				   cnttimer1sec++;
 8002164:	4b4f      	ldr	r3, [pc, #316]	; (80022a4 <TIM1_IRQHandler+0x24c>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b4d      	ldr	r3, [pc, #308]	; (80022a4 <TIM1_IRQHandler+0x24c>)
 800216e:	801a      	strh	r2, [r3, #0]
				   if(cnttimer1sec==10){
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <TIM1_IRQHandler+0x24c>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	2b0a      	cmp	r3, #10
 8002176:	d108      	bne.n	800218a <TIM1_IRQHandler+0x132>
					   cnttimer1sec=0;
 8002178:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <TIM1_IRQHandler+0x24c>)
 800217a:	2200      	movs	r2, #0
 800217c:	801a      	strh	r2, [r3, #0]
					   b_1secflg=~b_1secflg;
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <TIM1_IRQHandler+0x248>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	43db      	mvns	r3, r3
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <TIM1_IRQHandler+0x248>)
 8002188:	701a      	strb	r2, [r3, #0]
				   }

				   cnttimer1++;
 800218a:	4b40      	ldr	r3, [pc, #256]	; (800228c <TIM1_IRQHandler+0x234>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <TIM1_IRQHandler+0x234>)
 8002194:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==100 ) {
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <TIM1_IRQHandler+0x234>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d162      	bne.n	8002264 <TIM1_IRQHandler+0x20c>
					   switch (u8_wrnfcstatus){
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <TIM1_IRQHandler+0x238>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d85e      	bhi.n	8002266 <TIM1_IRQHandler+0x20e>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <TIM1_IRQHandler+0x158>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021d1 	.word	0x080021d1
 80021b4:	080021e5 	.word	0x080021e5
 80021b8:	080021f9 	.word	0x080021f9
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	08002221 	.word	0x08002221
 80021c4:	08002235 	.word	0x08002235
 80021c8:	08002249 	.word	0x08002249
 80021cc:	0800225d 	.word	0x0800225d
					   case 1:
						   u8_wrnfcstatus=2;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <TIM1_IRQHandler+0x238>)
 80021d2:	2202      	movs	r2, #2
 80021d4:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=1;
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <TIM1_IRQHandler+0x240>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <TIM1_IRQHandler+0x244>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
						   break;
 80021e2:	e040      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   case 2:
						   u8_wrnfcstatus=3;
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <TIM1_IRQHandler+0x238>)
 80021e6:	2203      	movs	r2, #3
 80021e8:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=2;
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <TIM1_IRQHandler+0x240>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <TIM1_IRQHandler+0x244>)
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
						   break;
 80021f6:	e036      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   case 3:
						   u8_wrnfcstatus=4;
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <TIM1_IRQHandler+0x238>)
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=3;
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <TIM1_IRQHandler+0x244>)
 8002206:	2203      	movs	r2, #3
 8002208:	701a      	strb	r2, [r3, #0]
						   break;
 800220a:	e02c      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   case 4:
						   u8_wrnfcstatus=5;
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <TIM1_IRQHandler+0x238>)
 800220e:	2205      	movs	r2, #5
 8002210:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=4;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <TIM1_IRQHandler+0x244>)
 800221a:	2204      	movs	r2, #4
 800221c:	701a      	strb	r2, [r3, #0]
						   break;
 800221e:	e022      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   case 5:
						   u8_wrnfcstatus=6;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <TIM1_IRQHandler+0x238>)
 8002222:	2206      	movs	r2, #6
 8002224:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=5;
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <TIM1_IRQHandler+0x244>)
 800222e:	2205      	movs	r2, #5
 8002230:	701a      	strb	r2, [r3, #0]
						   break;
 8002232:	e018      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   case 6:
						   u8_wrnfcstatus=7;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <TIM1_IRQHandler+0x238>)
 8002236:	2207      	movs	r2, #7
 8002238:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=6;
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <TIM1_IRQHandler+0x240>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <TIM1_IRQHandler+0x244>)
 8002242:	2206      	movs	r2, #6
 8002244:	701a      	strb	r2, [r3, #0]
						   break;
 8002246:	e00e      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   case 7:
						   u8_wrnfcstatus=8;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <TIM1_IRQHandler+0x238>)
 800224a:	2208      	movs	r2, #8
 800224c:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=7;
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <TIM1_IRQHandler+0x240>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <TIM1_IRQHandler+0x244>)
 8002256:	2207      	movs	r2, #7
 8002258:	701a      	strb	r2, [r3, #0]
						   break;
 800225a:	e004      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   case 8:
					   		u8_wrnfcstatus=9;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <TIM1_IRQHandler+0x238>)
 800225e:	2209      	movs	r2, #9
 8002260:	701a      	strb	r2, [r3, #0]

					   		break;
 8002262:	e000      	b.n	8002266 <TIM1_IRQHandler+0x20e>
					   }

				   }
 8002264:	bf00      	nop
			   }

		}

		previousState=u8_btnstate;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <TIM1_IRQHandler+0x230>)
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <TIM1_IRQHandler+0x22c>)
 800226c:	701a      	strb	r2, [r3, #0]
//	}
//



    TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
 800226e:	2101      	movs	r1, #1
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM1_IRQHandler+0x224>)
 8002272:	f003 f9c8 	bl	8005606 <TIM_ClearITPendingBit>

	}
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40010c00 	.word	0x40010c00
 8002284:	200006b8 	.word	0x200006b8
 8002288:	200006b9 	.word	0x200006b9
 800228c:	200006b6 	.word	0x200006b6
 8002290:	200006bf 	.word	0x200006bf
 8002294:	200006c0 	.word	0x200006c0
 8002298:	2000069b 	.word	0x2000069b
 800229c:	2000069c 	.word	0x2000069c
 80022a0:	200006b0 	.word	0x200006b0
 80022a4:	200006b4 	.word	0x200006b4
 80022a8:	200006b2 	.word	0x200006b2
 80022ac:	20000020 	.word	0x20000020

080022b0 <GetTickCount>:

uint32_t GetTickCount() {
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return tick;
 80022b4:	4b02      	ldr	r3, [pc, #8]	; (80022c0 <GetTickCount+0x10>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	20000a08 	.word	0x20000a08

080022c4 <PN532_FirmWareVersion2String>:


void PN532_FirmWareVersion2String(uint32_t version){
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

		 pn_chip=version>>24;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0e1b      	lsrs	r3, r3, #24
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <PN532_FirmWareVersion2String+0x13c>)
 80022d4:	701a      	strb	r2, [r3, #0]
		 pn_fw1chip=version>>16;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <PN532_FirmWareVersion2String+0x140>)
 80022de:	701a      	strb	r2, [r3, #0]
		 pn_fw2chip=version>>8;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b48      	ldr	r3, [pc, #288]	; (8002408 <PN532_FirmWareVersion2String+0x144>)
 80022e8:	701a      	strb	r2, [r3, #0]
		 pn_suppchip=version&0xFF;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <PN532_FirmWareVersion2String+0x148>)
 80022f0:	701a      	strb	r2, [r3, #0]

		 s_pn_nchip[0] = 0x30 + (pn_chip >> 4);
 80022f2:	4b43      	ldr	r3, [pc, #268]	; (8002400 <PN532_FirmWareVersion2String+0x13c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3330      	adds	r3, #48	; 0x30
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b44      	ldr	r3, [pc, #272]	; (8002410 <PN532_FirmWareVersion2String+0x14c>)
 8002300:	701a      	strb	r2, [r3, #0]
		 s_pn_nchip[1] = 0x30 + (pn_chip & 0x0F);
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <PN532_FirmWareVersion2String+0x13c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3330      	adds	r3, #48	; 0x30
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <PN532_FirmWareVersion2String+0x14c>)
 8002312:	705a      	strb	r2, [r3, #1]

		 s_pn_fw1nchip[0] = 0x30+(pn_fw1chip/100);
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <PN532_FirmWareVersion2String+0x140>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4a3e      	ldr	r2, [pc, #248]	; (8002414 <PN532_FirmWareVersion2String+0x150>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3330      	adds	r3, #48	; 0x30
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <PN532_FirmWareVersion2String+0x154>)
 8002328:	701a      	strb	r2, [r3, #0]
		 s_pn_fw1nchip[1] = 0x30+(pn_fw1chip/10%10);
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <PN532_FirmWareVersion2String+0x140>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4a3b      	ldr	r2, [pc, #236]	; (800241c <PN532_FirmWareVersion2String+0x158>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b38      	ldr	r3, [pc, #224]	; (800241c <PN532_FirmWareVersion2String+0x158>)
 800233a:	fba3 1302 	umull	r1, r3, r3, r2
 800233e:	08d9      	lsrs	r1, r3, #3
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3330      	adds	r3, #48	; 0x30
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <PN532_FirmWareVersion2String+0x154>)
 8002352:	705a      	strb	r2, [r3, #1]
		 s_pn_fw1nchip[2] = 0x30+(pn_fw1chip%10);
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <PN532_FirmWareVersion2String+0x140>)
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <PN532_FirmWareVersion2String+0x158>)
 800235a:	fba3 1302 	umull	r1, r3, r3, r2
 800235e:	08d9      	lsrs	r1, r3, #3
 8002360:	460b      	mov	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3330      	adds	r3, #48	; 0x30
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b29      	ldr	r3, [pc, #164]	; (8002418 <PN532_FirmWareVersion2String+0x154>)
 8002372:	709a      	strb	r2, [r3, #2]

		 s_pn_fw2nchip[0] = 0x30+(pn_fw2chip/100);
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <PN532_FirmWareVersion2String+0x144>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <PN532_FirmWareVersion2String+0x150>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3330      	adds	r3, #48	; 0x30
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <PN532_FirmWareVersion2String+0x15c>)
 8002388:	701a      	strb	r2, [r3, #0]
		 s_pn_fw2nchip[1] = 0x30+(pn_fw2chip/10%10);
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <PN532_FirmWareVersion2String+0x144>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4a23      	ldr	r2, [pc, #140]	; (800241c <PN532_FirmWareVersion2String+0x158>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	08db      	lsrs	r3, r3, #3
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b20      	ldr	r3, [pc, #128]	; (800241c <PN532_FirmWareVersion2String+0x158>)
 800239a:	fba3 1302 	umull	r1, r3, r3, r2
 800239e:	08d9      	lsrs	r1, r3, #3
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3330      	adds	r3, #48	; 0x30
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <PN532_FirmWareVersion2String+0x15c>)
 80023b2:	705a      	strb	r2, [r3, #1]
		 s_pn_fw2nchip[2] = 0x30+(pn_fw2chip%10);
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <PN532_FirmWareVersion2String+0x144>)
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <PN532_FirmWareVersion2String+0x158>)
 80023ba:	fba3 1302 	umull	r1, r3, r3, r2
 80023be:	08d9      	lsrs	r1, r3, #3
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3330      	adds	r3, #48	; 0x30
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <PN532_FirmWareVersion2String+0x15c>)
 80023d2:	709a      	strb	r2, [r3, #2]

		 s_pn_suchip[0] = 0x30 + (pn_suppchip >> 4);
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <PN532_FirmWareVersion2String+0x148>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3330      	adds	r3, #48	; 0x30
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <PN532_FirmWareVersion2String+0x160>)
 80023e2:	701a      	strb	r2, [r3, #0]
		 s_pn_suchip[1] = 0x30 + (pn_suppchip & 0x0F);
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <PN532_FirmWareVersion2String+0x148>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3330      	adds	r3, #48	; 0x30
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <PN532_FirmWareVersion2String+0x160>)
 80023f4:	705a      	strb	r2, [r3, #1]

}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	200006c3 	.word	0x200006c3
 8002404:	200006c4 	.word	0x200006c4
 8002408:	200006c5 	.word	0x200006c5
 800240c:	200006c6 	.word	0x200006c6
 8002410:	200001dc 	.word	0x200001dc
 8002414:	51eb851f 	.word	0x51eb851f
 8002418:	200001e0 	.word	0x200001e0
 800241c:	cccccccd 	.word	0xcccccccd
 8002420:	200001e4 	.word	0x200001e4
 8002424:	200001e8 	.word	0x200001e8

08002428 <ValueInterrupToStr>:



void ValueInterrupToStr(){
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
	b_bounce_value[0] = 0x30+(testtimer1/10000%10);
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <ValueInterrupToStr+0xe0>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	4a36      	ldr	r2, [pc, #216]	; (800250c <ValueInterrupToStr+0xe4>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0b5b      	lsrs	r3, r3, #13
 8002438:	b29a      	uxth	r2, r3
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <ValueInterrupToStr+0xe8>)
 800243c:	fba3 1302 	umull	r1, r3, r3, r2
 8002440:	08d9      	lsrs	r1, r3, #3
 8002442:	460b      	mov	r3, r1
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3330      	adds	r3, #48	; 0x30
 8002452:	b2da      	uxtb	r2, r3
 8002454:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <ValueInterrupToStr+0xec>)
 8002456:	701a      	strb	r2, [r3, #0]
	b_bounce_value[1] = 0x30+(testtimer1/1000%10);
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <ValueInterrupToStr+0xe0>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4a2e      	ldr	r2, [pc, #184]	; (8002518 <ValueInterrupToStr+0xf0>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <ValueInterrupToStr+0xe8>)
 8002468:	fba3 1302 	umull	r1, r3, r3, r2
 800246c:	08d9      	lsrs	r1, r3, #3
 800246e:	460b      	mov	r3, r1
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	b29b      	uxth	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3330      	adds	r3, #48	; 0x30
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <ValueInterrupToStr+0xec>)
 8002482:	705a      	strb	r2, [r3, #1]
	b_bounce_value[2] = 0x30+(testtimer1/100%10);
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <ValueInterrupToStr+0xe0>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	4a24      	ldr	r2, [pc, #144]	; (800251c <ValueInterrupToStr+0xf4>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <ValueInterrupToStr+0xe8>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	08d9      	lsrs	r1, r3, #3
 800249a:	460b      	mov	r3, r1
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	3330      	adds	r3, #48	; 0x30
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <ValueInterrupToStr+0xec>)
 80024ae:	709a      	strb	r2, [r3, #2]
	b_bounce_value[3] = 0x30+(testtimer1/10%10);
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <ValueInterrupToStr+0xe0>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	4a16      	ldr	r2, [pc, #88]	; (8002510 <ValueInterrupToStr+0xe8>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <ValueInterrupToStr+0xe8>)
 80024c0:	fba3 1302 	umull	r1, r3, r3, r2
 80024c4:	08d9      	lsrs	r1, r3, #3
 80024c6:	460b      	mov	r3, r1
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3330      	adds	r3, #48	; 0x30
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <ValueInterrupToStr+0xec>)
 80024da:	70da      	strb	r2, [r3, #3]
	b_bounce_value[4] = 0x30+(testtimer1%10);
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <ValueInterrupToStr+0xe0>)
 80024de:	881a      	ldrh	r2, [r3, #0]
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <ValueInterrupToStr+0xe8>)
 80024e2:	fba3 1302 	umull	r1, r3, r3, r2
 80024e6:	08d9      	lsrs	r1, r3, #3
 80024e8:	460b      	mov	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3330      	adds	r3, #48	; 0x30
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <ValueInterrupToStr+0xec>)
 80024fc:	711a      	strb	r2, [r3, #4]

}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	200006bc 	.word	0x200006bc
 800250c:	d1b71759 	.word	0xd1b71759
 8002510:	cccccccd 	.word	0xcccccccd
 8002514:	20000218 	.word	0x20000218
 8002518:	10624dd3 	.word	0x10624dd3
 800251c:	51eb851f 	.word	0x51eb851f

08002520 <fourbytes2strhex>:



bool fourbytes2strhex(uint8_t *indatarray, uint8_t *outstrhex){
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
	uint8_t b=0;
 800252e:	2300      	movs	r3, #0
 8002530:	73bb      	strb	r3, [r7, #14]
	uint8_t th=0;
 8002532:	2300      	movs	r3, #0
 8002534:	737b      	strb	r3, [r7, #13]
	uint8_t tl=0;
 8002536:	2300      	movs	r3, #0
 8002538:	733b      	strb	r3, [r7, #12]

		for ( b=0; b<4; b++){
 800253a:	2300      	movs	r3, #0
 800253c:	73bb      	strb	r3, [r7, #14]
 800253e:	e05a      	b.n	80025f6 <fourbytes2strhex+0xd6>


			th = indatarray[b] >> 4;
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	737b      	strb	r3, [r7, #13]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 800254c:	7b7b      	ldrb	r3, [r7, #13]
 800254e:	2b09      	cmp	r3, #9
 8002550:	d803      	bhi.n	800255a <fourbytes2strhex+0x3a>
 8002552:	7b7b      	ldrb	r3, [r7, #13]
 8002554:	3330      	adds	r3, #48	; 0x30
 8002556:	737b      	strb	r3, [r7, #13]
 8002558:	e008      	b.n	800256c <fourbytes2strhex+0x4c>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 800255a:	7b7b      	ldrb	r3, [r7, #13]
 800255c:	2b09      	cmp	r3, #9
 800255e:	d905      	bls.n	800256c <fourbytes2strhex+0x4c>
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	d802      	bhi.n	800256c <fourbytes2strhex+0x4c>
 8002566:	7b7b      	ldrb	r3, [r7, #13]
 8002568:	3337      	adds	r3, #55	; 0x37
 800256a:	737b      	strb	r3, [r7, #13]
			}

			tl = indatarray[b]& 0x0F;
 800256c:	7bbb      	ldrb	r3, [r7, #14]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	733b      	strb	r3, [r7, #12]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	2b09      	cmp	r3, #9
 800257e:	d803      	bhi.n	8002588 <fourbytes2strhex+0x68>
 8002580:	7b3b      	ldrb	r3, [r7, #12]
 8002582:	3330      	adds	r3, #48	; 0x30
 8002584:	733b      	strb	r3, [r7, #12]
 8002586:	e008      	b.n	800259a <fourbytes2strhex+0x7a>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 8002588:	7b3b      	ldrb	r3, [r7, #12]
 800258a:	2b09      	cmp	r3, #9
 800258c:	d905      	bls.n	800259a <fourbytes2strhex+0x7a>
 800258e:	7b3b      	ldrb	r3, [r7, #12]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d802      	bhi.n	800259a <fourbytes2strhex+0x7a>
 8002594:	7b3b      	ldrb	r3, [r7, #12]
 8002596:	3337      	adds	r3, #55	; 0x37
 8002598:	733b      	strb	r3, [r7, #12]

			}

			outstrhex[i] = '0';	i++;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	2230      	movs	r2, #48	; 0x30
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	3301      	adds	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = 'x';	i++;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	2278      	movs	r2, #120	; 0x78
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = th;  i++;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	7b7a      	ldrb	r2, [r7, #13]
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = tl;	i++;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	7b3a      	ldrb	r2, [r7, #12]
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
			//outstrhex[i] = ' '; i++;
			if(i<18){ outstrhex[i] = ' '; i++; }
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b11      	cmp	r3, #17
 80025de:	d807      	bhi.n	80025f0 <fourbytes2strhex+0xd0>
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	2220      	movs	r2, #32
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	3301      	adds	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
		for ( b=0; b<4; b++){
 80025f0:	7bbb      	ldrb	r3, [r7, #14]
 80025f2:	3301      	adds	r3, #1
 80025f4:	73bb      	strb	r3, [r7, #14]
 80025f6:	7bbb      	ldrb	r3, [r7, #14]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d9a1      	bls.n	8002540 <fourbytes2strhex+0x20>


		}
		return 1;
 80025fc:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <UIDResponse>:



uint32_t UIDResponse(uint8_t *uid,  uint8_t uidLength){
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
	uint32_t result;
	result=0;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]

	if(uidLength==4){
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	2b04      	cmp	r3, #4
 800261c:	d120      	bne.n	8002660 <UIDResponse+0x58>

		result = uid[0];
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	60fb      	str	r3, [r7, #12]
		result |= uid[1];
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3301      	adds	r3, #1
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	60fb      	str	r3, [r7, #12]
		result |= uid[2];
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3302      	adds	r3, #2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	60fb      	str	r3, [r7, #12]
		result |= uid[3];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3303      	adds	r3, #3
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
	}
return result;
 8002660:	68fb      	ldr	r3, [r7, #12]

}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <BytesHex2Str>:


bool BytesHex2Str(uint8_t *indatarray, uint8_t size_array, uint8_t *outstrhex){
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	460b      	mov	r3, r1
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	72fb      	strb	r3, [r7, #11]

	uint8_t i=0;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
	uint8_t b=0;
 800267e:	2300      	movs	r3, #0
 8002680:	75bb      	strb	r3, [r7, #22]
	uint8_t th=0;
 8002682:	2300      	movs	r3, #0
 8002684:	757b      	strb	r3, [r7, #21]
	uint8_t tl=0;
 8002686:	2300      	movs	r3, #0
 8002688:	753b      	strb	r3, [r7, #20]

		for ( b=0; b<size_array; b++){
 800268a:	2300      	movs	r3, #0
 800268c:	75bb      	strb	r3, [r7, #22]
 800268e:	e047      	b.n	8002720 <BytesHex2Str+0xb4>


			th = indatarray[b] >> 4;
 8002690:	7dbb      	ldrb	r3, [r7, #22]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	757b      	strb	r3, [r7, #21]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 800269c:	7d7b      	ldrb	r3, [r7, #21]
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d803      	bhi.n	80026aa <BytesHex2Str+0x3e>
 80026a2:	7d7b      	ldrb	r3, [r7, #21]
 80026a4:	3330      	adds	r3, #48	; 0x30
 80026a6:	757b      	strb	r3, [r7, #21]
 80026a8:	e008      	b.n	80026bc <BytesHex2Str+0x50>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 80026aa:	7d7b      	ldrb	r3, [r7, #21]
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	d905      	bls.n	80026bc <BytesHex2Str+0x50>
 80026b0:	7d7b      	ldrb	r3, [r7, #21]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	d802      	bhi.n	80026bc <BytesHex2Str+0x50>
 80026b6:	7d7b      	ldrb	r3, [r7, #21]
 80026b8:	3337      	adds	r3, #55	; 0x37
 80026ba:	757b      	strb	r3, [r7, #21]
			}

			tl = indatarray[b]& 0x0F;
 80026bc:	7dbb      	ldrb	r3, [r7, #22]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	753b      	strb	r3, [r7, #20]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 80026ca:	7d3b      	ldrb	r3, [r7, #20]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d803      	bhi.n	80026d8 <BytesHex2Str+0x6c>
 80026d0:	7d3b      	ldrb	r3, [r7, #20]
 80026d2:	3330      	adds	r3, #48	; 0x30
 80026d4:	753b      	strb	r3, [r7, #20]
 80026d6:	e008      	b.n	80026ea <BytesHex2Str+0x7e>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 80026d8:	7d3b      	ldrb	r3, [r7, #20]
 80026da:	2b09      	cmp	r3, #9
 80026dc:	d905      	bls.n	80026ea <BytesHex2Str+0x7e>
 80026de:	7d3b      	ldrb	r3, [r7, #20]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d802      	bhi.n	80026ea <BytesHex2Str+0x7e>
 80026e4:	7d3b      	ldrb	r3, [r7, #20]
 80026e6:	3337      	adds	r3, #55	; 0x37
 80026e8:	753b      	strb	r3, [r7, #20]

			}

		//	outstrhex[i] = '0';	i++;
		//	outstrhex[i] = 'x';	i++;
			outstrhex[i] = th;  i++;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	7d7a      	ldrb	r2, [r7, #21]
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	3301      	adds	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
			outstrhex[i] = tl;	i++;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	7d3a      	ldrb	r2, [r7, #20]
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	3301      	adds	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
			//outstrhex[i] = ' '; i++;

			 outstrhex[i] = ' '; i++;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	2220      	movs	r2, #32
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	3301      	adds	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
		for ( b=0; b<size_array; b++){
 800271a:	7dbb      	ldrb	r3, [r7, #22]
 800271c:	3301      	adds	r3, #1
 800271e:	75bb      	strb	r3, [r7, #22]
 8002720:	7dba      	ldrb	r2, [r7, #22]
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3b3      	bcc.n	8002690 <BytesHex2Str+0x24>




		}
		return 1;
 8002728:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 800272a:	4618      	mov	r0, r3
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <PN532_WriteTagtoHex>:

void PN532_WriteTagtoHex(){
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
	uint8_t u8_cntindex;
	//--------------------------------------------------------------------------------------------

	 */

	uint8_t k=0;
 800273a:	2300      	movs	r3, #0
 800273c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx=0;
 800273e:	2300      	movs	r3, #0
 8002740:	71bb      	strb	r3, [r7, #6]
	uint8_t x=0;
 8002742:	2300      	movs	r3, #0
 8002744:	717b      	strb	r3, [r7, #5]

	for ( x=0; x<4 ; x++){
 8002746:	2300      	movs	r3, #0
 8002748:	717b      	strb	r3, [r7, #5]
 800274a:	e055      	b.n	80027f8 <PN532_WriteTagtoHex+0xc4>


				//tx = uidnfcwrdara[k];

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	4a2f      	ldr	r2, [pc, #188]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	2b2f      	cmp	r3, #47	; 0x2f
 8002754:	d90a      	bls.n	800276c <PN532_WriteTagtoHex+0x38>
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	4a2c      	ldr	r2, [pc, #176]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	2b39      	cmp	r3, #57	; 0x39
 800275e:	d805      	bhi.n	800276c <PN532_WriteTagtoHex+0x38>
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	3b30      	subs	r3, #48	; 0x30
 8002768:	71bb      	strb	r3, [r7, #6]
 800276a:	e00e      	b.n	800278a <PN532_WriteTagtoHex+0x56>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	4a27      	ldr	r2, [pc, #156]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 8002770:	5cd3      	ldrb	r3, [r2, r3]
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d909      	bls.n	800278a <PN532_WriteTagtoHex+0x56>
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	2b46      	cmp	r3, #70	; 0x46
 800277e:	d804      	bhi.n	800278a <PN532_WriteTagtoHex+0x56>
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	4a22      	ldr	r2, [pc, #136]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	3b37      	subs	r3, #55	; 0x37
 8002788:	71bb      	strb	r3, [r7, #6]
				}

				outwrdata[x]=tx<<4;
 800278a:	797b      	ldrb	r3, [r7, #5]
 800278c:	79ba      	ldrb	r2, [r7, #6]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d1      	uxtb	r1, r2
 8002792:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <PN532_WriteTagtoHex+0xdc>)
 8002794:	54d1      	strb	r1, [r2, r3]
				k++;
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	3301      	adds	r3, #1
 800279a:	71fb      	strb	r3, [r7, #7]

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4a1b      	ldr	r2, [pc, #108]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	2b2f      	cmp	r3, #47	; 0x2f
 80027a4:	d90a      	bls.n	80027bc <PN532_WriteTagtoHex+0x88>
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	2b39      	cmp	r3, #57	; 0x39
 80027ae:	d805      	bhi.n	80027bc <PN532_WriteTagtoHex+0x88>
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	4a16      	ldr	r2, [pc, #88]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	3b30      	subs	r3, #48	; 0x30
 80027b8:	71bb      	strb	r3, [r7, #6]
 80027ba:	e00e      	b.n	80027da <PN532_WriteTagtoHex+0xa6>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d909      	bls.n	80027da <PN532_WriteTagtoHex+0xa6>
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4a10      	ldr	r2, [pc, #64]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	2b46      	cmp	r3, #70	; 0x46
 80027ce:	d804      	bhi.n	80027da <PN532_WriteTagtoHex+0xa6>
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <PN532_WriteTagtoHex+0xd8>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	3b37      	subs	r3, #55	; 0x37
 80027d8:	71bb      	strb	r3, [r7, #6]
				}
				outwrdata[x]|=tx;
 80027da:	797b      	ldrb	r3, [r7, #5]
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <PN532_WriteTagtoHex+0xdc>)
 80027de:	5cd1      	ldrb	r1, [r2, r3]
 80027e0:	797b      	ldrb	r3, [r7, #5]
 80027e2:	79ba      	ldrb	r2, [r7, #6]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	b2d1      	uxtb	r1, r2
 80027e8:	4a09      	ldr	r2, [pc, #36]	; (8002810 <PN532_WriteTagtoHex+0xdc>)
 80027ea:	54d1      	strb	r1, [r2, r3]
				k++;
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	3301      	adds	r3, #1
 80027f0:	71fb      	strb	r3, [r7, #7]
	for ( x=0; x<4 ; x++){
 80027f2:	797b      	ldrb	r3, [r7, #5]
 80027f4:	3301      	adds	r3, #1
 80027f6:	717b      	strb	r3, [r7, #5]
 80027f8:	797b      	ldrb	r3, [r7, #5]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d9a6      	bls.n	800274c <PN532_WriteTagtoHex+0x18>

			}


}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000020 	.word	0x20000020
 8002810:	200006a0 	.word	0x200006a0

08002814 <spi_gpio_init>:



void spi_gpio_init(void){
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  		GPIO_InitStruct;

	SPI_RCC_PORT_CLOCK_CMD ( SPI_RCC_PORT, ENABLE);
 800281a:	2101      	movs	r1, #1
 800281c:	2008      	movs	r0, #8
 800281e:	f002 fcb9 	bl	8005194 <RCC_APB2PeriphClockCmd>
	SPI_RCC_PERIPH_CLOCK_CMD ( SPI_RCC_APBPORT, ENABLE );
 8002822:	2101      	movs	r1, #1
 8002824:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002828:	f002 fcd2 	bl	80051d0 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 800282c:	2303      	movs	r3, #3
 800282e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode =  GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 8002830:	2318      	movs	r3, #24
 8002832:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MOSI_PIN | SPI_SCK_PIN;
 8002834:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002838:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4619      	mov	r1, r3
 800283e:	480e      	ldr	r0, [pc, #56]	; (8002878 <spi_gpio_init+0x64>)
 8002840:	f002 f914 	bl	8004a6c <GPIO_Init>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 8002844:	2303      	movs	r3, #3
 8002846:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;//GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 8002848:	2310      	movs	r3, #16
 800284a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_NSS_PIN | SPI_FLASH_NSS;
 800284c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002850:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4808      	ldr	r0, [pc, #32]	; (8002878 <spi_gpio_init+0x64>)
 8002858:	f002 f908 	bl	8004a6c <GPIO_Init>


	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;//GPIO_Mode_AF_PP;//GPIO_Mode_IN_FLOATING;//GPIO_Mode_IPU;
 800285c:	2348      	movs	r3, #72	; 0x48
 800285e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MISO_PIN;
 8002860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002864:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4803      	ldr	r0, [pc, #12]	; (8002878 <spi_gpio_init+0x64>)
 800286c:	f002 f8fe 	bl	8004a6c <GPIO_Init>





}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40010c00 	.word	0x40010c00

0800287c <bcode_conv_to_flash>:



uint64_t bcode_conv_to_flash(uint32_t rtc_time, char *bar_buff){
 800287c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]

	uint8_t s;
	char *pBar = bar_buff;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 13; i++){
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e00b      	b.n	80028aa <bcode_conv_to_flash+0x2e>
		barcode[i] = *pBar++;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	613a      	str	r2, [r7, #16]
 8002898:	7819      	ldrb	r1, [r3, #0]
 800289a:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <bcode_conv_to_flash+0x114>)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	460a      	mov	r2, r1
 80028a2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 13; i++){
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3301      	adds	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	ddf0      	ble.n	8002892 <bcode_conv_to_flash+0x16>
	}

	for(int a=0;a<7;a++){
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	e05e      	b.n	8002974 <bcode_conv_to_flash+0xf8>
		if(a==0){
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d114      	bne.n	80028e6 <bcode_conv_to_flash+0x6a>
			s=barcode[a]-0x30;
 80028bc:	4a34      	ldr	r2, [pc, #208]	; (8002990 <bcode_conv_to_flash+0x114>)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	3b30      	subs	r3, #48	; 0x30
 80028c6:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a+1]-0x30;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <bcode_conv_to_flash+0x114>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	3b30      	subs	r3, #48	; 0x30
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	b25a      	sxtb	r2, r3
 80028dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	75fb      	strb	r3, [r7, #23]
		}
		if(a>0 && a<=5){
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	dd18      	ble.n	800291e <bcode_conv_to_flash+0xa2>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	dc15      	bgt.n	800291e <bcode_conv_to_flash+0xa2>
			s=barcode[a*2]-0x30;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4a26      	ldr	r2, [pc, #152]	; (8002990 <bcode_conv_to_flash+0x114>)
 80028f8:	5cd3      	ldrb	r3, [r2, r3]
 80028fa:	3b30      	subs	r3, #48	; 0x30
 80028fc:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a*2+1]-0x30;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	3301      	adds	r3, #1
 800290a:	4a21      	ldr	r2, [pc, #132]	; (8002990 <bcode_conv_to_flash+0x114>)
 800290c:	5cd3      	ldrb	r3, [r2, r3]
 800290e:	3b30      	subs	r3, #48	; 0x30
 8002910:	b2db      	uxtb	r3, r3
 8002912:	b25a      	sxtb	r2, r3
 8002914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002918:	4313      	orrs	r3, r2
 800291a:	b25b      	sxtb	r3, r3
 800291c:	75fb      	strb	r3, [r7, #23]
		}
		if(a==6){
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d108      	bne.n	8002936 <bcode_conv_to_flash+0xba>
			s=barcode[a*2]-0x30;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <bcode_conv_to_flash+0x114>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	3b30      	subs	r3, #48	; 0x30
 800292e:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	75fb      	strb	r3, [r7, #23]
		}

		bcode<<=8;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <bcode_conv_to_flash+0x118>)
 8002938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	020b      	lsls	r3, r1, #8
 8002946:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800294a:	0202      	lsls	r2, r0, #8
 800294c:	4911      	ldr	r1, [pc, #68]	; (8002994 <bcode_conv_to_flash+0x118>)
 800294e:	e9c1 2300 	strd	r2, r3, [r1]
		bcode|=(uint64_t)s;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2200      	movs	r2, #0
 8002956:	461c      	mov	r4, r3
 8002958:	4615      	mov	r5, r2
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <bcode_conv_to_flash+0x118>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	ea44 0802 	orr.w	r8, r4, r2
 8002964:	ea45 0903 	orr.w	r9, r5, r3
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <bcode_conv_to_flash+0x118>)
 800296a:	e9c3 8900 	strd	r8, r9, [r3]
	for(int a=0;a<7;a++){
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b06      	cmp	r3, #6
 8002978:	dd9d      	ble.n	80028b6 <bcode_conv_to_flash+0x3a>

	}


	return bcode;
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <bcode_conv_to_flash+0x118>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]

}
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200008a8 	.word	0x200008a8
 8002994:	200008a0 	.word	0x200008a0

08002998 <data_conv2Flash>:
	nfc_to_flash[0]=rtc_time;
	nfc_to_flash[1]=nfc_tag;
}


void data_conv2Flash(uint32_t rtc_time, uint64_t data ){
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	e9c7 2300 	strd	r2, r3, [r7]


	data_to_flash[0]=(rtc_time >> 24) & 0xFF;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0e1b      	lsrs	r3, r3, #24
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <data_conv2Flash+0xd4>)
 80029ac:	701a      	strb	r2, [r3, #0]
	data_to_flash[1]=(rtc_time >> 16) & 0xFF;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <data_conv2Flash+0xd4>)
 80029b6:	705a      	strb	r2, [r3, #1]
	data_to_flash[2]=(rtc_time >> 8) & 0xFF;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <data_conv2Flash+0xd4>)
 80029c0:	709a      	strb	r2, [r3, #2]
	data_to_flash[3]=rtc_time & 0xFF;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <data_conv2Flash+0xd4>)
 80029c8:	70da      	strb	r2, [r3, #3]

	data_to_flash[4]=(data >> 48) & 0xFF;
 80029ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	0c0a      	lsrs	r2, r1, #16
 80029d8:	2300      	movs	r3, #0
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <data_conv2Flash+0xd4>)
 80029de:	711a      	strb	r2, [r3, #4]
	data_to_flash[5]=(data >> 40) & 0xFF;
 80029e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	0a0a      	lsrs	r2, r1, #8
 80029ee:	2300      	movs	r3, #0
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <data_conv2Flash+0xd4>)
 80029f4:	715a      	strb	r2, [r3, #5]
	data_to_flash[6]=(data >> 32) & 0xFF;
 80029f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	000a      	movs	r2, r1
 8002a04:	2300      	movs	r3, #0
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <data_conv2Flash+0xd4>)
 8002a0a:	719a      	strb	r2, [r3, #6]
	data_to_flash[7]=(data >> 24) & 0xFF;
 8002a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	0e02      	lsrs	r2, r0, #24
 8002a1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a1e:	0e0b      	lsrs	r3, r1, #24
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <data_conv2Flash+0xd4>)
 8002a24:	71da      	strb	r2, [r3, #7]
	data_to_flash[8]=(data >> 16) & 0xFF;
 8002a26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	0c02      	lsrs	r2, r0, #16
 8002a34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a38:	0c0b      	lsrs	r3, r1, #16
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <data_conv2Flash+0xd4>)
 8002a3e:	721a      	strb	r2, [r3, #8]
	data_to_flash[9]=(data >> 8) & 0xFF;
 8002a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	0a02      	lsrs	r2, r0, #8
 8002a4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a52:	0a0b      	lsrs	r3, r1, #8
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <data_conv2Flash+0xd4>)
 8002a58:	725a      	strb	r2, [r3, #9]
	data_to_flash[10]=data & 0xFF;
 8002a5a:	783a      	ldrb	r2, [r7, #0]
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <data_conv2Flash+0xd4>)
 8002a5e:	729a      	strb	r2, [r3, #10]


}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	200008e8 	.word	0x200008e8

08002a70 <nfc_conv2Flash>:

void nfc_conv2Flash(uint32_t rtc_time, uint32_t data ){
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]


	data_to_flash[0]=(rtc_time >> 24) & 0xFF;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0e1b      	lsrs	r3, r3, #24
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002a82:	701a      	strb	r2, [r3, #0]
	data_to_flash[1]=(rtc_time >> 16) & 0xFF;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002a8c:	705a      	strb	r2, [r3, #1]
	data_to_flash[2]=(rtc_time >> 8) & 0xFF;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002a96:	709a      	strb	r2, [r3, #2]
	data_to_flash[3]=rtc_time & 0xFF;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002a9e:	70da      	strb	r2, [r3, #3]

	data_to_flash[4]=(data >> 24) & 0xFF;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	0e1b      	lsrs	r3, r3, #24
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002aa8:	711a      	strb	r2, [r3, #4]
	data_to_flash[5]=(data >> 16) & 0xFF;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002ab2:	715a      	strb	r2, [r3, #5]
	data_to_flash[6]=(data >> 8) & 0xFF;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002abc:	719a      	strb	r2, [r3, #6]
	data_to_flash[7]=data & 0xFF;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <nfc_conv2Flash+0x60>)
 8002ac4:	71da      	strb	r2, [r3, #7]


}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	200008e8 	.word	0x200008e8

08002ad4 <flash_conv2_addr>:
	addr_to_flash[2]=(addr_flash >> 8) & 0xFF;
	addr_to_flash[3]=addr_flash & 0xFF;

}

uint32_t flash_conv2_addr(uint8_t *padBuf){
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

	uint32_t addr2_wr = (padBuf[0] << 24) | (padBuf[1] << 16) | (padBuf[2] << 8) | padBuf[3];
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	061a      	lsls	r2, r3, #24
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3302      	adds	r3, #2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	4313      	orrs	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	3203      	adds	r2, #3
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
	return addr2_wr;
 8002b00:	68fb      	ldr	r3, [r7, #12]

}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <TimingDelay_Decrement>:
/**
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement ( void ) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00) {
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <TimingDelay_Decrement+0x28>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <TimingDelay_Decrement+0x16>
		TimingDelay--;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <TimingDelay_Decrement+0x28>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <TimingDelay_Decrement+0x28>)
 8002b20:	6013      	str	r3, [r2, #0]
	}
	tick++;
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <TimingDelay_Decrement+0x2c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	4a03      	ldr	r2, [pc, #12]	; (8002b38 <TimingDelay_Decrement+0x2c>)
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	200004a8 	.word	0x200004a8
 8002b38:	20000a08 	.word	0x20000a08

08002b3c <Delay>:
/**
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in milliseconds
 * @retval None
 */
void Delay ( uint32_t nTime ) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <Delay+0x24>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
	while (TimingDelay != 0);
 8002b4a:	bf00      	nop
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <Delay+0x24>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1fb      	bne.n	8002b4c <Delay+0x10>
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	200004a8 	.word	0x200004a8

08002b64 <LCD_CtrlLinesConfig>:
}




void LCD_CtrlLinesConfig(void) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
	I2C_InitTypeDef			I2C_InitStruct;

	/*
	 * I2C pins configure
	 */
	LCD_I2C_SCL_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SCL_RCC_PORT, ENABLE );
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2008      	movs	r0, #8
 8002b6e:	f002 fb11 	bl	8005194 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8002b72:	2302      	movs	r3, #2
 8002b74:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002b76:	2318      	movs	r3, #24
 8002b78:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SCL_PIN;
 8002b7a:	2340      	movs	r3, #64	; 0x40
 8002b7c:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SCL_GPIO_PORT, &GPIO_InitStruct );
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	481a      	ldr	r0, [pc, #104]	; (8002bf0 <LCD_CtrlLinesConfig+0x8c>)
 8002b86:	f001 ff71 	bl	8004a6c <GPIO_Init>

	LCD_I2C_SDA_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SDA_RCC_PORT, ENABLE );
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	2008      	movs	r0, #8
 8002b8e:	f002 fb01 	bl	8005194 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8002b92:	2302      	movs	r3, #2
 8002b94:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_OD;
 8002b96:	231c      	movs	r3, #28
 8002b98:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SDA_PIN;
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SDA_GPIO_PORT, &GPIO_InitStruct );
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4812      	ldr	r0, [pc, #72]	; (8002bf0 <LCD_CtrlLinesConfig+0x8c>)
 8002ba6:	f001 ff61 	bl	8004a6c <GPIO_Init>

	LCD_I2C_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_RCC_APBPORT, ENABLE );
 8002baa:	2101      	movs	r1, #1
 8002bac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bb0:	f002 fb0e 	bl	80051d0 <RCC_APB1PeriphClockCmd>

	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8002bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb8:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002bba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bbe:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_ClockSpeed = 50000;
 8002bc0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002bc4:	607b      	str	r3, [r7, #4]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8002bc6:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002bca:	817b      	strh	r3, [r7, #10]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	813b      	strh	r3, [r7, #8]
	I2C_InitStruct.I2C_OwnAddress1 = 1;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	81bb      	strh	r3, [r7, #12]
	I2C_Init ( LCD_I2C_NUM, &I2C_InitStruct );
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <LCD_CtrlLinesConfig+0x90>)
 8002bda:	f002 f833 	bl	8004c44 <I2C_Init>

	I2C_Cmd ( LCD_I2C_NUM, ENABLE );
 8002bde:	2101      	movs	r1, #1
 8002be0:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <LCD_CtrlLinesConfig+0x90>)
 8002be2:	f002 f8f1 	bl	8004dc8 <I2C_Cmd>
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40010c00 	.word	0x40010c00
 8002bf4:	40005400 	.word	0x40005400

08002bf8 <I2C_SingleRandomWrite>:
  * @param  Addr: register address
  * @param  Data: data to be written to the specific register
  * @retval 0x00 if write operation is OK
  *         0xFF if timeout condition occured (device not connected or bus error).
  */
uint8_t I2C_SingleRandomWrite ( I2C_TypeDef* I2Cx, uint8_t Device, uint8_t Data ) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
 8002c04:	4613      	mov	r3, r2
 8002c06:	70bb      	strb	r3, [r7, #2]
	uint32_t timeout = TIMEOUT_MAX;
 8002c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0c:	60fb      	str	r3, [r7, #12]

	/* Generate the Start Condition */
	I2C_GenerateSTART ( I2Cx, ENABLE );
 8002c0e:	2101      	movs	r1, #1
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f002 f8f8 	bl	8004e06 <I2C_GenerateSTART>

	/* Test on I2Cx EV5 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8002c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1a:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 8002c1c:	e006      	b.n	8002c2c <I2C_SingleRandomWrite+0x34>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1e5a      	subs	r2, r3, #1
 8002c22:	60fa      	str	r2, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <I2C_SingleRandomWrite+0x34>
			return 0xFF;
 8002c28:	23ff      	movs	r3, #255	; 0xff
 8002c2a:	e03a      	b.n	8002ca2 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 8002c2c:	491f      	ldr	r1, [pc, #124]	; (8002cac <I2C_SingleRandomWrite+0xb4>)
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f002 f953 	bl	8004eda <I2C_CheckEvent>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f1      	beq.n	8002c1e <I2C_SingleRandomWrite+0x26>
	}

	/* Send TS selected device slave Address for write */
	I2C_Send7bitAddress ( I2Cx, Device, I2C_Direction_Transmitter );
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f002 f92d 	bl	8004ea0 <I2C_Send7bitAddress>

	/* Test on I2Cx EV6 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8002c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4a:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 8002c4c:	e006      	b.n	8002c5c <I2C_SingleRandomWrite+0x64>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	60fa      	str	r2, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <I2C_SingleRandomWrite+0x64>
			return 0xFF;
 8002c58:	23ff      	movs	r3, #255	; 0xff
 8002c5a:	e022      	b.n	8002ca2 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 8002c5c:	4914      	ldr	r1, [pc, #80]	; (8002cb0 <I2C_SingleRandomWrite+0xb8>)
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f002 f93b 	bl	8004eda <I2C_CheckEvent>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f1      	beq.n	8002c4e <I2C_SingleRandomWrite+0x56>
	}

	/* Send Data */
	I2C_SendData ( I2Cx, Data );
 8002c6a:	78bb      	ldrb	r3, [r7, #2]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f002 f907 	bl	8004e82 <I2C_SendData>

	/* Test on I2Cx EV8 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8002c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c78:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 8002c7a:	e006      	b.n	8002c8a <I2C_SingleRandomWrite+0x92>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e5a      	subs	r2, r3, #1
 8002c80:	60fa      	str	r2, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <I2C_SingleRandomWrite+0x92>
			return 0xFF;
 8002c86:	23ff      	movs	r3, #255	; 0xff
 8002c88:	e00b      	b.n	8002ca2 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 8002c8a:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <I2C_SingleRandomWrite+0xbc>)
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f002 f924 	bl	8004eda <I2C_CheckEvent>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f1      	beq.n	8002c7c <I2C_SingleRandomWrite+0x84>
	}

	/* Send I2Cx STOP Condition */
	I2C_GenerateSTOP ( I2Cx, ENABLE );
 8002c98:	2101      	movs	r1, #1
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f002 f8d2 	bl	8004e44 <I2C_GenerateSTOP>

	/* If operation is OK, return 0 */
	return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	00030001 	.word	0x00030001
 8002cb0:	00070080 	.word	0x00070080
 8002cb4:	00070084 	.word	0x00070084

08002cb8 <LCD_SetCursor>:
//******************************************************************
void LCD_SetCursor ( uint8_t index ) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t index_hi = index & 0xF0;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f023 030f 	bic.w	r3, r3, #15
 8002cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t index_lo = (index & 0x0F) << 4;
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	214e      	movs	r1, #78	; 0x4e
 8002cdc:	481c      	ldr	r0, [pc, #112]	; (8002d50 <LCD_SetCursor+0x98>)
 8002cde:	f7ff ff8b 	bl	8002bf8 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_hi | LCD_E) & ~LCD_RS & ~LCD_RW );
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002cea:	f023 0305 	bic.w	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	214e      	movs	r1, #78	; 0x4e
 8002cf4:	4816      	ldr	r0, [pc, #88]	; (8002d50 <LCD_SetCursor+0x98>)
 8002cf6:	f7ff ff7f 	bl	8002bf8 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	f023 0307 	bic.w	r3, r3, #7
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	214e      	movs	r1, #78	; 0x4e
 8002d06:	4812      	ldr	r0, [pc, #72]	; (8002d50 <LCD_SetCursor+0x98>)
 8002d08:	f7ff ff76 	bl	8002bf8 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002d0c:	7bbb      	ldrb	r3, [r7, #14]
 8002d0e:	f023 0307 	bic.w	r3, r3, #7
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	214e      	movs	r1, #78	; 0x4e
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <LCD_SetCursor+0x98>)
 8002d1a:	f7ff ff6d 	bl	8002bf8 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_lo | LCD_E) & ~LCD_RS & ~LCD_RW );
 8002d1e:	7bbb      	ldrb	r3, [r7, #14]
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002d26:	f023 0305 	bic.w	r3, r3, #5
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	214e      	movs	r1, #78	; 0x4e
 8002d30:	4807      	ldr	r0, [pc, #28]	; (8002d50 <LCD_SetCursor+0x98>)
 8002d32:	f7ff ff61 	bl	8002bf8 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002d36:	7bbb      	ldrb	r3, [r7, #14]
 8002d38:	f023 0307 	bic.w	r3, r3, #7
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	214e      	movs	r1, #78	; 0x4e
 8002d42:	4803      	ldr	r0, [pc, #12]	; (8002d50 <LCD_SetCursor+0x98>)
 8002d44:	f7ff ff58 	bl	8002bf8 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40005400 	.word	0x40005400

08002d54 <LCD_WriteData>:
//******************************************************************
void LCD_WriteData ( uint8_t data ) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_hi = data & 0xF0;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	f023 030f 	bic.w	r3, r3, #15
 8002d64:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lo = (data & 0x0F) << 4;
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8002d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d70:	f023 0307 	bic.w	r3, r3, #7
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	214e      	movs	r1, #78	; 0x4e
 8002d82:	4824      	ldr	r0, [pc, #144]	; (8002e14 <LCD_WriteData+0xc0>)
 8002d84:	f7ff ff38 	bl	8002bf8 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi | LCD_E) | LCD_RS) & ~LCD_RW );
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	f043 0306 	orr.w	r3, r3, #6
 8002d8e:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	214e      	movs	r1, #78	; 0x4e
 8002d9a:	481e      	ldr	r0, [pc, #120]	; (8002e14 <LCD_WriteData+0xc0>)
 8002d9c:	f7ff ff2c 	bl	8002bf8 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8002da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da4:	f023 0307 	bic.w	r3, r3, #7
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	214e      	movs	r1, #78	; 0x4e
 8002db6:	4817      	ldr	r0, [pc, #92]	; (8002e14 <LCD_WriteData+0xc0>)
 8002db8:	f7ff ff1e 	bl	8002bf8 <I2C_SingleRandomWrite>

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8002dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dc0:	f023 0307 	bic.w	r3, r3, #7
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	214e      	movs	r1, #78	; 0x4e
 8002dd2:	4810      	ldr	r0, [pc, #64]	; (8002e14 <LCD_WriteData+0xc0>)
 8002dd4:	f7ff ff10 	bl	8002bf8 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo | LCD_E)  | LCD_RS) & ~LCD_RW );
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	f043 0306 	orr.w	r3, r3, #6
 8002dde:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	214e      	movs	r1, #78	; 0x4e
 8002dea:	480a      	ldr	r0, [pc, #40]	; (8002e14 <LCD_WriteData+0xc0>)
 8002dec:	f7ff ff04 	bl	8002bf8 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8002df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002df4:	f023 0307 	bic.w	r3, r3, #7
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	214e      	movs	r1, #78	; 0x4e
 8002e06:	4803      	ldr	r0, [pc, #12]	; (8002e14 <LCD_WriteData+0xc0>)
 8002e08:	f7ff fef6 	bl	8002bf8 <I2C_SingleRandomWrite>
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40005400 	.word	0x40005400

08002e18 <LCD_WriteString>:
//******************************************************************
void LCD_WriteString ( char * str ) {
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < strlen(str); i++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e009      	b.n	8002e3a <LCD_WriteString+0x22>
		LCD_WriteData ( str[i] );
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff90 	bl	8002d54 <LCD_WriteData>
	for (i = 0; i < strlen(str); i++) {
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3301      	adds	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	7bfc      	ldrb	r4, [r7, #15]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fd f985 	bl	800014c <strlen>
 8002e42:	4603      	mov	r3, r0
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d3ee      	bcc.n	8002e26 <LCD_WriteString+0xe>
	}

}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
	...

08002e54 <LCD_RunStringDevInfo>:
//******************************************************************
//******************************************************************
void LCD_RunStringDevInfo ( char * str1line,char * str2line, uint32_t delay) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
	char str1Frame[LCD_STR_LEN + 1];
	char str2Frame[LCD_STR_LEN + 1];
	uint8_t i;
	uint8_t cnt;

		tick = GetTickCount();
 8002e60:	f7ff fa26 	bl	80022b0 <GetTickCount>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a7f      	ldr	r2, [pc, #508]	; (8003064 <LCD_RunStringDevInfo+0x210>)
 8002e68:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8002e6a:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <LCD_RunStringDevInfo+0x214>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr1 = '\0';
 8002e76:	4b7d      	ldr	r3, [pc, #500]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
		*runStr2 = '\0';
 8002e7c:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e88:	e01c      	b.n	8002ec4 <LCD_RunStringDevInfo+0x70>
			strcat ( runStr1, " " );
 8002e8a:	4878      	ldr	r0, [pc, #480]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002e8c:	f7fd f95e 	bl	800014c <strlen>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002e96:	4413      	add	r3, r2
 8002e98:	4976      	ldr	r1, [pc, #472]	; (8003074 <LCD_RunStringDevInfo+0x220>)
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8002ea2:	4873      	ldr	r0, [pc, #460]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8002ea4:	f7fd f952 	bl	800014c <strlen>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8002eae:	4413      	add	r3, r2
 8002eb0:	4970      	ldr	r1, [pc, #448]	; (8003074 <LCD_RunStringDevInfo+0x220>)
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d9de      	bls.n	8002e8a <LCD_RunStringDevInfo+0x36>
		}
		strcat ( runStr1, str1line );
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	4867      	ldr	r0, [pc, #412]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002ed0:	f003 f854 	bl	8005f7c <strcat>
		strcat ( runStr2, str2line );
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	4866      	ldr	r0, [pc, #408]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8002ed8:	f003 f850 	bl	8005f7c <strcat>

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ee2:	e01c      	b.n	8002f1e <LCD_RunStringDevInfo+0xca>
			strcat ( runStr1, " " );
 8002ee4:	4861      	ldr	r0, [pc, #388]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002ee6:	f7fd f931 	bl	800014c <strlen>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4960      	ldr	r1, [pc, #384]	; (8003074 <LCD_RunStringDevInfo+0x220>)
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8002efc:	485c      	ldr	r0, [pc, #368]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8002efe:	f7fd f925 	bl	800014c <strlen>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8002f08:	4413      	add	r3, r2
 8002f0a:	495a      	ldr	r1, [pc, #360]	; (8003074 <LCD_RunStringDevInfo+0x220>)
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8002f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d9de      	bls.n	8002ee4 <LCD_RunStringDevInfo+0x90>
		}

		runStr1Len = strlen ( runStr1 );
 8002f26:	4851      	ldr	r0, [pc, #324]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002f28:	f7fd f910 	bl	800014c <strlen>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b51      	ldr	r3, [pc, #324]	; (8003078 <LCD_RunStringDevInfo+0x224>)
 8002f32:	701a      	strb	r2, [r3, #0]
		runStr2Len = strlen ( runStr2 );
 8002f34:	484e      	ldr	r0, [pc, #312]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8002f36:	f7fd f909 	bl	800014c <strlen>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4b4f      	ldr	r3, [pc, #316]	; (800307c <LCD_RunStringDevInfo+0x228>)
 8002f40:	701a      	strb	r2, [r3, #0]

	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 8002f42:	e07a      	b.n	800303a <LCD_RunStringDevInfo+0x1e6>
		if (GetTickCount() - tick > delay) {
 8002f44:	f7ff f9b4 	bl	80022b0 <GetTickCount>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b46      	ldr	r3, [pc, #280]	; (8003064 <LCD_RunStringDevInfo+0x210>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d271      	bcs.n	800303a <LCD_RunStringDevInfo+0x1e6>
			tick = GetTickCount();
 8002f56:	f7ff f9ab 	bl	80022b0 <GetTickCount>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4a41      	ldr	r2, [pc, #260]	; (8003064 <LCD_RunStringDevInfo+0x210>)
 8002f5e:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8002f60:	4b41      	ldr	r3, [pc, #260]	; (8003068 <LCD_RunStringDevInfo+0x214>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <LCD_RunStringDevInfo+0x214>)
 8002f6a:	701a      	strb	r2, [r3, #0]

			if (cnt<(runStr1Len-1)) {
 8002f6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f70:	4b41      	ldr	r3, [pc, #260]	; (8003078 <LCD_RunStringDevInfo+0x224>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	429a      	cmp	r2, r3
 8002f78:	da29      	bge.n	8002fce <LCD_RunStringDevInfo+0x17a>
			for (i = 0; i < LCD_STR_LEN; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f80:	e019      	b.n	8002fb6 <LCD_RunStringDevInfo+0x162>
				str1Frame[i] = runStr1[(strFrameIndex + i) % runStr1Len];
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <LCD_RunStringDevInfo+0x214>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <LCD_RunStringDevInfo+0x224>)
 8002f90:	7812      	ldrb	r2, [r2, #0]
 8002f92:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f96:	fb01 f202 	mul.w	r2, r1, r2
 8002f9a:	1a9a      	subs	r2, r3, r2
 8002f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa0:	4932      	ldr	r1, [pc, #200]	; (800306c <LCD_RunStringDevInfo+0x218>)
 8002fa2:	5c8a      	ldrb	r2, [r1, r2]
 8002fa4:	3328      	adds	r3, #40	; 0x28
 8002fa6:	443b      	add	r3, r7
 8002fa8:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++)
 8002fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fba:	2b07      	cmp	r3, #7
 8002fbc:	d9e1      	bls.n	8002f82 <LCD_RunStringDevInfo+0x12e>

			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку строку
 8002fbe:	2080      	movs	r0, #128	; 0x80
 8002fc0:	f7ff fe7a 	bl	8002cb8 <LCD_SetCursor>
			LCD_WriteString ( str1Frame );
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff25 	bl	8002e18 <LCD_WriteString>
			}

			if (cnt<(runStr2Len-1)){
 8002fce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	; (800307c <LCD_RunStringDevInfo+0x228>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	da29      	bge.n	8003030 <LCD_RunStringDevInfo+0x1dc>
			for (i = 0; i < LCD_STR_LEN; i++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fe2:	e019      	b.n	8003018 <LCD_RunStringDevInfo+0x1c4>
				str2Frame[i] = runStr2[(strFrameIndex + i) % runStr2Len];
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <LCD_RunStringDevInfo+0x214>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <LCD_RunStringDevInfo+0x228>)
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ff8:	fb01 f202 	mul.w	r2, r1, r2
 8002ffc:	1a9a      	subs	r2, r3, r2
 8002ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <LCD_RunStringDevInfo+0x21c>)
 8003004:	5c8a      	ldrb	r2, [r1, r2]
 8003006:	3328      	adds	r3, #40	; 0x28
 8003008:	443b      	add	r3, r7
 800300a:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < LCD_STR_LEN; i++)
 800300e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003012:	3301      	adds	r3, #1
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301c:	2b07      	cmp	r3, #7
 800301e:	d9e1      	bls.n	8002fe4 <LCD_RunStringDevInfo+0x190>

			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8003020:	20c0      	movs	r0, #192	; 0xc0
 8003022:	f7ff fe49 	bl	8002cb8 <LCD_SetCursor>
			LCD_WriteString ( str2Frame );
 8003026:	f107 0310 	add.w	r3, r7, #16
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fef4 	bl	8002e18 <LCD_WriteString>
			}

			cnt++;
 8003030:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003034:	3301      	adds	r3, #1
 8003036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 800303a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <LCD_RunStringDevInfo+0x224>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	3b01      	subs	r3, #1
 8003044:	429a      	cmp	r2, r3
 8003046:	f6ff af7d 	blt.w	8002f44 <LCD_RunStringDevInfo+0xf0>
 800304a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <LCD_RunStringDevInfo+0x228>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	3b01      	subs	r3, #1
 8003054:	429a      	cmp	r2, r3
 8003056:	f6ff af75 	blt.w	8002f44 <LCD_RunStringDevInfo+0xf0>
		}

}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000a0c 	.word	0x20000a0c
 8003068:	20000a10 	.word	0x20000a10
 800306c:	20000a14 	.word	0x20000a14
 8003070:	20000a8c 	.word	0x20000a8c
 8003074:	08007248 	.word	0x08007248
 8003078:	20000b01 	.word	0x20000b01
 800307c:	20000b02 	.word	0x20000b02

08003080 <LCD_RunStringBARCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера штрих-кодов бегущей строкой в первой строчке LCD
void LCD_RunStringBARCode ( char * str, uint32_t delay, uint8_t start ) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d13f      	bne.n	8003114 <LCD_RunStringBARCode+0x94>
		tick = GetTickCount();
 8003094:	f7ff f90c 	bl	80022b0 <GetTickCount>
 8003098:	4603      	mov	r3, r0
 800309a:	4a3e      	ldr	r2, [pc, #248]	; (8003194 <LCD_RunStringBARCode+0x114>)
 800309c:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 800309e:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <LCD_RunStringBARCode+0x118>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <LCD_RunStringBARCode+0x11c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80030aa:	2300      	movs	r3, #0
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e00e      	b.n	80030ce <LCD_RunStringBARCode+0x4e>
			strcat ( runStr, " " );
 80030b0:	483a      	ldr	r0, [pc, #232]	; (800319c <LCD_RunStringBARCode+0x11c>)
 80030b2:	f7fd f84b 	bl	800014c <strlen>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b38      	ldr	r3, [pc, #224]	; (800319c <LCD_RunStringBARCode+0x11c>)
 80030bc:	4413      	add	r3, r2
 80030be:	4938      	ldr	r1, [pc, #224]	; (80031a0 <LCD_RunStringBARCode+0x120>)
 80030c0:	461a      	mov	r2, r3
 80030c2:	460b      	mov	r3, r1
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80030c8:	7ffb      	ldrb	r3, [r7, #31]
 80030ca:	3301      	adds	r3, #1
 80030cc:	77fb      	strb	r3, [r7, #31]
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d9ed      	bls.n	80030b0 <LCD_RunStringBARCode+0x30>
		}
		strcat ( runStr, str );
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	4831      	ldr	r0, [pc, #196]	; (800319c <LCD_RunStringBARCode+0x11c>)
 80030d8:	f002 ff50 	bl	8005f7c <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e00e      	b.n	8003100 <LCD_RunStringBARCode+0x80>
			strcat ( runStr, " " );
 80030e2:	482e      	ldr	r0, [pc, #184]	; (800319c <LCD_RunStringBARCode+0x11c>)
 80030e4:	f7fd f832 	bl	800014c <strlen>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b2b      	ldr	r3, [pc, #172]	; (800319c <LCD_RunStringBARCode+0x11c>)
 80030ee:	4413      	add	r3, r2
 80030f0:	492b      	ldr	r1, [pc, #172]	; (80031a0 <LCD_RunStringBARCode+0x120>)
 80030f2:	461a      	mov	r2, r3
 80030f4:	460b      	mov	r3, r1
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
 80030fc:	3301      	adds	r3, #1
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	7ffb      	ldrb	r3, [r7, #31]
 8003102:	2b06      	cmp	r3, #6
 8003104:	d9ed      	bls.n	80030e2 <LCD_RunStringBARCode+0x62>
		}
		runStrLen = strlen ( runStr );
 8003106:	4825      	ldr	r0, [pc, #148]	; (800319c <LCD_RunStringBARCode+0x11c>)
 8003108:	f7fd f820 	bl	800014c <strlen>
 800310c:	4603      	mov	r3, r0
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <LCD_RunStringBARCode+0x124>)
 8003112:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d037      	beq.n	800318c <LCD_RunStringBARCode+0x10c>
		if (GetTickCount() - tick > delay) {
 800311c:	f7ff f8c8 	bl	80022b0 <GetTickCount>
 8003120:	4602      	mov	r2, r0
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <LCD_RunStringBARCode+0x114>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d22e      	bcs.n	800318c <LCD_RunStringBARCode+0x10c>
			tick = GetTickCount();
 800312e:	f7ff f8bf 	bl	80022b0 <GetTickCount>
 8003132:	4603      	mov	r3, r0
 8003134:	4a17      	ldr	r2, [pc, #92]	; (8003194 <LCD_RunStringBARCode+0x114>)
 8003136:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <LCD_RunStringBARCode+0x118>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	b2da      	uxtb	r2, r3
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <LCD_RunStringBARCode+0x118>)
 8003142:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e015      	b.n	8003176 <LCD_RunStringBARCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <LCD_RunStringBARCode+0x118>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	4413      	add	r3, r2
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <LCD_RunStringBARCode+0x124>)
 8003156:	7812      	ldrb	r2, [r2, #0]
 8003158:	fb93 f1f2 	sdiv	r1, r3, r2
 800315c:	fb01 f202 	mul.w	r2, r1, r2
 8003160:	1a9a      	subs	r2, r3, r2
 8003162:	7ffb      	ldrb	r3, [r7, #31]
 8003164:	490d      	ldr	r1, [pc, #52]	; (800319c <LCD_RunStringBARCode+0x11c>)
 8003166:	5c8a      	ldrb	r2, [r1, r2]
 8003168:	3320      	adds	r3, #32
 800316a:	443b      	add	r3, r7
 800316c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8003170:	7ffb      	ldrb	r3, [r7, #31]
 8003172:	3301      	adds	r3, #1
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	2b07      	cmp	r3, #7
 800317a:	d9e6      	bls.n	800314a <LCD_RunStringBARCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку
 800317c:	2080      	movs	r0, #128	; 0x80
 800317e:	f7ff fd9b 	bl	8002cb8 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe46 	bl	8002e18 <LCD_WriteString>
		}
	}
}
 800318c:	bf00      	nop
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000b04 	.word	0x20000b04
 8003198:	20000b08 	.word	0x20000b08
 800319c:	20000b0c 	.word	0x20000b0c
 80031a0:	08007248 	.word	0x08007248
 80031a4:	20000b37 	.word	0x20000b37

080031a8 <LCD_RunStringNFCCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера NFC бегущей строкой во второй строчке LCD
void LCD_RunStringNFCCode ( char * str, uint32_t delay, uint8_t start ) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d13f      	bne.n	800323c <LCD_RunStringNFCCode+0x94>
		tick = GetTickCount();
 80031bc:	f7ff f878 	bl	80022b0 <GetTickCount>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4a3e      	ldr	r2, [pc, #248]	; (80032bc <LCD_RunStringNFCCode+0x114>)
 80031c4:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <LCD_RunStringNFCCode+0x118>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 80031cc:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80031d2:	2300      	movs	r3, #0
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e00e      	b.n	80031f6 <LCD_RunStringNFCCode+0x4e>
			strcat ( runStr, " " );
 80031d8:	483a      	ldr	r0, [pc, #232]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 80031da:	f7fc ffb7 	bl	800014c <strlen>
 80031de:	4603      	mov	r3, r0
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 80031e4:	4413      	add	r3, r2
 80031e6:	4938      	ldr	r1, [pc, #224]	; (80032c8 <LCD_RunStringNFCCode+0x120>)
 80031e8:	461a      	mov	r2, r3
 80031ea:	460b      	mov	r3, r1
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
 80031f2:	3301      	adds	r3, #1
 80031f4:	77fb      	strb	r3, [r7, #31]
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d9ed      	bls.n	80031d8 <LCD_RunStringNFCCode+0x30>
		}
		strcat ( runStr, str );
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	4831      	ldr	r0, [pc, #196]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 8003200:	f002 febc 	bl	8005f7c <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e00e      	b.n	8003228 <LCD_RunStringNFCCode+0x80>
			strcat ( runStr, " " );
 800320a:	482e      	ldr	r0, [pc, #184]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 800320c:	f7fc ff9e 	bl	800014c <strlen>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 8003216:	4413      	add	r3, r2
 8003218:	492b      	ldr	r1, [pc, #172]	; (80032c8 <LCD_RunStringNFCCode+0x120>)
 800321a:	461a      	mov	r2, r3
 800321c:	460b      	mov	r3, r1
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003222:	7ffb      	ldrb	r3, [r7, #31]
 8003224:	3301      	adds	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	7ffb      	ldrb	r3, [r7, #31]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d9ed      	bls.n	800320a <LCD_RunStringNFCCode+0x62>
		}
		runStrLen = strlen ( runStr );
 800322e:	4825      	ldr	r0, [pc, #148]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 8003230:	f7fc ff8c 	bl	800014c <strlen>
 8003234:	4603      	mov	r3, r0
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <LCD_RunStringNFCCode+0x124>)
 800323a:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d037      	beq.n	80032b4 <LCD_RunStringNFCCode+0x10c>
		if (GetTickCount() - tick > delay) {
 8003244:	f7ff f834 	bl	80022b0 <GetTickCount>
 8003248:	4602      	mov	r2, r0
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <LCD_RunStringNFCCode+0x114>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d22e      	bcs.n	80032b4 <LCD_RunStringNFCCode+0x10c>
			tick = GetTickCount();
 8003256:	f7ff f82b 	bl	80022b0 <GetTickCount>
 800325a:	4603      	mov	r3, r0
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <LCD_RunStringNFCCode+0x114>)
 800325e:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <LCD_RunStringNFCCode+0x118>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <LCD_RunStringNFCCode+0x118>)
 800326a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e015      	b.n	800329e <LCD_RunStringNFCCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <LCD_RunStringNFCCode+0x118>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	7ffb      	ldrb	r3, [r7, #31]
 800327a:	4413      	add	r3, r2
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <LCD_RunStringNFCCode+0x124>)
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	fb93 f1f2 	sdiv	r1, r3, r2
 8003284:	fb01 f202 	mul.w	r2, r1, r2
 8003288:	1a9a      	subs	r2, r3, r2
 800328a:	7ffb      	ldrb	r3, [r7, #31]
 800328c:	490d      	ldr	r1, [pc, #52]	; (80032c4 <LCD_RunStringNFCCode+0x11c>)
 800328e:	5c8a      	ldrb	r2, [r1, r2]
 8003290:	3320      	adds	r3, #32
 8003292:	443b      	add	r3, r7
 8003294:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	3301      	adds	r3, #1
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	7ffb      	ldrb	r3, [r7, #31]
 80032a0:	2b07      	cmp	r3, #7
 80032a2:	d9e6      	bls.n	8003272 <LCD_RunStringNFCCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 80032a4:	20c0      	movs	r0, #192	; 0xc0
 80032a6:	f7ff fd07 	bl	8002cb8 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fdb2 	bl	8002e18 <LCD_WriteString>
		}
	}
}
 80032b4:	bf00      	nop
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000b38 	.word	0x20000b38
 80032c0:	20000b3c 	.word	0x20000b3c
 80032c4:	20000b40 	.word	0x20000b40
 80032c8:	08007248 	.word	0x08007248
 80032cc:	20000b6b 	.word	0x20000b6b

080032d0 <LCD_Init>:
//******************************************************************

void LCD_Init(void) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
	uint8_t i;

	LCD_CtrlLinesConfig();
 80032d6:	f7ff fc45 	bl	8002b64 <LCD_CtrlLinesConfig>

	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 80032da:	2300      	movs	r3, #0
 80032dc:	71fb      	strb	r3, [r7, #7]
 80032de:	e02d      	b.n	800333c <LCD_Init+0x6c>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	4a20      	ldr	r2, [pc, #128]	; (8003364 <LCD_Init+0x94>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	214e      	movs	r1, #78	; 0x4e
 80032ee:	481e      	ldr	r0, [pc, #120]	; (8003368 <LCD_Init+0x98>)
 80032f0:	f7ff fc82 	bl	8002bf8 <I2C_SingleRandomWrite>
		Delay(10);
 80032f4:	200a      	movs	r0, #10
 80032f6:	f7ff fc21 	bl	8002b3c <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) | LCD_E) & ~LCD_RS & ~LCD_RW );
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4a19      	ldr	r2, [pc, #100]	; (8003364 <LCD_Init+0x94>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	b25b      	sxtb	r3, r3
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	214e      	movs	r1, #78	; 0x4e
 8003310:	4815      	ldr	r0, [pc, #84]	; (8003368 <LCD_Init+0x98>)
 8003312:	f7ff fc71 	bl	8002bf8 <I2C_SingleRandomWrite>
		Delay(10);
 8003316:	200a      	movs	r0, #10
 8003318:	f7ff fc10 	bl	8002b3c <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	4a11      	ldr	r2, [pc, #68]	; (8003364 <LCD_Init+0x94>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	214e      	movs	r1, #78	; 0x4e
 800332a:	480f      	ldr	r0, [pc, #60]	; (8003368 <LCD_Init+0x98>)
 800332c:	f7ff fc64 	bl	8002bf8 <I2C_SingleRandomWrite>
		Delay(10);
 8003330:	200a      	movs	r0, #10
 8003332:	f7ff fc03 	bl	8002b3c <Delay>
	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	3301      	adds	r3, #1
 800333a:	71fb      	strb	r3, [r7, #7]
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	2b0b      	cmp	r3, #11
 8003340:	d9ce      	bls.n	80032e0 <LCD_Init+0x10>
	}
	/*
	 * Очистка дисплея
	 */
	LCD_SetCursor ( LCD_CURSOR_1STR );
 8003342:	2080      	movs	r0, #128	; 0x80
 8003344:	f7ff fcb8 	bl	8002cb8 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8003348:	4808      	ldr	r0, [pc, #32]	; (800336c <LCD_Init+0x9c>)
 800334a:	f7ff fd65 	bl	8002e18 <LCD_WriteString>
	LCD_SetCursor ( LCD_CURSOR_2STR );
 800334e:	20c0      	movs	r0, #192	; 0xc0
 8003350:	f7ff fcb2 	bl	8002cb8 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 8003354:	4805      	ldr	r0, [pc, #20]	; (800336c <LCD_Init+0x9c>)
 8003356:	f7ff fd5f 	bl	8002e18 <LCD_WriteString>
	//LCD_WriteString ( "SUM:               " );
	/*
	 * Отображение на дисплее текущей суммы
	 */
	//LCD_DisplaySum();
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200003f8 	.word	0x200003f8
 8003368:	40005400 	.word	0x40005400
 800336c:	0800724c 	.word	0x0800724c

08003370 <PN532_Delay>:
int8_t _uid[7];      // ISO14443A uid
int8_t _uidLen;      // uid len
int8_t _key[6];      // Mifare Classic key
int8_t _inListedTag; // Tg number of inlisted tag.

void PN532_Delay(uint32_t cntdelay){
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	while(cntdelay--){};
 8003378:	bf00      	nop
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1fa      	bne.n	800337a <PN532_Delay+0xa>
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <PN532_WakeUp>:
//******************************************************************************
bool PN532_WakeUp(void){
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0

/*
    uint8_t packet[21];
    uint8_t *p = packet;
*/
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800339a:	4807      	ldr	r0, [pc, #28]	; (80033b8 <PN532_WakeUp+0x28>)
 800339c:	f001 fc3b 	bl	8004c16 <GPIO_WriteBit>
	 Delay(10);
 80033a0:	200a      	movs	r0, #10
 80033a2:	f7ff fbcb 	bl	8002b3c <Delay>
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80033a6:	2201      	movs	r2, #1
 80033a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <PN532_WakeUp+0x28>)
 80033ae:	f001 fc32 	bl	8004c16 <GPIO_WriteBit>
    ///-----------------------------------------------------------------------------


	 PN532_write( packet,21);
*/
	  return TRUE;
 80033b2:	2301      	movs	r3, #1

}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40010c00 	.word	0x40010c00

080033bc <PN532_setPassiveActivationRetries>:
                          after mxRetries

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_setPassiveActivationRetries(uint8_t maxRetries) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  pn532_packetbuffer[0] = PN532_COMMAND_RFCONFIGURATION;
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <PN532_setPassiveActivationRetries+0x48>)
 80033c8:	2232      	movs	r2, #50	; 0x32
 80033ca:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 5;    // Config item 5 (MaxRetries)
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <PN532_setPassiveActivationRetries+0x48>)
 80033ce:	2205      	movs	r2, #5
 80033d0:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = 0xFF; // MxRtyATR (default = 0xFF)
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <PN532_setPassiveActivationRetries+0x48>)
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	709a      	strb	r2, [r3, #2]
  pn532_packetbuffer[3] = 0x01; // MxRtyPSL (default = 0x01)
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <PN532_setPassiveActivationRetries+0x48>)
 80033da:	2201      	movs	r2, #1
 80033dc:	70da      	strb	r2, [r3, #3]
  pn532_packetbuffer[4] = maxRetries;
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <PN532_setPassiveActivationRetries+0x48>)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	7113      	strb	r3, [r2, #4]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 5,1000))
 80033e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033e8:	2105      	movs	r1, #5
 80033ea:	4806      	ldr	r0, [pc, #24]	; (8003404 <PN532_setPassiveActivationRetries+0x48>)
 80033ec:	f000 f900 	bl	80035f0 <PN532_sendCommandCheckAck>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <PN532_setPassiveActivationRetries+0x3e>
  { return 0x0;} // no ACK
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <PN532_setPassiveActivationRetries+0x40>

  return 1;
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000b84 	.word	0x20000b84

08003408 <PN532_readPassiveTargetID>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readPassiveTargetID(uint8_t cardbaudrate, uint8_t *uid,
                                         uint8_t *uidLength, uint16_t timeout) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	461a      	mov	r2, r3
 8003414:	4603      	mov	r3, r0
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	4613      	mov	r3, r2
 800341a:	81bb      	strh	r3, [r7, #12]
  pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <PN532_readPassiveTargetID+0x54>)
 800341e:	224a      	movs	r2, #74	; 0x4a
 8003420:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 1; // max 1 cards at once (we can set this to 2 later)
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <PN532_readPassiveTargetID+0x54>)
 8003424:	2201      	movs	r2, #1
 8003426:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = cardbaudrate;
 8003428:	4a0c      	ldr	r2, [pc, #48]	; (800345c <PN532_readPassiveTargetID+0x54>)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	7093      	strb	r3, [r2, #2]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)) {
 800342e:	89bb      	ldrh	r3, [r7, #12]
 8003430:	461a      	mov	r2, r3
 8003432:	2103      	movs	r1, #3
 8003434:	4809      	ldr	r0, [pc, #36]	; (800345c <PN532_readPassiveTargetID+0x54>)
 8003436:	f000 f8db 	bl	80035f0 <PN532_sendCommandCheckAck>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <PN532_readPassiveTargetID+0x3c>
    return 0x0; // no cards read
 8003440:	2300      	movs	r3, #0
 8003442:	e007      	b.n	8003454 <PN532_readPassiveTargetID+0x4c>
  }
  //Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
 //Задержка внутри PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)
 //Для чтения ID карты задежка не менее 10 мс обязательна!
     Delay(20);
 8003444:	2014      	movs	r0, #20
 8003446:	f7ff fb79 	bl	8002b3c <Delay>
/*
  // wait for a card to enter the field (only possible with I2C)
  if (!waitready(timeout)) {
    return 0x0;   }
*/
  return PN532_readDetectedPassiveTargetID(uid, uidLength);
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	68b8      	ldr	r0, [r7, #8]
 800344e:	f000 f807 	bl	8003460 <PN532_readDetectedPassiveTargetID>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000b84 	.word	0x20000b84

08003460 <PN532_readDetectedPassiveTargetID>:
                          length of the card's UID.

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readDetectedPassiveTargetID(uint8_t *uid, uint8_t *uidLength) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  // read data packet
  PN532_readdata(pn532_readbuffer, 19, 0x00);
 800346a:	2200      	movs	r2, #0
 800346c:	2113      	movs	r1, #19
 800346e:	4819      	ldr	r0, [pc, #100]	; (80034d4 <PN532_readDetectedPassiveTargetID+0x74>)
 8003470:	f000 f9c6 	bl	8003800 <PN532_readdata>
  PN532DEBUGPRINT.print(F("Found "));
  PN532DEBUGPRINT.print(pn532_packetbuffer[7], DEC);
  PN532DEBUGPRINT.println(F(" tags"));
#endif
*/
  if (pn532_readbuffer[7] != 1)
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <PN532_readDetectedPassiveTargetID+0x74>)
 8003476:	79db      	ldrb	r3, [r3, #7]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <PN532_readDetectedPassiveTargetID+0x20>
    return FALSE;
 800347c:	2300      	movs	r3, #0
 800347e:	e024      	b.n	80034ca <PN532_readDetectedPassiveTargetID+0x6a>

  uint16_t sens_res = pn532_readbuffer[9];
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <PN532_readDetectedPassiveTargetID+0x74>)
 8003482:	7a5b      	ldrb	r3, [r3, #9]
 8003484:	81bb      	strh	r3, [r7, #12]
  sens_res <<= 8;
 8003486:	89bb      	ldrh	r3, [r7, #12]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	81bb      	strh	r3, [r7, #12]
  sens_res |= pn532_readbuffer[10];
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <PN532_readDetectedPassiveTargetID+0x74>)
 800348e:	7a9b      	ldrb	r3, [r3, #10]
 8003490:	b29a      	uxth	r2, r3
 8003492:	89bb      	ldrh	r3, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	81bb      	strh	r3, [r7, #12]
  PN532DEBUGPRINT.print(F("SAK: 0x"));
  PN532DEBUGPRINT.println(pn532_packetbuffer[11], HEX);
#endif
*/
  /* Card appears to be Mifare Classic */
  *uidLength = pn532_readbuffer[12];
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <PN532_readDetectedPassiveTargetID+0x74>)
 800349a:	7b1a      	ldrb	r2, [r3, #12]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	701a      	strb	r2, [r3, #0]
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.print(F("UID:"));
#endif
*/
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e00b      	b.n	80034be <PN532_readDetectedPassiveTargetID+0x5e>
    uid[i] = pn532_readbuffer[13 + i];
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	f103 020d 	add.w	r2, r3, #13
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	440b      	add	r3, r1
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <PN532_readDetectedPassiveTargetID+0x74>)
 80034b4:	5c8a      	ldrb	r2, [r1, r2]
 80034b6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	3301      	adds	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <PN532_readDetectedPassiveTargetID+0x74>)
 80034c0:	7b1b      	ldrb	r3, [r3, #12]
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3ee      	bcc.n	80034a6 <PN532_readDetectedPassiveTargetID+0x46>
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.println();
#endif
*/
  return TRUE;
 80034c8:	2301      	movs	r3, #1
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000bc4 	.word	0x20000bc4

080034d8 <PN532_SAMConfig>:

//******************************************************************************
bool PN532_SAMConfig(void){
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0

            return this.ExecuteCmd(cmd);
        }
 *
 */
	 pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <PN532_SAMConfig+0x50>)
 80034de:	2214      	movs	r2, #20
 80034e0:	701a      	strb	r2, [r3, #0]
	 pn532_packetbuffer[1] = 0x01;//0x01;
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <PN532_SAMConfig+0x50>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	705a      	strb	r2, [r3, #1]
	 pn532_packetbuffer[2] = 0x14;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <PN532_SAMConfig+0x50>)
 80034ea:	2214      	movs	r2, #20
 80034ec:	709a      	strb	r2, [r3, #2]
	 pn532_packetbuffer[3] = 0x00;//не использоать прерывания
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <PN532_SAMConfig+0x50>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	70da      	strb	r2, [r3, #3]

	  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,500)) {
 80034f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034f8:	2104      	movs	r1, #4
 80034fa:	480b      	ldr	r0, [pc, #44]	; (8003528 <PN532_SAMConfig+0x50>)
 80034fc:	f000 f878 	bl	80035f0 <PN532_sendCommandCheckAck>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <PN532_SAMConfig+0x32>
	    return 0;
 8003506:	2300      	movs	r3, #0
 8003508:	e00b      	b.n	8003522 <PN532_SAMConfig+0x4a>

//Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);
// read data packet
	  PN532_readdata(pn532_readbuffer, 9, 0xFF);
 800350a:	22ff      	movs	r2, #255	; 0xff
 800350c:	2109      	movs	r1, #9
 800350e:	4807      	ldr	r0, [pc, #28]	; (800352c <PN532_SAMConfig+0x54>)
 8003510:	f000 f976 	bl	8003800 <PN532_readdata>
	  	    }
*/
	    //int offset = 6;
	    //pn532_packetbuffer[offset] == 0x15

return (pn532_readbuffer[6] == 0x15);
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <PN532_SAMConfig+0x54>)
 8003516:	799b      	ldrb	r3, [r3, #6]
 8003518:	2b15      	cmp	r3, #21
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
}
 8003522:	4618      	mov	r0, r3
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000b84 	.word	0x20000b84
 800352c:	20000bc4 	.word	0x20000bc4

08003530 <PN532_getFirmwareVersion>:
    Checks the firmware version of the PN5xx chip

    @returns  The chip's firmware version and ID
*/
/******************************************************************************/
 uint32_t PN532_getFirmwareVersion(void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 uint32_t response;
 const uint8_t pn532response_firmwarevers[] = {0x00, 0x00, 0xFF, 0x06, 0xFA, 0xD5};
 8003536:	4a2b      	ldr	r2, [pc, #172]	; (80035e4 <PN532_getFirmwareVersion+0xb4>)
 8003538:	463b      	mov	r3, r7
 800353a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800353e:	6018      	str	r0, [r3, #0]
 8003540:	3304      	adds	r3, #4
 8003542:	8019      	strh	r1, [r3, #0]

  pn532_packetbuffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <PN532_getFirmwareVersion+0xb8>)
 8003546:	2202      	movs	r2, #2
 8003548:	701a      	strb	r2, [r3, #0]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 1,500)) {
 800354a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800354e:	2101      	movs	r1, #1
 8003550:	4825      	ldr	r0, [pc, #148]	; (80035e8 <PN532_getFirmwareVersion+0xb8>)
 8003552:	f000 f84d 	bl	80035f0 <PN532_sendCommandCheckAck>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <PN532_getFirmwareVersion+0x30>
    return 0;
 800355c:	2300      	movs	r3, #0
 800355e:	e03c      	b.n	80035da <PN532_getFirmwareVersion+0xaa>

//Нужна задержка после выполнения подтверждения готовности!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);

   PN532_readdata(pn532_readbuffer, 13, 0xFF);
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	210d      	movs	r1, #13
 8003564:	4821      	ldr	r0, [pc, #132]	; (80035ec <PN532_getFirmwareVersion+0xbc>)
 8003566:	f000 f94b 	bl	8003800 <PN532_readdata>
	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	    }
*/
   //сравнение полученных первых шести байт с массивом правильных данных
   //если сдержимое не одинаковое, от выход с ошибкой;
	if (0 != memcmp((char *)pn532_readbuffer, (char *)pn532response_firmwarevers, 6))
 800356a:	463b      	mov	r3, r7
 800356c:	2206      	movs	r2, #6
 800356e:	4619      	mov	r1, r3
 8003570:	481e      	ldr	r0, [pc, #120]	; (80035ec <PN532_getFirmwareVersion+0xbc>)
 8003572:	f002 fcc3 	bl	8005efc <memcmp>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <PN532_getFirmwareVersion+0x50>
	   { return 0; }
 800357c:	2300      	movs	r3, #0
 800357e:	e02c      	b.n	80035da <PN532_getFirmwareVersion+0xaa>

  int offset = 7;
 8003580:	2307      	movs	r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  response = pn532_readbuffer[offset++];
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	60fa      	str	r2, [r7, #12]
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <PN532_getFirmwareVersion+0xbc>)
 800358c:	5cd3      	ldrb	r3, [r2, r3]
 800358e:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	60fa      	str	r2, [r7, #12]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <PN532_getFirmwareVersion+0xbc>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	60fa      	str	r2, [r7, #12]
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <PN532_getFirmwareVersion+0xbc>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	4a07      	ldr	r2, [pc, #28]	; (80035ec <PN532_getFirmwareVersion+0xbc>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]

  return response;
 80035d8:	68bb      	ldr	r3, [r7, #8]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	08007260 	.word	0x08007260
 80035e8:	20000b84 	.word	0x20000b84
 80035ec:	20000bc4 	.word	0x20000bc4

080035f0 <PN532_sendCommandCheckAck>:
     @returns  1 if everything is OK, 0 if timeout occured before an
               ACK was recieved
 */
 /**************************************************************************/

 bool PN532_sendCommandCheckAck(uint8_t *cmd, uint8_t cmdlen, uint16_t timeout) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
 80035fc:	4613      	mov	r3, r2
 80035fe:	803b      	strh	r3, [r7, #0]

	 PN532_writecommand(cmd, cmdlen);
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f81b 	bl	8003640 <PN532_writecommand>

#endif
//------------------------------------------------------------------------------
*/
//Ожидание и чтение байта готовности (0x01)
   if (!PN532_waitready(timeout)) {
 800360a:	883b      	ldrh	r3, [r7, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa91 	bl	8003b34 <PN532_waitready>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <PN532_sendCommandCheckAck+0x2c>
	  return FALSE; }
 8003618:	2300      	movs	r3, #0
 800361a:	e00d      	b.n	8003638 <PN532_sendCommandCheckAck+0x48>

//Нужна задержка после выполнения подтверждения готовности!!!!!
   PN532_Delay(100);
 800361c:	2064      	movs	r0, #100	; 0x64
 800361e:	f7ff fea7 	bl	8003370 <PN532_Delay>
  	}
  #endif
//------------------------------------------------------------------------------
*/
// чтение подтверждения
  if (!PN532_readack()) {  return FALSE;  }
 8003622:	f000 f95f 	bl	80038e4 <PN532_readack>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <PN532_sendCommandCheckAck+0x40>
 800362c:	2300      	movs	r3, #0
 800362e:	e003      	b.n	8003638 <PN532_sendCommandCheckAck+0x48>

   // For SPI only wait for the chip to be ready again.
   // This is unnecessary with I2C.
  PN532_Delay(100);
 8003630:	2064      	movs	r0, #100	; 0x64
 8003632:	f7ff fe9d 	bl	8003370 <PN532_Delay>

//Delay(2);
 //  if (!PN532_waitready(timeout)) {  return FALSE;}
//Delay(1);

   return TRUE; // ack'd command
 8003636:	2301      	movs	r3, #1

 }
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <PN532_writecommand>:

     @param  cmd       Pointer to the command buffer
     @param  cmdlen    Command length in bytes
 */
 /**************************************************************************/
 void PN532_writecommand(uint8_t *cmd, uint8_t cmdlen) {
 8003640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003644:	b089      	sub	sp, #36	; 0x24
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	70fb      	strb	r3, [r7, #3]
 800364e:	466b      	mov	r3, sp
 8003650:	461e      	mov	r6, r3

     uint8_t checksum;
     uint8_t packet[8 + cmdlen];
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	f103 0108 	add.w	r1, r3, #8
 8003658:	1e4b      	subs	r3, r1, #1
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	460a      	mov	r2, r1
 800365e:	2300      	movs	r3, #0
 8003660:	4690      	mov	r8, r2
 8003662:	4699      	mov	r9, r3
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003670:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003674:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003678:	460a      	mov	r2, r1
 800367a:	2300      	movs	r3, #0
 800367c:	4614      	mov	r4, r2
 800367e:	461d      	mov	r5, r3
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	00eb      	lsls	r3, r5, #3
 800368a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368e:	00e2      	lsls	r2, r4, #3
 8003690:	460b      	mov	r3, r1
 8003692:	3307      	adds	r3, #7
 8003694:	08db      	lsrs	r3, r3, #3
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	ebad 0d03 	sub.w	sp, sp, r3
 800369c:	466b      	mov	r3, sp
 800369e:	3300      	adds	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
     uint8_t *p = packet;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
     cmdlen++;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	3301      	adds	r3, #1
 80036aa:	70fb      	strb	r3, [r7, #3]

     p[0] = PN532_SPI_DATAWRITE;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
     p++;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_PREAMBLE;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
     p++;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3301      	adds	r3, #1
 80036c2:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE1;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
     p++;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	3301      	adds	r3, #1
 80036ce:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE2;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	701a      	strb	r2, [r3, #0]
     p++;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3301      	adds	r3, #1
 80036da:	61bb      	str	r3, [r7, #24]
     checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
 80036dc:	23ff      	movs	r3, #255	; 0xff
 80036de:	75fb      	strb	r3, [r7, #23]

     p[0] = cmdlen;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	701a      	strb	r2, [r3, #0]
     p++;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61bb      	str	r3, [r7, #24]
     p[0] = ~cmdlen + 1;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	425b      	negs	r3, r3
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	701a      	strb	r2, [r3, #0]
     p++;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_HOSTTOPN532;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	22d4      	movs	r2, #212	; 0xd4
 8003700:	701a      	strb	r2, [r3, #0]
     p++;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3301      	adds	r3, #1
 8003706:	61bb      	str	r3, [r7, #24]
     checksum += PN532_HOSTTOPN532;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	3b2c      	subs	r3, #44	; 0x2c
 800370c:	75fb      	strb	r3, [r7, #23]

     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 800370e:	2300      	movs	r3, #0
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e012      	b.n	800373a <PN532_writecommand+0xfa>
       p[0] = cmd[i];
 8003714:	7ffb      	ldrb	r3, [r7, #31]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	701a      	strb	r2, [r3, #0]
       p++;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	3301      	adds	r3, #1
 8003724:	61bb      	str	r3, [r7, #24]
       checksum += cmd[i];
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	4413      	add	r3, r2
 8003732:	75fb      	strb	r3, [r7, #23]
     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 8003734:	7ffb      	ldrb	r3, [r7, #31]
 8003736:	3301      	adds	r3, #1
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	7ffa      	ldrb	r2, [r7, #31]
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	3b01      	subs	r3, #1
 8003740:	429a      	cmp	r2, r3
 8003742:	dbe7      	blt.n	8003714 <PN532_writecommand+0xd4>
     }

     p[0] = ~checksum;
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	43db      	mvns	r3, r3
 8003748:	b2da      	uxtb	r2, r3
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	701a      	strb	r2, [r3, #0]
     p++;
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	3301      	adds	r3, #1
 8003752:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_POSTAMBLE;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
     p++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3301      	adds	r3, #1
 800375e:	61bb      	str	r3, [r7, #24]
//		USART_SendData(USART2_NUM,0x0D);
//		while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
#endif
//-----------------------------------------------------------------------------

     PN532_write( packet, 8 + cmdlen);
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	3308      	adds	r3, #8
 8003764:	4619      	mov	r1, r3
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f806 	bl	8003778 <PN532_write>
 800376c:	46b5      	mov	sp, r6

 }
 800376e:	bf00      	nop
 8003770:	3724      	adds	r7, #36	; 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003778 <PN532_write>:
/******************************************************************************/
 void PN532_write( uint8_t *buffer, size_t len) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу
    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8003782:	bf00      	nop
 8003784:	2102      	movs	r1, #2
 8003786:	481c      	ldr	r0, [pc, #112]	; (80037f8 <PN532_write+0x80>)
 8003788:	f001 fe3a 	bl	8005400 <SPI_I2S_GetFlagStatus>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f8      	beq.n	8003784 <PN532_write+0xc>

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003792:	2200      	movs	r2, #0
 8003794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003798:	4818      	ldr	r0, [pc, #96]	; (80037fc <PN532_write+0x84>)
 800379a:	f001 fa3c 	bl	8004c16 <GPIO_WriteBit>

	  //PN532_Delay(100);
	  Delay(2);
 800379e:	2002      	movs	r0, #2
 80037a0:	f7ff f9cc 	bl	8002b3c <Delay>
	for (size_t i = 0; i < len; i++) {
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e017      	b.n	80037da <PN532_write+0x62>

		SPI_I2S_SendData(SPI2,buffer[i]);
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	4810      	ldr	r0, [pc, #64]	; (80037f8 <PN532_write+0x80>)
 80037b8:	f001 fdca 	bl	8005350 <SPI_I2S_SendData>

	    PN532_Delay(400);
 80037bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80037c0:	f7ff fdd6 	bl	8003370 <PN532_Delay>

	    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET){};  // ждём пока данные уйдут
 80037c4:	bf00      	nop
 80037c6:	2102      	movs	r1, #2
 80037c8:	480b      	ldr	r0, [pc, #44]	; (80037f8 <PN532_write+0x80>)
 80037ca:	f001 fe19 	bl	8005400 <SPI_I2S_GetFlagStatus>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f8      	beq.n	80037c6 <PN532_write+0x4e>
	for (size_t i = 0; i < len; i++) {
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d3e3      	bcc.n	80037aa <PN532_write+0x32>

     }

//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80037e2:	2201      	movs	r2, #1
 80037e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037e8:	4804      	ldr	r0, [pc, #16]	; (80037fc <PN532_write+0x84>)
 80037ea:	f001 fa14 	bl	8004c16 <GPIO_WriteBit>


 }
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40003800 	.word	0x40003800
 80037fc:	40010c00 	.word	0x40010c00

08003800 <PN532_readdata>:

     @param  rd_buff      Pointer to the buffer where data will be written
     @param  len_rd_buff         Number of bytes to be read
 */
 /**************************************************************************/
 void PN532_readdata(uint8_t *rd_buff, uint8_t len_rd_buff,uint16_t sendvalue) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
 800380c:	4613      	mov	r3, r2
 800380e:	803b      	strh	r3, [r7, #0]
      //uint8_t cmd = PN532_SPI_DATAREAD;
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003816:	4831      	ldr	r0, [pc, #196]	; (80038dc <PN532_readdata+0xdc>)
 8003818:	f001 f9fd 	bl	8004c16 <GPIO_WriteBit>

    // PN532_Delay(100);
     Delay(2);
 800381c:	2002      	movs	r0, #2
 800381e:	f7ff f98d 	bl	8002b3c <Delay>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8003822:	bf00      	nop
 8003824:	2102      	movs	r1, #2
 8003826:	482e      	ldr	r0, [pc, #184]	; (80038e0 <PN532_readdata+0xe0>)
 8003828:	f001 fdea 	bl	8005400 <SPI_I2S_GetFlagStatus>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f8      	beq.n	8003824 <PN532_readdata+0x24>
	   SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 8003832:	2103      	movs	r1, #3
 8003834:	482a      	ldr	r0, [pc, #168]	; (80038e0 <PN532_readdata+0xe0>)
 8003836:	f001 fd8b 	bl	8005350 <SPI_I2S_SendData>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800383a:	bf00      	nop
 800383c:	2102      	movs	r1, #2
 800383e:	4828      	ldr	r0, [pc, #160]	; (80038e0 <PN532_readdata+0xe0>)
 8003840:	f001 fdde 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f8      	beq.n	800383c <PN532_readdata+0x3c>
	   while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 800384a:	bf00      	nop
 800384c:	2101      	movs	r1, #1
 800384e:	4824      	ldr	r0, [pc, #144]	; (80038e0 <PN532_readdata+0xe0>)
 8003850:	f001 fdd6 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f8      	beq.n	800384c <PN532_readdata+0x4c>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 800385a:	4821      	ldr	r0, [pc, #132]	; (80038e0 <PN532_readdata+0xe0>)
 800385c:	f001 fd86 	bl	800536c <SPI_I2S_ReceiveData>
 8003860:	4603      	mov	r3, r0
 8003862:	73bb      	strb	r3, [r7, #14]

	   // чтение
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e029      	b.n	80038be <PN532_readdata+0xbe>
	         PN532_Delay(400);
 800386a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800386e:	f7ff fd7f 	bl	8003370 <PN532_Delay>

	    	 SPI_I2S_SendData(SPI2, sendvalue);
 8003872:	883b      	ldrh	r3, [r7, #0]
 8003874:	4619      	mov	r1, r3
 8003876:	481a      	ldr	r0, [pc, #104]	; (80038e0 <PN532_readdata+0xe0>)
 8003878:	f001 fd6a 	bl	8005350 <SPI_I2S_SendData>

	         PN532_Delay(400);
 800387c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003880:	f7ff fd76 	bl	8003370 <PN532_Delay>

			 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8003884:	bf00      	nop
 8003886:	2102      	movs	r1, #2
 8003888:	4815      	ldr	r0, [pc, #84]	; (80038e0 <PN532_readdata+0xe0>)
 800388a:	f001 fdb9 	bl	8005400 <SPI_I2S_GetFlagStatus>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f8      	beq.n	8003886 <PN532_readdata+0x86>

	    	 while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появтся
 8003894:	bf00      	nop
 8003896:	2101      	movs	r1, #1
 8003898:	4811      	ldr	r0, [pc, #68]	; (80038e0 <PN532_readdata+0xe0>)
 800389a:	f001 fdb1 	bl	8005400 <SPI_I2S_GetFlagStatus>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f8      	beq.n	8003896 <PN532_readdata+0x96>

	    	 rd_buff[i] =SPI_I2S_ReceiveData(SPI2);
 80038a4:	480e      	ldr	r0, [pc, #56]	; (80038e0 <PN532_readdata+0xe0>)
 80038a6:	f001 fd61 	bl	800536c <SPI_I2S_ReceiveData>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4619      	mov	r1, r3
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	b2ca      	uxtb	r2, r1
 80038b6:	701a      	strb	r2, [r3, #0]
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	3301      	adds	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3d1      	bcc.n	800386a <PN532_readdata+0x6a>


//	 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу


	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN, 1);
 80038c6:	2201      	movs	r2, #1
 80038c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038cc:	4803      	ldr	r0, [pc, #12]	; (80038dc <PN532_readdata+0xdc>)
 80038ce:	f001 f9a2 	bl	8004c16 <GPIO_WriteBit>
	    	USART_SendData(USART2_NUM,rd_buff[i]);
	    }
#endif
//------------------------------------------------------------------------------

}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40010c00 	.word	0x40010c00
 80038e0:	40003800 	.word	0x40003800

080038e4 <PN532_readack>:
 /**************************************************************************/
 /*!
     @brief  Tries to read the SPI or I2C ACK signal
 */
 /**************************************************************************/
 bool PN532_readack() {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0

	 const uint8_t pn532ack[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00};
 80038ea:	4a3f      	ldr	r2, [pc, #252]	; (80039e8 <PN532_readack+0x104>)
 80038ec:	f107 0308 	add.w	r3, r7, #8
 80038f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038f4:	6018      	str	r0, [r3, #0]
 80038f6:	3304      	adds	r3, #4
 80038f8:	8019      	strh	r1, [r3, #0]
	 uint8_t ackbuff[6];
	 //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 0
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003900:	483a      	ldr	r0, [pc, #232]	; (80039ec <PN532_readack+0x108>)
 8003902:	f001 f988 	bl	8004c16 <GPIO_WriteBit>

	 //PN532_Delay(100);
	 Delay(2);
 8003906:	2002      	movs	r0, #2
 8003908:	f7ff f918 	bl	8002b3c <Delay>
//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800390c:	bf00      	nop
 800390e:	2102      	movs	r1, #2
 8003910:	4837      	ldr	r0, [pc, #220]	; (80039f0 <PN532_readack+0x10c>)
 8003912:	f001 fd75 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f8      	beq.n	800390e <PN532_readack+0x2a>

	  SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 800391c:	2103      	movs	r1, #3
 800391e:	4834      	ldr	r0, [pc, #208]	; (80039f0 <PN532_readack+0x10c>)
 8003920:	f001 fd16 	bl	8005350 <SPI_I2S_SendData>
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8003924:	bf00      	nop
 8003926:	2102      	movs	r1, #2
 8003928:	4831      	ldr	r0, [pc, #196]	; (80039f0 <PN532_readack+0x10c>)
 800392a:	f001 fd69 	bl	8005400 <SPI_I2S_GetFlagStatus>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f8      	beq.n	8003926 <PN532_readack+0x42>

//Читаем данные, чтобы очистить приемный буфер иначе там данные от байта готовности!!????(непонятно!)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8003934:	bf00      	nop
 8003936:	2101      	movs	r1, #1
 8003938:	482d      	ldr	r0, [pc, #180]	; (80039f0 <PN532_readack+0x10c>)
 800393a:	f001 fd61 	bl	8005400 <SPI_I2S_GetFlagStatus>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f8      	beq.n	8003936 <PN532_readack+0x52>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 8003944:	482a      	ldr	r0, [pc, #168]	; (80039f0 <PN532_readack+0x10c>)
 8003946:	f001 fd11 	bl	800536c <SPI_I2S_ReceiveData>
 800394a:	4603      	mov	r3, r0
 800394c:	73bb      	strb	r3, [r7, #14]

//Читаем 6 байт пакета подтверждения
	  for (uint8_t i = 0; i < 6; i++) {
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e02f      	b.n	80039b4 <PN532_readack+0xd0>

		  PN532_Delay(100);
 8003954:	2064      	movs	r0, #100	; 0x64
 8003956:	f7ff fd0b 	bl	8003370 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800395a:	bf00      	nop
 800395c:	2102      	movs	r1, #2
 800395e:	4824      	ldr	r0, [pc, #144]	; (80039f0 <PN532_readack+0x10c>)
 8003960:	f001 fd4e 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f8      	beq.n	800395c <PN532_readack+0x78>
	      SPI_I2S_SendData(SPI2, 0x00);
 800396a:	2100      	movs	r1, #0
 800396c:	4820      	ldr	r0, [pc, #128]	; (80039f0 <PN532_readack+0x10c>)
 800396e:	f001 fcef 	bl	8005350 <SPI_I2S_SendData>

	      PN532_Delay(100);
 8003972:	2064      	movs	r0, #100	; 0x64
 8003974:	f7ff fcfc 	bl	8003370 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8003978:	bf00      	nop
 800397a:	2102      	movs	r1, #2
 800397c:	481c      	ldr	r0, [pc, #112]	; (80039f0 <PN532_readack+0x10c>)
 800397e:	f001 fd3f 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f8      	beq.n	800397a <PN532_readack+0x96>
    	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8003988:	bf00      	nop
 800398a:	2101      	movs	r1, #1
 800398c:	4818      	ldr	r0, [pc, #96]	; (80039f0 <PN532_readack+0x10c>)
 800398e:	f001 fd37 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f8      	beq.n	800398a <PN532_readack+0xa6>
	      ackbuff[i] =SPI_I2S_ReceiveData(SPI2);
 8003998:	4815      	ldr	r0, [pc, #84]	; (80039f0 <PN532_readack+0x10c>)
 800399a:	f001 fce7 	bl	800536c <SPI_I2S_ReceiveData>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	3310      	adds	r3, #16
 80039a8:	443b      	add	r3, r7
 80039aa:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for (uint8_t i = 0; i < 6; i++) {
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	3301      	adds	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b05      	cmp	r3, #5
 80039b8:	d9cc      	bls.n	8003954 <PN532_readack+0x70>

	     }

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	    GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80039ba:	2201      	movs	r2, #1
 80039bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039c0:	480a      	ldr	r0, [pc, #40]	; (80039ec <PN532_readack+0x108>)
 80039c2:	f001 f928 	bl	8004c16 <GPIO_WriteBit>
//------------------------------------------------------------------------------

//сравнение полученных  шести байт с массивом правильных данных
//если сдержимое не одинаковое, от выход с ошибкой;
//проверка подтверждения (ack)
   return (0 == memcmp((char *)ackbuff, (char *)pn532ack, sizeof(pn532ack)));
 80039c6:	f107 0108 	add.w	r1, r7, #8
 80039ca:	463b      	mov	r3, r7
 80039cc:	2206      	movs	r2, #6
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fa94 	bl	8005efc <memcmp>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3

}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	08007268 	.word	0x08007268
 80039ec:	40010c00 	.word	0x40010c00
 80039f0:	40003800 	.word	0x40003800

080039f4 <PN532_isready>:
 /**************************************************************************/
 /*!
     @brief  Return true if the PN532 is ready with a response.
 */
 /**************************************************************************/
 bool PN532_isready() {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
     uint8_t reply;
// 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 80039fa:	bf00      	nop
 80039fc:	2102      	movs	r1, #2
 80039fe:	4849      	ldr	r0, [pc, #292]	; (8003b24 <PN532_isready+0x130>)
 8003a00:	f001 fcfe 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f8      	beq.n	80039fc <PN532_isready+0x8>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить принимающий регистр (не понятно зачем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8003a0a:	bf00      	nop
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4845      	ldr	r0, [pc, #276]	; (8003b24 <PN532_isready+0x130>)
 8003a10:	f001 fcf6 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f8      	beq.n	8003a0c <PN532_isready+0x18>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 8003a1a:	4842      	ldr	r0, [pc, #264]	; (8003b24 <PN532_isready+0x130>)
 8003a1c:	f001 fca6 	bl	800536c <SPI_I2S_ReceiveData>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4619      	mov	r1, r3
 8003a24:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <PN532_isready+0x134>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	b2c9      	uxtb	r1, r1
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <PN532_isready+0x138>)
 8003a2e:	5499      	strb	r1, [r3, r2]
	  rl++;
 8003a30:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <PN532_isready+0x134>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <PN532_isready+0x134>)
 8003a3a:	701a      	strb	r2, [r3, #0]
//NSS устанавливаем в 0
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a42:	483b      	ldr	r0, [pc, #236]	; (8003b30 <PN532_isready+0x13c>)
 8003a44:	f001 f8e7 	bl	8004c16 <GPIO_WriteBit>

	    //PN532_Delay(100);
	    Delay(2);
 8003a48:	2002      	movs	r0, #2
 8003a4a:	f7ff f877 	bl	8002b3c <Delay>
	  SPI_I2S_SendData(SPI2, PN532_SPI_STATREAD);//посылка команды чтения байта состояния
 8003a4e:	2102      	movs	r1, #2
 8003a50:	4834      	ldr	r0, [pc, #208]	; (8003b24 <PN532_isready+0x130>)
 8003a52:	f001 fc7d 	bl	8005350 <SPI_I2S_SendData>

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8003a56:	bf00      	nop
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4832      	ldr	r0, [pc, #200]	; (8003b24 <PN532_isready+0x130>)
 8003a5c:	f001 fcd0 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f8      	beq.n	8003a58 <PN532_isready+0x64>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить примнающий регистр (не понятно зачем)
//Получается, что нужно прочитать 2 раза приемный буфер, что бы потом получить корретные данные
//при посылке байта и чтении данных после его передачи (странно!!! установленно опытным путем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8003a66:	bf00      	nop
 8003a68:	2101      	movs	r1, #1
 8003a6a:	482e      	ldr	r0, [pc, #184]	; (8003b24 <PN532_isready+0x130>)
 8003a6c:	f001 fcc8 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f8      	beq.n	8003a68 <PN532_isready+0x74>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 8003a76:	482b      	ldr	r0, [pc, #172]	; (8003b24 <PN532_isready+0x130>)
 8003a78:	f001 fc78 	bl	800536c <SPI_I2S_ReceiveData>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <PN532_isready+0x134>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	b2c9      	uxtb	r1, r1
 8003a88:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <PN532_isready+0x138>)
 8003a8a:	5499      	strb	r1, [r3, r2]
	  rl++;
 8003a8c:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <PN532_isready+0x134>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <PN532_isready+0x134>)
 8003a96:	701a      	strb	r2, [r3, #0]

	     PN532_Delay(400);
 8003a98:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003a9c:	f7ff fc68 	bl	8003370 <PN532_Delay>

      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8003aa0:	bf00      	nop
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	481f      	ldr	r0, [pc, #124]	; (8003b24 <PN532_isready+0x130>)
 8003aa6:	f001 fcab 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f8      	beq.n	8003aa2 <PN532_isready+0xae>

	  SPI_I2S_SendData(SPI2, 0XFF);//посылка "пустышки", чтобы забрать байт состояния
 8003ab0:	21ff      	movs	r1, #255	; 0xff
 8003ab2:	481c      	ldr	r0, [pc, #112]	; (8003b24 <PN532_isready+0x130>)
 8003ab4:	f001 fc4c 	bl	8005350 <SPI_I2S_SendData>

	     PN532_Delay(400);
 8003ab8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003abc:	f7ff fc58 	bl	8003370 <PN532_Delay>

   	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8003ac0:	bf00      	nop
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	4817      	ldr	r0, [pc, #92]	; (8003b24 <PN532_isready+0x130>)
 8003ac6:	f001 fc9b 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f8      	beq.n	8003ac2 <PN532_isready+0xce>

	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {};  // ждём пока данные появятся
 8003ad0:	bf00      	nop
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4813      	ldr	r0, [pc, #76]	; (8003b24 <PN532_isready+0x130>)
 8003ad6:	f001 fc93 	bl	8005400 <SPI_I2S_GetFlagStatus>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f8      	beq.n	8003ad2 <PN532_isready+0xde>

	  reply = SPI_I2S_ReceiveData(SPI2);
 8003ae0:	4810      	ldr	r0, [pc, #64]	; (8003b24 <PN532_isready+0x130>)
 8003ae2:	f001 fc43 	bl	800536c <SPI_I2S_ReceiveData>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 1
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8003aea:	2201      	movs	r2, #1
 8003aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003af0:	480f      	ldr	r0, [pc, #60]	; (8003b30 <PN532_isready+0x13c>)
 8003af2:	f001 f890 	bl	8004c16 <GPIO_WriteBit>

	   replybuff[rl]=reply;
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <PN532_isready+0x134>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	4619      	mov	r1, r3
 8003afc:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <PN532_isready+0x138>)
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	5453      	strb	r3, [r2, r1]
       rl++;
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <PN532_isready+0x134>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <PN532_isready+0x134>)
 8003b0c:	701a      	strb	r2, [r3, #0]

       //USART_SendData(USART2_NUM,reply);

// Проверка ответа с байтом готовности (0x01);
     return reply == PN532_SPI_READY;
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3


 }
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40003800 	.word	0x40003800
 8003b28:	20000b80 	.word	0x20000b80
 8003b2c:	20000b6c 	.word	0x20000b6c
 8003b30:	40010c00 	.word	0x40010c00

08003b34 <PN532_waitready>:
     @brief  Waits until the PN532 is ready.

     @param  timeout   Timeout before giving up
 */
 /**************************************************************************/
 bool PN532_waitready(uint16_t timeout) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	80fb      	strh	r3, [r7, #6]
   uint16_t timer = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	81fb      	strh	r3, [r7, #14]

   Delay(5);
 8003b42:	2005      	movs	r0, #5
 8003b44:	f7fe fffa 	bl	8002b3c <Delay>
   timer += 5;
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	3305      	adds	r3, #5
 8003b4c:	81fb      	strh	r3, [r7, #14]
   //USART_SendData(USART2_NUM,0xFF);

   while (!PN532_isready()) {
 8003b4e:	e00e      	b.n	8003b6e <PN532_waitready+0x3a>
     if (timeout != 0) {
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <PN532_waitready+0x34>
       timer += 5;
 8003b56:	89fb      	ldrh	r3, [r7, #14]
 8003b58:	3305      	adds	r3, #5
 8003b5a:	81fb      	strh	r3, [r7, #14]
       if (timer > timeout) {
 8003b5c:	89fa      	ldrh	r2, [r7, #14]
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d901      	bls.n	8003b68 <PN532_waitready+0x34>
         return FALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e008      	b.n	8003b7a <PN532_waitready+0x46>
       }
     }
     Delay(5);
 8003b68:	2005      	movs	r0, #5
 8003b6a:	f7fe ffe7 	bl	8002b3c <Delay>
   while (!PN532_isready()) {
 8003b6e:	f7ff ff41 	bl	80039f4 <PN532_isready>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0eb      	beq.n	8003b50 <PN532_waitready+0x1c>
   }
   return TRUE;
 8003b78:	2301      	movs	r3, #1
 }
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <PN532_mifareclassic_AuthenticateBlock>:
 /**************************************************************************/
 uint8_t PN532_mifareclassic_AuthenticateBlock(uint8_t *uid,
                                                         uint8_t uidLen,
                                                         uint32_t blockNumber,
                                                         uint8_t keyNumber,
                                                         uint8_t *keyData) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	72fb      	strb	r3, [r7, #11]
 8003b94:	4613      	mov	r3, r2
 8003b96:	72bb      	strb	r3, [r7, #10]
   // uint8_t len;
   uint8_t i;

   // Hang on to the key and uid data
   memcpy(_key, keyData, 6);
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	6810      	ldr	r0, [r2, #0]
 8003b9e:	6018      	str	r0, [r3, #0]
 8003ba0:	8892      	ldrh	r2, [r2, #4]
 8003ba2:	809a      	strh	r2, [r3, #4]
   memcpy(_uid, uid, uidLen);
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68f9      	ldr	r1, [r7, #12]
 8003baa:	482c      	ldr	r0, [pc, #176]	; (8003c5c <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 8003bac:	f002 f9b6 	bl	8005f1c <memcpy>
   _uidLen = uidLen;
 8003bb0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8003bb6:	701a      	strb	r2, [r3, #0]
   PN532DEBUGPRINT.print(F(": "));
   Adafruit_PN532::PrintHex(_key, 6);
 #endif
*/
   // Prepare the authentication command //
   pn532_packetbuffer[0] =
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	701a      	strb	r2, [r3, #0]
       PN532_COMMAND_INDATAEXCHANGE; /* Data Exchange Header */
   pn532_packetbuffer[1] = 1;        /* Max card numbers */
 8003bbe:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
 8003bc4:	7abb      	ldrb	r3, [r7, #10]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <PN532_mifareclassic_AuthenticateBlock+0x4a>
 8003bca:	2261      	movs	r2, #97	; 0x61
 8003bcc:	e000      	b.n	8003bd0 <PN532_mifareclassic_AuthenticateBlock+0x4c>
 8003bce:	2260      	movs	r2, #96	; 0x60
 8003bd0:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003bd2:	709a      	strb	r2, [r3, #2]
   //pn532_packetbuffer[2] = 0x61;
   pn532_packetbuffer[3] =
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003bda:	70da      	strb	r2, [r3, #3]
       blockNumber; /* Block Number (1K = 0..63, 4K = 0..255 */
   memcpy(pn532_packetbuffer + 4, _key, 6);
 8003bdc:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <PN532_mifareclassic_AuthenticateBlock+0xe4>)
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 8003be0:	6810      	ldr	r0, [r2, #0]
 8003be2:	6018      	str	r0, [r3, #0]
 8003be4:	8892      	ldrh	r2, [r2, #4]
 8003be6:	809a      	strh	r2, [r3, #4]
   for (i = 0; i < _uidLen; i++) {
 8003be8:	2300      	movs	r3, #0
 8003bea:	75fb      	strb	r3, [r7, #23]
 8003bec:	e00a      	b.n	8003c04 <PN532_mifareclassic_AuthenticateBlock+0x80>
     pn532_packetbuffer[10 + i] = _uid[i]; /* 4 byte card ID */
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	4a1a      	ldr	r2, [pc, #104]	; (8003c5c <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 8003bf2:	56d2      	ldrsb	r2, [r2, r3]
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	330a      	adds	r3, #10
 8003bf8:	b2d1      	uxtb	r1, r2
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003bfc:	54d1      	strb	r1, [r2, r3]
   for (i = 0; i < _uidLen; i++) {
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	3301      	adds	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8003c08:	f992 2000 	ldrsb.w	r2, [r2]
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	dbee      	blt.n	8003bee <PN532_mifareclassic_AuthenticateBlock+0x6a>
  	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
  	    	USART_SendData(USART2_NUM,pn532_packetbuffer[i]);
  	    }
*/

   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 10 + _uidLen,100))
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8003c12:	f993 3000 	ldrsb.w	r3, [r3]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	330a      	adds	r3, #10
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4810      	ldr	r0, [pc, #64]	; (8003c64 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8003c22:	f7ff fce5 	bl	80035f0 <PN532_sendCommandCheckAck>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <PN532_mifareclassic_AuthenticateBlock+0xac>
     return 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e00e      	b.n	8003c4e <PN532_mifareclassic_AuthenticateBlock+0xca>
   Delay(10);
 8003c30:	200a      	movs	r0, #10
 8003c32:	f7fe ff83 	bl	8002b3c <Delay>
   // Read the response packet
   PN532_readdata(pn532_readbuffer, 12,0xFF);
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	210c      	movs	r1, #12
 8003c3a:	480c      	ldr	r0, [pc, #48]	; (8003c6c <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 8003c3c:	f7ff fde0 	bl	8003800 <PN532_readdata>
*/
   // check if the response is valid and we are authenticated???
   // for an auth success it should be bytes 5-7: 0xD5 0x41 0x00
   // Mifare auth error is technically byte 7: 0x14 but anything other and 0x00
   // is not good
   if (pn532_readbuffer[7] != 0x00) {
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 8003c42:	79db      	ldrb	r3, [r3, #7]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <PN532_mifareclassic_AuthenticateBlock+0xc8>
	   for (uint8_t i = 0; i < 12; i++) {
	 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
	 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	 	    }
 #endif
     return 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <PN532_mifareclassic_AuthenticateBlock+0xca>
   }

   return 1;
 8003c4c:	2301      	movs	r3, #1
 }
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000c0c 	.word	0x20000c0c
 8003c5c:	20000c04 	.word	0x20000c04
 8003c60:	20000c0b 	.word	0x20000c0b
 8003c64:	20000b84 	.word	0x20000b84
 8003c68:	20000b88 	.word	0x20000b88
 8003c6c:	20000bc4 	.word	0x20000bc4

08003c70 <PN532_mifareclassic_ReadDataBlock>:
                           retrieved data (if any)
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_ReadDataBlock(uint8_t blockNumber,
                                                     uint8_t *data) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	71fb      	strb	r3, [r7, #7]
 //  PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));
   //PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8003c7c:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;               /* Card number */
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_READ; /* Mifare Read command = 0x30 */
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8003c8a:	2230      	movs	r2, #48	; 0x30
 8003c8c:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] = blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	70d3      	strb	r3, [r2, #3]

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,100)) {
 8003c94:	2264      	movs	r2, #100	; 0x64
 8003c96:	2104      	movs	r1, #4
 8003c98:	4810      	ldr	r0, [pc, #64]	; (8003cdc <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8003c9a:	f7ff fca9 	bl	80035f0 <PN532_sendCommandCheckAck>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <PN532_mifareclassic_ReadDataBlock+0x38>
 #ifdef MIFAREDEBUG
   //  PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
 #endif
     return 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e014      	b.n	8003cd2 <PN532_mifareclassic_ReadDataBlock+0x62>
   }
Delay(10);
 8003ca8:	200a      	movs	r0, #10
 8003caa:	f7fe ff47 	bl	8002b3c <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 8003cae:	22ff      	movs	r2, #255	; 0xff
 8003cb0:	211a      	movs	r1, #26
 8003cb2:	480b      	ldr	r0, [pc, #44]	; (8003ce0 <PN532_mifareclassic_ReadDataBlock+0x70>)
 8003cb4:	f7ff fda4 	bl	8003800 <PN532_readdata>

   /* If byte 8 isn't 0x00 we probably have an error */
   if (pn532_readbuffer[7] != 0x00) {
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <PN532_mifareclassic_ReadDataBlock+0x70>)
 8003cba:	79db      	ldrb	r3, [r3, #7]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <PN532_mifareclassic_ReadDataBlock+0x54>
 #ifdef MIFAREDEBUG
  //   PN532DEBUGPRINT.println(F("Unexpected response"));
    // Adafruit_PN532::PrintHexChar(pn532_packetbuffer, 26);
 #endif
     return 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e006      	b.n	8003cd2 <PN532_mifareclassic_ReadDataBlock+0x62>
   }

   /* Copy the 16 data bytes to the output buffer        */
   /* Block content starts at byte 9 of a valid response */
   memcpy(data, pn532_readbuffer + 8, 16);
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <PN532_mifareclassic_ReadDataBlock+0x74>)
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6838      	ldr	r0, [r7, #0]
 8003ccc:	f002 f926 	bl	8005f1c <memcpy>
  // PN532DEBUGPRINT.print(F("Block "));
  // PN532DEBUGPRINT.println(blockNumber);
  // Adafruit_PN532::PrintHexChar(data, 16);
 #endif

   return 1;
 8003cd0:	2301      	movs	r3, #1
 }
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000b84 	.word	0x20000b84
 8003ce0:	20000bc4 	.word	0x20000bc4
 8003ce4:	20000bcc 	.word	0x20000bcc

08003ce8 <PN532_mifareclassic_WriteDataBlock>:
     @param  data          The byte array that contains the data to write.
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_WriteDataBlock(uint8_t blockNumber,
                                                      uint8_t *data) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	71fb      	strb	r3, [r7, #7]
  // PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));
  // PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the first command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;                /* Card number */
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_WRITE; /* Mifare Write command = 0xA0 */
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003d02:	22a0      	movs	r2, #160	; 0xa0
 8003d04:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] =
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	70d3      	strb	r3, [r2, #3]
       blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
   memcpy(pn532_packetbuffer + 4, data, 16); /* Data Payload */
 8003d0c:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <PN532_mifareclassic_WriteDataBlock+0x68>)
 8003d0e:	2210      	movs	r2, #16
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f002 f902 	bl	8005f1c <memcpy>

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 20,100)) {
 8003d18:	2264      	movs	r2, #100	; 0x64
 8003d1a:	2114      	movs	r1, #20
 8003d1c:	480b      	ldr	r0, [pc, #44]	; (8003d4c <PN532_mifareclassic_WriteDataBlock+0x64>)
 8003d1e:	f7ff fc67 	bl	80035f0 <PN532_sendCommandCheckAck>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <PN532_mifareclassic_WriteDataBlock+0x44>
 #ifdef MIFAREDEBUG
 //    PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
 #endif
     return 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e00b      	b.n	8003d44 <PN532_mifareclassic_WriteDataBlock+0x5c>
   }
   Delay(10);
 8003d2c:	200a      	movs	r0, #10
 8003d2e:	f7fe ff05 	bl	8002b3c <Delay>
   Delay(10);
 8003d32:	200a      	movs	r0, #10
 8003d34:	f7fe ff02 	bl	8002b3c <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	211a      	movs	r1, #26
 8003d3c:	4805      	ldr	r0, [pc, #20]	; (8003d54 <PN532_mifareclassic_WriteDataBlock+0x6c>)
 8003d3e:	f7ff fd5f 	bl	8003800 <PN532_readdata>
   for (uint8_t i = 0; i < 26; i++) {
 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
 	    }
*/
   return 1;
 8003d42:	2301      	movs	r3, #1
 }
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000b84 	.word	0x20000b84
 8003d50:	20000b88 	.word	0x20000b88
 8003d54:	20000bc4 	.word	0x20000bc4

08003d58 <PN532_Read_Data>:

 /**************************************************************************/
 uint8_t PN532_Read_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data)
 {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08e      	sub	sp, #56	; 0x38
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	72fb      	strb	r3, [r7, #11]
 8003d66:	4613      	mov	r3, r2
 8003d68:	72bb      	strb	r3, [r7, #10]
 	uint8_t success=0;	// Flag to check if there was an error with the PN532
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 8003d70:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <PN532_Read_Data+0x9c>)
 8003d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d7a:	6018      	str	r0, [r3, #0]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

 	bool authenticated = FALSE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 	uint8_t blockBuffer[16];                  // Buffer to store block contents
 	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <PN532_Read_Data+0xa0>)
 8003d88:	f107 0310 	add.w	r3, r7, #16
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	8019      	strh	r1, [r3, #0]
 8003d92:	3302      	adds	r3, #2
 8003d94:	0c12      	lsrs	r2, r2, #16
 8003d96:	701a      	strb	r2, [r3, #0]
 static char s_pc_PN532_err1[]="Authentication failed for sector";
 static char s_pc_PN532_err4[]="Unable to read data block";


 //success = PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB);
 	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8003d98:	7af9      	ldrb	r1, [r7, #11]
 8003d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2301      	movs	r3, #1
 8003da2:	2200      	movs	r2, #0
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff feed 	bl	8003b84 <PN532_mifareclassic_AuthenticateBlock>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <PN532_Read_Data+0x64>
 	        {
 	          return res_excep=1;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003db6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dba:	e016      	b.n	8003dea <PN532_Read_Data+0x92>
 	        }

 	       if(!(res_excep=PN532_mifareclassic_ReadDataBlock(blockNumber, data)))
 8003dbc:	7abb      	ldrb	r3, [r7, #10]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff55 	bl	8003c70 <PN532_mifareclassic_ReadDataBlock>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003dcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <PN532_Read_Data+0x88>
 	       {
 	          return res_excep=2;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003dda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dde:	e004      	b.n	8003dea <PN532_Read_Data+0x92>
 	       }else return res_excep=0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003de6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 }
 8003dea:	4618      	mov	r0, r3
 8003dec:	3730      	adds	r7, #48	; 0x30
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	080072a4 	.word	0x080072a4
 8003df8:	080072ac 	.word	0x080072ac

08003dfc <RTC_INIT>:
#include "rtc.h"



void RTC_INIT(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	if((RCC->BDCR & RCC_BDCR_RTCEN) != RCC_BDCR_RTCEN){		// проверка работы часов, если не включены, то инициализировать
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d06c      	beq.n	8003ee8 <RTC_INIT+0xec>
		RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e14:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8003e18:	61d3      	str	r3, [r2, #28]
		PWR->CR |= PWR_CR_DBP;		// разрешение доступа к Backup области
 8003e1a:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <RTC_INIT+0xf8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a35      	ldr	r2, [pc, #212]	; (8003ef4 <RTC_INIT+0xf8>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]
		RCC->BDCR |= RCC_BDCR_BDRST;	// сброс Backup области
 8003e26:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a31      	ldr	r2, [pc, #196]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6213      	str	r3, [r2, #32]
		RCC->BDCR &= ~RCC_BDCR_BDRST;
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a2e      	ldr	r2, [pc, #184]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_LSE;	// выбор LSE источника (кварц 32768) и подача тактирования
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e48:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_LSEON;
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6213      	str	r3, [r2, #32]
		while((RCC->BDCR&RCC_BDCR_LSEON) != RCC_BDCR_LSEON){}	// ожидание включения
 8003e56:	bf00      	nop
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <RTC_INIT+0xf4>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d1f9      	bne.n	8003e58 <RTC_INIT+0x5c>
		BKP->RTCCR |= 3;	// калибровка RTC
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <RTC_INIT+0xfc>)
 8003e66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <RTC_INIT+0xfc>)
 8003e6c:	f043 0303 	orr.w	r3, r3, #3
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8593      	strh	r3, [r2, #44]	; 0x2c
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// проверка на конец изменений регистров RTC
 8003e74:	bf00      	nop
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <RTC_INIT+0x100>)
 8003e78:	889b      	ldrh	r3, [r3, #4]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f8      	beq.n	8003e76 <RTC_INIT+0x7a>
		RTC->CRL |= RTC_CRL_CNF;		// разрешение записи в регистры RTC
 8003e84:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <RTC_INIT+0x100>)
 8003e86:	889b      	ldrh	r3, [r3, #4]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <RTC_INIT+0x100>)
 8003e8c:	f043 0310 	orr.w	r3, r3, #16
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	8093      	strh	r3, [r2, #4]
		RTC->PRLL = 0x7FFF;		// настройка делителя на 32768
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <RTC_INIT+0x100>)
 8003e96:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003e9a:	819a      	strh	r2, [r3, #12]
		RTC->CRL &= ~RTC_CRL_CNF;	// запрет записи в регистры RTC
 8003e9c:	4b17      	ldr	r3, [pc, #92]	; (8003efc <RTC_INIT+0x100>)
 8003e9e:	889b      	ldrh	r3, [r3, #4]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <RTC_INIT+0x100>)
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8093      	strh	r3, [r2, #4]
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// ожидание конца записи
 8003eac:	bf00      	nop
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <RTC_INIT+0x100>)
 8003eb0:	889b      	ldrh	r3, [r3, #4]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f8      	beq.n	8003eae <RTC_INIT+0xb2>
		RTC->CRL &= (uint16_t)~RTC_CRL_CNF;		//синхронизация RTC
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <RTC_INIT+0x100>)
 8003ebe:	889b      	ldrh	r3, [r3, #4]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	; (8003efc <RTC_INIT+0x100>)
 8003ec4:	f023 0310 	bic.w	r3, r3, #16
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	8093      	strh	r3, [r2, #4]
		while((RTC->CRL&RTC_CRL_RSF) != RTC_CRL_RSF){}	// ожидание синхронизации
 8003ecc:	bf00      	nop
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <RTC_INIT+0x100>)
 8003ed0:	889b      	ldrh	r3, [r3, #4]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d1f8      	bne.n	8003ece <RTC_INIT+0xd2>
		PWR->CR &= ~(PWR_CR_DBP);	// запрет доступа к Backup области
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <RTC_INIT+0xf8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <RTC_INIT+0xf8>)
 8003ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee6:	6013      	str	r3, [r2, #0]

	}
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	40006c00 	.word	0x40006c00
 8003efc:	40002800 	.word	0x40002800

08003f00 <RTC_GET_COUNTER>:


uint32_t RTC_GET_COUNTER(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
	return (uint32_t)((RTC->CNTH << 16) | RTC->CNTL);	// получение значения счетчика
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <RTC_GET_COUNTER+0x1c>)
 8003f06:	8b1b      	ldrh	r3, [r3, #24]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	4a03      	ldr	r2, [pc, #12]	; (8003f1c <RTC_GET_COUNTER+0x1c>)
 8003f0e:	8b92      	ldrh	r2, [r2, #28]
 8003f10:	b292      	uxth	r2, r2
 8003f12:	4313      	orrs	r3, r2
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	40002800 	.word	0x40002800

08003f20 <RTC_SET_COUNTER>:

void RTC_SET_COUNTER(uint32_t count)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 8003f28:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <RTC_SET_COUNTER+0x88>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <RTC_SET_COUNTER+0x88>)
 8003f2e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8003f32:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;	// разрешение доступа к Backup области
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <RTC_SET_COUNTER+0x8c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <RTC_SET_COUNTER+0x8c>)
 8003f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3e:	6013      	str	r3, [r2, #0]
	while(!(RTC->CRL & RTC_CRL_RTOFF)); // проверка конца изменения регистров RTC
 8003f40:	bf00      	nop
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f44:	889b      	ldrh	r3, [r3, #4]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f8      	beq.n	8003f42 <RTC_SET_COUNTER+0x22>
	RTC->CRL |= RTC_CRL_CNF;	// разрешение записи в регистры RTC
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f52:	889b      	ldrh	r3, [r3, #4]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f58:	f043 0310 	orr.w	r3, r3, #16
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8093      	strh	r3, [r2, #4]
	RTC->CNTH = count >> 16;	// запись нового значения счетного регистра
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	0c1a      	lsrs	r2, r3, #16
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f66:	b292      	uxth	r2, r2
 8003f68:	831a      	strh	r2, [r3, #24]
	RTC->CNTL = count;
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	839a      	strh	r2, [r3, #28]
	RTC->CRL &= ~RTC_CRL_CNF;		// запрет записи в регистры RTC
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f74:	889b      	ldrh	r3, [r3, #4]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f7a:	f023 0310 	bic.w	r3, r3, #16
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8093      	strh	r3, [r2, #4]
	while(!(RTC->CRL & RTC_CRL_RTOFF));	// ожидание конца записи
 8003f82:	bf00      	nop
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <RTC_SET_COUNTER+0x90>)
 8003f86:	889b      	ldrh	r3, [r3, #4]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f8      	beq.n	8003f84 <RTC_SET_COUNTER+0x64>
	PWR->CR &= ~PWR_CR_DBP;		// запрет доступа к Backup области
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <RTC_SET_COUNTER+0x8c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a05      	ldr	r2, [pc, #20]	; (8003fac <RTC_SET_COUNTER+0x8c>)
 8003f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	40002800 	.word	0x40002800

08003fb4 <timer_to_cal>:
#include "rtc_time.h"

void timer_to_cal (unsigned long timer, rtc_cal * rtc_time)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	char b;
	char c;
	char d;
	unsigned long time;

	time = timer%SEC_A_DAY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a65      	ldr	r2, [pc, #404]	; (8004158 <timer_to_cal+0x1a4>)
 8003fc2:	fba2 1203 	umull	r1, r2, r2, r3
 8003fc6:	0c12      	lsrs	r2, r2, #16
 8003fc8:	4964      	ldr	r1, [pc, #400]	; (800415c <timer_to_cal+0x1a8>)
 8003fca:	fb01 f202 	mul.w	r2, r1, r2
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
	a = ((timer+43200)/(86400>>1)) + (2440587<<1) + 1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8003fd8:	33c0      	adds	r3, #192	; 0xc0
 8003fda:	4a5f      	ldr	r2, [pc, #380]	; (8004158 <timer_to_cal+0x1a4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	0bda      	lsrs	r2, r3, #15
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <timer_to_cal+0x1ac>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
	a>>=1;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	613b      	str	r3, [r7, #16]
	rtc_time->wday = a%7;
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <timer_to_cal+0x1b0>)
 8003ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff6:	1ad1      	subs	r1, r2, r3
 8003ff8:	0849      	lsrs	r1, r1, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	0899      	lsrs	r1, r3, #2
 8003ffe:	460b      	mov	r3, r1
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	1a5b      	subs	r3, r3, r1
 8004004:	1ad1      	subs	r1, r2, r3
 8004006:	b2ca      	uxtb	r2, r1
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	725a      	strb	r2, [r3, #9]
	a+=32044;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8004012:	332c      	adds	r3, #44	; 0x2c
 8004014:	613b      	str	r3, [r7, #16]
	b=(4*a+3)/146097;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	3303      	adds	r3, #3
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <timer_to_cal+0x1b4>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	0bdb      	lsrs	r3, r3, #15
 8004024:	73fb      	strb	r3, [r7, #15]
	a=a-(146097*b)/4;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	4a50      	ldr	r2, [pc, #320]	; (800416c <timer_to_cal+0x1b8>)
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	da00      	bge.n	8004034 <timer_to_cal+0x80>
 8004032:	3303      	adds	r3, #3
 8004034:	109b      	asrs	r3, r3, #2
 8004036:	461a      	mov	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	613b      	str	r3, [r7, #16]
	c=(4*a+3)/1461;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	3303      	adds	r3, #3
 8004044:	4a4a      	ldr	r2, [pc, #296]	; (8004170 <timer_to_cal+0x1bc>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	09db      	lsrs	r3, r3, #7
 800404c:	73bb      	strb	r3, [r7, #14]
	a=a-(1461*c)/4;
 800404e:	7bbb      	ldrb	r3, [r7, #14]
 8004050:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	da00      	bge.n	800405e <timer_to_cal+0xaa>
 800405c:	3303      	adds	r3, #3
 800405e:	109b      	asrs	r3, r3, #2
 8004060:	461a      	mov	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	613b      	str	r3, [r7, #16]
	d=(5*a+2)/153;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	3302      	adds	r3, #2
 8004072:	4a40      	ldr	r2, [pc, #256]	; (8004174 <timer_to_cal+0x1c0>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	737b      	strb	r3, [r7, #13]
	rtc_time->mday=a-(153*d+2)/5+1;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	b2d9      	uxtb	r1, r3
 8004080:	7b7a      	ldrb	r2, [r7, #13]
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	011a      	lsls	r2, r3, #4
 800408a:	4413      	add	r3, r2
 800408c:	3302      	adds	r3, #2
 800408e:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <timer_to_cal+0x1c4>)
 8004090:	fb82 0203 	smull	r0, r2, r2, r3
 8004094:	1052      	asrs	r2, r2, #1
 8004096:	17db      	asrs	r3, r3, #31
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	1acb      	subs	r3, r1, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	715a      	strb	r2, [r3, #5]
	rtc_time->mon=d+3-12*(d/10);
 80040a8:	7b7b      	ldrb	r3, [r7, #13]
 80040aa:	4a34      	ldr	r2, [pc, #208]	; (800417c <timer_to_cal+0x1c8>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	7b7b      	ldrb	r3, [r7, #13]
 80040c0:	4413      	add	r3, r2
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3303      	adds	r3, #3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	711a      	strb	r2, [r3, #4]
	rtc_time->year=100*b+c-4800+(d/10);
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2264      	movs	r2, #100	; 0x64
 80040d0:	fb03 f202 	mul.w	r2, r3, r2
 80040d4:	7bbb      	ldrb	r3, [r7, #14]
 80040d6:	4413      	add	r3, r2
 80040d8:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 80040dc:	7b7a      	ldrb	r2, [r7, #13]
 80040de:	4927      	ldr	r1, [pc, #156]	; (800417c <timer_to_cal+0x1c8>)
 80040e0:	fba1 1202 	umull	r1, r2, r1, r2
 80040e4:	08d2      	lsrs	r2, r2, #3
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	441a      	add	r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	601a      	str	r2, [r3, #0]
	rtc_time->hour=time/3600;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	4a23      	ldr	r2, [pc, #140]	; (8004180 <timer_to_cal+0x1cc>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0adb      	lsrs	r3, r3, #11
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	719a      	strb	r2, [r3, #6]
	rtc_time->min=(time%3600)/60;
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <timer_to_cal+0x1cc>)
 8004102:	fba3 1302 	umull	r1, r3, r3, r2
 8004106:	0adb      	lsrs	r3, r3, #11
 8004108:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <timer_to_cal+0x1d0>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	b2da      	uxtb	r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	71da      	strb	r2, [r3, #7]
	rtc_time->sec=(time%3600)%60;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <timer_to_cal+0x1cc>)
 8004124:	fba2 1203 	umull	r1, r2, r2, r3
 8004128:	0ad2      	lsrs	r2, r2, #11
 800412a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800412e:	fb01 f202 	mul.w	r2, r1, r2
 8004132:	1a9a      	subs	r2, r3, r2
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <timer_to_cal+0x1d0>)
 8004136:	fba3 1302 	umull	r1, r3, r3, r2
 800413a:	0959      	lsrs	r1, r3, #5
 800413c:	460b      	mov	r3, r1
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a5b      	subs	r3, r3, r1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	1ad1      	subs	r1, r2, r3
 8004146:	b2ca      	uxtb	r2, r1
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	721a      	strb	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	c22e4507 	.word	0xc22e4507
 800415c:	00015180 	.word	0x00015180
 8004160:	004a7b17 	.word	0x004a7b17
 8004164:	24924925 	.word	0x24924925
 8004168:	396b06bd 	.word	0x396b06bd
 800416c:	00023ab1 	.word	0x00023ab1
 8004170:	166db073 	.word	0x166db073
 8004174:	d62b80d7 	.word	0xd62b80d7
 8004178:	66666667 	.word	0x66666667
 800417c:	cccccccd 	.word	0xcccccccd
 8004180:	91a2b3c5 	.word	0x91a2b3c5
 8004184:	88888889 	.word	0x88888889

08004188 <cal_to_timer>:

unsigned long cal_to_timer (rtc_cal * rtc_time)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	int y;
	char m;
	unsigned long Uday;
	unsigned long time;

	a=((14-rtc_time->mon)/12);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	f1c3 030e 	rsb	r3, r3, #14
 8004198:	4a35      	ldr	r2, [pc, #212]	; (8004270 <cal_to_timer+0xe8>)
 800419a:	fb82 1203 	smull	r1, r2, r2, r3
 800419e:	1052      	asrs	r2, r2, #1
 80041a0:	17db      	asrs	r3, r3, #31
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	77fb      	strb	r3, [r7, #31]
	y=rtc_time->year+4800-a;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	61bb      	str	r3, [r7, #24]
	m=rtc_time->mon+(12*a)-3;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	791a      	ldrb	r2, [r3, #4]
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	4619      	mov	r1, r3
 80041bc:	0049      	lsls	r1, r1, #1
 80041be:	440b      	add	r3, r1
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3b03      	subs	r3, #3
 80041ca:	75fb      	strb	r3, [r7, #23]
	Uday=(rtc_time->mday+((153*m+2)/5)+365*y+(y/4)-(y/100)+(y/400)-32045)-2440588;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	795b      	ldrb	r3, [r3, #5]
 80041d0:	4619      	mov	r1, r3
 80041d2:	7dfa      	ldrb	r2, [r7, #23]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	011a      	lsls	r2, r3, #4
 80041dc:	4413      	add	r3, r2
 80041de:	3302      	adds	r3, #2
 80041e0:	4a24      	ldr	r2, [pc, #144]	; (8004274 <cal_to_timer+0xec>)
 80041e2:	fb82 0203 	smull	r0, r2, r2, r3
 80041e6:	1052      	asrs	r2, r2, #1
 80041e8:	17db      	asrs	r3, r3, #31
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	18ca      	adds	r2, r1, r3
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f240 116d 	movw	r1, #365	; 0x16d
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	441a      	add	r2, r3
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da00      	bge.n	8004202 <cal_to_timer+0x7a>
 8004200:	3303      	adds	r3, #3
 8004202:	109b      	asrs	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	491b      	ldr	r1, [pc, #108]	; (8004278 <cal_to_timer+0xf0>)
 800420a:	fb81 0103 	smull	r0, r1, r1, r3
 800420e:	1149      	asrs	r1, r1, #5
 8004210:	17db      	asrs	r3, r3, #31
 8004212:	1a5b      	subs	r3, r3, r1
 8004214:	441a      	add	r2, r3
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4917      	ldr	r1, [pc, #92]	; (8004278 <cal_to_timer+0xf0>)
 800421a:	fb81 0103 	smull	r0, r1, r1, r3
 800421e:	11c9      	asrs	r1, r1, #7
 8004220:	17db      	asrs	r3, r3, #31
 8004222:	1acb      	subs	r3, r1, r3
 8004224:	441a      	add	r2, r3
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <cal_to_timer+0xf4>)
 8004228:	4413      	add	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
	time=Uday*86400;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4a14      	ldr	r2, [pc, #80]	; (8004280 <cal_to_timer+0xf8>)
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	60fb      	str	r3, [r7, #12]
	time+=rtc_time->sec+rtc_time->min*60+rtc_time->hour*3600;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7a1b      	ldrb	r3, [r3, #8]
 800423a:	4619      	mov	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	79db      	ldrb	r3, [r3, #7]
 8004240:	461a      	mov	r2, r3
 8004242:	4613      	mov	r3, r2
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	18ca      	adds	r2, r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	799b      	ldrb	r3, [r3, #6]
 8004250:	4619      	mov	r1, r3
 8004252:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	461a      	mov	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
	return time;
 8004264:	68fb      	ldr	r3, [r7, #12]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3724      	adds	r7, #36	; 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	2aaaaaab 	.word	0x2aaaaaab
 8004274:	66666667 	.word	0x66666667
 8004278:	51eb851f 	.word	0x51eb851f
 800427c:	ffda4547 	.word	0xffda4547
 8004280:	00015180 	.word	0x00015180

08004284 <convert_time_from_android>:

uint8_t convert_time_from_android(rtc_cal *rtc_time, char *date){
 8004284:	b580      	push	{r7, lr}
 8004286:	b096      	sub	sp, #88	; 0x58
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]

	//*xxx*yyyy-MM-dd HH:mm:ss

	uint8_t res_date = DATE_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int s;
	char buf[64];

	char *p_rtc = date;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	653b      	str	r3, [r7, #80]	; 0x50

	*p_rtc++;
 8004298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429a:	3301      	adds	r3, #1
 800429c:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	3301      	adds	r3, #1
 80042a2:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 80042a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a6:	3301      	adds	r3, #1
 80042a8:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 80042aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ac:	3301      	adds	r3, #1
 80042ae:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 80042b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b2:	3301      	adds	r3, #1
 80042b4:	653b      	str	r3, [r7, #80]	; 0x50

	for(s = 0; s < 4; s++){
 80042b6:	2300      	movs	r3, #0
 80042b8:	657b      	str	r3, [r7, #84]	; 0x54
 80042ba:	e00c      	b.n	80042d6 <convert_time_from_android+0x52>
		buf[s] = *p_rtc++;
 80042bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	653a      	str	r2, [r7, #80]	; 0x50
 80042c2:	7819      	ldrb	r1, [r3, #0]
 80042c4:	f107 020c 	add.w	r2, r7, #12
 80042c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ca:	4413      	add	r3, r2
 80042cc:	460a      	mov	r2, r1
 80042ce:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 4; s++){
 80042d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d2:	3301      	adds	r3, #1
 80042d4:	657b      	str	r3, [r7, #84]	; 0x54
 80042d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d8:	2b03      	cmp	r3, #3
 80042da:	ddef      	ble.n	80042bc <convert_time_from_android+0x38>
	}
	rtc_time->year=atoi(buf);
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fddd 	bl	8005ea0 <atoi>
 80042e6:	4602      	mov	r2, r0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	601a      	str	r2, [r3, #0]
			if(rtc_time->year == 0 || rtc_time->year < 1980)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <convert_time_from_android+0x7c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f240 72bb 	movw	r2, #1979	; 0x7bb
 80042fc:	4293      	cmp	r3, r2
 80042fe:	dc05      	bgt.n	800430c <convert_time_from_android+0x88>
				return res_date = INCORRECT_YEAR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004306:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800430a:	e0f4      	b.n	80044f6 <convert_time_from_android+0x272>
	*p_rtc++;
 800430c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430e:	3301      	adds	r3, #1
 8004310:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8004312:	f107 030c 	add.w	r3, r7, #12
 8004316:	4618      	mov	r0, r3
 8004318:	f7fb ff18 	bl	800014c <strlen>
 800431c:	4602      	mov	r2, r0
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f001 fe21 	bl	8005f6c <memset>
	for(s = 0; s < 2; s++){
 800432a:	2300      	movs	r3, #0
 800432c:	657b      	str	r3, [r7, #84]	; 0x54
 800432e:	e00c      	b.n	800434a <convert_time_from_android+0xc6>
		buf[s] = *p_rtc++;
 8004330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	653a      	str	r2, [r7, #80]	; 0x50
 8004336:	7819      	ldrb	r1, [r3, #0]
 8004338:	f107 020c 	add.w	r2, r7, #12
 800433c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433e:	4413      	add	r3, r2
 8004340:	460a      	mov	r2, r1
 8004342:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004346:	3301      	adds	r3, #1
 8004348:	657b      	str	r3, [r7, #84]	; 0x54
 800434a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434c:	2b01      	cmp	r3, #1
 800434e:	ddef      	ble.n	8004330 <convert_time_from_android+0xac>
	}
	rtc_time->mon=(char)atoi(buf);
 8004350:	f107 030c 	add.w	r3, r7, #12
 8004354:	4618      	mov	r0, r3
 8004356:	f001 fda3 	bl	8005ea0 <atoi>
 800435a:	4603      	mov	r3, r0
 800435c:	b2da      	uxtb	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	711a      	strb	r2, [r3, #4]
			if(rtc_time->mon == 0 || rtc_time->mon > 12)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	791b      	ldrb	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <convert_time_from_android+0xee>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	791b      	ldrb	r3, [r3, #4]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d905      	bls.n	800437e <convert_time_from_android+0xfa>
					return res_date = INCORRECT_MONTH;
 8004372:	2302      	movs	r3, #2
 8004374:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800437c:	e0bb      	b.n	80044f6 <convert_time_from_android+0x272>
	*p_rtc++;
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	3301      	adds	r3, #1
 8004382:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	4618      	mov	r0, r3
 800438a:	f7fb fedf 	bl	800014c <strlen>
 800438e:	4602      	mov	r2, r0
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fde8 	bl	8005f6c <memset>
	for(s = 0; s < 2; s++){
 800439c:	2300      	movs	r3, #0
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
 80043a0:	e00c      	b.n	80043bc <convert_time_from_android+0x138>
		buf[s] = *p_rtc++;
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	653a      	str	r2, [r7, #80]	; 0x50
 80043a8:	7819      	ldrb	r1, [r3, #0]
 80043aa:	f107 020c 	add.w	r2, r7, #12
 80043ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b0:	4413      	add	r3, r2
 80043b2:	460a      	mov	r2, r1
 80043b4:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 80043b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b8:	3301      	adds	r3, #1
 80043ba:	657b      	str	r3, [r7, #84]	; 0x54
 80043bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043be:	2b01      	cmp	r3, #1
 80043c0:	ddef      	ble.n	80043a2 <convert_time_from_android+0x11e>
	}
	rtc_time->mday=(char)atoi(buf);
 80043c2:	f107 030c 	add.w	r3, r7, #12
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fd6a 	bl	8005ea0 <atoi>
 80043cc:	4603      	mov	r3, r0
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	715a      	strb	r2, [r3, #5]
			if(rtc_time->mday == 0 || rtc_time->mday > 31)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	795b      	ldrb	r3, [r3, #5]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <convert_time_from_android+0x160>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	795b      	ldrb	r3, [r3, #5]
 80043e0:	2b1f      	cmp	r3, #31
 80043e2:	d905      	bls.n	80043f0 <convert_time_from_android+0x16c>
					return res_date = INCORRECT_DAY;
 80043e4:	2303      	movs	r3, #3
 80043e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80043ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043ee:	e082      	b.n	80044f6 <convert_time_from_android+0x272>
	*p_rtc++;
 80043f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f2:	3301      	adds	r3, #1
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fb fea6 	bl	800014c <strlen>
 8004400:	4602      	mov	r2, r0
 8004402:	f107 030c 	add.w	r3, r7, #12
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f001 fdaf 	bl	8005f6c <memset>
	for(s = 0; s < 2; s++){
 800440e:	2300      	movs	r3, #0
 8004410:	657b      	str	r3, [r7, #84]	; 0x54
 8004412:	e00c      	b.n	800442e <convert_time_from_android+0x1aa>
		buf[s] = *p_rtc++;
 8004414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	653a      	str	r2, [r7, #80]	; 0x50
 800441a:	7819      	ldrb	r1, [r3, #0]
 800441c:	f107 020c 	add.w	r2, r7, #12
 8004420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004422:	4413      	add	r3, r2
 8004424:	460a      	mov	r2, r1
 8004426:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8004428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442a:	3301      	adds	r3, #1
 800442c:	657b      	str	r3, [r7, #84]	; 0x54
 800442e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004430:	2b01      	cmp	r3, #1
 8004432:	ddef      	ble.n	8004414 <convert_time_from_android+0x190>
	}
	rtc_time->hour=(char)atoi(buf);
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fd31 	bl	8005ea0 <atoi>
 800443e:	4603      	mov	r3, r0
 8004440:	b2da      	uxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	719a      	strb	r2, [r3, #6]
	*p_rtc++;
 8004446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004448:	3301      	adds	r3, #1
 800444a:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 800444c:	f107 030c 	add.w	r3, r7, #12
 8004450:	4618      	mov	r0, r3
 8004452:	f7fb fe7b 	bl	800014c <strlen>
 8004456:	4602      	mov	r2, r0
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fd84 	bl	8005f6c <memset>
	for(s = 0; s < 2; s++){
 8004464:	2300      	movs	r3, #0
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
 8004468:	e00c      	b.n	8004484 <convert_time_from_android+0x200>
		buf[s] = *p_rtc++;
 800446a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	653a      	str	r2, [r7, #80]	; 0x50
 8004470:	7819      	ldrb	r1, [r3, #0]
 8004472:	f107 020c 	add.w	r2, r7, #12
 8004476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004478:	4413      	add	r3, r2
 800447a:	460a      	mov	r2, r1
 800447c:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 800447e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004480:	3301      	adds	r3, #1
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
 8004484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004486:	2b01      	cmp	r3, #1
 8004488:	ddef      	ble.n	800446a <convert_time_from_android+0x1e6>
	}
	rtc_time->min=(char)atoi(buf);
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4618      	mov	r0, r3
 8004490:	f001 fd06 	bl	8005ea0 <atoi>
 8004494:	4603      	mov	r3, r0
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	71da      	strb	r2, [r3, #7]
	*p_rtc++;
 800449c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449e:	3301      	adds	r3, #1
 80044a0:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 80044a2:	f107 030c 	add.w	r3, r7, #12
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fb fe50 	bl	800014c <strlen>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f107 030c 	add.w	r3, r7, #12
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 fd59 	bl	8005f6c <memset>
	for(s = 0; s < 2; s++){
 80044ba:	2300      	movs	r3, #0
 80044bc:	657b      	str	r3, [r7, #84]	; 0x54
 80044be:	e00c      	b.n	80044da <convert_time_from_android+0x256>
		buf[s] = *p_rtc++;
 80044c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	653a      	str	r2, [r7, #80]	; 0x50
 80044c6:	7819      	ldrb	r1, [r3, #0]
 80044c8:	f107 020c 	add.w	r2, r7, #12
 80044cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ce:	4413      	add	r3, r2
 80044d0:	460a      	mov	r2, r1
 80044d2:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 80044d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d6:	3301      	adds	r3, #1
 80044d8:	657b      	str	r3, [r7, #84]	; 0x54
 80044da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044dc:	2b01      	cmp	r3, #1
 80044de:	ddef      	ble.n	80044c0 <convert_time_from_android+0x23c>
	}
	rtc_time->sec=(char)atoi(buf);
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 fcdb 	bl	8005ea0 <atoi>
 80044ea:	4603      	mov	r3, r0
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	721a      	strb	r2, [r3, #8]

	return res_date;
 80044f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
//	if(date[])

}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3758      	adds	r7, #88	; 0x58
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <NVIC_EnableIRQ>:
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2201      	movs	r2, #1
 8004512:	fa02 f103 	lsl.w	r1, r2, r3
 8004516:	4a05      	ldr	r2, [pc, #20]	; (800452c <NVIC_EnableIRQ+0x2c>)
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	e000e100 	.word	0xe000e100

08004530 <NVIC_DisableIRQ>:
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	2201      	movs	r2, #1
 8004542:	fa02 f103 	lsl.w	r1, r2, r3
 8004546:	4a06      	ldr	r2, [pc, #24]	; (8004560 <NVIC_DisableIRQ+0x30>)
 8004548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	3320      	adds	r3, #32
 8004550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e100 	.word	0xe000e100

08004564 <NVIC_SetPriority>:
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	2b00      	cmp	r3, #0
 8004576:	da0b      	bge.n	8004590 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	490c      	ldr	r1, [pc, #48]	; (80045b0 <NVIC_SetPriority+0x4c>)
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	3b04      	subs	r3, #4
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	440b      	add	r3, r1
 800458c:	761a      	strb	r2, [r3, #24]
}
 800458e:	e009      	b.n	80045a4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	4907      	ldr	r1, [pc, #28]	; (80045b4 <NVIC_SetPriority+0x50>)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	440b      	add	r3, r1
 80045a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <PN532_SPIInit>:

volatile uint8_t SpiActive;					// флаг активной передачи



void PN532_SPIInit(void){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0

	SpiActive = 1;
 80045be:	4b20      	ldr	r3, [pc, #128]	; (8004640 <PN532_SPIInit+0x88>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]



//------------------------------------------------------------------------------
	//SPI_StructInit( &SPI_PN532_InitStruct);
	SPI_Cmd(SPI2, DISABLE);
 80045c4:	2100      	movs	r1, #0
 80045c6:	481f      	ldr	r0, [pc, #124]	; (8004644 <PN532_SPIInit+0x8c>)
 80045c8:	f000 fe73 	bl	80052b2 <SPI_Cmd>
	NVIC_DisableIRQ(SPI2_IRQn);
 80045cc:	2024      	movs	r0, #36	; 0x24
 80045ce:	f7ff ffaf 	bl	8004530 <NVIC_DisableIRQ>

	/* Initialize the SPI_Direction member */
	SPI_PN532_InitStruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 80045d2:	2300      	movs	r3, #0
 80045d4:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_PN532_InitStruct.SPI_Mode = SPI_Mode_Master;
 80045d6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80045da:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_PN532_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80045dc:	2300      	movs	r3, #0
 80045de:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_PN532_InitStruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 80045e0:	2300      	movs	r3, #0
 80045e2:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_PN532_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80045e4:	2300      	movs	r3, #0
 80045e6:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_PN532_InitStruct.SPI_NSS = SPI_NSS_Hard;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 80045e8:	2300      	movs	r3, #0
 80045ea:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_PN532_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 80045ec:	2338      	movs	r3, #56	; 0x38
 80045ee:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_PN532_InitStruct.SPI_FirstBit = SPI_FirstBit_LSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_PN532_InitStruct.SPI_CRCPolynomial = 7;
 80045f4:	2307      	movs	r3, #7
 80045f6:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_PN532_InitStruct);
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4811      	ldr	r0, [pc, #68]	; (8004644 <PN532_SPIInit+0x8c>)
 80045fe:	f000 fe15 	bl	800522c <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, DISABLE );
 8004602:	2200      	movs	r2, #0
 8004604:	2160      	movs	r1, #96	; 0x60
 8004606:	480f      	ldr	r0, [pc, #60]	; (8004644 <PN532_SPIInit+0x8c>)
 8004608:	f000 fe72 	bl	80052f0 <SPI_I2S_ITConfig>

	SPI_CalculateCRC ( SPI2, DISABLE);
 800460c:	2100      	movs	r1, #0
 800460e:	480d      	ldr	r0, [pc, #52]	; (8004644 <PN532_SPIInit+0x8c>)
 8004610:	f000 fed7 	bl	80053c2 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004614:	2201      	movs	r2, #1
 8004616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800461a:	480b      	ldr	r0, [pc, #44]	; (8004648 <PN532_SPIInit+0x90>)
 800461c:	f000 fafb 	bl	8004c16 <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8004620:	2101      	movs	r1, #1
 8004622:	4808      	ldr	r0, [pc, #32]	; (8004644 <PN532_SPIInit+0x8c>)
 8004624:	f000 feae 	bl	8005384 <SPI_SSOutputCmd>
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/

	SPI_Cmd(SPI2, ENABLE);
 8004628:	2101      	movs	r1, #1
 800462a:	4806      	ldr	r0, [pc, #24]	; (8004644 <PN532_SPIInit+0x8c>)
 800462c:	f000 fe41 	bl	80052b2 <SPI_Cmd>

	SpiActive = 0;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <PN532_SPIInit+0x88>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]

}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000c22 	.word	0x20000c22
 8004644:	40003800 	.word	0x40003800
 8004648:	40010c00 	.word	0x40010c00

0800464c <SPI_Send_Recv>:
	return SPI_OK;
}


void SPI_Send_Recv(uint8_t *buf_tx, uint8_t *buf_rx, uint16_t len)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	80fb      	strh	r3, [r7, #6]
	SpiActive = 1;
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <SPI_Send_Recv+0x68>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]

	pBufTx = buf_tx;
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <SPI_Send_Recv+0x6c>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6013      	str	r3, [r2, #0]
	pBufRx = buf_rx;
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <SPI_Send_Recv+0x70>)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6013      	str	r3, [r2, #0]
	usBufPosRx = 0;
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <SPI_Send_Recv+0x74>)
 800466e:	2200      	movs	r2, #0
 8004670:	801a      	strh	r2, [r3, #0]
	usBufPosTx = 1;
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <SPI_Send_Recv+0x78>)
 8004674:	2201      	movs	r2, #1
 8004676:	801a      	strh	r2, [r3, #0]
	usBufCnt = len;
 8004678:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <SPI_Send_Recv+0x7c>)
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	8013      	strh	r3, [r2, #0]

	while (!(SPI2->SR & SPI_SR_TXE)); //ожидание установки 1 в TXE(окончание передачи)
 800467e:	bf00      	nop
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <SPI_Send_Recv+0x80>)
 8004682:	891b      	ldrh	r3, [r3, #8]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f8      	beq.n	8004680 <SPI_Send_Recv+0x34>
	if (pBufTx)
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <SPI_Send_Recv+0x6c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <SPI_Send_Recv+0x56>
		*(uint8_t*)&SPI2->DR = *pBufTx;
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <SPI_Send_Recv+0x6c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <SPI_Send_Recv+0x84>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	7013      	strb	r3, [r2, #0]
	//_SPI->DR = 5;
	else
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
//	while(SpiActive);
}
 80046a0:	e002      	b.n	80046a8 <SPI_Send_Recv+0x5c>
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <SPI_Send_Recv+0x84>)
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	701a      	strb	r2, [r3, #0]
}
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000c22 	.word	0x20000c22
 80046b8:	20000c14 	.word	0x20000c14
 80046bc:	20000c18 	.word	0x20000c18
 80046c0:	20000c1c 	.word	0x20000c1c
 80046c4:	20000c1e 	.word	0x20000c1e
 80046c8:	20000c20 	.word	0x20000c20
 80046cc:	40003800 	.word	0x40003800
 80046d0:	4000380c 	.word	0x4000380c

080046d4 <SpiSendRecvFlash>:


void SpiSendRecvFlash(uint8_t **a_buf_tx, uint8_t **a_buf_rx, uint16_t *a_buf_len, uint8_t cnt)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < cnt; i++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]
 80046e6:	e01a      	b.n	800471e <SpiSendRecvFlash+0x4a>
			{

				SPI_Send_Recv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4413      	add	r3, r2
 80046fa:	6819      	ldr	r1, [r3, #0]
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	f7ff ffa0 	bl	800464c <SPI_Send_Recv>

				while(SpiActive);
 800470c:	bf00      	nop
 800470e:	4b08      	ldr	r3, [pc, #32]	; (8004730 <SpiSendRecvFlash+0x5c>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1fa      	bne.n	800470e <SpiSendRecvFlash+0x3a>
			for (uint8_t i = 0; i < cnt; i++)
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	3301      	adds	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
 800471e:	7dfa      	ldrb	r2, [r7, #23]
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	429a      	cmp	r2, r3
 8004724:	d3e0      	bcc.n	80046e8 <SpiSendRecvFlash+0x14>
			}
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000c22 	.word	0x20000c22

08004734 <SPI2_IRQHandler>:

}


void SPI2_IRQHandler(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
	{
		volatile uint8_t ucByte = *(uint8_t*)&SPI2->DR;
 800473a:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <SPI2_IRQHandler+0x84>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	71fb      	strb	r3, [r7, #7]

		if (pBufRx)
 8004740:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <SPI2_IRQHandler+0x88>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <SPI2_IRQHandler+0x24>
			pBufRx[usBufPosRx] = ucByte;
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <SPI2_IRQHandler+0x88>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <SPI2_IRQHandler+0x8c>)
 800474e:	8812      	ldrh	r2, [r2, #0]
 8004750:	4413      	add	r3, r2
 8004752:	79fa      	ldrb	r2, [r7, #7]
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]
	}

	{
		if (usBufPosTx < usBufCnt)
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <SPI2_IRQHandler+0x90>)
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <SPI2_IRQHandler+0x94>)
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d215      	bcs.n	8004790 <SPI2_IRQHandler+0x5c>
		{
			if (pBufTx)
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <SPI2_IRQHandler+0x98>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <SPI2_IRQHandler+0x4a>
				*(uint8_t*)&SPI2->DR = pBufTx[usBufPosTx];
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <SPI2_IRQHandler+0x98>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <SPI2_IRQHandler+0x90>)
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	4413      	add	r3, r2
 8004776:	4a10      	ldr	r2, [pc, #64]	; (80047b8 <SPI2_IRQHandler+0x84>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	7013      	strb	r3, [r2, #0]
 800477c:	e002      	b.n	8004784 <SPI2_IRQHandler+0x50>
			else
				*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 800477e:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <SPI2_IRQHandler+0x84>)
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	701a      	strb	r2, [r3, #0]

			usBufPosTx++;
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <SPI2_IRQHandler+0x90>)
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <SPI2_IRQHandler+0x90>)
 800478e:	801a      	strh	r2, [r3, #0]
	/*	else{
			GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		}*/
	}

	if (++usBufPosRx >= usBufCnt)
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <SPI2_IRQHandler+0x8c>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <SPI2_IRQHandler+0x8c>)
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <SPI2_IRQHandler+0x8c>)
 800479e:	881a      	ldrh	r2, [r3, #0]
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <SPI2_IRQHandler+0x94>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <SPI2_IRQHandler+0x7a>
	{
		SpiActive = 0;
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <SPI2_IRQHandler+0x9c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
	//	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		//SPI_ON_READY_ISR_CB(0);
	}

}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	4000380c 	.word	0x4000380c
 80047bc:	20000c18 	.word	0x20000c18
 80047c0:	20000c1c 	.word	0x20000c1c
 80047c4:	20000c1e 	.word	0x20000c1e
 80047c8:	20000c20 	.word	0x20000c20
 80047cc:	20000c14 	.word	0x20000c14
 80047d0:	20000c22 	.word	0x20000c22

080047d4 <SPI_FLASH_CONFIG>:



void SPI_FLASH_CONFIG(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80047da:	2201      	movs	r2, #1
 80047dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047e0:	4825      	ldr	r0, [pc, #148]	; (8004878 <SPI_FLASH_CONFIG+0xa4>)
 80047e2:	f000 fa18 	bl	8004c16 <GPIO_WriteBit>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80047e6:	2201      	movs	r2, #1
 80047e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ec:	4822      	ldr	r0, [pc, #136]	; (8004878 <SPI_FLASH_CONFIG+0xa4>)
 80047ee:	f000 fa12 	bl	8004c16 <GPIO_WriteBit>
//	SPI2->CR1 |= SPI_CR1_SPE;


	SPI_InitTypeDef			SPI_FLASH_Initstruct;

	SPI_Cmd(SPI2, DISABLE);
 80047f2:	2100      	movs	r1, #0
 80047f4:	4821      	ldr	r0, [pc, #132]	; (800487c <SPI_FLASH_CONFIG+0xa8>)
 80047f6:	f000 fd5c 	bl	80052b2 <SPI_Cmd>
//	NVIC_DisableIRQ(SPI2_IRQn);

	/* Initialize the SPI_Direction member */
	SPI_FLASH_Initstruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 80047fa:	2300      	movs	r3, #0
 80047fc:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_FLASH_Initstruct.SPI_Mode = SPI_Mode_Master;
 80047fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004802:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_FLASH_Initstruct.SPI_DataSize = SPI_DataSize_8b;
 8004804:	2300      	movs	r3, #0
 8004806:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_FLASH_Initstruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 8004808:	2300      	movs	r3, #0
 800480a:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_FLASH_Initstruct.SPI_CPHA = SPI_CPHA_1Edge;
 800480c:	2300      	movs	r3, #0
 800480e:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_FLASH_Initstruct.SPI_NSS = SPI_NSS_Soft;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 8004810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004814:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_FLASH_Initstruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 8004816:	2338      	movs	r3, #56	; 0x38
 8004818:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_FLASH_Initstruct.SPI_FirstBit = SPI_FirstBit_MSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 800481a:	2300      	movs	r3, #0
 800481c:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_FLASH_Initstruct.SPI_CRCPolynomial = 7;
 800481e:	2307      	movs	r3, #7
 8004820:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_FLASH_Initstruct);
 8004822:	1d3b      	adds	r3, r7, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4815      	ldr	r0, [pc, #84]	; (800487c <SPI_FLASH_CONFIG+0xa8>)
 8004828:	f000 fd00 	bl	800522c <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);

	SPI_CalculateCRC ( SPI2, DISABLE);
 800482c:	2100      	movs	r1, #0
 800482e:	4813      	ldr	r0, [pc, #76]	; (800487c <SPI_FLASH_CONFIG+0xa8>)
 8004830:	f000 fdc7 	bl	80053c2 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004834:	2201      	movs	r2, #1
 8004836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800483a:	480f      	ldr	r0, [pc, #60]	; (8004878 <SPI_FLASH_CONFIG+0xa4>)
 800483c:	f000 f9eb 	bl	8004c16 <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8004840:	2101      	movs	r1, #1
 8004842:	480e      	ldr	r0, [pc, #56]	; (800487c <SPI_FLASH_CONFIG+0xa8>)
 8004844:	f000 fd9e 	bl	8005384 <SPI_SSOutputCmd>
	uint32_t tmpreg = 0;
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, ENABLE );
 8004848:	2201      	movs	r2, #1
 800484a:	2160      	movs	r1, #96	; 0x60
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <SPI_FLASH_CONFIG+0xa8>)
 800484e:	f000 fd4f 	bl	80052f0 <SPI_I2S_ITConfig>
	NVIC_SetPriority(SPI2_IRQn, 3);
 8004852:	2103      	movs	r1, #3
 8004854:	2024      	movs	r0, #36	; 0x24
 8004856:	f7ff fe85 	bl	8004564 <NVIC_SetPriority>
	NVIC_EnableIRQ(SPI2_IRQn);
 800485a:	2024      	movs	r0, #36	; 0x24
 800485c:	f7ff fe50 	bl	8004500 <NVIC_EnableIRQ>



	SPI_Cmd(SPI2, ENABLE);
 8004860:	2101      	movs	r1, #1
 8004862:	4806      	ldr	r0, [pc, #24]	; (800487c <SPI_FLASH_CONFIG+0xa8>)
 8004864:	f000 fd25 	bl	80052b2 <SPI_Cmd>

	SpiActive = 0;
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <SPI_FLASH_CONFIG+0xac>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init ( &NVIC_InitStruct );
*/


}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40010c00 	.word	0x40010c00
 800487c:	40003800 	.word	0x40003800
 8004880:	20000c22 	.word	0x20000c22

08004884 <spiFlash_Read>:

extern volatile uint8_t SpiActive;


void spiFlash_Read( uint32_t dwAddrRead, uint16_t bCnt, uint8_t* pBuf )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	460b      	mov	r3, r1
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	817b      	strh	r3, [r7, #10]
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8004892:	2201      	movs	r2, #1
 8004894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004898:	4820      	ldr	r0, [pc, #128]	; (800491c <spiFlash_Read+0x98>)
 800489a:	f000 f9bc 	bl	8004c16 <GPIO_WriteBit>
	buf_txrx[0] = CMD_READ_DATA;
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <spiFlash_Read+0x9c>)
 80048a0:	2203      	movs	r2, #3
 80048a2:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrRead >> 16);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <spiFlash_Read+0x9c>)
 80048ac:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrRead >> 8);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0a1b      	lsrs	r3, r3, #8
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <spiFlash_Read+0x9c>)
 80048b6:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrRead >> 0);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b18      	ldr	r3, [pc, #96]	; (8004920 <spiFlash_Read+0x9c>)
 80048be:	70da      	strb	r2, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <spiFlash_Read+0xa0>)
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <spiFlash_Read+0x9c>)
 80048c4:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <spiFlash_Read+0xa4>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 4;
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <spiFlash_Read+0xa8>)
 80048ce:	2204      	movs	r2, #4
 80048d0:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = NULL;
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <spiFlash_Read+0xa0>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]
	a_buf_rx[1] = pBuf;
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <spiFlash_Read+0xa4>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6053      	str	r3, [r2, #4]
	a_buf_len[1] = bCnt;
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <spiFlash_Read+0xa8>)
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	8053      	strh	r3, [r2, #2]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 80048e4:	2200      	movs	r2, #0
 80048e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ea:	480c      	ldr	r0, [pc, #48]	; (800491c <spiFlash_Read+0x98>)
 80048ec:	f000 f993 	bl	8004c16 <GPIO_WriteBit>

	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 80048f0:	2302      	movs	r3, #2
 80048f2:	4a0e      	ldr	r2, [pc, #56]	; (800492c <spiFlash_Read+0xa8>)
 80048f4:	490c      	ldr	r1, [pc, #48]	; (8004928 <spiFlash_Read+0xa4>)
 80048f6:	480b      	ldr	r0, [pc, #44]	; (8004924 <spiFlash_Read+0xa0>)
 80048f8:	f7ff feec 	bl	80046d4 <SpiSendRecvFlash>
	while(SpiActive);
 80048fc:	bf00      	nop
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <spiFlash_Read+0xac>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1fa      	bne.n	80048fe <spiFlash_Read+0x7a>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8004908:	2201      	movs	r2, #1
 800490a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800490e:	4803      	ldr	r0, [pc, #12]	; (800491c <spiFlash_Read+0x98>)
 8004910:	f000 f981 	bl	8004c16 <GPIO_WriteBit>

}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40010c00 	.word	0x40010c00
 8004920:	20000c38 	.word	0x20000c38
 8004924:	20000c24 	.word	0x20000c24
 8004928:	20000c2c 	.word	0x20000c2c
 800492c:	20000c34 	.word	0x20000c34
 8004930:	20000c22 	.word	0x20000c22

08004934 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800493c:	4a05      	ldr	r2, [pc, #20]	; (8004954 <NVIC_PriorityGroupConfig+0x20>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	60d3      	str	r3, [r2, #12]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	230f      	movs	r3, #15
 800496a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	78db      	ldrb	r3, [r3, #3]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d03a      	beq.n	80049ea <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <NVIC_Init+0xbc>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	43db      	mvns	r3, r3
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f1c3 0304 	rsb	r3, r3, #4
 8004988:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa22 f303 	lsr.w	r3, r2, r3
 8004992:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	461a      	mov	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	789b      	ldrb	r3, [r3, #2]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4013      	ands	r3, r2
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80049b8:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <NVIC_Init+0xc0>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	b2c9      	uxtb	r1, r1
 80049c2:	4413      	add	r3, r2
 80049c4:	460a      	mov	r2, r1
 80049c6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80049d2:	4911      	ldr	r1, [pc, #68]	; (8004a18 <NVIC_Init+0xc0>)
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	7812      	ldrb	r2, [r2, #0]
 80049d8:	0952      	lsrs	r2, r2, #5
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80049de:	2201      	movs	r2, #1
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80049e4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80049e8:	e00f      	b.n	8004a0a <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80049f2:	4909      	ldr	r1, [pc, #36]	; (8004a18 <NVIC_Init+0xc0>)
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	0952      	lsrs	r2, r2, #5
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80049fe:	2201      	movs	r2, #1
 8004a00:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004a02:	f100 0320 	add.w	r3, r0, #32
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	e000ed00 	.word	0xe000ed00
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <EXTI_GetFlagStatus+0x30>)
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
 8004a38:	e001      	b.n	8004a3e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010400 	.word	0x40010400

08004a50 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004a58:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <EXTI_ClearITPendingBit+0x18>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6153      	str	r3, [r2, #20]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	40010400 	.word	0x40010400

08004a6c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b089      	sub	sp, #36	; 0x24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	78db      	ldrb	r3, [r3, #3]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	78db      	ldrb	r3, [r3, #3]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <GPIO_Init+0x44>
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d044      	beq.n	8004b44 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	e038      	b.n	8004b38 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d126      	bne.n	8004b32 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004aea:	220f      	movs	r2, #15
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4013      	ands	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	78db      	ldrb	r3, [r3, #3]
 8004b10:	2b28      	cmp	r3, #40	; 0x28
 8004b12:	d105      	bne.n	8004b20 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8004b14:	2201      	movs	r2, #1
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	615a      	str	r2, [r3, #20]
 8004b1e:	e008      	b.n	8004b32 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	2b48      	cmp	r3, #72	; 0x48
 8004b26:	d104      	bne.n	8004b32 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8004b28:	2201      	movs	r2, #1
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b07      	cmp	r3, #7
 8004b3c:	d9c3      	bls.n	8004ac6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	2bff      	cmp	r3, #255	; 0xff
 8004b4a:	d946      	bls.n	8004bda <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e03a      	b.n	8004bce <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d127      	bne.n	8004bc8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004b7e:	220f      	movs	r2, #15
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	78db      	ldrb	r3, [r3, #3]
 8004ba4:	2b28      	cmp	r3, #40	; 0x28
 8004ba6:	d105      	bne.n	8004bb4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	3308      	adds	r3, #8
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	2b48      	cmp	r3, #72	; 0x48
 8004bba:	d105      	bne.n	8004bc8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	d9c1      	bls.n	8004b58 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	605a      	str	r2, [r3, #4]
  }
}
 8004bda:	bf00      	nop
 8004bdc:	3724      	adds	r7, #36	; 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	73fb      	strb	r3, [r7, #15]
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	887b      	ldrh	r3, [r7, #2]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e001      	b.n	8004c0a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	807b      	strh	r3, [r7, #2]
 8004c22:	4613      	mov	r3, r2
 8004c24:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 8004c26:	787b      	ldrb	r3, [r7, #1]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c2c:	887a      	ldrh	r2, [r7, #2]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8004c32:	e002      	b.n	8004c3a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8004c34:	887a      	ldrh	r2, [r7, #2]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	615a      	str	r2, [r3, #20]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c52:	2300      	movs	r3, #0
 8004c54:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8004c56:	2304      	movs	r3, #4
 8004c58:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8004c5a:	4b57      	ldr	r3, [pc, #348]	; (8004db8 <I2C_Init+0x174>)
 8004c5c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	889b      	ldrh	r3, [r3, #4]
 8004c62:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8004c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c6a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8004c6c:	f107 0308 	add.w	r3, r7, #8
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f9d9 	bl	8005028 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4a4f      	ldr	r2, [pc, #316]	; (8004dbc <I2C_Init+0x178>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0c9b      	lsrs	r3, r3, #18
 8004c84:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8004c86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c92:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a44      	ldr	r2, [pc, #272]	; (8004dc0 <I2C_Init+0x17c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d815      	bhi.n	8004cde <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8004cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d801      	bhi.n	8004cca <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8004cca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	841a      	strh	r2, [r3, #32]
 8004cdc:	e040      	b.n	8004d60 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	88db      	ldrh	r3, [r3, #6]
 8004ce2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d109      	bne.n	8004cfe <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cfc:	e00e      	b.n	8004d1c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	009a      	lsls	r2, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8004d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d1a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8004d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8004d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8004d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8004d40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <I2C_Init+0x180>)
 8004d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8004d50:	1192      	asrs	r2, r2, #6
 8004d52:	17db      	asrs	r3, r3, #31
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004d64:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d7e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8004d82:	f023 0302 	bic.w	r3, r3, #2
 8004d86:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	889a      	ldrh	r2, [r3, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	895b      	ldrh	r3, [r3, #10]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d96:	4313      	orrs	r3, r2
 8004d98:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004d9e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	899a      	ldrh	r2, [r3, #12]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	891b      	ldrh	r3, [r3, #8]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	811a      	strh	r2, [r3, #8]
}
 8004db0:	bf00      	nop
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	007a1200 	.word	0x007a1200
 8004dbc:	431bde83 	.word	0x431bde83
 8004dc0:	000186a0 	.word	0x000186a0
 8004dc4:	10624dd3 	.word	0x10624dd3

08004dc8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8004dea:	e007      	b.n	8004dfc <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	801a      	strh	r2, [r3, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8004e28:	e007      	b.n	8004e3a <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	801a      	strh	r2, [r3, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8004e66:	e007      	b.n	8004e78 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	801a      	strh	r2, [r3, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	821a      	strh	r2, [r3, #16]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
 8004eac:	4613      	mov	r3, r2
 8004eae:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8004eb0:	78bb      	ldrb	r3, [r7, #2]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	70fb      	strb	r3, [r7, #3]
 8004ebe:	e003      	b.n	8004ec8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	821a      	strh	r2, [r3, #16]
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr

08004eda <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8a9b      	ldrh	r3, [r3, #20]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8b1b      	ldrh	r3, [r3, #24]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f14:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d102      	bne.n	8004f28 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
 8004f26:	e001      	b.n	8004f2c <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8004f4c:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0f      	ldr	r2, [pc, #60]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5e:	d004      	beq.n	8004f6a <RCC_HSEConfig+0x32>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f66:	d007      	beq.n	8004f78 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8004f68:	e00d      	b.n	8004f86 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
      break;
 8004f76:	e006      	b.n	8004f86 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <RCC_HSEConfig+0x58>)
 8004f7e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004f82:	6013      	str	r3, [r2, #0]
      break;
 8004f84:	bf00      	nop
  }
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	40021000 	.word	0x40021000

08004f94 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]

  tmpreg = RCC->CFGR;
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <RCC_PLLConfig+0x38>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <RCC_PLLConfig+0x38>)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6053      	str	r3, [r2, #4]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	40021000 	.word	0x40021000

08004fd0 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8004fda:	4a04      	ldr	r2, [pc, #16]	; (8004fec <RCC_PLLCmd+0x1c>)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	42420060 	.word	0x42420060

08004ff0 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpreg = RCC->CFGR;
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <RCC_SYSCLKConfig+0x34>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 0303 	bic.w	r3, r3, #3
 8005008:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <RCC_SYSCLKConfig+0x34>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6053      	str	r3, [r2, #4]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000

08005028 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8005040:	4b4f      	ldr	r3, [pc, #316]	; (8005180 <RCC_GetClocksFreq+0x158>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 030c 	and.w	r3, r3, #12
 8005048:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d011      	beq.n	8005074 <RCC_GetClocksFreq+0x4c>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b08      	cmp	r3, #8
 8005054:	d83a      	bhi.n	80050cc <RCC_GetClocksFreq+0xa4>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <RCC_GetClocksFreq+0x3c>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b04      	cmp	r3, #4
 8005060:	d004      	beq.n	800506c <RCC_GetClocksFreq+0x44>
 8005062:	e033      	b.n	80050cc <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a47      	ldr	r2, [pc, #284]	; (8005184 <RCC_GetClocksFreq+0x15c>)
 8005068:	601a      	str	r2, [r3, #0]
      break;
 800506a:	e033      	b.n	80050d4 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a45      	ldr	r2, [pc, #276]	; (8005184 <RCC_GetClocksFreq+0x15c>)
 8005070:	601a      	str	r2, [r3, #0]
      break;
 8005072:	e02f      	b.n	80050d4 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8005074:	4b42      	ldr	r3, [pc, #264]	; (8005180 <RCC_GetClocksFreq+0x158>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800507c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800507e:	4b40      	ldr	r3, [pc, #256]	; (8005180 <RCC_GetClocksFreq+0x158>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005086:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	0c9b      	lsrs	r3, r3, #18
 800508c:	3302      	adds	r3, #2
 800508e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4a3b      	ldr	r2, [pc, #236]	; (8005188 <RCC_GetClocksFreq+0x160>)
 800509a:	fb03 f202 	mul.w	r2, r3, r2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80050a2:	e017      	b.n	80050d4 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80050a4:	4b36      	ldr	r3, [pc, #216]	; (8005180 <RCC_GetClocksFreq+0x158>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4a35      	ldr	r2, [pc, #212]	; (8005188 <RCC_GetClocksFreq+0x160>)
 80050b4:	fb03 f202 	mul.w	r2, r3, r2
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
      break;
 80050bc:	e00a      	b.n	80050d4 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4a30      	ldr	r2, [pc, #192]	; (8005184 <RCC_GetClocksFreq+0x15c>)
 80050c2:	fb03 f202 	mul.w	r2, r3, r2
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
      break;
 80050ca:	e003      	b.n	80050d4 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2d      	ldr	r2, [pc, #180]	; (8005184 <RCC_GetClocksFreq+0x15c>)
 80050d0:	601a      	str	r2, [r3, #0]
      break;
 80050d2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80050d4:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <RCC_GetClocksFreq+0x158>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050dc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80050e4:	4a29      	ldr	r2, [pc, #164]	; (800518c <RCC_GetClocksFreq+0x164>)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4413      	add	r3, r2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	40da      	lsrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80050fc:	4b20      	ldr	r3, [pc, #128]	; (8005180 <RCC_GetClocksFreq+0x158>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005104:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	0a1b      	lsrs	r3, r3, #8
 800510a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800510c:	4a1f      	ldr	r2, [pc, #124]	; (800518c <RCC_GetClocksFreq+0x164>)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	40da      	lsrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <RCC_GetClocksFreq+0x158>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800512c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	0adb      	lsrs	r3, r3, #11
 8005132:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8005134:	4a15      	ldr	r2, [pc, #84]	; (800518c <RCC_GetClocksFreq+0x164>)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	40da      	lsrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <RCC_GetClocksFreq+0x158>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005154:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	0b9b      	lsrs	r3, r3, #14
 800515a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800515c:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <RCC_GetClocksFreq+0x168>)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	611a      	str	r2, [r3, #16]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	40021000 	.word	0x40021000
 8005184:	007a1200 	.word	0x007a1200
 8005188:	003d0900 	.word	0x003d0900
 800518c:	20000404 	.word	0x20000404
 8005190:	20000414 	.word	0x20000414

08005194 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d006      	beq.n	80051b4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <RCC_APB2PeriphClockCmd+0x38>)
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	4908      	ldr	r1, [pc, #32]	; (80051cc <RCC_APB2PeriphClockCmd+0x38>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80051b2:	e006      	b.n	80051c2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <RCC_APB2PeriphClockCmd+0x38>)
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <RCC_APB2PeriphClockCmd+0x38>)
 80051be:	4013      	ands	r3, r2
 80051c0:	618b      	str	r3, [r1, #24]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	40021000 	.word	0x40021000

080051d0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <RCC_APB1PeriphClockCmd+0x38>)
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	4908      	ldr	r1, [pc, #32]	; (8005208 <RCC_APB1PeriphClockCmd+0x38>)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80051ee:	e006      	b.n	80051fe <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <RCC_APB1PeriphClockCmd+0x38>)
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	43db      	mvns	r3, r3
 80051f8:	4903      	ldr	r1, [pc, #12]	; (8005208 <RCC_APB1PeriphClockCmd+0x38>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	61cb      	str	r3, [r1, #28]
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	40021000 	.word	0x40021000

0800520c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8005216:	4a04      	ldr	r2, [pc, #16]	; (8005228 <RCC_ClockSecuritySystemCmd+0x1c>)
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	6013      	str	r3, [r2, #0]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	4242004c 	.word	0x4242004c

0800522c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005240:	89fb      	ldrh	r3, [r7, #14]
 8005242:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8005246:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	881a      	ldrh	r2, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	885b      	ldrh	r3, [r3, #2]
 8005250:	4313      	orrs	r3, r2
 8005252:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005258:	4313      	orrs	r3, r2
 800525a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005260:	4313      	orrs	r3, r2
 8005262:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005268:	4313      	orrs	r3, r2
 800526a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005270:	4313      	orrs	r3, r2
 8005272:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005278:	4313      	orrs	r3, r2
 800527a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005280:	4313      	orrs	r3, r2
 8005282:	b29a      	uxth	r2, r3
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	4313      	orrs	r3, r2
 8005288:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	89fa      	ldrh	r2, [r7, #14]
 800528e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8b9b      	ldrh	r3, [r3, #28]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	8a1a      	ldrh	r2, [r3, #16]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	821a      	strh	r2, [r3, #16]
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80052d4:	e007      	b.n	80052e6 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	801a      	strh	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
 80052fc:	4613      	mov	r3, r2
 80052fe:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8005300:	2300      	movs	r3, #0
 8005302:	81fb      	strh	r3, [r7, #14]
 8005304:	2300      	movs	r3, #0
 8005306:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	b2db      	uxtb	r3, r3
 800530e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8005310:	89fb      	ldrh	r3, [r7, #14]
 8005312:	2201      	movs	r2, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800531a:	78bb      	ldrb	r3, [r7, #2]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	889b      	ldrh	r3, [r3, #4]
 8005324:	b29a      	uxth	r2, r3
 8005326:	89bb      	ldrh	r3, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8005330:	e009      	b.n	8005346 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	889b      	ldrh	r3, [r3, #4]
 8005336:	b29a      	uxth	r2, r3
 8005338:	89bb      	ldrh	r3, [r7, #12]
 800533a:	43db      	mvns	r3, r3
 800533c:	b29b      	uxth	r3, r3
 800533e:	4013      	ands	r3, r2
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	809a      	strh	r2, [r3, #4]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	887a      	ldrh	r2, [r7, #2]
 8005360:	819a      	strh	r2, [r3, #12]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	899b      	ldrh	r3, [r3, #12]
 8005378:	b29b      	uxth	r3, r3
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	889b      	ldrh	r3, [r3, #4]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 80053a6:	e007      	b.n	80053b8 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	889b      	ldrh	r3, [r3, #4]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f023 0304 	bic.w	r3, r3, #4
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	809a      	strh	r2, [r3, #4]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
  }
}
 80053e4:	e007      	b.n	80053f6 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= CR1_CRCEN_Reset;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	801a      	strh	r2, [r3, #0]
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800540c:	2300      	movs	r3, #0
 800540e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	891b      	ldrh	r3, [r3, #8]
 8005414:	b29a      	uxth	r2, r3
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	4013      	ands	r3, r2
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e001      	b.n	800542a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr
	...

08005438 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	81fb      	strh	r3, [r7, #14]

  tmpcr1 = TIMx->CR1;  
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <TIM_TimeBaseInit+0xd0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <TIM_TimeBaseInit+0x44>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a2d      	ldr	r2, [pc, #180]	; (800550c <TIM_TimeBaseInit+0xd4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00f      	beq.n	800547c <TIM_TimeBaseInit+0x44>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d00b      	beq.n	800547c <TIM_TimeBaseInit+0x44>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <TIM_TimeBaseInit+0xd8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_TimeBaseInit+0x44>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a29      	ldr	r2, [pc, #164]	; (8005514 <TIM_TimeBaseInit+0xdc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a28      	ldr	r2, [pc, #160]	; (8005518 <TIM_TimeBaseInit+0xe0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800547c:	89fb      	ldrh	r3, [r7, #14]
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	885a      	ldrh	r2, [r3, #2]
 8005488:	89fb      	ldrh	r3, [r7, #14]
 800548a:	4313      	orrs	r3, r2
 800548c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a22      	ldr	r2, [pc, #136]	; (800551c <TIM_TimeBaseInit+0xe4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00c      	beq.n	80054b0 <TIM_TimeBaseInit+0x78>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a21      	ldr	r2, [pc, #132]	; (8005520 <TIM_TimeBaseInit+0xe8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d008      	beq.n	80054b0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800549e:	89fb      	ldrh	r3, [r7, #14]
 80054a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	88da      	ldrh	r2, [r3, #6]
 80054aa:	89fb      	ldrh	r3, [r7, #14]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	89fa      	ldrh	r2, [r7, #14]
 80054b4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	889a      	ldrh	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a0f      	ldr	r2, [pc, #60]	; (8005508 <TIM_TimeBaseInit+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00f      	beq.n	80054ee <TIM_TimeBaseInit+0xb6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0e      	ldr	r2, [pc, #56]	; (800550c <TIM_TimeBaseInit+0xd4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00b      	beq.n	80054ee <TIM_TimeBaseInit+0xb6>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a12      	ldr	r2, [pc, #72]	; (8005524 <TIM_TimeBaseInit+0xec>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d007      	beq.n	80054ee <TIM_TimeBaseInit+0xb6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a11      	ldr	r2, [pc, #68]	; (8005528 <TIM_TimeBaseInit+0xf0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d003      	beq.n	80054ee <TIM_TimeBaseInit+0xb6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a10      	ldr	r2, [pc, #64]	; (800552c <TIM_TimeBaseInit+0xf4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d104      	bne.n	80054f8 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	7a1b      	ldrb	r3, [r3, #8]
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	829a      	strh	r2, [r3, #20]
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40000400 	.word	0x40000400
 8005514:	40000800 	.word	0x40000800
 8005518:	40000c00 	.word	0x40000c00
 800551c:	40001000 	.word	0x40001000
 8005520:	40001400 	.word	0x40001400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8005552:	e007      	b.n	8005564 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	801a      	strh	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr

0800556e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	807b      	strh	r3, [r7, #2]
 800557a:	4613      	mov	r3, r2
 800557c:	707b      	strb	r3, [r7, #1]
  if (NewState != DISABLE)
 800557e:	787b      	ldrb	r3, [r7, #1]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	899b      	ldrh	r3, [r3, #12]
 8005588:	b29a      	uxth	r2, r3
 800558a:	887b      	ldrh	r3, [r7, #2]
 800558c:	4313      	orrs	r3, r2
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8005594:	e009      	b.n	80055aa <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	899b      	ldrh	r3, [r3, #12]
 800559a:	b29a      	uxth	r2, r3
 800559c:	887b      	ldrh	r3, [r7, #2]
 800559e:	43db      	mvns	r3, r3
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	4013      	ands	r3, r2
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	819a      	strh	r2, [r3, #12]
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	81bb      	strh	r3, [r7, #12]
 80055c8:	2300      	movs	r3, #0
 80055ca:	817b      	strh	r3, [r7, #10]
   
  itstatus = TIMx->SR & TIM_IT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	8a1b      	ldrh	r3, [r3, #16]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	4013      	ands	r3, r2
 80055d6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	899b      	ldrh	r3, [r3, #12]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	887b      	ldrh	r3, [r7, #2]
 80055e0:	4013      	ands	r3, r2
 80055e2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80055e4:	89bb      	ldrh	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <TIM_GetITStatus+0x42>
 80055ea:	897b      	ldrh	r3, [r7, #10]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
 80055f4:	e001      	b.n	80055fa <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	807b      	strh	r3, [r7, #2]
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	43db      	mvns	r3, r3
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	821a      	strh	r2, [r3, #16]
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
	...

08005628 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08c      	sub	sp, #48	; 0x30
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8005632:	2300      	movs	r3, #0
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005636:	2300      	movs	r3, #0
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800563a:	2300      	movs	r3, #0
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800563e:	2300      	movs	r3, #0
 8005640:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  usartxbase = (uint32_t)USARTx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8a1b      	ldrh	r3, [r3, #16]
 800564e:	b29b      	uxth	r3, r3
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005654:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8005658:	4013      	ands	r3, r2
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	88db      	ldrh	r3, [r3, #6]
 8005660:	461a      	mov	r2, r3
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	4313      	orrs	r3, r2
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	899b      	ldrh	r3, [r3, #12]
 8005674:	b29b      	uxth	r3, r3
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800567a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800567e:	4013      	ands	r3, r2
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	889a      	ldrh	r2, [r3, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	891b      	ldrh	r3, [r3, #8]
 800568a:	4313      	orrs	r3, r2
 800568c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005692:	4313      	orrs	r3, r2
 8005694:	b29b      	uxth	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	4313      	orrs	r3, r2
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8a9b      	ldrh	r3, [r3, #20]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80056ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80056b4:	4013      	ands	r3, r2
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	899b      	ldrh	r3, [r3, #12]
 80056bc:	461a      	mov	r2, r3
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	4313      	orrs	r3, r2
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80056cc:	f107 0308 	add.w	r3, r7, #8
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fca9 	bl	8005028 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4a2e      	ldr	r2, [pc, #184]	; (8005794 <USART_Init+0x16c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d102      	bne.n	80056e4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e2:	e001      	b.n	80056e8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	899b      	ldrh	r3, [r3, #12]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	da0c      	bge.n	800570e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80056f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
 800570c:	e00b      	b.n	8005726 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800570e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009a      	lsls	r2, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <USART_Init+0x170>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	091b      	lsrs	r3, r3, #4
 8005738:	2264      	movs	r2, #100	; 0x64
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	899b      	ldrh	r3, [r3, #12]
 8005748:	b29b      	uxth	r3, r3
 800574a:	b21b      	sxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	da0c      	bge.n	800576a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	3332      	adds	r3, #50	; 0x32
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <USART_Init+0x170>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005764:	4313      	orrs	r3, r2
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005768:	e00b      	b.n	8005782 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	3332      	adds	r3, #50	; 0x32
 8005770:	4a09      	ldr	r2, [pc, #36]	; (8005798 <USART_Init+0x170>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577e:	4313      	orrs	r3, r2
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	811a      	strh	r2, [r3, #8]
}
 800578a:	bf00      	nop
 800578c:	3730      	adds	r7, #48	; 0x30
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40013800 	.word	0x40013800
 8005798:	51eb851f 	.word	0x51eb851f

0800579c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	899b      	ldrh	r3, [r3, #12]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80057be:	e007      	b.n	80057d0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	899b      	ldrh	r3, [r3, #12]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	819a      	strh	r2, [r3, #12]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	807b      	strh	r3, [r7, #2]
 80057e6:	4613      	mov	r3, r2
 80057e8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
  /* The CTS interrupt is not available for UART4 and UART5 */
  
  usartxbase = (uint32_t)USARTx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80057fe:	887b      	ldrh	r3, [r7, #2]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	b2db      	uxtb	r3, r3
 8005806:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8005808:	887b      	ldrh	r3, [r7, #2]
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8005810:	2201      	movs	r2, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d103      	bne.n	8005828 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	330c      	adds	r3, #12
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e009      	b.n	800583c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d103      	bne.n	8005836 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	3310      	adds	r3, #16
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	e002      	b.n	800583c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	3314      	adds	r3, #20
 800583a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800583c:	787b      	ldrb	r3, [r7, #1]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d006      	beq.n	8005850 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6819      	ldr	r1, [r3, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800584e:	e006      	b.n	800585e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	43da      	mvns	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	400a      	ands	r2, r1
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	807b      	strh	r3, [r7, #2]
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	809a      	strh	r2, [r3, #4]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	889b      	ldrh	r3, [r3, #4]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589c:	b29b      	uxth	r3, r3
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]
  /* The CTS flag is not available for UART4 and UART5 */
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	887b      	ldrh	r3, [r7, #2]
 80058c0:	4013      	ands	r3, r2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
 80058cc:	e001      	b.n	80058d2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80058ea:	2300      	movs	r3, #0
 80058ec:	81fb      	strh	r3, [r7, #14]
 80058ee:	2300      	movs	r3, #0
 80058f0:	81bb      	strh	r3, [r7, #12]
  
  bitpos = USART_IT >> 0x08;
 80058f2:	887b      	ldrh	r3, [r7, #2]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	2201      	movs	r2, #1
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8005902:	89bb      	ldrh	r3, [r7, #12]
 8005904:	43db      	mvns	r3, r3
 8005906:	b29a      	uxth	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	801a      	strh	r2, [r3, #0]
}
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
	...

08005918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005918:	480c      	ldr	r0, [pc, #48]	; (800594c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800591a:	490d      	ldr	r1, [pc, #52]	; (8005950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800591c:	4a0d      	ldr	r2, [pc, #52]	; (8005954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800591e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005920:	e002      	b.n	8005928 <LoopCopyDataInit>

08005922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005926:	3304      	adds	r3, #4

08005928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800592a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800592c:	d3f9      	bcc.n	8005922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800592e:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005930:	4c0a      	ldr	r4, [pc, #40]	; (800595c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005934:	e001      	b.n	800593a <LoopFillZerobss>

08005936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005938:	3204      	adds	r2, #4

0800593a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800593a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800593c:	d3fb      	bcc.n	8005936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800593e:	f7fa fc0d 	bl	800015c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005942:	f000 fab7 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005946:	f7fa fdf1 	bl	800052c <main>
  bx lr
 800594a:	4770      	bx	lr
  ldr r0, =_sdata
 800594c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005950:	2000047c 	.word	0x2000047c
  ldr r2, =_sidata
 8005954:	08007500 	.word	0x08007500
  ldr r2, =_sbss
 8005958:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 800595c:	20000d30 	.word	0x20000d30

08005960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005960:	e7fe      	b.n	8005960 <ADC1_2_IRQHandler>
	...

08005964 <Usart2Init>:
static int g_iEnd = 0;

int flag_usart = 0;

//USART2 для передачи на компьютер
void Usart2Init(void) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART2_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART2 initialization: PA2 - USART2_TX, PA3 - USART2_RX */

	USART2_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_PORT, ENABLE );
 800596a:	2101      	movs	r1, #1
 800596c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005970:	f7ff fc2e 	bl	80051d0 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8005974:	2302      	movs	r3, #2
 8005976:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8005978:	2318      	movs	r3, #24
 800597a:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_TX_PIN;
 800597c:	2304      	movs	r3, #4
 800597e:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4619      	mov	r1, r3
 8005986:	4821      	ldr	r0, [pc, #132]	; (8005a0c <Usart2Init+0xa8>)
 8005988:	f7ff f870 	bl	8004a6c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 800598c:	2348      	movs	r3, #72	; 0x48
 800598e:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_RX_PIN;
 8005990:	2308      	movs	r3, #8
 8005992:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	4619      	mov	r1, r3
 800599a:	481c      	ldr	r0, [pc, #112]	; (8005a0c <Usart2Init+0xa8>)
 800599c:	f7ff f866 	bl	8004a6c <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_APBPORT, ENABLE );
 80059a0:	2101      	movs	r1, #1
 80059a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80059a6:	f7ff fbf5 	bl	8005194 <RCC_APB2PeriphClockCmd>

	USART2_InitStruct.USART_BaudRate = 9600;//для работы с SPI2 только эта скорость подходит
 80059aa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80059ae:	607b      	str	r3, [r7, #4]
	USART2_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80059b0:	2300      	movs	r3, #0
 80059b2:	823b      	strh	r3, [r7, #16]
	USART2_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80059b4:	230c      	movs	r3, #12
 80059b6:	81fb      	strh	r3, [r7, #14]
	USART2_InitStruct.USART_Parity = USART_Parity_No;
 80059b8:	2300      	movs	r3, #0
 80059ba:	81bb      	strh	r3, [r7, #12]
	USART2_InitStruct.USART_StopBits = USART_StopBits_1;
 80059bc:	2300      	movs	r3, #0
 80059be:	817b      	strh	r3, [r7, #10]
	USART2_InitStruct.USART_WordLength = USART_WordLength_8b;
 80059c0:	2300      	movs	r3, #0
 80059c2:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART2_NUM, &USART2_InitStruct );
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4811      	ldr	r0, [pc, #68]	; (8005a10 <Usart2Init+0xac>)
 80059ca:	f7ff fe2d 	bl	8005628 <USART_Init>

	USART_Cmd ( USART2_NUM, ENABLE );
 80059ce:	2101      	movs	r1, #1
 80059d0:	480f      	ldr	r0, [pc, #60]	; (8005a10 <Usart2Init+0xac>)
 80059d2:	f7ff fee3 	bl	800579c <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 80059d6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80059da:	f7fe ffab 	bl	8004934 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQ;
 80059de:	2326      	movs	r3, #38	; 0x26
 80059e0:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 80059ee:	463b      	mov	r3, r7
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe ffb1 	bl	8004958 <NVIC_Init>

	USART_ITConfig ( USART2_NUM, USART_IT_RXNE, ENABLE );
 80059f6:	2201      	movs	r2, #1
 80059f8:	f240 5125 	movw	r1, #1317	; 0x525
 80059fc:	4804      	ldr	r0, [pc, #16]	; (8005a10 <Usart2Init+0xac>)
 80059fe:	f7ff feec 	bl	80057da <USART_ITConfig>

}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40010800 	.word	0x40010800
 8005a10:	40004400 	.word	0x40004400

08005a14 <Usart2_SendData>:
//******************************************************************


//******************************************************************
void Usart2_SendData (char* strcmd, int sz_cmd){
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
//Передача на копьютер до символа окончания строки (0x00).
	for(int ik=0;ik<sz_cmd;ik++){
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e013      	b.n	8005a4c <Usart2_SendData+0x38>
	    //if(strcmd[ik]!=0x00){
 		  while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE) == RESET){}
 8005a24:	bf00      	nop
 8005a26:	2180      	movs	r1, #128	; 0x80
 8005a28:	480d      	ldr	r0, [pc, #52]	; (8005a60 <Usart2_SendData+0x4c>)
 8005a2a:	f7ff ff3d 	bl	80058a8 <USART_GetFlagStatus>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f8      	beq.n	8005a26 <Usart2_SendData+0x12>
		  USART_SendData(USART2_NUM, strcmd[ik]);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4807      	ldr	r0, [pc, #28]	; (8005a60 <Usart2_SendData+0x4c>)
 8005a42:	f7ff ff11 	bl	8005868 <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	dbe7      	blt.n	8005a24 <Usart2_SendData+0x10>
	    //}
	}

}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40004400 	.word	0x40004400

08005a64 <SCAN_UsartInit>:

//******************************************************************
//******************************************************************
void SCAN_UsartInit(void) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART1 initialization: PA9 - USART1_TX, PA10 - USART1_RX */

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_PORT, ENABLE );
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	2004      	movs	r0, #4
 8005a6e:	f7ff fb91 	bl	8005194 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8005a72:	2302      	movs	r3, #2
 8005a74:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8005a76:	2318      	movs	r3, #24
 8005a78:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_TX_PIN;
 8005a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a7e:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	4619      	mov	r1, r3
 8005a86:	4821      	ldr	r0, [pc, #132]	; (8005b0c <SCAN_UsartInit+0xa8>)
 8005a88:	f7fe fff0 	bl	8004a6c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8005a8c:	2348      	movs	r3, #72	; 0x48
 8005a8e:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_RX_PIN;
 8005a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a94:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 8005a96:	f107 0314 	add.w	r3, r7, #20
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	481b      	ldr	r0, [pc, #108]	; (8005b0c <SCAN_UsartInit+0xa8>)
 8005a9e:	f7fe ffe5 	bl	8004a6c <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_APBPORT, ENABLE );
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005aa8:	f7ff fb74 	bl	8005194 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 9600;
 8005aac:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005ab0:	607b      	str	r3, [r7, #4]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8005aba:	2300      	movs	r3, #0
 8005abc:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART_NUM, &USART_InitStruct );
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4811      	ldr	r0, [pc, #68]	; (8005b10 <SCAN_UsartInit+0xac>)
 8005acc:	f7ff fdac 	bl	8005628 <USART_Init>

	USART_Cmd ( USART_NUM, ENABLE );
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	480f      	ldr	r0, [pc, #60]	; (8005b10 <SCAN_UsartInit+0xac>)
 8005ad4:	f7ff fe62 	bl	800579c <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 8005ad8:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005adc:	f7fe ff2a 	bl	8004934 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART_IRQ;
 8005ae0:	2325      	movs	r3, #37	; 0x25
 8005ae2:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8005af0:	463b      	mov	r3, r7
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe ff30 	bl	8004958 <NVIC_Init>

	USART_ITConfig ( USART_NUM, USART_IT_RXNE, ENABLE );
 8005af8:	2201      	movs	r2, #1
 8005afa:	f240 5125 	movw	r1, #1317	; 0x525
 8005afe:	4804      	ldr	r0, [pc, #16]	; (8005b10 <SCAN_UsartInit+0xac>)
 8005b00:	f7ff fe6b 	bl	80057da <USART_ITConfig>
}
 8005b04:	bf00      	nop
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40010800 	.word	0x40010800
 8005b10:	40013800 	.word	0x40013800

08005b14 <SCAN_SendCMD>:



void SCAN_SendCMD (char* strcmd,int sz_cmd){
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]

	for(int ik=0;ik<sz_cmd;ik++){
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e013      	b.n	8005b4c <SCAN_SendCMD+0x38>

		 while (READ_BIT(USART_NUM->SR, USART_SR_TXE) != (USART_SR_TXE)) {}
 8005b24:	bf00      	nop
 8005b26:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <SCAN_SendCMD+0x4c>)
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d1f8      	bne.n	8005b26 <SCAN_SendCMD+0x12>

		USART_SendData(USART_NUM, strcmd[ik]);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4807      	ldr	r0, [pc, #28]	; (8005b60 <SCAN_SendCMD+0x4c>)
 8005b42:	f7ff fe91 	bl	8005868 <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	dbe7      	blt.n	8005b24 <SCAN_SendCMD+0x10>
	}


}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40013800 	.word	0x40013800

08005b64 <USART_NUM_IRQHandler>:

void USART_NUM_IRQHandler ( void ) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus ( USART_NUM, USART_FLAG_RXNE ) == SET) {
 8005b68:	2120      	movs	r1, #32
 8005b6a:	4824      	ldr	r0, [pc, #144]	; (8005bfc <USART_NUM_IRQHandler+0x98>)
 8005b6c:	f7ff fe9c 	bl	80058a8 <USART_GetFlagStatus>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d13f      	bne.n	8005bf6 <USART_NUM_IRQHandler+0x92>
		if(b_getversion){
 8005b76:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <USART_NUM_IRQHandler+0x9c>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01e      	beq.n	8005bbc <USART_NUM_IRQHandler+0x58>

			USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 8005b7e:	f240 5125 	movw	r1, #1317	; 0x525
 8005b82:	481e      	ldr	r0, [pc, #120]	; (8005bfc <USART_NUM_IRQHandler+0x98>)
 8005b84:	f7ff feab 	bl	80058de <USART_ClearITPendingBit>
			ScanerVersion [ cntbyteversion++ ] = USART_ReceiveData ( USART_NUM );
 8005b88:	481c      	ldr	r0, [pc, #112]	; (8005bfc <USART_NUM_IRQHandler+0x98>)
 8005b8a:	f7ff fe7e 	bl	800588a <USART_ReceiveData>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4618      	mov	r0, r3
 8005b92:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <USART_NUM_IRQHandler+0xa0>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	b2d1      	uxtb	r1, r2
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <USART_NUM_IRQHandler+0xa0>)
 8005b9c:	7011      	strb	r1, [r2, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	b2c1      	uxtb	r1, r0
 8005ba2:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <USART_NUM_IRQHandler+0xa4>)
 8005ba4:	5499      	strb	r1, [r3, r2]
			if (cntbyteversion>71){
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <USART_NUM_IRQHandler+0xa0>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b47      	cmp	r3, #71	; 0x47
 8005bac:	d923      	bls.n	8005bf6 <USART_NUM_IRQHandler+0x92>
				b_getversion=DISABLE;
 8005bae:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <USART_NUM_IRQHandler+0x9c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]
				cntbyteversion=0;
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <USART_NUM_IRQHandler+0xa0>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
		g_iEnd %= QUEUE_LEN;
		}
	}
}
 8005bba:	e01c      	b.n	8005bf6 <USART_NUM_IRQHandler+0x92>
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 8005bbc:	f240 5125 	movw	r1, #1317	; 0x525
 8005bc0:	480e      	ldr	r0, [pc, #56]	; (8005bfc <USART_NUM_IRQHandler+0x98>)
 8005bc2:	f7ff fe8c 	bl	80058de <USART_ClearITPendingBit>
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
 8005bc6:	480d      	ldr	r0, [pc, #52]	; (8005bfc <USART_NUM_IRQHandler+0x98>)
 8005bc8:	f7ff fe5f 	bl	800588a <USART_ReceiveData>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <USART_NUM_IRQHandler+0xa8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	490d      	ldr	r1, [pc, #52]	; (8005c0c <USART_NUM_IRQHandler+0xa8>)
 8005bd8:	600a      	str	r2, [r1, #0]
 8005bda:	b2c1      	uxtb	r1, r0
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <USART_NUM_IRQHandler+0xac>)
 8005bde:	54d1      	strb	r1, [r2, r3]
		g_iEnd %= QUEUE_LEN;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <USART_NUM_IRQHandler+0xa8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	425a      	negs	r2, r3
 8005be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005bee:	bf58      	it	pl
 8005bf0:	4253      	negpl	r3, r2
 8005bf2:	4a06      	ldr	r2, [pc, #24]	; (8005c0c <USART_NUM_IRQHandler+0xa8>)
 8005bf4:	6013      	str	r3, [r2, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40013800 	.word	0x40013800
 8005c00:	20000580 	.word	0x20000580
 8005c04:	20000c3e 	.word	0x20000c3e
 8005c08:	20000c40 	.word	0x20000c40
 8005c0c:	20000d14 	.word	0x20000d14
 8005c10:	20000cd0 	.word	0x20000cd0

08005c14 <FIFO_GetNextData>:




ErrorStatus FIFO_GetNextData ( char * pResult ) {
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]

	if ( g_iBegin != g_iEnd ) {
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <FIFO_GetNextData+0x50>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <FIFO_GetNextData+0x54>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d015      	beq.n	8005c58 <FIFO_GetNextData+0x44>
		*pResult = g_aInputQueue [ g_iBegin++ ];
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <FIFO_GetNextData+0x50>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	490c      	ldr	r1, [pc, #48]	; (8005c64 <FIFO_GetNextData+0x50>)
 8005c34:	600a      	str	r2, [r1, #0]
 8005c36:	4a0d      	ldr	r2, [pc, #52]	; (8005c6c <FIFO_GetNextData+0x58>)
 8005c38:	5cd2      	ldrb	r2, [r2, r3]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	701a      	strb	r2, [r3, #0]
		g_iBegin %= QUEUE_LEN;
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <FIFO_GetNextData+0x50>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	425a      	negs	r2, r3
 8005c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005c4c:	bf58      	it	pl
 8005c4e:	4253      	negpl	r3, r2
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <FIFO_GetNextData+0x50>)
 8005c52:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr
 8005c64:	20000d10 	.word	0x20000d10
 8005c68:	20000d14 	.word	0x20000d14
 8005c6c:	20000cd0 	.word	0x20000cd0

08005c70 <Date_GetNextDate>:



ErrorStatus Date_GetNextDate(char *dResult ){
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]
	if(date_iBegin != date_iEnd){
 8005c7c:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <Date_GetNextDate+0x50>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <Date_GetNextDate+0x54>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d015      	beq.n	8005cb4 <Date_GetNextDate+0x44>
		*dResult = date_InputQueue[date_iBegin++];
 8005c88:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <Date_GetNextDate+0x50>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	490c      	ldr	r1, [pc, #48]	; (8005cc0 <Date_GetNextDate+0x50>)
 8005c90:	600a      	str	r2, [r1, #0]
 8005c92:	4a0d      	ldr	r2, [pc, #52]	; (8005cc8 <Date_GetNextDate+0x58>)
 8005c94:	5cd2      	ldrb	r2, [r2, r3]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	701a      	strb	r2, [r3, #0]
		date_iBegin %= DATE_LEN;
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <Date_GetNextDate+0x50>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	425a      	negs	r2, r3
 8005ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005ca8:	bf58      	it	pl
 8005caa:	4253      	negpl	r3, r2
 8005cac:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <Date_GetNextDate+0x50>)
 8005cae:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr
 8005cc0:	20000cc8 	.word	0x20000cc8
 8005cc4:	20000ccc 	.word	0x20000ccc
 8005cc8:	20000c88 	.word	0x20000c88

08005ccc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus ( USART2_NUM, USART_FLAG_RXNE) == SET){
 8005cd0:	2120      	movs	r1, #32
 8005cd2:	4814      	ldr	r0, [pc, #80]	; (8005d24 <USART2_IRQHandler+0x58>)
 8005cd4:	f7ff fde8 	bl	80058a8 <USART_GetFlagStatus>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d11f      	bne.n	8005d1e <USART2_IRQHandler+0x52>
		flag_usart = 1;
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <USART2_IRQHandler+0x5c>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
		USART_ClearITPendingBit(USART2_NUM, USART_IT_RXNE);
 8005ce4:	f240 5125 	movw	r1, #1317	; 0x525
 8005ce8:	480e      	ldr	r0, [pc, #56]	; (8005d24 <USART2_IRQHandler+0x58>)
 8005cea:	f7ff fdf8 	bl	80058de <USART_ClearITPendingBit>
		date_InputQueue [ date_iEnd++ ] = USART_ReceiveData(USART2_NUM);
 8005cee:	480d      	ldr	r0, [pc, #52]	; (8005d24 <USART2_IRQHandler+0x58>)
 8005cf0:	f7ff fdcb 	bl	800588a <USART_ReceiveData>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <USART2_IRQHandler+0x60>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	490b      	ldr	r1, [pc, #44]	; (8005d2c <USART2_IRQHandler+0x60>)
 8005d00:	600a      	str	r2, [r1, #0]
 8005d02:	b2c1      	uxtb	r1, r0
 8005d04:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <USART2_IRQHandler+0x64>)
 8005d06:	54d1      	strb	r1, [r2, r3]
		date_iEnd %= DATE_LEN;
 8005d08:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <USART2_IRQHandler+0x60>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	425a      	negs	r2, r3
 8005d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005d16:	bf58      	it	pl
 8005d18:	4253      	negpl	r3, r2
 8005d1a:	4a04      	ldr	r2, [pc, #16]	; (8005d2c <USART2_IRQHandler+0x60>)
 8005d1c:	6013      	str	r3, [r2, #0]

	}
}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40004400 	.word	0x40004400
 8005d28:	20000d18 	.word	0x20000d18
 8005d2c:	20000ccc 	.word	0x20000ccc
 8005d30:	20000c88 	.word	0x20000c88

08005d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	return 1;
 8005d38:	2301      	movs	r3, #1
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <_kill>:

int _kill(int pid, int sig)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005d4c:	f000 f8ac 	bl	8005ea8 <__errno>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2216      	movs	r2, #22
 8005d54:	601a      	str	r2, [r3, #0]
	return -1;
 8005d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <_exit>:

void _exit (int status)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff ffe7 	bl	8005d42 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005d74:	e7fe      	b.n	8005d74 <_exit+0x12>

08005d76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e00a      	b.n	8005d9e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d88:	f3af 8000 	nop.w
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	60ba      	str	r2, [r7, #8]
 8005d94:	b2ca      	uxtb	r2, r1
 8005d96:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	dbf0      	blt.n	8005d88 <_read+0x12>
	}

return len;
 8005da6:	687b      	ldr	r3, [r7, #4]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e009      	b.n	8005dd6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	60ba      	str	r2, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	dbf1      	blt.n	8005dc2 <_write+0x12>
	}
	return len;
 8005dde:	687b      	ldr	r3, [r7, #4]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <_close>:

int _close(int file)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	return -1;
 8005df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <_isatty>:

int _isatty(int file)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	return 1;
 8005e24:	2301      	movs	r3, #1
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <_sbrk+0x50>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <_sbrk+0x16>
		heap_end = &end;
 8005e58:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <_sbrk+0x50>)
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <_sbrk+0x54>)
 8005e5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <_sbrk+0x50>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <_sbrk+0x50>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	466a      	mov	r2, sp
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d907      	bls.n	8005e82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005e72:	f000 f819 	bl	8005ea8 <__errno>
 8005e76:	4603      	mov	r3, r0
 8005e78:	220c      	movs	r2, #12
 8005e7a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	e006      	b.n	8005e90 <_sbrk+0x48>
	}

	heap_end += incr;
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <_sbrk+0x50>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	4a03      	ldr	r2, [pc, #12]	; (8005e98 <_sbrk+0x50>)
 8005e8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000d1c 	.word	0x20000d1c
 8005e9c:	20000d30 	.word	0x20000d30

08005ea0 <atoi>:
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	f000 b9b0 	b.w	8006208 <strtol>

08005ea8 <__errno>:
 8005ea8:	4b01      	ldr	r3, [pc, #4]	; (8005eb0 <__errno+0x8>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	20000418 	.word	0x20000418

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	4d0c      	ldr	r5, [pc, #48]	; (8005eec <__libc_init_array+0x38>)
 8005eba:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <__libc_init_array+0x3c>)
 8005ebc:	1b64      	subs	r4, r4, r5
 8005ebe:	10a4      	asrs	r4, r4, #2
 8005ec0:	42a6      	cmp	r6, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	f001 f9aa 	bl	800721c <_init>
 8005ec8:	2600      	movs	r6, #0
 8005eca:	4d0a      	ldr	r5, [pc, #40]	; (8005ef4 <__libc_init_array+0x40>)
 8005ecc:	4c0a      	ldr	r4, [pc, #40]	; (8005ef8 <__libc_init_array+0x44>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	42a6      	cmp	r6, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005edc:	4798      	blx	r3
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee6:	4798      	blx	r3
 8005ee8:	3601      	adds	r6, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	080074f8 	.word	0x080074f8
 8005ef0:	080074f8 	.word	0x080074f8
 8005ef4:	080074f8 	.word	0x080074f8
 8005ef8:	080074fc 	.word	0x080074fc

08005efc <memcmp>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	3901      	subs	r1, #1
 8005f00:	4402      	add	r2, r0
 8005f02:	4290      	cmp	r0, r2
 8005f04:	d101      	bne.n	8005f0a <memcmp+0xe>
 8005f06:	2000      	movs	r0, #0
 8005f08:	e005      	b.n	8005f16 <memcmp+0x1a>
 8005f0a:	7803      	ldrb	r3, [r0, #0]
 8005f0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	d001      	beq.n	8005f18 <memcmp+0x1c>
 8005f14:	1b18      	subs	r0, r3, r4
 8005f16:	bd10      	pop	{r4, pc}
 8005f18:	3001      	adds	r0, #1
 8005f1a:	e7f2      	b.n	8005f02 <memcmp+0x6>

08005f1c <memcpy>:
 8005f1c:	440a      	add	r2, r1
 8005f1e:	4291      	cmp	r1, r2
 8005f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f24:	d100      	bne.n	8005f28 <memcpy+0xc>
 8005f26:	4770      	bx	lr
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f2e:	4291      	cmp	r1, r2
 8005f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f34:	d1f9      	bne.n	8005f2a <memcpy+0xe>
 8005f36:	bd10      	pop	{r4, pc}

08005f38 <memmove>:
 8005f38:	4288      	cmp	r0, r1
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	eb01 0402 	add.w	r4, r1, r2
 8005f40:	d902      	bls.n	8005f48 <memmove+0x10>
 8005f42:	4284      	cmp	r4, r0
 8005f44:	4623      	mov	r3, r4
 8005f46:	d807      	bhi.n	8005f58 <memmove+0x20>
 8005f48:	1e43      	subs	r3, r0, #1
 8005f4a:	42a1      	cmp	r1, r4
 8005f4c:	d008      	beq.n	8005f60 <memmove+0x28>
 8005f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f56:	e7f8      	b.n	8005f4a <memmove+0x12>
 8005f58:	4601      	mov	r1, r0
 8005f5a:	4402      	add	r2, r0
 8005f5c:	428a      	cmp	r2, r1
 8005f5e:	d100      	bne.n	8005f62 <memmove+0x2a>
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f6a:	e7f7      	b.n	8005f5c <memmove+0x24>

08005f6c <memset>:
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4402      	add	r2, r0
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d100      	bne.n	8005f76 <memset+0xa>
 8005f74:	4770      	bx	lr
 8005f76:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7a:	e7f9      	b.n	8005f70 <memset+0x4>

08005f7c <strcat>:
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	7814      	ldrb	r4, [r2, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	3201      	adds	r2, #1
 8005f86:	2c00      	cmp	r4, #0
 8005f88:	d1fa      	bne.n	8005f80 <strcat+0x4>
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	d1f9      	bne.n	8005f8c <strcat+0x10>
 8005f98:	bd10      	pop	{r4, pc}

08005f9a <strcpy>:
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fa0:	f803 2b01 	strb.w	r2, [r3], #1
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d1f9      	bne.n	8005f9c <strcpy+0x2>
 8005fa8:	4770      	bx	lr

08005faa <strlcpy>:
 8005faa:	460b      	mov	r3, r1
 8005fac:	b510      	push	{r4, lr}
 8005fae:	b162      	cbz	r2, 8005fca <strlcpy+0x20>
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	d008      	beq.n	8005fc6 <strlcpy+0x1c>
 8005fb4:	f813 4b01 	ldrb.w	r4, [r3], #1
 8005fb8:	f800 4b01 	strb.w	r4, [r0], #1
 8005fbc:	2c00      	cmp	r4, #0
 8005fbe:	d1f7      	bne.n	8005fb0 <strlcpy+0x6>
 8005fc0:	1a58      	subs	r0, r3, r1
 8005fc2:	3801      	subs	r0, #1
 8005fc4:	bd10      	pop	{r4, pc}
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	7002      	strb	r2, [r0, #0]
 8005fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fce:	2a00      	cmp	r2, #0
 8005fd0:	d1fb      	bne.n	8005fca <strlcpy+0x20>
 8005fd2:	e7f5      	b.n	8005fc0 <strlcpy+0x16>

08005fd4 <strncat>:
 8005fd4:	b530      	push	{r4, r5, lr}
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	7825      	ldrb	r5, [r4, #0]
 8005fda:	4623      	mov	r3, r4
 8005fdc:	3401      	adds	r4, #1
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	d1fa      	bne.n	8005fd8 <strncat+0x4>
 8005fe2:	3a01      	subs	r2, #1
 8005fe4:	d304      	bcc.n	8005ff0 <strncat+0x1c>
 8005fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fea:	f803 4b01 	strb.w	r4, [r3], #1
 8005fee:	b904      	cbnz	r4, 8005ff2 <strncat+0x1e>
 8005ff0:	bd30      	pop	{r4, r5, pc}
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	d1f5      	bne.n	8005fe2 <strncat+0xe>
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e7f3      	b.n	8005fe2 <strncat+0xe>

08005ffa <strpbrk>:
 8005ffa:	b570      	push	{r4, r5, r6, lr}
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	7800      	ldrb	r0, [r0, #0]
 8006000:	b190      	cbz	r0, 8006028 <strpbrk+0x2e>
 8006002:	460c      	mov	r4, r1
 8006004:	4618      	mov	r0, r3
 8006006:	f813 5b01 	ldrb.w	r5, [r3], #1
 800600a:	b14d      	cbz	r5, 8006020 <strpbrk+0x26>
 800600c:	460a      	mov	r2, r1
 800600e:	e001      	b.n	8006014 <strpbrk+0x1a>
 8006010:	42ae      	cmp	r6, r5
 8006012:	d009      	beq.n	8006028 <strpbrk+0x2e>
 8006014:	4614      	mov	r4, r2
 8006016:	f812 6b01 	ldrb.w	r6, [r2], #1
 800601a:	2e00      	cmp	r6, #0
 800601c:	d1f8      	bne.n	8006010 <strpbrk+0x16>
 800601e:	e7f1      	b.n	8006004 <strpbrk+0xa>
 8006020:	7823      	ldrb	r3, [r4, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	bf08      	it	eq
 8006026:	2000      	moveq	r0, #0
 8006028:	bd70      	pop	{r4, r5, r6, pc}

0800602a <strstr>:
 800602a:	780a      	ldrb	r2, [r1, #0]
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	b96a      	cbnz	r2, 800604c <strstr+0x22>
 8006030:	bd70      	pop	{r4, r5, r6, pc}
 8006032:	429a      	cmp	r2, r3
 8006034:	d109      	bne.n	800604a <strstr+0x20>
 8006036:	460c      	mov	r4, r1
 8006038:	4605      	mov	r5, r0
 800603a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f6      	beq.n	8006030 <strstr+0x6>
 8006042:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006046:	429e      	cmp	r6, r3
 8006048:	d0f7      	beq.n	800603a <strstr+0x10>
 800604a:	3001      	adds	r0, #1
 800604c:	7803      	ldrb	r3, [r0, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1ef      	bne.n	8006032 <strstr+0x8>
 8006052:	4618      	mov	r0, r3
 8006054:	e7ec      	b.n	8006030 <strstr+0x6>
	...

08006058 <strtok>:
 8006058:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <strtok+0x5c>)
 800605a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605e:	681f      	ldr	r7, [r3, #0]
 8006060:	4605      	mov	r5, r0
 8006062:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006064:	460e      	mov	r6, r1
 8006066:	b9ec      	cbnz	r4, 80060a4 <strtok+0x4c>
 8006068:	2050      	movs	r0, #80	; 0x50
 800606a:	f000 f907 	bl	800627c <malloc>
 800606e:	4602      	mov	r2, r0
 8006070:	65b8      	str	r0, [r7, #88]	; 0x58
 8006072:	b920      	cbnz	r0, 800607e <strtok+0x26>
 8006074:	2157      	movs	r1, #87	; 0x57
 8006076:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <strtok+0x60>)
 8006078:	4810      	ldr	r0, [pc, #64]	; (80060bc <strtok+0x64>)
 800607a:	f000 f8cf 	bl	800621c <__assert_func>
 800607e:	e9c0 4400 	strd	r4, r4, [r0]
 8006082:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006086:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800608a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800608e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006092:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006096:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800609a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800609e:	6184      	str	r4, [r0, #24]
 80060a0:	7704      	strb	r4, [r0, #28]
 80060a2:	6244      	str	r4, [r0, #36]	; 0x24
 80060a4:	4631      	mov	r1, r6
 80060a6:	4628      	mov	r0, r5
 80060a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060aa:	2301      	movs	r3, #1
 80060ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b0:	f000 b806 	b.w	80060c0 <__strtok_r>
 80060b4:	20000418 	.word	0x20000418
 80060b8:	080072b4 	.word	0x080072b4
 80060bc:	080072cb 	.word	0x080072cb

080060c0 <__strtok_r>:
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	b908      	cbnz	r0, 80060c8 <__strtok_r+0x8>
 80060c4:	6810      	ldr	r0, [r2, #0]
 80060c6:	b188      	cbz	r0, 80060ec <__strtok_r+0x2c>
 80060c8:	4604      	mov	r4, r0
 80060ca:	460f      	mov	r7, r1
 80060cc:	4620      	mov	r0, r4
 80060ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80060d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80060d6:	b91e      	cbnz	r6, 80060e0 <__strtok_r+0x20>
 80060d8:	b965      	cbnz	r5, 80060f4 <__strtok_r+0x34>
 80060da:	4628      	mov	r0, r5
 80060dc:	6015      	str	r5, [r2, #0]
 80060de:	e005      	b.n	80060ec <__strtok_r+0x2c>
 80060e0:	42b5      	cmp	r5, r6
 80060e2:	d1f6      	bne.n	80060d2 <__strtok_r+0x12>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f0      	bne.n	80060ca <__strtok_r+0xa>
 80060e8:	6014      	str	r4, [r2, #0]
 80060ea:	7003      	strb	r3, [r0, #0]
 80060ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ee:	461c      	mov	r4, r3
 80060f0:	e00c      	b.n	800610c <__strtok_r+0x4c>
 80060f2:	b915      	cbnz	r5, 80060fa <__strtok_r+0x3a>
 80060f4:	460e      	mov	r6, r1
 80060f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80060fe:	42ab      	cmp	r3, r5
 8006100:	d1f7      	bne.n	80060f2 <__strtok_r+0x32>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f3      	beq.n	80060ee <__strtok_r+0x2e>
 8006106:	2300      	movs	r3, #0
 8006108:	f804 3c01 	strb.w	r3, [r4, #-1]
 800610c:	6014      	str	r4, [r2, #0]
 800610e:	e7ed      	b.n	80060ec <__strtok_r+0x2c>

08006110 <_strtol_l.constprop.0>:
 8006110:	2b01      	cmp	r3, #1
 8006112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006116:	4680      	mov	r8, r0
 8006118:	d001      	beq.n	800611e <_strtol_l.constprop.0+0xe>
 800611a:	2b24      	cmp	r3, #36	; 0x24
 800611c:	d906      	bls.n	800612c <_strtol_l.constprop.0+0x1c>
 800611e:	f7ff fec3 	bl	8005ea8 <__errno>
 8006122:	2316      	movs	r3, #22
 8006124:	6003      	str	r3, [r0, #0]
 8006126:	2000      	movs	r0, #0
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	460d      	mov	r5, r1
 800612e:	4f35      	ldr	r7, [pc, #212]	; (8006204 <_strtol_l.constprop.0+0xf4>)
 8006130:	4628      	mov	r0, r5
 8006132:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006136:	5de6      	ldrb	r6, [r4, r7]
 8006138:	f016 0608 	ands.w	r6, r6, #8
 800613c:	d1f8      	bne.n	8006130 <_strtol_l.constprop.0+0x20>
 800613e:	2c2d      	cmp	r4, #45	; 0x2d
 8006140:	d12f      	bne.n	80061a2 <_strtol_l.constprop.0+0x92>
 8006142:	2601      	movs	r6, #1
 8006144:	782c      	ldrb	r4, [r5, #0]
 8006146:	1c85      	adds	r5, r0, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d057      	beq.n	80061fc <_strtol_l.constprop.0+0xec>
 800614c:	2b10      	cmp	r3, #16
 800614e:	d109      	bne.n	8006164 <_strtol_l.constprop.0+0x54>
 8006150:	2c30      	cmp	r4, #48	; 0x30
 8006152:	d107      	bne.n	8006164 <_strtol_l.constprop.0+0x54>
 8006154:	7828      	ldrb	r0, [r5, #0]
 8006156:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800615a:	2858      	cmp	r0, #88	; 0x58
 800615c:	d149      	bne.n	80061f2 <_strtol_l.constprop.0+0xe2>
 800615e:	2310      	movs	r3, #16
 8006160:	786c      	ldrb	r4, [r5, #1]
 8006162:	3502      	adds	r5, #2
 8006164:	2700      	movs	r7, #0
 8006166:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800616a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800616e:	fbbe f9f3 	udiv	r9, lr, r3
 8006172:	4638      	mov	r0, r7
 8006174:	fb03 ea19 	mls	sl, r3, r9, lr
 8006178:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800617c:	f1bc 0f09 	cmp.w	ip, #9
 8006180:	d814      	bhi.n	80061ac <_strtol_l.constprop.0+0x9c>
 8006182:	4664      	mov	r4, ip
 8006184:	42a3      	cmp	r3, r4
 8006186:	dd22      	ble.n	80061ce <_strtol_l.constprop.0+0xbe>
 8006188:	2f00      	cmp	r7, #0
 800618a:	db1d      	blt.n	80061c8 <_strtol_l.constprop.0+0xb8>
 800618c:	4581      	cmp	r9, r0
 800618e:	d31b      	bcc.n	80061c8 <_strtol_l.constprop.0+0xb8>
 8006190:	d101      	bne.n	8006196 <_strtol_l.constprop.0+0x86>
 8006192:	45a2      	cmp	sl, r4
 8006194:	db18      	blt.n	80061c8 <_strtol_l.constprop.0+0xb8>
 8006196:	2701      	movs	r7, #1
 8006198:	fb00 4003 	mla	r0, r0, r3, r4
 800619c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061a0:	e7ea      	b.n	8006178 <_strtol_l.constprop.0+0x68>
 80061a2:	2c2b      	cmp	r4, #43	; 0x2b
 80061a4:	bf04      	itt	eq
 80061a6:	782c      	ldrbeq	r4, [r5, #0]
 80061a8:	1c85      	addeq	r5, r0, #2
 80061aa:	e7cd      	b.n	8006148 <_strtol_l.constprop.0+0x38>
 80061ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80061b0:	f1bc 0f19 	cmp.w	ip, #25
 80061b4:	d801      	bhi.n	80061ba <_strtol_l.constprop.0+0xaa>
 80061b6:	3c37      	subs	r4, #55	; 0x37
 80061b8:	e7e4      	b.n	8006184 <_strtol_l.constprop.0+0x74>
 80061ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80061be:	f1bc 0f19 	cmp.w	ip, #25
 80061c2:	d804      	bhi.n	80061ce <_strtol_l.constprop.0+0xbe>
 80061c4:	3c57      	subs	r4, #87	; 0x57
 80061c6:	e7dd      	b.n	8006184 <_strtol_l.constprop.0+0x74>
 80061c8:	f04f 37ff 	mov.w	r7, #4294967295
 80061cc:	e7e6      	b.n	800619c <_strtol_l.constprop.0+0x8c>
 80061ce:	2f00      	cmp	r7, #0
 80061d0:	da07      	bge.n	80061e2 <_strtol_l.constprop.0+0xd2>
 80061d2:	2322      	movs	r3, #34	; 0x22
 80061d4:	4670      	mov	r0, lr
 80061d6:	f8c8 3000 	str.w	r3, [r8]
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d0a4      	beq.n	8006128 <_strtol_l.constprop.0+0x18>
 80061de:	1e69      	subs	r1, r5, #1
 80061e0:	e005      	b.n	80061ee <_strtol_l.constprop.0+0xde>
 80061e2:	b106      	cbz	r6, 80061e6 <_strtol_l.constprop.0+0xd6>
 80061e4:	4240      	negs	r0, r0
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d09e      	beq.n	8006128 <_strtol_l.constprop.0+0x18>
 80061ea:	2f00      	cmp	r7, #0
 80061ec:	d1f7      	bne.n	80061de <_strtol_l.constprop.0+0xce>
 80061ee:	6011      	str	r1, [r2, #0]
 80061f0:	e79a      	b.n	8006128 <_strtol_l.constprop.0+0x18>
 80061f2:	2430      	movs	r4, #48	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1b5      	bne.n	8006164 <_strtol_l.constprop.0+0x54>
 80061f8:	2308      	movs	r3, #8
 80061fa:	e7b3      	b.n	8006164 <_strtol_l.constprop.0+0x54>
 80061fc:	2c30      	cmp	r4, #48	; 0x30
 80061fe:	d0a9      	beq.n	8006154 <_strtol_l.constprop.0+0x44>
 8006200:	230a      	movs	r3, #10
 8006202:	e7af      	b.n	8006164 <_strtol_l.constprop.0+0x54>
 8006204:	08007365 	.word	0x08007365

08006208 <strtol>:
 8006208:	4613      	mov	r3, r2
 800620a:	460a      	mov	r2, r1
 800620c:	4601      	mov	r1, r0
 800620e:	4802      	ldr	r0, [pc, #8]	; (8006218 <strtol+0x10>)
 8006210:	6800      	ldr	r0, [r0, #0]
 8006212:	f7ff bf7d 	b.w	8006110 <_strtol_l.constprop.0>
 8006216:	bf00      	nop
 8006218:	20000418 	.word	0x20000418

0800621c <__assert_func>:
 800621c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800621e:	4614      	mov	r4, r2
 8006220:	461a      	mov	r2, r3
 8006222:	4b09      	ldr	r3, [pc, #36]	; (8006248 <__assert_func+0x2c>)
 8006224:	4605      	mov	r5, r0
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68d8      	ldr	r0, [r3, #12]
 800622a:	b14c      	cbz	r4, 8006240 <__assert_func+0x24>
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <__assert_func+0x30>)
 800622e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006232:	9100      	str	r1, [sp, #0]
 8006234:	462b      	mov	r3, r5
 8006236:	4906      	ldr	r1, [pc, #24]	; (8006250 <__assert_func+0x34>)
 8006238:	f000 f80e 	bl	8006258 <fiprintf>
 800623c:	f000 fcc0 	bl	8006bc0 <abort>
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <__assert_func+0x38>)
 8006242:	461c      	mov	r4, r3
 8006244:	e7f3      	b.n	800622e <__assert_func+0x12>
 8006246:	bf00      	nop
 8006248:	20000418 	.word	0x20000418
 800624c:	08007328 	.word	0x08007328
 8006250:	08007335 	.word	0x08007335
 8006254:	08007363 	.word	0x08007363

08006258 <fiprintf>:
 8006258:	b40e      	push	{r1, r2, r3}
 800625a:	b503      	push	{r0, r1, lr}
 800625c:	4601      	mov	r1, r0
 800625e:	ab03      	add	r3, sp, #12
 8006260:	4805      	ldr	r0, [pc, #20]	; (8006278 <fiprintf+0x20>)
 8006262:	f853 2b04 	ldr.w	r2, [r3], #4
 8006266:	6800      	ldr	r0, [r0, #0]
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	f000 f913 	bl	8006494 <_vfiprintf_r>
 800626e:	b002      	add	sp, #8
 8006270:	f85d eb04 	ldr.w	lr, [sp], #4
 8006274:	b003      	add	sp, #12
 8006276:	4770      	bx	lr
 8006278:	20000418 	.word	0x20000418

0800627c <malloc>:
 800627c:	4b02      	ldr	r3, [pc, #8]	; (8006288 <malloc+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f000 b86b 	b.w	800635c <_malloc_r>
 8006286:	bf00      	nop
 8006288:	20000418 	.word	0x20000418

0800628c <_free_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4605      	mov	r5, r0
 8006290:	2900      	cmp	r1, #0
 8006292:	d040      	beq.n	8006316 <_free_r+0x8a>
 8006294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006298:	1f0c      	subs	r4, r1, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	bfb8      	it	lt
 800629e:	18e4      	addlt	r4, r4, r3
 80062a0:	f000 fec0 	bl	8007024 <__malloc_lock>
 80062a4:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <_free_r+0x8c>)
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	b933      	cbnz	r3, 80062b8 <_free_r+0x2c>
 80062aa:	6063      	str	r3, [r4, #4]
 80062ac:	6014      	str	r4, [r2, #0]
 80062ae:	4628      	mov	r0, r5
 80062b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062b4:	f000 bebc 	b.w	8007030 <__malloc_unlock>
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d908      	bls.n	80062ce <_free_r+0x42>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	1821      	adds	r1, r4, r0
 80062c0:	428b      	cmp	r3, r1
 80062c2:	bf01      	itttt	eq
 80062c4:	6819      	ldreq	r1, [r3, #0]
 80062c6:	685b      	ldreq	r3, [r3, #4]
 80062c8:	1809      	addeq	r1, r1, r0
 80062ca:	6021      	streq	r1, [r4, #0]
 80062cc:	e7ed      	b.n	80062aa <_free_r+0x1e>
 80062ce:	461a      	mov	r2, r3
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	b10b      	cbz	r3, 80062d8 <_free_r+0x4c>
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	d9fa      	bls.n	80062ce <_free_r+0x42>
 80062d8:	6811      	ldr	r1, [r2, #0]
 80062da:	1850      	adds	r0, r2, r1
 80062dc:	42a0      	cmp	r0, r4
 80062de:	d10b      	bne.n	80062f8 <_free_r+0x6c>
 80062e0:	6820      	ldr	r0, [r4, #0]
 80062e2:	4401      	add	r1, r0
 80062e4:	1850      	adds	r0, r2, r1
 80062e6:	4283      	cmp	r3, r0
 80062e8:	6011      	str	r1, [r2, #0]
 80062ea:	d1e0      	bne.n	80062ae <_free_r+0x22>
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4401      	add	r1, r0
 80062f2:	6011      	str	r1, [r2, #0]
 80062f4:	6053      	str	r3, [r2, #4]
 80062f6:	e7da      	b.n	80062ae <_free_r+0x22>
 80062f8:	d902      	bls.n	8006300 <_free_r+0x74>
 80062fa:	230c      	movs	r3, #12
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	e7d6      	b.n	80062ae <_free_r+0x22>
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	1821      	adds	r1, r4, r0
 8006304:	428b      	cmp	r3, r1
 8006306:	bf01      	itttt	eq
 8006308:	6819      	ldreq	r1, [r3, #0]
 800630a:	685b      	ldreq	r3, [r3, #4]
 800630c:	1809      	addeq	r1, r1, r0
 800630e:	6021      	streq	r1, [r4, #0]
 8006310:	6063      	str	r3, [r4, #4]
 8006312:	6054      	str	r4, [r2, #4]
 8006314:	e7cb      	b.n	80062ae <_free_r+0x22>
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20000d20 	.word	0x20000d20

0800631c <sbrk_aligned>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4e0e      	ldr	r6, [pc, #56]	; (8006358 <sbrk_aligned+0x3c>)
 8006320:	460c      	mov	r4, r1
 8006322:	6831      	ldr	r1, [r6, #0]
 8006324:	4605      	mov	r5, r0
 8006326:	b911      	cbnz	r1, 800632e <sbrk_aligned+0x12>
 8006328:	f000 fb7a 	bl	8006a20 <_sbrk_r>
 800632c:	6030      	str	r0, [r6, #0]
 800632e:	4621      	mov	r1, r4
 8006330:	4628      	mov	r0, r5
 8006332:	f000 fb75 	bl	8006a20 <_sbrk_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d00a      	beq.n	8006350 <sbrk_aligned+0x34>
 800633a:	1cc4      	adds	r4, r0, #3
 800633c:	f024 0403 	bic.w	r4, r4, #3
 8006340:	42a0      	cmp	r0, r4
 8006342:	d007      	beq.n	8006354 <sbrk_aligned+0x38>
 8006344:	1a21      	subs	r1, r4, r0
 8006346:	4628      	mov	r0, r5
 8006348:	f000 fb6a 	bl	8006a20 <_sbrk_r>
 800634c:	3001      	adds	r0, #1
 800634e:	d101      	bne.n	8006354 <sbrk_aligned+0x38>
 8006350:	f04f 34ff 	mov.w	r4, #4294967295
 8006354:	4620      	mov	r0, r4
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	20000d24 	.word	0x20000d24

0800635c <_malloc_r>:
 800635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006360:	1ccd      	adds	r5, r1, #3
 8006362:	f025 0503 	bic.w	r5, r5, #3
 8006366:	3508      	adds	r5, #8
 8006368:	2d0c      	cmp	r5, #12
 800636a:	bf38      	it	cc
 800636c:	250c      	movcc	r5, #12
 800636e:	2d00      	cmp	r5, #0
 8006370:	4607      	mov	r7, r0
 8006372:	db01      	blt.n	8006378 <_malloc_r+0x1c>
 8006374:	42a9      	cmp	r1, r5
 8006376:	d905      	bls.n	8006384 <_malloc_r+0x28>
 8006378:	230c      	movs	r3, #12
 800637a:	2600      	movs	r6, #0
 800637c:	603b      	str	r3, [r7, #0]
 800637e:	4630      	mov	r0, r6
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	4e2e      	ldr	r6, [pc, #184]	; (8006440 <_malloc_r+0xe4>)
 8006386:	f000 fe4d 	bl	8007024 <__malloc_lock>
 800638a:	6833      	ldr	r3, [r6, #0]
 800638c:	461c      	mov	r4, r3
 800638e:	bb34      	cbnz	r4, 80063de <_malloc_r+0x82>
 8006390:	4629      	mov	r1, r5
 8006392:	4638      	mov	r0, r7
 8006394:	f7ff ffc2 	bl	800631c <sbrk_aligned>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	4604      	mov	r4, r0
 800639c:	d14d      	bne.n	800643a <_malloc_r+0xde>
 800639e:	6834      	ldr	r4, [r6, #0]
 80063a0:	4626      	mov	r6, r4
 80063a2:	2e00      	cmp	r6, #0
 80063a4:	d140      	bne.n	8006428 <_malloc_r+0xcc>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	4631      	mov	r1, r6
 80063aa:	4638      	mov	r0, r7
 80063ac:	eb04 0803 	add.w	r8, r4, r3
 80063b0:	f000 fb36 	bl	8006a20 <_sbrk_r>
 80063b4:	4580      	cmp	r8, r0
 80063b6:	d13a      	bne.n	800642e <_malloc_r+0xd2>
 80063b8:	6821      	ldr	r1, [r4, #0]
 80063ba:	3503      	adds	r5, #3
 80063bc:	1a6d      	subs	r5, r5, r1
 80063be:	f025 0503 	bic.w	r5, r5, #3
 80063c2:	3508      	adds	r5, #8
 80063c4:	2d0c      	cmp	r5, #12
 80063c6:	bf38      	it	cc
 80063c8:	250c      	movcc	r5, #12
 80063ca:	4638      	mov	r0, r7
 80063cc:	4629      	mov	r1, r5
 80063ce:	f7ff ffa5 	bl	800631c <sbrk_aligned>
 80063d2:	3001      	adds	r0, #1
 80063d4:	d02b      	beq.n	800642e <_malloc_r+0xd2>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	442b      	add	r3, r5
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	e00e      	b.n	80063fc <_malloc_r+0xa0>
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	1b52      	subs	r2, r2, r5
 80063e2:	d41e      	bmi.n	8006422 <_malloc_r+0xc6>
 80063e4:	2a0b      	cmp	r2, #11
 80063e6:	d916      	bls.n	8006416 <_malloc_r+0xba>
 80063e8:	1961      	adds	r1, r4, r5
 80063ea:	42a3      	cmp	r3, r4
 80063ec:	6025      	str	r5, [r4, #0]
 80063ee:	bf18      	it	ne
 80063f0:	6059      	strne	r1, [r3, #4]
 80063f2:	6863      	ldr	r3, [r4, #4]
 80063f4:	bf08      	it	eq
 80063f6:	6031      	streq	r1, [r6, #0]
 80063f8:	5162      	str	r2, [r4, r5]
 80063fa:	604b      	str	r3, [r1, #4]
 80063fc:	4638      	mov	r0, r7
 80063fe:	f104 060b 	add.w	r6, r4, #11
 8006402:	f000 fe15 	bl	8007030 <__malloc_unlock>
 8006406:	f026 0607 	bic.w	r6, r6, #7
 800640a:	1d23      	adds	r3, r4, #4
 800640c:	1af2      	subs	r2, r6, r3
 800640e:	d0b6      	beq.n	800637e <_malloc_r+0x22>
 8006410:	1b9b      	subs	r3, r3, r6
 8006412:	50a3      	str	r3, [r4, r2]
 8006414:	e7b3      	b.n	800637e <_malloc_r+0x22>
 8006416:	6862      	ldr	r2, [r4, #4]
 8006418:	42a3      	cmp	r3, r4
 800641a:	bf0c      	ite	eq
 800641c:	6032      	streq	r2, [r6, #0]
 800641e:	605a      	strne	r2, [r3, #4]
 8006420:	e7ec      	b.n	80063fc <_malloc_r+0xa0>
 8006422:	4623      	mov	r3, r4
 8006424:	6864      	ldr	r4, [r4, #4]
 8006426:	e7b2      	b.n	800638e <_malloc_r+0x32>
 8006428:	4634      	mov	r4, r6
 800642a:	6876      	ldr	r6, [r6, #4]
 800642c:	e7b9      	b.n	80063a2 <_malloc_r+0x46>
 800642e:	230c      	movs	r3, #12
 8006430:	4638      	mov	r0, r7
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	f000 fdfc 	bl	8007030 <__malloc_unlock>
 8006438:	e7a1      	b.n	800637e <_malloc_r+0x22>
 800643a:	6025      	str	r5, [r4, #0]
 800643c:	e7de      	b.n	80063fc <_malloc_r+0xa0>
 800643e:	bf00      	nop
 8006440:	20000d20 	.word	0x20000d20

08006444 <__sfputc_r>:
 8006444:	6893      	ldr	r3, [r2, #8]
 8006446:	b410      	push	{r4}
 8006448:	3b01      	subs	r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	6093      	str	r3, [r2, #8]
 800644e:	da07      	bge.n	8006460 <__sfputc_r+0x1c>
 8006450:	6994      	ldr	r4, [r2, #24]
 8006452:	42a3      	cmp	r3, r4
 8006454:	db01      	blt.n	800645a <__sfputc_r+0x16>
 8006456:	290a      	cmp	r1, #10
 8006458:	d102      	bne.n	8006460 <__sfputc_r+0x1c>
 800645a:	bc10      	pop	{r4}
 800645c:	f000 baf0 	b.w	8006a40 <__swbuf_r>
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	1c58      	adds	r0, r3, #1
 8006464:	6010      	str	r0, [r2, #0]
 8006466:	7019      	strb	r1, [r3, #0]
 8006468:	4608      	mov	r0, r1
 800646a:	bc10      	pop	{r4}
 800646c:	4770      	bx	lr

0800646e <__sfputs_r>:
 800646e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006470:	4606      	mov	r6, r0
 8006472:	460f      	mov	r7, r1
 8006474:	4614      	mov	r4, r2
 8006476:	18d5      	adds	r5, r2, r3
 8006478:	42ac      	cmp	r4, r5
 800647a:	d101      	bne.n	8006480 <__sfputs_r+0x12>
 800647c:	2000      	movs	r0, #0
 800647e:	e007      	b.n	8006490 <__sfputs_r+0x22>
 8006480:	463a      	mov	r2, r7
 8006482:	4630      	mov	r0, r6
 8006484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006488:	f7ff ffdc 	bl	8006444 <__sfputc_r>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d1f3      	bne.n	8006478 <__sfputs_r+0xa>
 8006490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006494 <_vfiprintf_r>:
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	460d      	mov	r5, r1
 800649a:	4614      	mov	r4, r2
 800649c:	4698      	mov	r8, r3
 800649e:	4606      	mov	r6, r0
 80064a0:	b09d      	sub	sp, #116	; 0x74
 80064a2:	b118      	cbz	r0, 80064ac <_vfiprintf_r+0x18>
 80064a4:	6983      	ldr	r3, [r0, #24]
 80064a6:	b90b      	cbnz	r3, 80064ac <_vfiprintf_r+0x18>
 80064a8:	f000 fca8 	bl	8006dfc <__sinit>
 80064ac:	4b89      	ldr	r3, [pc, #548]	; (80066d4 <_vfiprintf_r+0x240>)
 80064ae:	429d      	cmp	r5, r3
 80064b0:	d11b      	bne.n	80064ea <_vfiprintf_r+0x56>
 80064b2:	6875      	ldr	r5, [r6, #4]
 80064b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b6:	07d9      	lsls	r1, r3, #31
 80064b8:	d405      	bmi.n	80064c6 <_vfiprintf_r+0x32>
 80064ba:	89ab      	ldrh	r3, [r5, #12]
 80064bc:	059a      	lsls	r2, r3, #22
 80064be:	d402      	bmi.n	80064c6 <_vfiprintf_r+0x32>
 80064c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064c2:	f000 fd39 	bl	8006f38 <__retarget_lock_acquire_recursive>
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	071b      	lsls	r3, r3, #28
 80064ca:	d501      	bpl.n	80064d0 <_vfiprintf_r+0x3c>
 80064cc:	692b      	ldr	r3, [r5, #16]
 80064ce:	b9eb      	cbnz	r3, 800650c <_vfiprintf_r+0x78>
 80064d0:	4629      	mov	r1, r5
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 fb06 	bl	8006ae4 <__swsetup_r>
 80064d8:	b1c0      	cbz	r0, 800650c <_vfiprintf_r+0x78>
 80064da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064dc:	07dc      	lsls	r4, r3, #31
 80064de:	d50e      	bpl.n	80064fe <_vfiprintf_r+0x6a>
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	b01d      	add	sp, #116	; 0x74
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	4b7b      	ldr	r3, [pc, #492]	; (80066d8 <_vfiprintf_r+0x244>)
 80064ec:	429d      	cmp	r5, r3
 80064ee:	d101      	bne.n	80064f4 <_vfiprintf_r+0x60>
 80064f0:	68b5      	ldr	r5, [r6, #8]
 80064f2:	e7df      	b.n	80064b4 <_vfiprintf_r+0x20>
 80064f4:	4b79      	ldr	r3, [pc, #484]	; (80066dc <_vfiprintf_r+0x248>)
 80064f6:	429d      	cmp	r5, r3
 80064f8:	bf08      	it	eq
 80064fa:	68f5      	ldreq	r5, [r6, #12]
 80064fc:	e7da      	b.n	80064b4 <_vfiprintf_r+0x20>
 80064fe:	89ab      	ldrh	r3, [r5, #12]
 8006500:	0598      	lsls	r0, r3, #22
 8006502:	d4ed      	bmi.n	80064e0 <_vfiprintf_r+0x4c>
 8006504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006506:	f000 fd18 	bl	8006f3a <__retarget_lock_release_recursive>
 800650a:	e7e9      	b.n	80064e0 <_vfiprintf_r+0x4c>
 800650c:	2300      	movs	r3, #0
 800650e:	9309      	str	r3, [sp, #36]	; 0x24
 8006510:	2320      	movs	r3, #32
 8006512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006516:	2330      	movs	r3, #48	; 0x30
 8006518:	f04f 0901 	mov.w	r9, #1
 800651c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006520:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80066e0 <_vfiprintf_r+0x24c>
 8006524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006528:	4623      	mov	r3, r4
 800652a:	469a      	mov	sl, r3
 800652c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006530:	b10a      	cbz	r2, 8006536 <_vfiprintf_r+0xa2>
 8006532:	2a25      	cmp	r2, #37	; 0x25
 8006534:	d1f9      	bne.n	800652a <_vfiprintf_r+0x96>
 8006536:	ebba 0b04 	subs.w	fp, sl, r4
 800653a:	d00b      	beq.n	8006554 <_vfiprintf_r+0xc0>
 800653c:	465b      	mov	r3, fp
 800653e:	4622      	mov	r2, r4
 8006540:	4629      	mov	r1, r5
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff ff93 	bl	800646e <__sfputs_r>
 8006548:	3001      	adds	r0, #1
 800654a:	f000 80aa 	beq.w	80066a2 <_vfiprintf_r+0x20e>
 800654e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006550:	445a      	add	r2, fp
 8006552:	9209      	str	r2, [sp, #36]	; 0x24
 8006554:	f89a 3000 	ldrb.w	r3, [sl]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80a2 	beq.w	80066a2 <_vfiprintf_r+0x20e>
 800655e:	2300      	movs	r3, #0
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006568:	f10a 0a01 	add.w	sl, sl, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006574:	931a      	str	r3, [sp, #104]	; 0x68
 8006576:	4654      	mov	r4, sl
 8006578:	2205      	movs	r2, #5
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657e:	4858      	ldr	r0, [pc, #352]	; (80066e0 <_vfiprintf_r+0x24c>)
 8006580:	f000 fd42 	bl	8007008 <memchr>
 8006584:	9a04      	ldr	r2, [sp, #16]
 8006586:	b9d8      	cbnz	r0, 80065c0 <_vfiprintf_r+0x12c>
 8006588:	06d1      	lsls	r1, r2, #27
 800658a:	bf44      	itt	mi
 800658c:	2320      	movmi	r3, #32
 800658e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006592:	0713      	lsls	r3, r2, #28
 8006594:	bf44      	itt	mi
 8006596:	232b      	movmi	r3, #43	; 0x2b
 8006598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659c:	f89a 3000 	ldrb.w	r3, [sl]
 80065a0:	2b2a      	cmp	r3, #42	; 0x2a
 80065a2:	d015      	beq.n	80065d0 <_vfiprintf_r+0x13c>
 80065a4:	4654      	mov	r4, sl
 80065a6:	2000      	movs	r0, #0
 80065a8:	f04f 0c0a 	mov.w	ip, #10
 80065ac:	9a07      	ldr	r2, [sp, #28]
 80065ae:	4621      	mov	r1, r4
 80065b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b4:	3b30      	subs	r3, #48	; 0x30
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d94e      	bls.n	8006658 <_vfiprintf_r+0x1c4>
 80065ba:	b1b0      	cbz	r0, 80065ea <_vfiprintf_r+0x156>
 80065bc:	9207      	str	r2, [sp, #28]
 80065be:	e014      	b.n	80065ea <_vfiprintf_r+0x156>
 80065c0:	eba0 0308 	sub.w	r3, r0, r8
 80065c4:	fa09 f303 	lsl.w	r3, r9, r3
 80065c8:	4313      	orrs	r3, r2
 80065ca:	46a2      	mov	sl, r4
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	e7d2      	b.n	8006576 <_vfiprintf_r+0xe2>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	1d19      	adds	r1, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9103      	str	r1, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfbb      	ittet	lt
 80065dc:	425b      	neglt	r3, r3
 80065de:	f042 0202 	orrlt.w	r2, r2, #2
 80065e2:	9307      	strge	r3, [sp, #28]
 80065e4:	9307      	strlt	r3, [sp, #28]
 80065e6:	bfb8      	it	lt
 80065e8:	9204      	strlt	r2, [sp, #16]
 80065ea:	7823      	ldrb	r3, [r4, #0]
 80065ec:	2b2e      	cmp	r3, #46	; 0x2e
 80065ee:	d10c      	bne.n	800660a <_vfiprintf_r+0x176>
 80065f0:	7863      	ldrb	r3, [r4, #1]
 80065f2:	2b2a      	cmp	r3, #42	; 0x2a
 80065f4:	d135      	bne.n	8006662 <_vfiprintf_r+0x1ce>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	3402      	adds	r4, #2
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	9203      	str	r2, [sp, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	bfb8      	it	lt
 8006604:	f04f 33ff 	movlt.w	r3, #4294967295
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80066e4 <_vfiprintf_r+0x250>
 800660e:	2203      	movs	r2, #3
 8006610:	4650      	mov	r0, sl
 8006612:	7821      	ldrb	r1, [r4, #0]
 8006614:	f000 fcf8 	bl	8007008 <memchr>
 8006618:	b140      	cbz	r0, 800662c <_vfiprintf_r+0x198>
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	eba0 000a 	sub.w	r0, r0, sl
 8006620:	fa03 f000 	lsl.w	r0, r3, r0
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	3401      	adds	r4, #1
 8006628:	4303      	orrs	r3, r0
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006630:	2206      	movs	r2, #6
 8006632:	482d      	ldr	r0, [pc, #180]	; (80066e8 <_vfiprintf_r+0x254>)
 8006634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006638:	f000 fce6 	bl	8007008 <memchr>
 800663c:	2800      	cmp	r0, #0
 800663e:	d03f      	beq.n	80066c0 <_vfiprintf_r+0x22c>
 8006640:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <_vfiprintf_r+0x258>)
 8006642:	bb1b      	cbnz	r3, 800668c <_vfiprintf_r+0x1f8>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	3307      	adds	r3, #7
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	3308      	adds	r3, #8
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006652:	443b      	add	r3, r7
 8006654:	9309      	str	r3, [sp, #36]	; 0x24
 8006656:	e767      	b.n	8006528 <_vfiprintf_r+0x94>
 8006658:	460c      	mov	r4, r1
 800665a:	2001      	movs	r0, #1
 800665c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006660:	e7a5      	b.n	80065ae <_vfiprintf_r+0x11a>
 8006662:	2300      	movs	r3, #0
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4619      	mov	r1, r3
 800666a:	3401      	adds	r4, #1
 800666c:	9305      	str	r3, [sp, #20]
 800666e:	4620      	mov	r0, r4
 8006670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006674:	3a30      	subs	r2, #48	; 0x30
 8006676:	2a09      	cmp	r2, #9
 8006678:	d903      	bls.n	8006682 <_vfiprintf_r+0x1ee>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0c5      	beq.n	800660a <_vfiprintf_r+0x176>
 800667e:	9105      	str	r1, [sp, #20]
 8006680:	e7c3      	b.n	800660a <_vfiprintf_r+0x176>
 8006682:	4604      	mov	r4, r0
 8006684:	2301      	movs	r3, #1
 8006686:	fb0c 2101 	mla	r1, ip, r1, r2
 800668a:	e7f0      	b.n	800666e <_vfiprintf_r+0x1da>
 800668c:	ab03      	add	r3, sp, #12
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	462a      	mov	r2, r5
 8006692:	4630      	mov	r0, r6
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <_vfiprintf_r+0x25c>)
 8006696:	a904      	add	r1, sp, #16
 8006698:	f3af 8000 	nop.w
 800669c:	4607      	mov	r7, r0
 800669e:	1c78      	adds	r0, r7, #1
 80066a0:	d1d6      	bne.n	8006650 <_vfiprintf_r+0x1bc>
 80066a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a4:	07d9      	lsls	r1, r3, #31
 80066a6:	d405      	bmi.n	80066b4 <_vfiprintf_r+0x220>
 80066a8:	89ab      	ldrh	r3, [r5, #12]
 80066aa:	059a      	lsls	r2, r3, #22
 80066ac:	d402      	bmi.n	80066b4 <_vfiprintf_r+0x220>
 80066ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066b0:	f000 fc43 	bl	8006f3a <__retarget_lock_release_recursive>
 80066b4:	89ab      	ldrh	r3, [r5, #12]
 80066b6:	065b      	lsls	r3, r3, #25
 80066b8:	f53f af12 	bmi.w	80064e0 <_vfiprintf_r+0x4c>
 80066bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066be:	e711      	b.n	80064e4 <_vfiprintf_r+0x50>
 80066c0:	ab03      	add	r3, sp, #12
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4630      	mov	r0, r6
 80066c8:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <_vfiprintf_r+0x25c>)
 80066ca:	a904      	add	r1, sp, #16
 80066cc:	f000 f882 	bl	80067d4 <_printf_i>
 80066d0:	e7e4      	b.n	800669c <_vfiprintf_r+0x208>
 80066d2:	bf00      	nop
 80066d4:	080074b8 	.word	0x080074b8
 80066d8:	080074d8 	.word	0x080074d8
 80066dc:	08007498 	.word	0x08007498
 80066e0:	08007465 	.word	0x08007465
 80066e4:	0800746b 	.word	0x0800746b
 80066e8:	0800746f 	.word	0x0800746f
 80066ec:	00000000 	.word	0x00000000
 80066f0:	0800646f 	.word	0x0800646f

080066f4 <_printf_common>:
 80066f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f8:	4616      	mov	r6, r2
 80066fa:	4699      	mov	r9, r3
 80066fc:	688a      	ldr	r2, [r1, #8]
 80066fe:	690b      	ldr	r3, [r1, #16]
 8006700:	4607      	mov	r7, r0
 8006702:	4293      	cmp	r3, r2
 8006704:	bfb8      	it	lt
 8006706:	4613      	movlt	r3, r2
 8006708:	6033      	str	r3, [r6, #0]
 800670a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800670e:	460c      	mov	r4, r1
 8006710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006714:	b10a      	cbz	r2, 800671a <_printf_common+0x26>
 8006716:	3301      	adds	r3, #1
 8006718:	6033      	str	r3, [r6, #0]
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	0699      	lsls	r1, r3, #26
 800671e:	bf42      	ittt	mi
 8006720:	6833      	ldrmi	r3, [r6, #0]
 8006722:	3302      	addmi	r3, #2
 8006724:	6033      	strmi	r3, [r6, #0]
 8006726:	6825      	ldr	r5, [r4, #0]
 8006728:	f015 0506 	ands.w	r5, r5, #6
 800672c:	d106      	bne.n	800673c <_printf_common+0x48>
 800672e:	f104 0a19 	add.w	sl, r4, #25
 8006732:	68e3      	ldr	r3, [r4, #12]
 8006734:	6832      	ldr	r2, [r6, #0]
 8006736:	1a9b      	subs	r3, r3, r2
 8006738:	42ab      	cmp	r3, r5
 800673a:	dc28      	bgt.n	800678e <_printf_common+0x9a>
 800673c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006740:	1e13      	subs	r3, r2, #0
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	bf18      	it	ne
 8006746:	2301      	movne	r3, #1
 8006748:	0692      	lsls	r2, r2, #26
 800674a:	d42d      	bmi.n	80067a8 <_printf_common+0xb4>
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006754:	47c0      	blx	r8
 8006756:	3001      	adds	r0, #1
 8006758:	d020      	beq.n	800679c <_printf_common+0xa8>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	68e5      	ldr	r5, [r4, #12]
 800675e:	f003 0306 	and.w	r3, r3, #6
 8006762:	2b04      	cmp	r3, #4
 8006764:	bf18      	it	ne
 8006766:	2500      	movne	r5, #0
 8006768:	6832      	ldr	r2, [r6, #0]
 800676a:	f04f 0600 	mov.w	r6, #0
 800676e:	68a3      	ldr	r3, [r4, #8]
 8006770:	bf08      	it	eq
 8006772:	1aad      	subeq	r5, r5, r2
 8006774:	6922      	ldr	r2, [r4, #16]
 8006776:	bf08      	it	eq
 8006778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800677c:	4293      	cmp	r3, r2
 800677e:	bfc4      	itt	gt
 8006780:	1a9b      	subgt	r3, r3, r2
 8006782:	18ed      	addgt	r5, r5, r3
 8006784:	341a      	adds	r4, #26
 8006786:	42b5      	cmp	r5, r6
 8006788:	d11a      	bne.n	80067c0 <_printf_common+0xcc>
 800678a:	2000      	movs	r0, #0
 800678c:	e008      	b.n	80067a0 <_printf_common+0xac>
 800678e:	2301      	movs	r3, #1
 8006790:	4652      	mov	r2, sl
 8006792:	4649      	mov	r1, r9
 8006794:	4638      	mov	r0, r7
 8006796:	47c0      	blx	r8
 8006798:	3001      	adds	r0, #1
 800679a:	d103      	bne.n	80067a4 <_printf_common+0xb0>
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a4:	3501      	adds	r5, #1
 80067a6:	e7c4      	b.n	8006732 <_printf_common+0x3e>
 80067a8:	2030      	movs	r0, #48	; 0x30
 80067aa:	18e1      	adds	r1, r4, r3
 80067ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b6:	4422      	add	r2, r4
 80067b8:	3302      	adds	r3, #2
 80067ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067be:	e7c5      	b.n	800674c <_printf_common+0x58>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4622      	mov	r2, r4
 80067c4:	4649      	mov	r1, r9
 80067c6:	4638      	mov	r0, r7
 80067c8:	47c0      	blx	r8
 80067ca:	3001      	adds	r0, #1
 80067cc:	d0e6      	beq.n	800679c <_printf_common+0xa8>
 80067ce:	3601      	adds	r6, #1
 80067d0:	e7d9      	b.n	8006786 <_printf_common+0x92>
	...

080067d4 <_printf_i>:
 80067d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	7e0f      	ldrb	r7, [r1, #24]
 80067da:	4691      	mov	r9, r2
 80067dc:	2f78      	cmp	r7, #120	; 0x78
 80067de:	4680      	mov	r8, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	469a      	mov	sl, r3
 80067e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ea:	d807      	bhi.n	80067fc <_printf_i+0x28>
 80067ec:	2f62      	cmp	r7, #98	; 0x62
 80067ee:	d80a      	bhi.n	8006806 <_printf_i+0x32>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	f000 80d9 	beq.w	80069a8 <_printf_i+0x1d4>
 80067f6:	2f58      	cmp	r7, #88	; 0x58
 80067f8:	f000 80a4 	beq.w	8006944 <_printf_i+0x170>
 80067fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006804:	e03a      	b.n	800687c <_printf_i+0xa8>
 8006806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800680a:	2b15      	cmp	r3, #21
 800680c:	d8f6      	bhi.n	80067fc <_printf_i+0x28>
 800680e:	a101      	add	r1, pc, #4	; (adr r1, 8006814 <_printf_i+0x40>)
 8006810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006814:	0800686d 	.word	0x0800686d
 8006818:	08006881 	.word	0x08006881
 800681c:	080067fd 	.word	0x080067fd
 8006820:	080067fd 	.word	0x080067fd
 8006824:	080067fd 	.word	0x080067fd
 8006828:	080067fd 	.word	0x080067fd
 800682c:	08006881 	.word	0x08006881
 8006830:	080067fd 	.word	0x080067fd
 8006834:	080067fd 	.word	0x080067fd
 8006838:	080067fd 	.word	0x080067fd
 800683c:	080067fd 	.word	0x080067fd
 8006840:	0800698f 	.word	0x0800698f
 8006844:	080068b1 	.word	0x080068b1
 8006848:	08006971 	.word	0x08006971
 800684c:	080067fd 	.word	0x080067fd
 8006850:	080067fd 	.word	0x080067fd
 8006854:	080069b1 	.word	0x080069b1
 8006858:	080067fd 	.word	0x080067fd
 800685c:	080068b1 	.word	0x080068b1
 8006860:	080067fd 	.word	0x080067fd
 8006864:	080067fd 	.word	0x080067fd
 8006868:	08006979 	.word	0x08006979
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	602a      	str	r2, [r5, #0]
 8006874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800687c:	2301      	movs	r3, #1
 800687e:	e0a4      	b.n	80069ca <_printf_i+0x1f6>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	6829      	ldr	r1, [r5, #0]
 8006884:	0606      	lsls	r6, r0, #24
 8006886:	f101 0304 	add.w	r3, r1, #4
 800688a:	d50a      	bpl.n	80068a2 <_printf_i+0xce>
 800688c:	680e      	ldr	r6, [r1, #0]
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	2e00      	cmp	r6, #0
 8006892:	da03      	bge.n	800689c <_printf_i+0xc8>
 8006894:	232d      	movs	r3, #45	; 0x2d
 8006896:	4276      	negs	r6, r6
 8006898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689c:	230a      	movs	r3, #10
 800689e:	485e      	ldr	r0, [pc, #376]	; (8006a18 <_printf_i+0x244>)
 80068a0:	e019      	b.n	80068d6 <_printf_i+0x102>
 80068a2:	680e      	ldr	r6, [r1, #0]
 80068a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	bf18      	it	ne
 80068ac:	b236      	sxthne	r6, r6
 80068ae:	e7ef      	b.n	8006890 <_printf_i+0xbc>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	1d19      	adds	r1, r3, #4
 80068b6:	6029      	str	r1, [r5, #0]
 80068b8:	0601      	lsls	r1, r0, #24
 80068ba:	d501      	bpl.n	80068c0 <_printf_i+0xec>
 80068bc:	681e      	ldr	r6, [r3, #0]
 80068be:	e002      	b.n	80068c6 <_printf_i+0xf2>
 80068c0:	0646      	lsls	r6, r0, #25
 80068c2:	d5fb      	bpl.n	80068bc <_printf_i+0xe8>
 80068c4:	881e      	ldrh	r6, [r3, #0]
 80068c6:	2f6f      	cmp	r7, #111	; 0x6f
 80068c8:	bf0c      	ite	eq
 80068ca:	2308      	moveq	r3, #8
 80068cc:	230a      	movne	r3, #10
 80068ce:	4852      	ldr	r0, [pc, #328]	; (8006a18 <_printf_i+0x244>)
 80068d0:	2100      	movs	r1, #0
 80068d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068d6:	6865      	ldr	r5, [r4, #4]
 80068d8:	2d00      	cmp	r5, #0
 80068da:	bfa8      	it	ge
 80068dc:	6821      	ldrge	r1, [r4, #0]
 80068de:	60a5      	str	r5, [r4, #8]
 80068e0:	bfa4      	itt	ge
 80068e2:	f021 0104 	bicge.w	r1, r1, #4
 80068e6:	6021      	strge	r1, [r4, #0]
 80068e8:	b90e      	cbnz	r6, 80068ee <_printf_i+0x11a>
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	d04d      	beq.n	800698a <_printf_i+0x1b6>
 80068ee:	4615      	mov	r5, r2
 80068f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80068f4:	fb03 6711 	mls	r7, r3, r1, r6
 80068f8:	5dc7      	ldrb	r7, [r0, r7]
 80068fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068fe:	4637      	mov	r7, r6
 8006900:	42bb      	cmp	r3, r7
 8006902:	460e      	mov	r6, r1
 8006904:	d9f4      	bls.n	80068f0 <_printf_i+0x11c>
 8006906:	2b08      	cmp	r3, #8
 8006908:	d10b      	bne.n	8006922 <_printf_i+0x14e>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	07de      	lsls	r6, r3, #31
 800690e:	d508      	bpl.n	8006922 <_printf_i+0x14e>
 8006910:	6923      	ldr	r3, [r4, #16]
 8006912:	6861      	ldr	r1, [r4, #4]
 8006914:	4299      	cmp	r1, r3
 8006916:	bfde      	ittt	le
 8006918:	2330      	movle	r3, #48	; 0x30
 800691a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800691e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006922:	1b52      	subs	r2, r2, r5
 8006924:	6122      	str	r2, [r4, #16]
 8006926:	464b      	mov	r3, r9
 8006928:	4621      	mov	r1, r4
 800692a:	4640      	mov	r0, r8
 800692c:	f8cd a000 	str.w	sl, [sp]
 8006930:	aa03      	add	r2, sp, #12
 8006932:	f7ff fedf 	bl	80066f4 <_printf_common>
 8006936:	3001      	adds	r0, #1
 8006938:	d14c      	bne.n	80069d4 <_printf_i+0x200>
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	b004      	add	sp, #16
 8006940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006944:	4834      	ldr	r0, [pc, #208]	; (8006a18 <_printf_i+0x244>)
 8006946:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800694a:	6829      	ldr	r1, [r5, #0]
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006952:	6029      	str	r1, [r5, #0]
 8006954:	061d      	lsls	r5, r3, #24
 8006956:	d514      	bpl.n	8006982 <_printf_i+0x1ae>
 8006958:	07df      	lsls	r7, r3, #31
 800695a:	bf44      	itt	mi
 800695c:	f043 0320 	orrmi.w	r3, r3, #32
 8006960:	6023      	strmi	r3, [r4, #0]
 8006962:	b91e      	cbnz	r6, 800696c <_printf_i+0x198>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	f023 0320 	bic.w	r3, r3, #32
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	2310      	movs	r3, #16
 800696e:	e7af      	b.n	80068d0 <_printf_i+0xfc>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	f043 0320 	orr.w	r3, r3, #32
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	2378      	movs	r3, #120	; 0x78
 800697a:	4828      	ldr	r0, [pc, #160]	; (8006a1c <_printf_i+0x248>)
 800697c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006980:	e7e3      	b.n	800694a <_printf_i+0x176>
 8006982:	0659      	lsls	r1, r3, #25
 8006984:	bf48      	it	mi
 8006986:	b2b6      	uxthmi	r6, r6
 8006988:	e7e6      	b.n	8006958 <_printf_i+0x184>
 800698a:	4615      	mov	r5, r2
 800698c:	e7bb      	b.n	8006906 <_printf_i+0x132>
 800698e:	682b      	ldr	r3, [r5, #0]
 8006990:	6826      	ldr	r6, [r4, #0]
 8006992:	1d18      	adds	r0, r3, #4
 8006994:	6961      	ldr	r1, [r4, #20]
 8006996:	6028      	str	r0, [r5, #0]
 8006998:	0635      	lsls	r5, r6, #24
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	d501      	bpl.n	80069a2 <_printf_i+0x1ce>
 800699e:	6019      	str	r1, [r3, #0]
 80069a0:	e002      	b.n	80069a8 <_printf_i+0x1d4>
 80069a2:	0670      	lsls	r0, r6, #25
 80069a4:	d5fb      	bpl.n	800699e <_printf_i+0x1ca>
 80069a6:	8019      	strh	r1, [r3, #0]
 80069a8:	2300      	movs	r3, #0
 80069aa:	4615      	mov	r5, r2
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	e7ba      	b.n	8006926 <_printf_i+0x152>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	2100      	movs	r1, #0
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	602a      	str	r2, [r5, #0]
 80069b8:	681d      	ldr	r5, [r3, #0]
 80069ba:	6862      	ldr	r2, [r4, #4]
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 fb23 	bl	8007008 <memchr>
 80069c2:	b108      	cbz	r0, 80069c8 <_printf_i+0x1f4>
 80069c4:	1b40      	subs	r0, r0, r5
 80069c6:	6060      	str	r0, [r4, #4]
 80069c8:	6863      	ldr	r3, [r4, #4]
 80069ca:	6123      	str	r3, [r4, #16]
 80069cc:	2300      	movs	r3, #0
 80069ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d2:	e7a8      	b.n	8006926 <_printf_i+0x152>
 80069d4:	462a      	mov	r2, r5
 80069d6:	4649      	mov	r1, r9
 80069d8:	4640      	mov	r0, r8
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	47d0      	blx	sl
 80069de:	3001      	adds	r0, #1
 80069e0:	d0ab      	beq.n	800693a <_printf_i+0x166>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	079b      	lsls	r3, r3, #30
 80069e6:	d413      	bmi.n	8006a10 <_printf_i+0x23c>
 80069e8:	68e0      	ldr	r0, [r4, #12]
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	4298      	cmp	r0, r3
 80069ee:	bfb8      	it	lt
 80069f0:	4618      	movlt	r0, r3
 80069f2:	e7a4      	b.n	800693e <_printf_i+0x16a>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4632      	mov	r2, r6
 80069f8:	4649      	mov	r1, r9
 80069fa:	4640      	mov	r0, r8
 80069fc:	47d0      	blx	sl
 80069fe:	3001      	adds	r0, #1
 8006a00:	d09b      	beq.n	800693a <_printf_i+0x166>
 8006a02:	3501      	adds	r5, #1
 8006a04:	68e3      	ldr	r3, [r4, #12]
 8006a06:	9903      	ldr	r1, [sp, #12]
 8006a08:	1a5b      	subs	r3, r3, r1
 8006a0a:	42ab      	cmp	r3, r5
 8006a0c:	dcf2      	bgt.n	80069f4 <_printf_i+0x220>
 8006a0e:	e7eb      	b.n	80069e8 <_printf_i+0x214>
 8006a10:	2500      	movs	r5, #0
 8006a12:	f104 0619 	add.w	r6, r4, #25
 8006a16:	e7f5      	b.n	8006a04 <_printf_i+0x230>
 8006a18:	08007476 	.word	0x08007476
 8006a1c:	08007487 	.word	0x08007487

08006a20 <_sbrk_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	2300      	movs	r3, #0
 8006a24:	4d05      	ldr	r5, [pc, #20]	; (8006a3c <_sbrk_r+0x1c>)
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	f7ff fa0c 	bl	8005e48 <_sbrk>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_sbrk_r+0x1a>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_sbrk_r+0x1a>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20000d2c 	.word	0x20000d2c

08006a40 <__swbuf_r>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	460e      	mov	r6, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	4605      	mov	r5, r0
 8006a48:	b118      	cbz	r0, 8006a52 <__swbuf_r+0x12>
 8006a4a:	6983      	ldr	r3, [r0, #24]
 8006a4c:	b90b      	cbnz	r3, 8006a52 <__swbuf_r+0x12>
 8006a4e:	f000 f9d5 	bl	8006dfc <__sinit>
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <__swbuf_r+0x98>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d12b      	bne.n	8006ab0 <__swbuf_r+0x70>
 8006a58:	686c      	ldr	r4, [r5, #4]
 8006a5a:	69a3      	ldr	r3, [r4, #24]
 8006a5c:	60a3      	str	r3, [r4, #8]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	071a      	lsls	r2, r3, #28
 8006a62:	d52f      	bpl.n	8006ac4 <__swbuf_r+0x84>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	b36b      	cbz	r3, 8006ac4 <__swbuf_r+0x84>
 8006a68:	6923      	ldr	r3, [r4, #16]
 8006a6a:	6820      	ldr	r0, [r4, #0]
 8006a6c:	b2f6      	uxtb	r6, r6
 8006a6e:	1ac0      	subs	r0, r0, r3
 8006a70:	6963      	ldr	r3, [r4, #20]
 8006a72:	4637      	mov	r7, r6
 8006a74:	4283      	cmp	r3, r0
 8006a76:	dc04      	bgt.n	8006a82 <__swbuf_r+0x42>
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 f92a 	bl	8006cd4 <_fflush_r>
 8006a80:	bb30      	cbnz	r0, 8006ad0 <__swbuf_r+0x90>
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	3001      	adds	r0, #1
 8006a86:	3b01      	subs	r3, #1
 8006a88:	60a3      	str	r3, [r4, #8]
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	6022      	str	r2, [r4, #0]
 8006a90:	701e      	strb	r6, [r3, #0]
 8006a92:	6963      	ldr	r3, [r4, #20]
 8006a94:	4283      	cmp	r3, r0
 8006a96:	d004      	beq.n	8006aa2 <__swbuf_r+0x62>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	07db      	lsls	r3, r3, #31
 8006a9c:	d506      	bpl.n	8006aac <__swbuf_r+0x6c>
 8006a9e:	2e0a      	cmp	r6, #10
 8006aa0:	d104      	bne.n	8006aac <__swbuf_r+0x6c>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f915 	bl	8006cd4 <_fflush_r>
 8006aaa:	b988      	cbnz	r0, 8006ad0 <__swbuf_r+0x90>
 8006aac:	4638      	mov	r0, r7
 8006aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <__swbuf_r+0x9c>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <__swbuf_r+0x7a>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7cf      	b.n	8006a5a <__swbuf_r+0x1a>
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <__swbuf_r+0xa0>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7ca      	b.n	8006a5a <__swbuf_r+0x1a>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 f80c 	bl	8006ae4 <__swsetup_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d0cb      	beq.n	8006a68 <__swbuf_r+0x28>
 8006ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ad4:	e7ea      	b.n	8006aac <__swbuf_r+0x6c>
 8006ad6:	bf00      	nop
 8006ad8:	080074b8 	.word	0x080074b8
 8006adc:	080074d8 	.word	0x080074d8
 8006ae0:	08007498 	.word	0x08007498

08006ae4 <__swsetup_r>:
 8006ae4:	4b32      	ldr	r3, [pc, #200]	; (8006bb0 <__swsetup_r+0xcc>)
 8006ae6:	b570      	push	{r4, r5, r6, lr}
 8006ae8:	681d      	ldr	r5, [r3, #0]
 8006aea:	4606      	mov	r6, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	b125      	cbz	r5, 8006afa <__swsetup_r+0x16>
 8006af0:	69ab      	ldr	r3, [r5, #24]
 8006af2:	b913      	cbnz	r3, 8006afa <__swsetup_r+0x16>
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 f981 	bl	8006dfc <__sinit>
 8006afa:	4b2e      	ldr	r3, [pc, #184]	; (8006bb4 <__swsetup_r+0xd0>)
 8006afc:	429c      	cmp	r4, r3
 8006afe:	d10f      	bne.n	8006b20 <__swsetup_r+0x3c>
 8006b00:	686c      	ldr	r4, [r5, #4]
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b08:	0719      	lsls	r1, r3, #28
 8006b0a:	d42c      	bmi.n	8006b66 <__swsetup_r+0x82>
 8006b0c:	06dd      	lsls	r5, r3, #27
 8006b0e:	d411      	bmi.n	8006b34 <__swsetup_r+0x50>
 8006b10:	2309      	movs	r3, #9
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	e03e      	b.n	8006b9e <__swsetup_r+0xba>
 8006b20:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <__swsetup_r+0xd4>)
 8006b22:	429c      	cmp	r4, r3
 8006b24:	d101      	bne.n	8006b2a <__swsetup_r+0x46>
 8006b26:	68ac      	ldr	r4, [r5, #8]
 8006b28:	e7eb      	b.n	8006b02 <__swsetup_r+0x1e>
 8006b2a:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <__swsetup_r+0xd8>)
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	bf08      	it	eq
 8006b30:	68ec      	ldreq	r4, [r5, #12]
 8006b32:	e7e6      	b.n	8006b02 <__swsetup_r+0x1e>
 8006b34:	0758      	lsls	r0, r3, #29
 8006b36:	d512      	bpl.n	8006b5e <__swsetup_r+0x7a>
 8006b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b3a:	b141      	cbz	r1, 8006b4e <__swsetup_r+0x6a>
 8006b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b40:	4299      	cmp	r1, r3
 8006b42:	d002      	beq.n	8006b4a <__swsetup_r+0x66>
 8006b44:	4630      	mov	r0, r6
 8006b46:	f7ff fba1 	bl	800628c <_free_r>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b54:	81a3      	strh	r3, [r4, #12]
 8006b56:	2300      	movs	r3, #0
 8006b58:	6063      	str	r3, [r4, #4]
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	f043 0308 	orr.w	r3, r3, #8
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	b94b      	cbnz	r3, 8006b7e <__swsetup_r+0x9a>
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b74:	d003      	beq.n	8006b7e <__swsetup_r+0x9a>
 8006b76:	4621      	mov	r1, r4
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 fa05 	bl	8006f88 <__smakebuf_r>
 8006b7e:	89a0      	ldrh	r0, [r4, #12]
 8006b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b84:	f010 0301 	ands.w	r3, r0, #1
 8006b88:	d00a      	beq.n	8006ba0 <__swsetup_r+0xbc>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60a3      	str	r3, [r4, #8]
 8006b8e:	6963      	ldr	r3, [r4, #20]
 8006b90:	425b      	negs	r3, r3
 8006b92:	61a3      	str	r3, [r4, #24]
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	b943      	cbnz	r3, 8006baa <__swsetup_r+0xc6>
 8006b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b9c:	d1ba      	bne.n	8006b14 <__swsetup_r+0x30>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	0781      	lsls	r1, r0, #30
 8006ba2:	bf58      	it	pl
 8006ba4:	6963      	ldrpl	r3, [r4, #20]
 8006ba6:	60a3      	str	r3, [r4, #8]
 8006ba8:	e7f4      	b.n	8006b94 <__swsetup_r+0xb0>
 8006baa:	2000      	movs	r0, #0
 8006bac:	e7f7      	b.n	8006b9e <__swsetup_r+0xba>
 8006bae:	bf00      	nop
 8006bb0:	20000418 	.word	0x20000418
 8006bb4:	080074b8 	.word	0x080074b8
 8006bb8:	080074d8 	.word	0x080074d8
 8006bbc:	08007498 	.word	0x08007498

08006bc0 <abort>:
 8006bc0:	2006      	movs	r0, #6
 8006bc2:	b508      	push	{r3, lr}
 8006bc4:	f000 fa62 	bl	800708c <raise>
 8006bc8:	2001      	movs	r0, #1
 8006bca:	f7ff f8ca 	bl	8005d62 <_exit>
	...

08006bd0 <__sflush_r>:
 8006bd0:	898a      	ldrh	r2, [r1, #12]
 8006bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	0710      	lsls	r0, r2, #28
 8006bd8:	460c      	mov	r4, r1
 8006bda:	d457      	bmi.n	8006c8c <__sflush_r+0xbc>
 8006bdc:	684b      	ldr	r3, [r1, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	dc04      	bgt.n	8006bec <__sflush_r+0x1c>
 8006be2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dc01      	bgt.n	8006bec <__sflush_r+0x1c>
 8006be8:	2000      	movs	r0, #0
 8006bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d0fa      	beq.n	8006be8 <__sflush_r+0x18>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bf8:	682f      	ldr	r7, [r5, #0]
 8006bfa:	602b      	str	r3, [r5, #0]
 8006bfc:	d032      	beq.n	8006c64 <__sflush_r+0x94>
 8006bfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	075a      	lsls	r2, r3, #29
 8006c04:	d505      	bpl.n	8006c12 <__sflush_r+0x42>
 8006c06:	6863      	ldr	r3, [r4, #4]
 8006c08:	1ac0      	subs	r0, r0, r3
 8006c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c0c:	b10b      	cbz	r3, 8006c12 <__sflush_r+0x42>
 8006c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c10:	1ac0      	subs	r0, r0, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	4602      	mov	r2, r0
 8006c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c18:	4628      	mov	r0, r5
 8006c1a:	6a21      	ldr	r1, [r4, #32]
 8006c1c:	47b0      	blx	r6
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	d106      	bne.n	8006c32 <__sflush_r+0x62>
 8006c24:	6829      	ldr	r1, [r5, #0]
 8006c26:	291d      	cmp	r1, #29
 8006c28:	d82c      	bhi.n	8006c84 <__sflush_r+0xb4>
 8006c2a:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <__sflush_r+0x100>)
 8006c2c:	40ca      	lsrs	r2, r1
 8006c2e:	07d6      	lsls	r6, r2, #31
 8006c30:	d528      	bpl.n	8006c84 <__sflush_r+0xb4>
 8006c32:	2200      	movs	r2, #0
 8006c34:	6062      	str	r2, [r4, #4]
 8006c36:	6922      	ldr	r2, [r4, #16]
 8006c38:	04d9      	lsls	r1, r3, #19
 8006c3a:	6022      	str	r2, [r4, #0]
 8006c3c:	d504      	bpl.n	8006c48 <__sflush_r+0x78>
 8006c3e:	1c42      	adds	r2, r0, #1
 8006c40:	d101      	bne.n	8006c46 <__sflush_r+0x76>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	b903      	cbnz	r3, 8006c48 <__sflush_r+0x78>
 8006c46:	6560      	str	r0, [r4, #84]	; 0x54
 8006c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c4a:	602f      	str	r7, [r5, #0]
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	d0cb      	beq.n	8006be8 <__sflush_r+0x18>
 8006c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c54:	4299      	cmp	r1, r3
 8006c56:	d002      	beq.n	8006c5e <__sflush_r+0x8e>
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f7ff fb17 	bl	800628c <_free_r>
 8006c5e:	2000      	movs	r0, #0
 8006c60:	6360      	str	r0, [r4, #52]	; 0x34
 8006c62:	e7c2      	b.n	8006bea <__sflush_r+0x1a>
 8006c64:	6a21      	ldr	r1, [r4, #32]
 8006c66:	2301      	movs	r3, #1
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b0      	blx	r6
 8006c6c:	1c41      	adds	r1, r0, #1
 8006c6e:	d1c7      	bne.n	8006c00 <__sflush_r+0x30>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0c4      	beq.n	8006c00 <__sflush_r+0x30>
 8006c76:	2b1d      	cmp	r3, #29
 8006c78:	d001      	beq.n	8006c7e <__sflush_r+0xae>
 8006c7a:	2b16      	cmp	r3, #22
 8006c7c:	d101      	bne.n	8006c82 <__sflush_r+0xb2>
 8006c7e:	602f      	str	r7, [r5, #0]
 8006c80:	e7b2      	b.n	8006be8 <__sflush_r+0x18>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c88:	81a3      	strh	r3, [r4, #12]
 8006c8a:	e7ae      	b.n	8006bea <__sflush_r+0x1a>
 8006c8c:	690f      	ldr	r7, [r1, #16]
 8006c8e:	2f00      	cmp	r7, #0
 8006c90:	d0aa      	beq.n	8006be8 <__sflush_r+0x18>
 8006c92:	0793      	lsls	r3, r2, #30
 8006c94:	bf18      	it	ne
 8006c96:	2300      	movne	r3, #0
 8006c98:	680e      	ldr	r6, [r1, #0]
 8006c9a:	bf08      	it	eq
 8006c9c:	694b      	ldreq	r3, [r1, #20]
 8006c9e:	1bf6      	subs	r6, r6, r7
 8006ca0:	600f      	str	r7, [r1, #0]
 8006ca2:	608b      	str	r3, [r1, #8]
 8006ca4:	2e00      	cmp	r6, #0
 8006ca6:	dd9f      	ble.n	8006be8 <__sflush_r+0x18>
 8006ca8:	4633      	mov	r3, r6
 8006caa:	463a      	mov	r2, r7
 8006cac:	4628      	mov	r0, r5
 8006cae:	6a21      	ldr	r1, [r4, #32]
 8006cb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006cb4:	47e0      	blx	ip
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	dc06      	bgt.n	8006cc8 <__sflush_r+0xf8>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	e790      	b.n	8006bea <__sflush_r+0x1a>
 8006cc8:	4407      	add	r7, r0
 8006cca:	1a36      	subs	r6, r6, r0
 8006ccc:	e7ea      	b.n	8006ca4 <__sflush_r+0xd4>
 8006cce:	bf00      	nop
 8006cd0:	20400001 	.word	0x20400001

08006cd4 <_fflush_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	690b      	ldr	r3, [r1, #16]
 8006cd8:	4605      	mov	r5, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	b913      	cbnz	r3, 8006ce4 <_fflush_r+0x10>
 8006cde:	2500      	movs	r5, #0
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	b118      	cbz	r0, 8006cee <_fflush_r+0x1a>
 8006ce6:	6983      	ldr	r3, [r0, #24]
 8006ce8:	b90b      	cbnz	r3, 8006cee <_fflush_r+0x1a>
 8006cea:	f000 f887 	bl	8006dfc <__sinit>
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <_fflush_r+0x6c>)
 8006cf0:	429c      	cmp	r4, r3
 8006cf2:	d11b      	bne.n	8006d2c <_fflush_r+0x58>
 8006cf4:	686c      	ldr	r4, [r5, #4]
 8006cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0ef      	beq.n	8006cde <_fflush_r+0xa>
 8006cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d00:	07d0      	lsls	r0, r2, #31
 8006d02:	d404      	bmi.n	8006d0e <_fflush_r+0x3a>
 8006d04:	0599      	lsls	r1, r3, #22
 8006d06:	d402      	bmi.n	8006d0e <_fflush_r+0x3a>
 8006d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d0a:	f000 f915 	bl	8006f38 <__retarget_lock_acquire_recursive>
 8006d0e:	4628      	mov	r0, r5
 8006d10:	4621      	mov	r1, r4
 8006d12:	f7ff ff5d 	bl	8006bd0 <__sflush_r>
 8006d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d18:	4605      	mov	r5, r0
 8006d1a:	07da      	lsls	r2, r3, #31
 8006d1c:	d4e0      	bmi.n	8006ce0 <_fflush_r+0xc>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	059b      	lsls	r3, r3, #22
 8006d22:	d4dd      	bmi.n	8006ce0 <_fflush_r+0xc>
 8006d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d26:	f000 f908 	bl	8006f3a <__retarget_lock_release_recursive>
 8006d2a:	e7d9      	b.n	8006ce0 <_fflush_r+0xc>
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <_fflush_r+0x70>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d101      	bne.n	8006d36 <_fflush_r+0x62>
 8006d32:	68ac      	ldr	r4, [r5, #8]
 8006d34:	e7df      	b.n	8006cf6 <_fflush_r+0x22>
 8006d36:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <_fflush_r+0x74>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	bf08      	it	eq
 8006d3c:	68ec      	ldreq	r4, [r5, #12]
 8006d3e:	e7da      	b.n	8006cf6 <_fflush_r+0x22>
 8006d40:	080074b8 	.word	0x080074b8
 8006d44:	080074d8 	.word	0x080074d8
 8006d48:	08007498 	.word	0x08007498

08006d4c <std>:
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	4604      	mov	r4, r0
 8006d52:	e9c0 3300 	strd	r3, r3, [r0]
 8006d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d5a:	6083      	str	r3, [r0, #8]
 8006d5c:	8181      	strh	r1, [r0, #12]
 8006d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d60:	81c2      	strh	r2, [r0, #14]
 8006d62:	6183      	str	r3, [r0, #24]
 8006d64:	4619      	mov	r1, r3
 8006d66:	2208      	movs	r2, #8
 8006d68:	305c      	adds	r0, #92	; 0x5c
 8006d6a:	f7ff f8ff 	bl	8005f6c <memset>
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <std+0x38>)
 8006d70:	6224      	str	r4, [r4, #32]
 8006d72:	6263      	str	r3, [r4, #36]	; 0x24
 8006d74:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <std+0x3c>)
 8006d76:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d78:	4b04      	ldr	r3, [pc, #16]	; (8006d8c <std+0x40>)
 8006d7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d7c:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <std+0x44>)
 8006d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	bf00      	nop
 8006d84:	080070c5 	.word	0x080070c5
 8006d88:	080070e7 	.word	0x080070e7
 8006d8c:	0800711f 	.word	0x0800711f
 8006d90:	08007143 	.word	0x08007143

08006d94 <_cleanup_r>:
 8006d94:	4901      	ldr	r1, [pc, #4]	; (8006d9c <_cleanup_r+0x8>)
 8006d96:	f000 b8af 	b.w	8006ef8 <_fwalk_reent>
 8006d9a:	bf00      	nop
 8006d9c:	08006cd5 	.word	0x08006cd5

08006da0 <__sfmoreglue>:
 8006da0:	2268      	movs	r2, #104	; 0x68
 8006da2:	b570      	push	{r4, r5, r6, lr}
 8006da4:	1e4d      	subs	r5, r1, #1
 8006da6:	4355      	muls	r5, r2
 8006da8:	460e      	mov	r6, r1
 8006daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dae:	f7ff fad5 	bl	800635c <_malloc_r>
 8006db2:	4604      	mov	r4, r0
 8006db4:	b140      	cbz	r0, 8006dc8 <__sfmoreglue+0x28>
 8006db6:	2100      	movs	r1, #0
 8006db8:	e9c0 1600 	strd	r1, r6, [r0]
 8006dbc:	300c      	adds	r0, #12
 8006dbe:	60a0      	str	r0, [r4, #8]
 8006dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dc4:	f7ff f8d2 	bl	8005f6c <memset>
 8006dc8:	4620      	mov	r0, r4
 8006dca:	bd70      	pop	{r4, r5, r6, pc}

08006dcc <__sfp_lock_acquire>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__sfp_lock_acquire+0x8>)
 8006dce:	f000 b8b3 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20000d29 	.word	0x20000d29

08006dd8 <__sfp_lock_release>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__sfp_lock_release+0x8>)
 8006dda:	f000 b8ae 	b.w	8006f3a <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	20000d29 	.word	0x20000d29

08006de4 <__sinit_lock_acquire>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__sinit_lock_acquire+0x8>)
 8006de6:	f000 b8a7 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 8006dea:	bf00      	nop
 8006dec:	20000d2a 	.word	0x20000d2a

08006df0 <__sinit_lock_release>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__sinit_lock_release+0x8>)
 8006df2:	f000 b8a2 	b.w	8006f3a <__retarget_lock_release_recursive>
 8006df6:	bf00      	nop
 8006df8:	20000d2a 	.word	0x20000d2a

08006dfc <__sinit>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4604      	mov	r4, r0
 8006e00:	f7ff fff0 	bl	8006de4 <__sinit_lock_acquire>
 8006e04:	69a3      	ldr	r3, [r4, #24]
 8006e06:	b11b      	cbz	r3, 8006e10 <__sinit+0x14>
 8006e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0c:	f7ff bff0 	b.w	8006df0 <__sinit_lock_release>
 8006e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e14:	6523      	str	r3, [r4, #80]	; 0x50
 8006e16:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <__sinit+0x68>)
 8006e18:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <__sinit+0x6c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	bf08      	it	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	4620      	mov	r0, r4
 8006e26:	bf08      	it	eq
 8006e28:	61a3      	streq	r3, [r4, #24]
 8006e2a:	f000 f81f 	bl	8006e6c <__sfp>
 8006e2e:	6060      	str	r0, [r4, #4]
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 f81b 	bl	8006e6c <__sfp>
 8006e36:	60a0      	str	r0, [r4, #8]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f817 	bl	8006e6c <__sfp>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2104      	movs	r1, #4
 8006e42:	60e0      	str	r0, [r4, #12]
 8006e44:	6860      	ldr	r0, [r4, #4]
 8006e46:	f7ff ff81 	bl	8006d4c <std>
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	2109      	movs	r1, #9
 8006e4e:	68a0      	ldr	r0, [r4, #8]
 8006e50:	f7ff ff7c 	bl	8006d4c <std>
 8006e54:	2202      	movs	r2, #2
 8006e56:	2112      	movs	r1, #18
 8006e58:	68e0      	ldr	r0, [r4, #12]
 8006e5a:	f7ff ff77 	bl	8006d4c <std>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61a3      	str	r3, [r4, #24]
 8006e62:	e7d1      	b.n	8006e08 <__sinit+0xc>
 8006e64:	080072b0 	.word	0x080072b0
 8006e68:	08006d95 	.word	0x08006d95

08006e6c <__sfp>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	4607      	mov	r7, r0
 8006e70:	f7ff ffac 	bl	8006dcc <__sfp_lock_acquire>
 8006e74:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <__sfp+0x84>)
 8006e76:	681e      	ldr	r6, [r3, #0]
 8006e78:	69b3      	ldr	r3, [r6, #24]
 8006e7a:	b913      	cbnz	r3, 8006e82 <__sfp+0x16>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff ffbd 	bl	8006dfc <__sinit>
 8006e82:	3648      	adds	r6, #72	; 0x48
 8006e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	d503      	bpl.n	8006e94 <__sfp+0x28>
 8006e8c:	6833      	ldr	r3, [r6, #0]
 8006e8e:	b30b      	cbz	r3, 8006ed4 <__sfp+0x68>
 8006e90:	6836      	ldr	r6, [r6, #0]
 8006e92:	e7f7      	b.n	8006e84 <__sfp+0x18>
 8006e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e98:	b9d5      	cbnz	r5, 8006ed0 <__sfp+0x64>
 8006e9a:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <__sfp+0x88>)
 8006e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ea0:	60e3      	str	r3, [r4, #12]
 8006ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ea4:	f000 f847 	bl	8006f36 <__retarget_lock_init_recursive>
 8006ea8:	f7ff ff96 	bl	8006dd8 <__sfp_lock_release>
 8006eac:	2208      	movs	r2, #8
 8006eae:	4629      	mov	r1, r5
 8006eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006eb8:	6025      	str	r5, [r4, #0]
 8006eba:	61a5      	str	r5, [r4, #24]
 8006ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ec0:	f7ff f854 	bl	8005f6c <memset>
 8006ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ecc:	4620      	mov	r0, r4
 8006ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed0:	3468      	adds	r4, #104	; 0x68
 8006ed2:	e7d9      	b.n	8006e88 <__sfp+0x1c>
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f7ff ff62 	bl	8006da0 <__sfmoreglue>
 8006edc:	4604      	mov	r4, r0
 8006ede:	6030      	str	r0, [r6, #0]
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1d5      	bne.n	8006e90 <__sfp+0x24>
 8006ee4:	f7ff ff78 	bl	8006dd8 <__sfp_lock_release>
 8006ee8:	230c      	movs	r3, #12
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	e7ee      	b.n	8006ecc <__sfp+0x60>
 8006eee:	bf00      	nop
 8006ef0:	080072b0 	.word	0x080072b0
 8006ef4:	ffff0001 	.word	0xffff0001

08006ef8 <_fwalk_reent>:
 8006ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	4606      	mov	r6, r0
 8006efe:	4688      	mov	r8, r1
 8006f00:	2700      	movs	r7, #0
 8006f02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006f0e:	d505      	bpl.n	8006f1c <_fwalk_reent+0x24>
 8006f10:	6824      	ldr	r4, [r4, #0]
 8006f12:	2c00      	cmp	r4, #0
 8006f14:	d1f7      	bne.n	8006f06 <_fwalk_reent+0xe>
 8006f16:	4638      	mov	r0, r7
 8006f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f1c:	89ab      	ldrh	r3, [r5, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d907      	bls.n	8006f32 <_fwalk_reent+0x3a>
 8006f22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f26:	3301      	adds	r3, #1
 8006f28:	d003      	beq.n	8006f32 <_fwalk_reent+0x3a>
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	47c0      	blx	r8
 8006f30:	4307      	orrs	r7, r0
 8006f32:	3568      	adds	r5, #104	; 0x68
 8006f34:	e7e9      	b.n	8006f0a <_fwalk_reent+0x12>

08006f36 <__retarget_lock_init_recursive>:
 8006f36:	4770      	bx	lr

08006f38 <__retarget_lock_acquire_recursive>:
 8006f38:	4770      	bx	lr

08006f3a <__retarget_lock_release_recursive>:
 8006f3a:	4770      	bx	lr

08006f3c <__swhatbuf_r>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	460e      	mov	r6, r1
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	4614      	mov	r4, r2
 8006f46:	2900      	cmp	r1, #0
 8006f48:	461d      	mov	r5, r3
 8006f4a:	b096      	sub	sp, #88	; 0x58
 8006f4c:	da08      	bge.n	8006f60 <__swhatbuf_r+0x24>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	061a      	lsls	r2, r3, #24
 8006f58:	d410      	bmi.n	8006f7c <__swhatbuf_r+0x40>
 8006f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f5e:	e00e      	b.n	8006f7e <__swhatbuf_r+0x42>
 8006f60:	466a      	mov	r2, sp
 8006f62:	f000 f915 	bl	8007190 <_fstat_r>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	dbf1      	blt.n	8006f4e <__swhatbuf_r+0x12>
 8006f6a:	9a01      	ldr	r2, [sp, #4]
 8006f6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f74:	425a      	negs	r2, r3
 8006f76:	415a      	adcs	r2, r3
 8006f78:	602a      	str	r2, [r5, #0]
 8006f7a:	e7ee      	b.n	8006f5a <__swhatbuf_r+0x1e>
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	2000      	movs	r0, #0
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	b016      	add	sp, #88	; 0x58
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f88 <__smakebuf_r>:
 8006f88:	898b      	ldrh	r3, [r1, #12]
 8006f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f8c:	079d      	lsls	r5, r3, #30
 8006f8e:	4606      	mov	r6, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	d507      	bpl.n	8006fa4 <__smakebuf_r+0x1c>
 8006f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	6163      	str	r3, [r4, #20]
 8006fa0:	b002      	add	sp, #8
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	466a      	mov	r2, sp
 8006fa6:	ab01      	add	r3, sp, #4
 8006fa8:	f7ff ffc8 	bl	8006f3c <__swhatbuf_r>
 8006fac:	9900      	ldr	r1, [sp, #0]
 8006fae:	4605      	mov	r5, r0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7ff f9d3 	bl	800635c <_malloc_r>
 8006fb6:	b948      	cbnz	r0, 8006fcc <__smakebuf_r+0x44>
 8006fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fbc:	059a      	lsls	r2, r3, #22
 8006fbe:	d4ef      	bmi.n	8006fa0 <__smakebuf_r+0x18>
 8006fc0:	f023 0303 	bic.w	r3, r3, #3
 8006fc4:	f043 0302 	orr.w	r3, r3, #2
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	e7e3      	b.n	8006f94 <__smakebuf_r+0xc>
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <__smakebuf_r+0x7c>)
 8006fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	6020      	str	r0, [r4, #0]
 8006fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd8:	81a3      	strh	r3, [r4, #12]
 8006fda:	9b00      	ldr	r3, [sp, #0]
 8006fdc:	6120      	str	r0, [r4, #16]
 8006fde:	6163      	str	r3, [r4, #20]
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	b15b      	cbz	r3, 8006ffc <__smakebuf_r+0x74>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fea:	f000 f8e3 	bl	80071b4 <_isatty_r>
 8006fee:	b128      	cbz	r0, 8006ffc <__smakebuf_r+0x74>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	89a0      	ldrh	r0, [r4, #12]
 8006ffe:	4305      	orrs	r5, r0
 8007000:	81a5      	strh	r5, [r4, #12]
 8007002:	e7cd      	b.n	8006fa0 <__smakebuf_r+0x18>
 8007004:	08006d95 	.word	0x08006d95

08007008 <memchr>:
 8007008:	4603      	mov	r3, r0
 800700a:	b510      	push	{r4, lr}
 800700c:	b2c9      	uxtb	r1, r1
 800700e:	4402      	add	r2, r0
 8007010:	4293      	cmp	r3, r2
 8007012:	4618      	mov	r0, r3
 8007014:	d101      	bne.n	800701a <memchr+0x12>
 8007016:	2000      	movs	r0, #0
 8007018:	e003      	b.n	8007022 <memchr+0x1a>
 800701a:	7804      	ldrb	r4, [r0, #0]
 800701c:	3301      	adds	r3, #1
 800701e:	428c      	cmp	r4, r1
 8007020:	d1f6      	bne.n	8007010 <memchr+0x8>
 8007022:	bd10      	pop	{r4, pc}

08007024 <__malloc_lock>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__malloc_lock+0x8>)
 8007026:	f7ff bf87 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 800702a:	bf00      	nop
 800702c:	20000d28 	.word	0x20000d28

08007030 <__malloc_unlock>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <__malloc_unlock+0x8>)
 8007032:	f7ff bf82 	b.w	8006f3a <__retarget_lock_release_recursive>
 8007036:	bf00      	nop
 8007038:	20000d28 	.word	0x20000d28

0800703c <_raise_r>:
 800703c:	291f      	cmp	r1, #31
 800703e:	b538      	push	{r3, r4, r5, lr}
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	d904      	bls.n	8007050 <_raise_r+0x14>
 8007046:	2316      	movs	r3, #22
 8007048:	6003      	str	r3, [r0, #0]
 800704a:	f04f 30ff 	mov.w	r0, #4294967295
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007052:	b112      	cbz	r2, 800705a <_raise_r+0x1e>
 8007054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007058:	b94b      	cbnz	r3, 800706e <_raise_r+0x32>
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f830 	bl	80070c0 <_getpid_r>
 8007060:	462a      	mov	r2, r5
 8007062:	4601      	mov	r1, r0
 8007064:	4620      	mov	r0, r4
 8007066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800706a:	f000 b817 	b.w	800709c <_kill_r>
 800706e:	2b01      	cmp	r3, #1
 8007070:	d00a      	beq.n	8007088 <_raise_r+0x4c>
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	d103      	bne.n	800707e <_raise_r+0x42>
 8007076:	2316      	movs	r3, #22
 8007078:	6003      	str	r3, [r0, #0]
 800707a:	2001      	movs	r0, #1
 800707c:	e7e7      	b.n	800704e <_raise_r+0x12>
 800707e:	2400      	movs	r4, #0
 8007080:	4628      	mov	r0, r5
 8007082:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007086:	4798      	blx	r3
 8007088:	2000      	movs	r0, #0
 800708a:	e7e0      	b.n	800704e <_raise_r+0x12>

0800708c <raise>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <raise+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f7ff bfd3 	b.w	800703c <_raise_r>
 8007096:	bf00      	nop
 8007098:	20000418 	.word	0x20000418

0800709c <_kill_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	2300      	movs	r3, #0
 80070a0:	4d06      	ldr	r5, [pc, #24]	; (80070bc <_kill_r+0x20>)
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f7fe fe4a 	bl	8005d42 <_kill>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d102      	bne.n	80070b8 <_kill_r+0x1c>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b103      	cbz	r3, 80070b8 <_kill_r+0x1c>
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	bf00      	nop
 80070bc:	20000d2c 	.word	0x20000d2c

080070c0 <_getpid_r>:
 80070c0:	f7fe be38 	b.w	8005d34 <_getpid>

080070c4 <__sread>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	460c      	mov	r4, r1
 80070c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070cc:	f000 f894 	bl	80071f8 <_read_r>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	bfab      	itete	ge
 80070d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070d6:	89a3      	ldrhlt	r3, [r4, #12]
 80070d8:	181b      	addge	r3, r3, r0
 80070da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070de:	bfac      	ite	ge
 80070e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070e2:	81a3      	strhlt	r3, [r4, #12]
 80070e4:	bd10      	pop	{r4, pc}

080070e6 <__swrite>:
 80070e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	461f      	mov	r7, r3
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	4605      	mov	r5, r0
 80070f0:	05db      	lsls	r3, r3, #23
 80070f2:	460c      	mov	r4, r1
 80070f4:	4616      	mov	r6, r2
 80070f6:	d505      	bpl.n	8007104 <__swrite+0x1e>
 80070f8:	2302      	movs	r3, #2
 80070fa:	2200      	movs	r2, #0
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	f000 f868 	bl	80071d4 <_lseek_r>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	4632      	mov	r2, r6
 8007108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	4628      	mov	r0, r5
 8007110:	463b      	mov	r3, r7
 8007112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800711a:	f000 b817 	b.w	800714c <_write_r>

0800711e <__sseek>:
 800711e:	b510      	push	{r4, lr}
 8007120:	460c      	mov	r4, r1
 8007122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007126:	f000 f855 	bl	80071d4 <_lseek_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	bf15      	itete	ne
 8007130:	6560      	strne	r0, [r4, #84]	; 0x54
 8007132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800713a:	81a3      	strheq	r3, [r4, #12]
 800713c:	bf18      	it	ne
 800713e:	81a3      	strhne	r3, [r4, #12]
 8007140:	bd10      	pop	{r4, pc}

08007142 <__sclose>:
 8007142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007146:	f000 b813 	b.w	8007170 <_close_r>
	...

0800714c <_write_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	2200      	movs	r2, #0
 8007156:	4d05      	ldr	r5, [pc, #20]	; (800716c <_write_r+0x20>)
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7fe fe28 	bl	8005db0 <_write>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_write_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_write_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20000d2c 	.word	0x20000d2c

08007170 <_close_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	2300      	movs	r3, #0
 8007174:	4d05      	ldr	r5, [pc, #20]	; (800718c <_close_r+0x1c>)
 8007176:	4604      	mov	r4, r0
 8007178:	4608      	mov	r0, r1
 800717a:	602b      	str	r3, [r5, #0]
 800717c:	f7fe fe34 	bl	8005de8 <_close>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_close_r+0x1a>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_close_r+0x1a>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	20000d2c 	.word	0x20000d2c

08007190 <_fstat_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	2300      	movs	r3, #0
 8007194:	4d06      	ldr	r5, [pc, #24]	; (80071b0 <_fstat_r+0x20>)
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	602b      	str	r3, [r5, #0]
 800719e:	f7fe fe2e 	bl	8005dfe <_fstat>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	d102      	bne.n	80071ac <_fstat_r+0x1c>
 80071a6:	682b      	ldr	r3, [r5, #0]
 80071a8:	b103      	cbz	r3, 80071ac <_fstat_r+0x1c>
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
 80071ae:	bf00      	nop
 80071b0:	20000d2c 	.word	0x20000d2c

080071b4 <_isatty_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	2300      	movs	r3, #0
 80071b8:	4d05      	ldr	r5, [pc, #20]	; (80071d0 <_isatty_r+0x1c>)
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7fe fe2c 	bl	8005e1c <_isatty>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_isatty_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_isatty_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20000d2c 	.word	0x20000d2c

080071d4 <_lseek_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	2200      	movs	r2, #0
 80071de:	4d05      	ldr	r5, [pc, #20]	; (80071f4 <_lseek_r+0x20>)
 80071e0:	602a      	str	r2, [r5, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7fe fe24 	bl	8005e30 <_lseek>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_lseek_r+0x1e>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_lseek_r+0x1e>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20000d2c 	.word	0x20000d2c

080071f8 <_read_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	2200      	movs	r2, #0
 8007202:	4d05      	ldr	r5, [pc, #20]	; (8007218 <_read_r+0x20>)
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fe fdb5 	bl	8005d76 <_read>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_read_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_read_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	20000d2c 	.word	0x20000d2c

0800721c <_init>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr

08007228 <_fini>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	bf00      	nop
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr
