
NFC_and_Barcode_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000855c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800892c  0800892c  000204c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800892c  0800892c  000204c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800892c  0800892c  000204c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c4  20000000  08008934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b8  200004c8  08008df8  000204c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  08008df8  00020e80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbc3  00000000  00000000  000204ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298d  00000000  00000000  0002e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00030a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010be3  00000000  00000000  00032530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e14d  00000000  00000000  00043113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ccb6  00000000  00000000  00051260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009df16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f8  00000000  00000000  0009df68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200004c8 	.word	0x200004c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008650 	.word	0x08008650

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200004cc 	.word	0x200004cc
 8000148:	08008650 	.word	0x08008650

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SystemInit>:
    *         SystemCoreClock variable.
    * @note   This function should be used only after reset.
    * @param  None
    * @retval None
    */
void SystemInit() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	SetSysClock();
 8000160:	f000 f802 	bl	8000168 <SetSysClock>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800016c:	f000 f802 	bl	8000174 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}

08000174 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	2300      	movs	r3, #0
 8000180:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000182:	4b3a      	ldr	r3, [pc, #232]	; (800026c <SetSysClockTo72+0xf8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a39      	ldr	r2, [pc, #228]	; (800026c <SetSysClockTo72+0xf8>)
 8000188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800018c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800018e:	4b37      	ldr	r3, [pc, #220]	; (800026c <SetSysClockTo72+0xf8>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000196:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <SetSysClockTo72+0x38>
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001aa:	d1f0      	bne.n	800018e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001ac:	4b2f      	ldr	r3, [pc, #188]	; (800026c <SetSysClockTo72+0xf8>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80001b8:	2301      	movs	r3, #1
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	e001      	b.n	80001c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d14b      	bne.n	8000260 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001c8:	4b29      	ldr	r3, [pc, #164]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a28      	ldr	r2, [pc, #160]	; (8000270 <SetSysClockTo72+0xfc>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001d4:	4b26      	ldr	r3, [pc, #152]	; (8000270 <SetSysClockTo72+0xfc>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <SetSysClockTo72+0xfc>)
 80001da:	f023 0303 	bic.w	r3, r3, #3
 80001de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a22      	ldr	r2, [pc, #136]	; (8000270 <SetSysClockTo72+0xfc>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001ec:	4b1f      	ldr	r3, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <SetSysClockTo72+0xf8>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f6:	4a1d      	ldr	r2, [pc, #116]	; (800026c <SetSysClockTo72+0xf8>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <SetSysClockTo72+0xf8>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <SetSysClockTo72+0xf8>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000206:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <SetSysClockTo72+0xf8>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <SetSysClockTo72+0xf8>)
 800020e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000212:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <SetSysClockTo72+0xf8>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <SetSysClockTo72+0xf8>)
 800021a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800021e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <SetSysClockTo72+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <SetSysClockTo72+0xf8>)
 8000226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800022c:	bf00      	nop
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <SetSysClockTo72+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SetSysClockTo72+0xf8>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <SetSysClockTo72+0xf8>)
 8000240:	f023 0303 	bic.w	r3, r3, #3
 8000244:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <SetSysClockTo72+0xf8>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <SetSysClockTo72+0xf8>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000252:	bf00      	nop
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SetSysClockTo72+0xf8>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	f003 030c 	and.w	r3, r3, #12
 800025c:	2b08      	cmp	r3, #8
 800025e:	d1f9      	bne.n	8000254 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000
 8000270:	40022000 	.word	0x40022000

08000274 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da0b      	bge.n	80002a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <NVIC_SetPriority+0x4c>)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 030f 	and.w	r3, r3, #15
 8000294:	3b04      	subs	r3, #4
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800029e:	e009      	b.n	80002b4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <NVIC_SetPriority+0x50>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	0112      	lsls	r2, r2, #4
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002d6:	d301      	bcc.n	80002dc <SysTick_Config+0x14>
 80002d8:	2301      	movs	r3, #1
 80002da:	e011      	b.n	8000300 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <SysTick_Config+0x40>)
 80002e4:	3b01      	subs	r3, #1
 80002e6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80002e8:	210f      	movs	r1, #15
 80002ea:	f04f 30ff 	mov.w	r0, #4294967295
 80002ee:	f7ff ffc1 	bl	8000274 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SysTick_Config+0x40>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SysTick_Config+0x40>)
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e010 	.word	0xe000e010

0800030c <LCD_PN532_CreateRunInfoString>:

extern char fl_bar_buff[16];
extern char nfc_uid_arr[10];


void LCD_PN532_CreateRunInfoString(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	strcpy( s_pn_info, s_pn_fchip);	//копирую первую заготовку в пустую строку
 8000310:	4912      	ldr	r1, [pc, #72]	; (800035c <LCD_PN532_CreateRunInfoString+0x50>)
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000314:	f007 f85b 	bl	80073ce <strcpy>
	strcat(s_pn_info, s_pn_nchip);	//копирую в заготовку пробельную строку
 8000318:	4912      	ldr	r1, [pc, #72]	; (8000364 <LCD_PN532_CreateRunInfoString+0x58>)
 800031a:	4811      	ldr	r0, [pc, #68]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800031c:	f007 f848 	bl	80073b0 <strcat>
	strcat(s_pn_info,s_space );
 8000320:	4911      	ldr	r1, [pc, #68]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000324:	f007 f844 	bl	80073b0 <strcat>
	strcat(s_pn_info,s_pn_wfchip );
 8000328:	4910      	ldr	r1, [pc, #64]	; (800036c <LCD_PN532_CreateRunInfoString+0x60>)
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800032c:	f007 f840 	bl	80073b0 <strcat>
	strcat(s_pn_info, s_pn_fw1nchip);
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <LCD_PN532_CreateRunInfoString+0x64>)
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000334:	f007 f83c 	bl	80073b0 <strcat>
	strcat(s_pn_info,s_pn_fw2nchip );
 8000338:	490e      	ldr	r1, [pc, #56]	; (8000374 <LCD_PN532_CreateRunInfoString+0x68>)
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800033c:	f007 f838 	bl	80073b0 <strcat>
	strcat(s_pn_info,s_space );
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <LCD_PN532_CreateRunInfoString+0x5c>)
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000344:	f007 f834 	bl	80073b0 <strcat>
	strcat(s_pn_info,s_pn_suppchip);
 8000348:	490b      	ldr	r1, [pc, #44]	; (8000378 <LCD_PN532_CreateRunInfoString+0x6c>)
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 800034c:	f007 f830 	bl	80073b0 <strcat>
	strcat(s_pn_info,s_pn_suchip);
 8000350:	490a      	ldr	r1, [pc, #40]	; (800037c <LCD_PN532_CreateRunInfoString+0x70>)
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <LCD_PN532_CreateRunInfoString+0x54>)
 8000354:	f007 f82c 	bl	80073b0 <strcat>

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200001ec 	.word	0x200001ec
 8000360:	20000748 	.word	0x20000748
 8000364:	200001dc 	.word	0x200001dc
 8000368:	200001d0 	.word	0x200001d0
 800036c:	200001fc 	.word	0x200001fc
 8000370:	200001e0 	.word	0x200001e0
 8000374:	200001e4 	.word	0x200001e4
 8000378:	2000020c 	.word	0x2000020c
 800037c:	200001e8 	.word	0x200001e8

08000380 <LCD_BAR_CreateRunInfoString>:


//Сборка сборка бегущей строки с версией ПО сканера штрих-кодов модуля для LCD
void LCD_BAR_CreateRunInfoString(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
//				s_bar_info++;
//			}
//		}
//	}

	char *ptr_bar_ver_info=strtok(ScanerVersion,"\r\n");
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LCD_BAR_CreateRunInfoString+0x40>)
 800038a:	f007 f87f 	bl	800748c <strtok>
 800038e:	6078      	str	r0, [r7, #4]
	strcpy(s_bar_info,ptr_bar_ver_info);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 8000394:	f007 f81b 	bl	80073ce <strcpy>
	strcat(s_bar_info,s_space);
 8000398:	490b      	ldr	r1, [pc, #44]	; (80003c8 <LCD_BAR_CreateRunInfoString+0x48>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 800039c:	f007 f808 	bl	80073b0 <strcat>
	ptr_bar_ver_info=strtok(NULL,"\r\n");
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <LCD_BAR_CreateRunInfoString+0x3c>)
 80003a2:	2000      	movs	r0, #0
 80003a4:	f007 f872 	bl	800748c <strtok>
 80003a8:	6078      	str	r0, [r7, #4]
	strcat(s_bar_info,ptr_bar_ver_info);
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <LCD_BAR_CreateRunInfoString+0x44>)
 80003ae:	f006 ffff 	bl	80073b0 <strcat>

//	char *s_bar_info=strcat(s_bar_ver_info,s_bar_site_info);
//	strcpy(s_bar_info,s_bar_ver_info);


}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	08008668 	.word	0x08008668
 80003c0:	20000d90 	.word	0x20000d90
 80003c4:	200007c8 	.word	0x200007c8
 80003c8:	200001d0 	.word	0x200001d0

080003cc <PN532_Write_Data>:


uint8_t PN532_Write_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b092      	sub	sp, #72	; 0x48
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	72fb      	strb	r3, [r7, #11]
 80003da:	4613      	mov	r3, r2
 80003dc:	72bb      	strb	r3, [r7, #10]
//	uint8_t success=0;	// Flag to check if there was an error with the PN532
	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 80003de:	4a51      	ldr	r2, [pc, #324]	; (8000524 <PN532_Write_Data+0x158>)
 80003e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e8:	6018      	str	r0, [r3, #0]
 80003ea:	3304      	adds	r3, #4
 80003ec:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

	bool authenticated = FALSE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t blockBuffer[16];                  // Buffer to store block contents
	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 80003f4:	4a4c      	ldr	r2, [pc, #304]	; (8000528 <PN532_Write_Data+0x15c>)
 80003f6:	f107 0320 	add.w	r3, r7, #32
 80003fa:	6812      	ldr	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	8019      	strh	r1, [r3, #0]
 8000400:	3302      	adds	r3, #2
 8000402:	0c12      	lsrs	r2, r2, #16
 8000404:	701a      	strb	r2, [r3, #0]
	//uint8_t idx = 0;
	uint8_t numOfSector = 16;                 // Assume Mifare Classic 1K for now (16 4-block sectors)
 8000406:	2310      	movs	r3, #16
 8000408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t i=0;
 800040c:	2300      	movs	r3, #0
 800040e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    uint8_t RdWrDataBlock[16];


	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8000412:	7af9      	ldrb	r1, [r7, #11]
 8000414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2301      	movs	r3, #1
 800041c:	2200      	movs	r2, #0
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f004 fb78 	bl	8004b14 <PN532_mifareclassic_AuthenticateBlock>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d105      	bne.n	8000436 <PN532_Write_Data+0x6a>
	        {
	          return res_excep=1;	//выход из-за ошибки аутентификации блока
 800042a:	2301      	movs	r3, #1
 800042c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000430:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000434:	e072      	b.n	800051c <PN532_Write_Data+0x150>
	        }

	        res_excep=PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	2001      	movs	r0, #1
 800043e:	f004 fbdf 	bl	8004c00 <PN532_mifareclassic_ReadDataBlock>
 8000442:	4603      	mov	r3, r0
 8000444:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	        if (!(PN532_mifareclassic_ReadDataBlock(1, RdWrDataBlock)))
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	f004 fbd6 	bl	8004c00 <PN532_mifareclassic_ReadDataBlock>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d105      	bne.n	8000466 <PN532_Write_Data+0x9a>
	        {
	          return res_excep=2;	//выход из-за ошибки чтения блока
 800045a:	2302      	movs	r3, #2
 800045c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000460:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000464:	e05a      	b.n	800051c <PN532_Write_Data+0x150>
	        }
	        else{

	    		  for(i=0;i<4;i++){
 8000466:	2300      	movs	r3, #0
 8000468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800046c:	e00f      	b.n	800048e <PN532_Write_Data+0xc2>
	    			  RdWrDataBlock[i]=data[i];
 800046e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	441a      	add	r2, r3
 8000476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	3340      	adds	r3, #64	; 0x40
 800047e:	443b      	add	r3, r7
 8000480:	f803 2c30 	strb.w	r2, [r3, #-48]
	    		  for(i=0;i<4;i++){
 8000484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000488:	3301      	adds	r3, #1
 800048a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800048e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000492:	2b03      	cmp	r3, #3
 8000494:	d9eb      	bls.n	800046e <PN532_Write_Data+0xa2>
	    		}



	    		  if(!(PN532_mifareclassic_WriteDataBlock(1,RdWrDataBlock))){
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	2001      	movs	r0, #1
 800049e:	f004 fbeb 	bl	8004c78 <PN532_mifareclassic_WriteDataBlock>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d105      	bne.n	80004b4 <PN532_Write_Data+0xe8>
	    			  return res_excep=3;	//выход из-за ошибки запииси блока
 80004a8:	2303      	movs	r3, #3
 80004aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80004ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80004b2:	e033      	b.n	800051c <PN532_Write_Data+0x150>
	    		  }

	        // Step 3: Reset both keys to 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
	        memcpy(blockBuffer, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80004bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c0:	6018      	str	r0, [r3, #0]
 80004c2:	3304      	adds	r3, #4
 80004c4:	8019      	strh	r1, [r3, #0]
	        memcpy(blockBuffer + 6, blankAccessBits, sizeof(blankAccessBits));
 80004c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ca:	3306      	adds	r3, #6
 80004cc:	461a      	mov	r2, r3
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	8819      	ldrh	r1, [r3, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	8011      	strh	r1, [r2, #0]
 80004d8:	7093      	strb	r3, [r2, #2]
	        blockBuffer[9] = 0x69;
 80004da:	2369      	movs	r3, #105	; 0x69
 80004dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	        memcpy(blockBuffer + 10, KEY_DEFAULT_KEYAB, sizeof(KEY_DEFAULT_KEYAB));
 80004e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e4:	330a      	adds	r3, #10
 80004e6:	461a      	mov	r2, r3
 80004e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	6010      	str	r0, [r2, #0]
 80004f0:	889b      	ldrh	r3, [r3, #4]
 80004f2:	8093      	strh	r3, [r2, #4]

	         //Step 4: Write the trailer block
	        if (!(PN532_mifareclassic_WriteDataBlock(3, blockBuffer)))
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4619      	mov	r1, r3
 80004fa:	2003      	movs	r0, #3
 80004fc:	f004 fbbc 	bl	8004c78 <PN532_mifareclassic_WriteDataBlock>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d105      	bne.n	8000512 <PN532_Write_Data+0x146>
	        {
	          return res_excep=4;	//выход из-за ошибки записи ключа блока
 8000506:	2304      	movs	r3, #4
 8000508:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800050c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000510:	e004      	b.n	800051c <PN532_Write_Data+0x150>
	        }else return res_excep=0;
 8000512:	2300      	movs	r3, #0
 8000514:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000518:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c

	        }

}
 800051c:	4618      	mov	r0, r3
 800051e:	3740      	adds	r7, #64	; 0x40
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	0800866c 	.word	0x0800866c
 8000528:	08008674 	.word	0x08008674

0800052c <main>:





int main(void){
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0

	g_sSum[SUM_STR_LEN + 1] = '\0';
 8000532:	4ba5      	ldr	r3, [pc, #660]	; (80007c8 <main+0x29c>)
 8000534:	2200      	movs	r2, #0
 8000536:	721a      	strb	r2, [r3, #8]


	rtc_cal rtc_time;
	RTC_INIT();
 8000538:	f004 fc28 	bl	8004d8c <RTC_INIT>

	RCC_PLLCmd(DISABLE);
 800053c:	2000      	movs	r0, #0
 800053e:	f005 ff61 	bl	8006404 <RCC_PLLCmd>
		RCC_HSEConfig(RCC_HSE_ON);
 8000542:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000546:	f005 ff11 	bl	800636c <RCC_HSEConfig>
		RCC_ClockSecuritySystemCmd(ENABLE);
 800054a:	2001      	movs	r0, #1
 800054c:	f006 f878 	bl	8006640 <RCC_ClockSecuritySystemCmd>
	    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000550:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000554:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000558:	f005 ff36 	bl	80063c8 <RCC_PLLConfig>
	    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800055c:	2002      	movs	r0, #2
 800055e:	f005 ff61 	bl	8006424 <RCC_SYSCLKConfig>

		uint32_t tmpreg = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
		tmpreg=RCC->CFGR;
 8000566:	4b99      	ldr	r3, [pc, #612]	; (80007cc <main+0x2a0>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
		RCC->CFGR=tmpreg & 0xFFFFF0FF;
 800056c:	4a97      	ldr	r2, [pc, #604]	; (80007cc <main+0x2a0>)
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000574:	6053      	str	r3, [r2, #4]
		//RCC->CFGR=tmpreg|0x00000400;//HCLK / 2 - значение по умолчанию? (36МГц)
		RCC->CFGR=tmpreg|0x00000500;//HCLK / 4
 8000576:	4a95      	ldr	r2, [pc, #596]	; (80007cc <main+0x2a0>)
 8000578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800057e:	6053      	str	r3, [r2, #4]

		RCC->CFGR|=RCC_CFGR_USBPRE;	//предделитель для usb
 8000580:	4b92      	ldr	r3, [pc, #584]	; (80007cc <main+0x2a0>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a91      	ldr	r2, [pc, #580]	; (80007cc <main+0x2a0>)
 8000586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058a:	6053      	str	r3, [r2, #4]

		//RCC->CFGR=tmpreg | 0x00000600;//HCLK / 8

	    RCC_PLLCmd(ENABLE);
 800058c:	2001      	movs	r0, #1
 800058e:	f005 ff39 	bl	8006404 <RCC_PLLCmd>

		/* SysTick end of count event each 1 ms */
		RCC_GetClocksFreq ( &RCC_Clocks );
 8000592:	488f      	ldr	r0, [pc, #572]	; (80007d0 <main+0x2a4>)
 8000594:	f005 ff62 	bl	800645c <RCC_GetClocksFreq>
		SysTick_Config ( RCC_Clocks.HCLK_Frequency / 1000 );
 8000598:	4b8d      	ldr	r3, [pc, #564]	; (80007d0 <main+0x2a4>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a8d      	ldr	r2, [pc, #564]	; (80007d4 <main+0x2a8>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe8f 	bl	80002c8 <SysTick_Config>

		btnpress=0;
 80005aa:	4b8b      	ldr	r3, [pc, #556]	; (80007d8 <main+0x2ac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

		RTC_SET_COUNTER(timer);
 80005b0:	4b8a      	ldr	r3, [pc, #552]	; (80007dc <main+0x2b0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fc7b 	bl	8004eb0 <RTC_SET_COUNTER>


		 LCD_Init();
 80005ba:	f003 fe51 	bl	8004260 <LCD_Init>
		BTN_Init();
 80005be:	f002 faf7 	bl	8002bb0 <BTN_Init>
		u8_btnstate=GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN );
 80005c2:	2101      	movs	r1, #1
 80005c4:	4886      	ldr	r0, [pc, #536]	; (80007e0 <main+0x2b4>)
 80005c6:	f005 fd27 	bl	8006018 <GPIO_ReadInputDataBit>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <main+0x2b8>)
 80005d0:	701a      	strb	r2, [r3, #0]
		previousState=u8_btnstate;
 80005d2:	4b84      	ldr	r3, [pc, #528]	; (80007e4 <main+0x2b8>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b84      	ldr	r3, [pc, #528]	; (80007e8 <main+0x2bc>)
 80005d8:	701a      	strb	r2, [r3, #0]
		 LED_Init();
 80005da:	f002 fac9 	bl	8002b70 <LED_Init>

		 spi_gpio_init();
 80005de:	f002 ff75 	bl	80034cc <spi_gpio_init>

		   Usart2Init();
 80005e2:	f006 fbd9 	bl	8006d98 <Usart2Init>
			SCAN_UsartInit();
 80005e6:	f006 fc57 	bl	8006e98 <SCAN_UsartInit>
			PN532_SPIInit();
 80005ea:	f005 f8d1 	bl	8005790 <PN532_SPIInit>
	//		SPI_FLASH_INIT();
	//		jedec_test = spiFlash_readJEDECDesc();



			nfc_cntcomand=0;
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <main+0x2c0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]


			statusDevice=ST_DEV_ALL_ERR;
 80005f4:	4b7e      	ldr	r3, [pc, #504]	; (80007f0 <main+0x2c4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]

				uint32_t buttonTick = GetTickCount();
 80005fa:	f002 fcb5 	bl	8002f68 <GetTickCount>
 80005fe:	62b8      	str	r0, [r7, #40]	; 0x28
				uint32_t ledTick1 = GetTickCount();
 8000600:	f002 fcb2 	bl	8002f68 <GetTickCount>
 8000604:	6278      	str	r0, [r7, #36]	; 0x24
				uint32_t ledTick2 = ledTick1;
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	623b      	str	r3, [r7, #32]

				uint32_t versiondata;
				uint32_t st;


				Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
 800060a:	487a      	ldr	r0, [pc, #488]	; (80007f4 <main+0x2c8>)
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	4619      	mov	r1, r3
 8000614:	4877      	ldr	r0, [pc, #476]	; (80007f4 <main+0x2c8>)
 8000616:	f006 fc17 	bl	8006e48 <Usart2_SendData>
				Usart2_SendData(s_pc_scanner,strlen(s_pc_scanner));
 800061a:	4877      	ldr	r0, [pc, #476]	; (80007f8 <main+0x2cc>)
 800061c:	f7ff fd96 	bl	800014c <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	4619      	mov	r1, r3
 8000624:	4874      	ldr	r0, [pc, #464]	; (80007f8 <main+0x2cc>)
 8000626:	f006 fc0f 	bl	8006e48 <Usart2_SendData>
				Usart2_SendData(s_pc_test,strlen(s_pc_test));
 800062a:	4874      	ldr	r0, [pc, #464]	; (80007fc <main+0x2d0>)
 800062c:	f7ff fd8e 	bl	800014c <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	4871      	ldr	r0, [pc, #452]	; (80007fc <main+0x2d0>)
 8000636:	f006 fc07 	bl	8006e48 <Usart2_SendData>


			LCD_RunStringDevInfo ( s_lcd_hello,s_lcd_scanner,RUN_STR_DELAY_TST);
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4970      	ldr	r1, [pc, #448]	; (8000800 <main+0x2d4>)
 800063e:	4871      	ldr	r0, [pc, #452]	; (8000804 <main+0x2d8>)
 8000640:	f003 fbd0 	bl	8003de4 <LCD_RunStringDevInfo>


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000644:	bf00      	nop
 8000646:	4b70      	ldr	r3, [pc, #448]	; (8000808 <main+0x2dc>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d006      	beq.n	800065e <main+0x132>
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	486e      	ldr	r0, [pc, #440]	; (800080c <main+0x2e0>)
 8000654:	f006 f8ee 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f3      	bne.n	8000646 <main+0x11a>
				SpiActive = 1;
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <main+0x2dc>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
			b_wakeup=PN532_WakeUp();
 8000664:	f003 fe5c 	bl	8004320 <PN532_WakeUp>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b68      	ldr	r3, [pc, #416]	; (8000810 <main+0x2e4>)
 800066e:	701a      	strb	r2, [r3, #0]
			b_samconfig=PN532_SAMConfig();
 8000670:	f003 fefa 	bl	8004468 <PN532_SAMConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b66      	ldr	r3, [pc, #408]	; (8000814 <main+0x2e8>)
 800067a:	701a      	strb	r2, [r3, #0]

			versiondata = PN532_getFirmwareVersion();//Получениe версии ПО PN532
 800067c:	f003 ff20 	bl	80044c0 <PN532_getFirmwareVersion>
 8000680:	61f8      	str	r0, [r7, #28]

				if(versiondata){
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d013      	beq.n	80006b0 <main+0x184>
					statusDevice=statusDevice|ST_DEV_NFC_NOERR;//установка флага успешного теста NFC
 8000688:	4b59      	ldr	r3, [pc, #356]	; (80007f0 <main+0x2c4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b57      	ldr	r3, [pc, #348]	; (80007f0 <main+0x2c4>)
 8000694:	701a      	strb	r2, [r3, #0]
					PN532_FirmWareVersion2String (versiondata);
 8000696:	69f8      	ldr	r0, [r7, #28]
 8000698:	f002 fc70 	bl	8002f7c <PN532_FirmWareVersion2String>
					b_rertyes=PN532_setPassiveActivationRetries(0xFF);
 800069c:	20ff      	movs	r0, #255	; 0xff
 800069e:	f003 fe55 	bl	800434c <PN532_setPassiveActivationRetries>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <main+0x2ec>)
 80006a8:	701a      	strb	r2, [r3, #0]
					b_discannfc=0;
 80006aa:	4b5c      	ldr	r3, [pc, #368]	; (800081c <main+0x2f0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				}
				 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};
 80006b0:	bf00      	nop
 80006b2:	2102      	movs	r1, #2
 80006b4:	4855      	ldr	r0, [pc, #340]	; (800080c <main+0x2e0>)
 80006b6:	f006 f8bd 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f8      	beq.n	80006b2 <main+0x186>
				SpiActive = 0;
 80006c0:	4b51      	ldr	r3, [pc, #324]	; (8000808 <main+0x2dc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]


		/*	while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
				SPI_FLASH_CONFIG();*/

bcd_addr_start = 8192;
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <main+0x2f4>)
 80006c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006cc:	601a      	str	r2, [r3, #0]
bcd_cnt_addr_start = 0;
 80006ce:	4b55      	ldr	r3, [pc, #340]	; (8000824 <main+0x2f8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
//bcd_max_cnt_addr = 64;

nfc_addr_start = 12288;
 80006d4:	4b54      	ldr	r3, [pc, #336]	; (8000828 <main+0x2fc>)
 80006d6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006da:	601a      	str	r2, [r3, #0]
nfc_cnt_addr_start = 4096;
 80006dc:	4b53      	ldr	r3, [pc, #332]	; (800082c <main+0x300>)
 80006de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e2:	601a      	str	r2, [r3, #0]
//nfc_max_cnt_addr = 160;

cnt_addr_2Flash = 4;
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <main+0x304>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	701a      	strb	r2, [r3, #0]
cnt_4cnt = 1;
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <main+0x308>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
cnt_flash = 16;
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x30c>)
 80006f2:	2210      	movs	r2, #16
 80006f4:	801a      	strh	r2, [r3, #0]

val_max_cnt = 255;
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <main+0x310>)
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	701a      	strb	r2, [r3, #0]
val_start_cnt = 0;
 80006fc:	4b50      	ldr	r3, [pc, #320]	; (8000840 <main+0x314>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]

erase_addr = 0;
 8000702:	4b50      	ldr	r3, [pc, #320]	; (8000844 <main+0x318>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
cnt_flash_t = 255;
 8000708:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <main+0x31c>)
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	701a      	strb	r2, [r3, #0]
			memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
			spiFlash_Read(nfc_addr_start, cnt_addr_2Flash, rd_test_buff);
			nfc_flash_addr = flash_conv2_addr(rd_test_buff);
*/

				while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 800070e:	bf00      	nop
 8000710:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <main+0x2dc>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <main+0x1fc>
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	483b      	ldr	r0, [pc, #236]	; (800080c <main+0x2e0>)
 800071e:	f006 f889 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f3      	bne.n	8000710 <main+0x1e4>
				SPI_FLASH_CONFIG();
 8000728:	f005 f940 	bl	80059ac <SPI_FLASH_CONFIG>
				spiFlash_write(erase_addr, cnt_addr_2Flash, wr_test_buff);
				do {
					stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
				} while (stat_reg1 & 0x01 );
*/
				memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	2100      	movs	r1, #0
 8000730:	4846      	ldr	r0, [pc, #280]	; (800084c <main+0x320>)
 8000732:	f006 fe35 	bl	80073a0 <memset>
				spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <main+0x2f8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a43      	ldr	r2, [pc, #268]	; (8000848 <main+0x31c>)
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	b291      	uxth	r1, r2
 8000740:	4a42      	ldr	r2, [pc, #264]	; (800084c <main+0x320>)
 8000742:	4618      	mov	r0, r3
 8000744:	f005 f98a 	bl	8005a5c <spiFlash_Read>
				for(int k = 0; k < 256; k++){
 8000748:	2300      	movs	r3, #0
 800074a:	657b      	str	r3, [r7, #84]	; 0x54
 800074c:	e015      	b.n	800077a <main+0x24e>
					if(rd_test_buff[k] == 0xFF){
 800074e:	4a3f      	ldr	r2, [pc, #252]	; (800084c <main+0x320>)
 8000750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2bff      	cmp	r3, #255	; 0xff
 8000758:	d10c      	bne.n	8000774 <main+0x248>
						if(k == 0){
 800075a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800075c:	2b00      	cmp	r3, #0
 800075e:	d109      	bne.n	8000774 <main+0x248>
							Set_Cnt_to_Flash(bcd_cnt_addr_start, cnt_4cnt, &val_start_cnt);
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <main+0x2f8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <main+0x308>)
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	b291      	uxth	r1, r2
 800076a:	4a35      	ldr	r2, [pc, #212]	; (8000840 <main+0x314>)
 800076c:	4618      	mov	r0, r3
 800076e:	f004 fee3 	bl	8005538 <Set_Cnt_to_Flash>

						break;
 8000772:	e005      	b.n	8000780 <main+0x254>
				for(int k = 0; k < 256; k++){
 8000774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000776:	3301      	adds	r3, #1
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
 800077a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800077c:	2bff      	cmp	r3, #255	; 0xff
 800077e:	dde6      	ble.n	800074e <main+0x222>
						}
					}
				}

				memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	2100      	movs	r1, #0
 8000784:	4831      	ldr	r0, [pc, #196]	; (800084c <main+0x320>)
 8000786:	f006 fe0b 	bl	80073a0 <memset>
				spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <main+0x300>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <main+0x31c>)
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	b291      	uxth	r1, r2
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <main+0x320>)
 8000796:	4618      	mov	r0, r3
 8000798:	f005 f960 	bl	8005a5c <spiFlash_Read>
				for(int k = 0; k < 256; k++){
 800079c:	2300      	movs	r3, #0
 800079e:	653b      	str	r3, [r7, #80]	; 0x50
 80007a0:	e059      	b.n	8000856 <main+0x32a>
					if(rd_test_buff[k] == 0xFF){
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <main+0x320>)
 80007a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d150      	bne.n	8000850 <main+0x324>
						if(k == 0){
 80007ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14d      	bne.n	8000850 <main+0x324>
							Set_Cnt_to_Flash(nfc_cnt_addr_start, cnt_4cnt, &val_start_cnt);
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <main+0x300>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <main+0x308>)
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	b291      	uxth	r1, r2
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <main+0x314>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 feb9 	bl	8005538 <Set_Cnt_to_Flash>

						break;
 80007c6:	e049      	b.n	800085c <main+0x330>
 80007c8:	200004e4 	.word	0x200004e4
 80007cc:	40021000 	.word	0x40021000
 80007d0:	200004f4 	.word	0x200004f4
 80007d4:	10624dd3 	.word	0x10624dd3
 80007d8:	200005ff 	.word	0x200005ff
 80007dc:	20000338 	.word	0x20000338
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	20000739 	.word	0x20000739
 80007e8:	20000738 	.word	0x20000738
 80007ec:	2000070d 	.word	0x2000070d
 80007f0:	20000848 	.word	0x20000848
 80007f4:	200000e8 	.word	0x200000e8
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	20000134 	.word	0x20000134
 8000800:	20000040 	.word	0x20000040
 8000804:	20000028 	.word	0x20000028
 8000808:	20000d2e 	.word	0x20000d2e
 800080c:	40003800 	.word	0x40003800
 8000810:	2000070e 	.word	0x2000070e
 8000814:	2000070f 	.word	0x2000070f
 8000818:	20000710 	.word	0x20000710
 800081c:	20000711 	.word	0x20000711
 8000820:	20000938 	.word	0x20000938
 8000824:	2000093c 	.word	0x2000093c
 8000828:	20000940 	.word	0x20000940
 800082c:	20000944 	.word	0x20000944
 8000830:	20000948 	.word	0x20000948
 8000834:	20000949 	.word	0x20000949
 8000838:	20000d16 	.word	0x20000d16
 800083c:	2000094b 	.word	0x2000094b
 8000840:	2000094c 	.word	0x2000094c
 8000844:	20000928 	.word	0x20000928
 8000848:	2000092c 	.word	0x2000092c
 800084c:	200009dc 	.word	0x200009dc
				for(int k = 0; k < 256; k++){
 8000850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000852:	3301      	adds	r3, #1
 8000854:	653b      	str	r3, [r7, #80]	; 0x50
 8000856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	dda2      	ble.n	80007a2 <main+0x276>
					}
				}



				SpiActive = 0;
 800085c:	4b82      	ldr	r3, [pc, #520]	; (8000a68 <main+0x53c>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]


			while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8000862:	bf00      	nop
 8000864:	4b80      	ldr	r3, [pc, #512]	; (8000a68 <main+0x53c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <main+0x350>
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	487e      	ldr	r0, [pc, #504]	; (8000a6c <main+0x540>)
 8000872:	f005 ffdf 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1f3      	bne.n	8000864 <main+0x338>
				PN532_SPIInit();
 800087c:	f004 ff88 	bl	8005790 <PN532_SPIInit>

				 b_getversion=ENABLE;
 8000880:	4b7b      	ldr	r3, [pc, #492]	; (8000a70 <main+0x544>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
				 cntbyteversion=0;
 8000886:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <main+0x548>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

				 SCAN_SendCMD(cmd_Version,STR_CMD_LENGTH);//Запрос версии  ПО сканера штрих-кодов
 800088c:	210c      	movs	r1, #12
 800088e:	487a      	ldr	r0, [pc, #488]	; (8000a78 <main+0x54c>)
 8000890:	f006 fb5a 	bl	8006f48 <SCAN_SendCMD>

				uint32_t tick1 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
				uint32_t tick2 = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c

					tick1=GetTickCount();
 800089c:	f002 fb64 	bl	8002f68 <GetTickCount>
 80008a0:	61b8      	str	r0, [r7, #24]
					tick2=tick1;
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
				while(b_getversion || (tick2 - tick1 > 1000)){
 80008a6:	e002      	b.n	80008ae <main+0x382>
						// b_getversion=ENABLE;
						tick2=GetTickCount();
 80008a8:	f002 fb5e 	bl	8002f68 <GetTickCount>
 80008ac:	64f8      	str	r0, [r7, #76]	; 0x4c
				while(b_getversion || (tick2 - tick1 > 1000)){
 80008ae:	4b70      	ldr	r3, [pc, #448]	; (8000a70 <main+0x544>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f8      	bne.n	80008a8 <main+0x37c>
 80008b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c0:	d8f2      	bhi.n	80008a8 <main+0x37c>
					}

					if(!b_getversion){//Получена версия сканера штрих-кодов
 80008c2:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <main+0x544>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d106      	bne.n	80008d8 <main+0x3ac>
						statusDevice=statusDevice|ST_DEV_BAR_NOERR;//установка флага успешного теста сканера штрих-кодов
 80008ca:	4b6c      	ldr	r3, [pc, #432]	; (8000a7c <main+0x550>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <main+0x550>)
 80008d6:	701a      	strb	r2, [r3, #0]
					}



switch(statusDevice){
 80008d8:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <main+0x550>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b11      	cmp	r3, #17
 80008de:	f200 8156 	bhi.w	8000b8e <main+0x662>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <main+0x3bc>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000975 	.word	0x08000975
 80008f0:	08000b8f 	.word	0x08000b8f
 80008f4:	08000b8f 	.word	0x08000b8f
 80008f8:	08000b8f 	.word	0x08000b8f
 80008fc:	08000b8f 	.word	0x08000b8f
 8000900:	08000b8f 	.word	0x08000b8f
 8000904:	08000b8f 	.word	0x08000b8f
 8000908:	08000b8f 	.word	0x08000b8f
 800090c:	08000b8f 	.word	0x08000b8f
 8000910:	08000b8f 	.word	0x08000b8f
 8000914:	08000b8f 	.word	0x08000b8f
 8000918:	08000b8f 	.word	0x08000b8f
 800091c:	08000b8f 	.word	0x08000b8f
 8000920:	08000b8f 	.word	0x08000b8f
 8000924:	08000b8f 	.word	0x08000b8f
 8000928:	08000a0f 	.word	0x08000a0f
 800092c:	08000ac1 	.word	0x08000ac1
	case ST_DEV_ALL_ERR://Оба устройства не ответили

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000930:	4853      	ldr	r0, [pc, #332]	; (8000a80 <main+0x554>)
 8000932:	f7ff fc0b 	bl	800014c <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	4619      	mov	r1, r3
 800093a:	4852      	ldr	r0, [pc, #328]	; (8000a84 <main+0x558>)
 800093c:	f006 fa84 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000940:	4851      	ldr	r0, [pc, #324]	; (8000a88 <main+0x55c>)
 8000942:	f7ff fc03 	bl	800014c <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	4619      	mov	r1, r3
 800094a:	484f      	ldr	r0, [pc, #316]	; (8000a88 <main+0x55c>)
 800094c:	f006 fa7c 	bl	8006e48 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 8000950:	211c      	movs	r1, #28
 8000952:	484e      	ldr	r0, [pc, #312]	; (8000a8c <main+0x560>)
 8000954:	f006 fa78 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000958:	484b      	ldr	r0, [pc, #300]	; (8000a88 <main+0x55c>)
 800095a:	f7ff fbf7 	bl	800014c <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	4619      	mov	r1, r3
 8000962:	4849      	ldr	r0, [pc, #292]	; (8000a88 <main+0x55c>)
 8000964:	f006 fa70 	bl	8006e48 <Usart2_SendData>

		LCD_RunStringDevInfo ( s_lcd_bar_err,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000968:	22c8      	movs	r2, #200	; 0xc8
 800096a:	4948      	ldr	r1, [pc, #288]	; (8000a8c <main+0x560>)
 800096c:	4845      	ldr	r0, [pc, #276]	; (8000a84 <main+0x558>)
 800096e:	f003 fa39 	bl	8003de4 <LCD_RunStringDevInfo>

	break;
 8000972:	e10c      	b.n	8000b8e <main+0x662>

	case ST_DEV_NFC_NOERR://Ответил только NFC

		Usart2_SendData(s_lcd_bar_err,strlen(s_pc_barcode));
 8000974:	4842      	ldr	r0, [pc, #264]	; (8000a80 <main+0x554>)
 8000976:	f7ff fbe9 	bl	800014c <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	4619      	mov	r1, r3
 800097e:	4841      	ldr	r0, [pc, #260]	; (8000a84 <main+0x558>)
 8000980:	f006 fa62 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000984:	4840      	ldr	r0, [pc, #256]	; (8000a88 <main+0x55c>)
 8000986:	f7ff fbe1 	bl	800014c <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	4619      	mov	r1, r3
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <main+0x55c>)
 8000990:	f006 fa5a 	bl	8006e48 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000994:	483e      	ldr	r0, [pc, #248]	; (8000a90 <main+0x564>)
 8000996:	f7ff fbd9 	bl	800014c <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	4619      	mov	r1, r3
 800099e:	483c      	ldr	r0, [pc, #240]	; (8000a90 <main+0x564>)
 80009a0:	f006 fa52 	bl	8006e48 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 80009a4:	2102      	movs	r1, #2
 80009a6:	483b      	ldr	r0, [pc, #236]	; (8000a94 <main+0x568>)
 80009a8:	f006 fa4e 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009ac:	2102      	movs	r1, #2
 80009ae:	483a      	ldr	r0, [pc, #232]	; (8000a98 <main+0x56c>)
 80009b0:	f006 fa4a 	bl	8006e48 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 80009b4:	4839      	ldr	r0, [pc, #228]	; (8000a9c <main+0x570>)
 80009b6:	f7ff fbc9 	bl	800014c <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4619      	mov	r1, r3
 80009be:	4837      	ldr	r0, [pc, #220]	; (8000a9c <main+0x570>)
 80009c0:	f006 fa42 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 80009c4:	2103      	movs	r1, #3
 80009c6:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <main+0x574>)
 80009c8:	f006 fa3e 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 80009cc:	2300      	movs	r3, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <main+0x578>)
 80009d2:	f006 fa39 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 80009d6:	2103      	movs	r1, #3
 80009d8:	4833      	ldr	r0, [pc, #204]	; (8000aa8 <main+0x57c>)
 80009da:	f006 fa35 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009de:	2102      	movs	r1, #2
 80009e0:	482d      	ldr	r0, [pc, #180]	; (8000a98 <main+0x56c>)
 80009e2:	f006 fa31 	bl	8006e48 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 80009e6:	210a      	movs	r1, #10
 80009e8:	4830      	ldr	r0, [pc, #192]	; (8000aac <main+0x580>)
 80009ea:	f006 fa2d 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 80009ee:	2102      	movs	r1, #2
 80009f0:	482f      	ldr	r0, [pc, #188]	; (8000ab0 <main+0x584>)
 80009f2:	f006 fa29 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 80009f6:	2102      	movs	r1, #2
 80009f8:	4827      	ldr	r0, [pc, #156]	; (8000a98 <main+0x56c>)
 80009fa:	f006 fa25 	bl	8006e48 <Usart2_SendData>


		LCD_PN532_CreateRunInfoString();
 80009fe:	f7ff fc85 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_lcd_bar_err,s_pn_info,RUN_STR_DELAY_TST);
 8000a02:	22c8      	movs	r2, #200	; 0xc8
 8000a04:	492b      	ldr	r1, [pc, #172]	; (8000ab4 <main+0x588>)
 8000a06:	481f      	ldr	r0, [pc, #124]	; (8000a84 <main+0x558>)
 8000a08:	f003 f9ec 	bl	8003de4 <LCD_RunStringDevInfo>

	break;
 8000a0c:	e0bf      	b.n	8000b8e <main+0x662>

	case ST_DEV_BAR_NOERR://Ответил только сканер штрих-кодов

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <main+0x554>)
 8000a10:	f7ff fb9c 	bl	800014c <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4819      	ldr	r0, [pc, #100]	; (8000a80 <main+0x554>)
 8000a1a:	f006 fa15 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000a1e:	4826      	ldr	r0, [pc, #152]	; (8000ab8 <main+0x58c>)
 8000a20:	f7ff fb94 	bl	800014c <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <main+0x58c>)
 8000a2a:	f006 fa0d 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a2e:	4816      	ldr	r0, [pc, #88]	; (8000a88 <main+0x55c>)
 8000a30:	f7ff fb8c 	bl	800014c <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <main+0x55c>)
 8000a3a:	f006 fa05 	bl	8006e48 <Usart2_SendData>

		Usart2_SendData(s_lcd_nfc_err,sizeof(s_pn_nfchip));
 8000a3e:	211c      	movs	r1, #28
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <main+0x560>)
 8000a42:	f006 fa01 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000a46:	4810      	ldr	r0, [pc, #64]	; (8000a88 <main+0x55c>)
 8000a48:	f7ff fb80 	bl	800014c <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <main+0x55c>)
 8000a52:	f006 f9f9 	bl	8006e48 <Usart2_SendData>

		LCD_BAR_CreateRunInfoString();
 8000a56:	f7ff fc93 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_lcd_nfc_err,RUN_STR_DELAY_TST);
 8000a5a:	22c8      	movs	r2, #200	; 0xc8
 8000a5c:	490b      	ldr	r1, [pc, #44]	; (8000a8c <main+0x560>)
 8000a5e:	4817      	ldr	r0, [pc, #92]	; (8000abc <main+0x590>)
 8000a60:	f003 f9c0 	bl	8003de4 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

	break;
 8000a64:	e093      	b.n	8000b8e <main+0x662>
 8000a66:	bf00      	nop
 8000a68:	20000d2e 	.word	0x20000d2e
 8000a6c:	40003800 	.word	0x40003800
 8000a70:	20000600 	.word	0x20000600
 8000a74:	20000d8c 	.word	0x20000d8c
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000848 	.word	0x20000848
 8000a80:	2000014c 	.word	0x2000014c
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	20000168 	.word	0x20000168
 8000a8c:	20000070 	.word	0x20000070
 8000a90:	200001ec 	.word	0x200001ec
 8000a94:	200001dc 	.word	0x200001dc
 8000a98:	200001d8 	.word	0x200001d8
 8000a9c:	200001fc 	.word	0x200001fc
 8000aa0:	200001e0 	.word	0x200001e0
 8000aa4:	200001d4 	.word	0x200001d4
 8000aa8:	200001e4 	.word	0x200001e4
 8000aac:	2000020c 	.word	0x2000020c
 8000ab0:	200001e8 	.word	0x200001e8
 8000ab4:	20000748 	.word	0x20000748
 8000ab8:	20000d90 	.word	0x20000d90
 8000abc:	200007c8 	.word	0x200007c8

	case ST_DEV_ALL_NOERR://Оба устройства ответили

		Usart2_SendData(s_pc_barcode,strlen(s_pc_barcode));
 8000ac0:	48b3      	ldr	r0, [pc, #716]	; (8000d90 <main+0x864>)
 8000ac2:	f7ff fb43 	bl	800014c <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	48b1      	ldr	r0, [pc, #708]	; (8000d90 <main+0x864>)
 8000acc:	f006 f9bc 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(ScanerVersion,strlen(ScanerVersion));
 8000ad0:	48b0      	ldr	r0, [pc, #704]	; (8000d94 <main+0x868>)
 8000ad2:	f7ff fb3b 	bl	800014c <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	48ae      	ldr	r0, [pc, #696]	; (8000d94 <main+0x868>)
 8000adc:	f006 f9b4 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_newline,strlen(s_newline));
 8000ae0:	48ad      	ldr	r0, [pc, #692]	; (8000d98 <main+0x86c>)
 8000ae2:	f7ff fb33 	bl	800014c <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	48ab      	ldr	r0, [pc, #684]	; (8000d98 <main+0x86c>)
 8000aec:	f006 f9ac 	bl	8006e48 <Usart2_SendData>

	    Usart2_SendData(s_pn_fchip,strlen(s_pn_fchip));
 8000af0:	48aa      	ldr	r0, [pc, #680]	; (8000d9c <main+0x870>)
 8000af2:	f7ff fb2b 	bl	800014c <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4619      	mov	r1, r3
 8000afa:	48a8      	ldr	r0, [pc, #672]	; (8000d9c <main+0x870>)
 8000afc:	f006 f9a4 	bl	8006e48 <Usart2_SendData>
	    Usart2_SendData(s_pn_nchip,sizeof(s_pn_nchip));
 8000b00:	2102      	movs	r1, #2
 8000b02:	48a7      	ldr	r0, [pc, #668]	; (8000da0 <main+0x874>)
 8000b04:	f006 f9a0 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b08:	2102      	movs	r1, #2
 8000b0a:	48a6      	ldr	r0, [pc, #664]	; (8000da4 <main+0x878>)
 8000b0c:	f006 f99c 	bl	8006e48 <Usart2_SendData>

		Usart2_SendData(s_pn_wfchip,strlen(s_pn_wfchip));
 8000b10:	48a5      	ldr	r0, [pc, #660]	; (8000da8 <main+0x87c>)
 8000b12:	f7ff fb1b 	bl	800014c <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	48a3      	ldr	r0, [pc, #652]	; (8000da8 <main+0x87c>)
 8000b1c:	f006 f994 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_fw1nchip,sizeof(s_pn_fw1nchip));
 8000b20:	2103      	movs	r1, #3
 8000b22:	48a2      	ldr	r0, [pc, #648]	; (8000dac <main+0x880>)
 8000b24:	f006 f990 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_point,strlen(s_pn_point));
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	48a0      	ldr	r0, [pc, #640]	; (8000db0 <main+0x884>)
 8000b2e:	f006 f98b 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_fw2nchip,sizeof(s_pn_fw2nchip));
 8000b32:	2103      	movs	r1, #3
 8000b34:	489f      	ldr	r0, [pc, #636]	; (8000db4 <main+0x888>)
 8000b36:	f006 f987 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	4899      	ldr	r0, [pc, #612]	; (8000da4 <main+0x878>)
 8000b3e:	f006 f983 	bl	8006e48 <Usart2_SendData>

		Usart2_SendData(s_pn_suppchip,sizeof(s_pn_suppchip));
 8000b42:	210a      	movs	r1, #10
 8000b44:	489c      	ldr	r0, [pc, #624]	; (8000db8 <main+0x88c>)
 8000b46:	f006 f97f 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_suchip,sizeof(s_pn_suchip));
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	489b      	ldr	r0, [pc, #620]	; (8000dbc <main+0x890>)
 8000b4e:	f006 f97b 	bl	8006e48 <Usart2_SendData>
		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));
 8000b52:	2102      	movs	r1, #2
 8000b54:	4893      	ldr	r0, [pc, #588]	; (8000da4 <main+0x878>)
 8000b56:	f006 f977 	bl	8006e48 <Usart2_SendData>


		LCD_BAR_CreateRunInfoString();
 8000b5a:	f7ff fc11 	bl	8000380 <LCD_BAR_CreateRunInfoString>
		LCD_PN532_CreateRunInfoString();
 8000b5e:	f7ff fbd5 	bl	800030c <LCD_PN532_CreateRunInfoString>
		LCD_RunStringDevInfo ( s_bar_info,s_pn_info,RUN_STR_DELAY_TST);
 8000b62:	22c8      	movs	r2, #200	; 0xc8
 8000b64:	4996      	ldr	r1, [pc, #600]	; (8000dc0 <main+0x894>)
 8000b66:	4897      	ldr	r0, [pc, #604]	; (8000dc4 <main+0x898>)
 8000b68:	f003 f93c 	bl	8003de4 <LCD_RunStringDevInfo>

//		Usart2_SendData(s_bar_info,strlen(s_bar_info));
//		Usart2_SendData(s_pn_newline,sizeof(s_pn_newline));

		LCD_SetCursor ( LCD_CURSOR_1STR );
 8000b6c:	2080      	movs	r0, #128	; 0x80
 8000b6e:	f003 f86b 	bl	8003c48 <LCD_SetCursor>
		LCD_WriteString (s_lcd_scanner_rdy );
 8000b72:	4895      	ldr	r0, [pc, #596]	; (8000dc8 <main+0x89c>)
 8000b74:	f003 f918 	bl	8003da8 <LCD_WriteString>

		LCD_SetCursor ( LCD_CURSOR_2STR );
 8000b78:	20c0      	movs	r0, #192	; 0xc0
 8000b7a:	f003 f865 	bl	8003c48 <LCD_SetCursor>
		LCD_WriteString (s_lcd_ready );
 8000b7e:	4893      	ldr	r0, [pc, #588]	; (8000dcc <main+0x8a0>)
 8000b80:	f003 f912 	bl	8003da8 <LCD_WriteString>

		Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000b84:	2121      	movs	r1, #33	; 0x21
 8000b86:	4892      	ldr	r0, [pc, #584]	; (8000dd0 <main+0x8a4>)
 8000b88:	f006 f95e 	bl	8006e48 <Usart2_SendData>


	break;
 8000b8c:	bf00      	nop

}

Usart2_SendData(s_pc_scanner_ready,sizeof(s_pc_scanner_ready));
 8000b8e:	2121      	movs	r1, #33	; 0x21
 8000b90:	488f      	ldr	r0, [pc, #572]	; (8000dd0 <main+0x8a4>)
 8000b92:	f006 f959 	bl	8006e48 <Usart2_SendData>


Timer1Init();
 8000b96:	f002 f86f 	bl	8002c78 <Timer1Init>
EnableTimer1Interrupt();
 8000b9a:	f002 f8a7 	bl	8002cec <EnableTimer1Interrupt>

		char cSymbol;

		char date_Symbol;

		if(timer1flag==1){
 8000b9e:	4b8d      	ldr	r3, [pc, #564]	; (8000dd4 <main+0x8a8>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d110      	bne.n	8000bc8 <main+0x69c>
			ValueInterrupToStr();
 8000ba6:	f002 fa9b 	bl	80030e0 <ValueInterrupToStr>
			Usart2_SendData(b_bounce_value,sizeof(b_bounce_value));
 8000baa:	2106      	movs	r1, #6
 8000bac:	488a      	ldr	r0, [pc, #552]	; (8000dd8 <main+0x8ac>)
 8000bae:	f006 f94b 	bl	8006e48 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 8000bb2:	4879      	ldr	r0, [pc, #484]	; (8000d98 <main+0x86c>)
 8000bb4:	f7ff faca 	bl	800014c <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4876      	ldr	r0, [pc, #472]	; (8000d98 <main+0x86c>)
 8000bbe:	f006 f943 	bl	8006e48 <Usart2_SendData>
			timer1flag=0;
 8000bc2:	4b84      	ldr	r3, [pc, #528]	; (8000dd4 <main+0x8a8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
		}



		//если не режим записи метки NFC
		if(u8_wrnfcstatus==0){
 8000bc8:	4b84      	ldr	r3, [pc, #528]	; (8000ddc <main+0x8b0>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f041 8683 	bne.w	80028d8 <main+0x23ac>

				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000bd2:	e01b      	b.n	8000c0c <main+0x6e0>
					g_sBuffer [ g_iBufferLength++ ] = cSymbol;
 8000bd4:	4b82      	ldr	r3, [pc, #520]	; (8000de0 <main+0x8b4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	4981      	ldr	r1, [pc, #516]	; (8000de0 <main+0x8b4>)
 8000bdc:	600a      	str	r2, [r1, #0]
 8000bde:	78f9      	ldrb	r1, [r7, #3]
 8000be0:	4a80      	ldr	r2, [pc, #512]	; (8000de4 <main+0x8b8>)
 8000be2:	54d1      	strb	r1, [r2, r3]
					g_sBuffer [ g_iBufferLength ] = '\0';
 8000be4:	4b7e      	ldr	r3, [pc, #504]	; (8000de0 <main+0x8b4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a7e      	ldr	r2, [pc, #504]	; (8000de4 <main+0x8b8>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	54d1      	strb	r1, [r2, r3]
					if ( g_iBufferLength >= BUFFER_LEN ) {
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <main+0x8b4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf4:	dd0a      	ble.n	8000c0c <main+0x6e0>
						memmove ( g_sBuffer, g_sBuffer + 1, BUFFER_LEN );
 8000bf6:	4b7c      	ldr	r3, [pc, #496]	; (8000de8 <main+0x8bc>)
 8000bf8:	2280      	movs	r2, #128	; 0x80
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4879      	ldr	r0, [pc, #484]	; (8000de4 <main+0x8b8>)
 8000bfe:	f006 fbb5 	bl	800736c <memmove>
						g_iBufferLength--;
 8000c02:	4b77      	ldr	r3, [pc, #476]	; (8000de0 <main+0x8b4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a75      	ldr	r2, [pc, #468]	; (8000de0 <main+0x8b4>)
 8000c0a:	6013      	str	r3, [r2, #0]
				while (FIFO_GetNextData ( &cSymbol ) == SUCCESS) {
 8000c0c:	1cfb      	adds	r3, r7, #3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 fa1a 	bl	8007048 <FIFO_GetNextData>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d0dc      	beq.n	8000bd4 <main+0x6a8>
					}
				}
		//	прием данных с телефона
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000c1a:	e02b      	b.n	8000c74 <main+0x748>

				//	Usart2_SendData(s_pc_hello,strlen(s_pc_hello));
				//	Usart2_SendData(s_newline,strlen(s_newline));


					date_sBuffer [ date_iBufferLength++ ] = date_Symbol;
 8000c1c:	4b73      	ldr	r3, [pc, #460]	; (8000dec <main+0x8c0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	4972      	ldr	r1, [pc, #456]	; (8000dec <main+0x8c0>)
 8000c24:	600a      	str	r2, [r1, #0]
 8000c26:	78b9      	ldrb	r1, [r7, #2]
 8000c28:	4a71      	ldr	r2, [pc, #452]	; (8000df0 <main+0x8c4>)
 8000c2a:	54d1      	strb	r1, [r2, r3]
					date_sBuffer [ date_iBufferLength] = '\0';
 8000c2c:	4b6f      	ldr	r3, [pc, #444]	; (8000dec <main+0x8c0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a6f      	ldr	r2, [pc, #444]	; (8000df0 <main+0x8c4>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	54d1      	strb	r1, [r2, r3]
					if( date_iBufferLength >= BUFFER_LEN){
 8000c36:	4b6d      	ldr	r3, [pc, #436]	; (8000dec <main+0x8c0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c3c:	dd0a      	ble.n	8000c54 <main+0x728>
						memmove(date_sBuffer, date_sBuffer + 1, BUFFER_LEN);
 8000c3e:	4b6d      	ldr	r3, [pc, #436]	; (8000df4 <main+0x8c8>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	4619      	mov	r1, r3
 8000c44:	486a      	ldr	r0, [pc, #424]	; (8000df0 <main+0x8c4>)
 8000c46:	f006 fb91 	bl	800736c <memmove>
						date_iBufferLength--;
 8000c4a:	4b68      	ldr	r3, [pc, #416]	; (8000dec <main+0x8c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4a66      	ldr	r2, [pc, #408]	; (8000dec <main+0x8c0>)
 8000c52:	6013      	str	r3, [r2, #0]
					}
						Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 8000c54:	4866      	ldr	r0, [pc, #408]	; (8000df0 <main+0x8c4>)
 8000c56:	f7ff fa79 	bl	800014c <strlen>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4864      	ldr	r0, [pc, #400]	; (8000df0 <main+0x8c4>)
 8000c60:	f006 f8f2 	bl	8006e48 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8000c64:	484c      	ldr	r0, [pc, #304]	; (8000d98 <main+0x86c>)
 8000c66:	f7ff fa71 	bl	800014c <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	484a      	ldr	r0, [pc, #296]	; (8000d98 <main+0x86c>)
 8000c70:	f006 f8ea 	bl	8006e48 <Usart2_SendData>
				while (Date_GetNextDate(&date_Symbol) == SUCCESS){
 8000c74:	1cbb      	adds	r3, r7, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 fa14 	bl	80070a4 <Date_GetNextDate>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d0cc      	beq.n	8000c1c <main+0x6f0>
		*/



		//	декодирование данных с телефона
				if(strstr(date_sBuffer, "\r\n") != NULL){
 8000c82:	495d      	ldr	r1, [pc, #372]	; (8000df8 <main+0x8cc>)
 8000c84:	485a      	ldr	r0, [pc, #360]	; (8000df0 <main+0x8c4>)
 8000c86:	f006 fbea 	bl	800745e <strstr>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 866f 	beq.w	8001970 <main+0x1444>

				//	Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
				//	Usart2_SendData(s_newline,strlen(s_newline));

					char *pstr = date_sBuffer;
 8000c92:	4b57      	ldr	r3, [pc, #348]	; (8000df0 <main+0x8c4>)
 8000c94:	64bb      	str	r3, [r7, #72]	; 0x48

					if( date_sBuffer[0] == CMD /*&& date_sBuffer[4] == CMD*//**pstr == CMD*/ /*&& *pstr+4 == CMD*/){
 8000c96:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <main+0x8c4>)
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <main+0x8d0>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f040 8636 	bne.w	8001910 <main+0x13e4>
						pstr++;
 8000ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	64bb      	str	r3, [r7, #72]	; 0x48

						for(int i = 0; i < SIZE_CMD ; i++){
 8000caa:	2300      	movs	r3, #0
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
 8000cae:	e00b      	b.n	8000cc8 <main+0x79c>
							test_buffer[i] = *pstr++;
 8000cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cb6:	7819      	ldrb	r1, [r3, #0]
 8000cb8:	4a51      	ldr	r2, [pc, #324]	; (8000e00 <main+0x8d4>)
 8000cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cbc:	4413      	add	r3, r2
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
						for(int i = 0; i < SIZE_CMD ; i++){
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8000cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	ddf0      	ble.n	8000cb0 <main+0x784>

						}
						NUM_CMD = atoi(test_buffer);
 8000cce:	484c      	ldr	r0, [pc, #304]	; (8000e00 <main+0x8d4>)
 8000cd0:	f006 fb00 	bl	80072d4 <atoi>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a4b      	ldr	r2, [pc, #300]	; (8000e04 <main+0x8d8>)
 8000cd8:	6013      	str	r3, [r2, #0]
						if(NUM_CMD == 0){
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <main+0x8d8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10f      	bne.n	8000d02 <main+0x7d6>
							Usart2_SendData(android_wron_cmd_form,strlen(android_wron_cmd_form));
 8000ce2:	4849      	ldr	r0, [pc, #292]	; (8000e08 <main+0x8dc>)
 8000ce4:	f7ff fa32 	bl	800014c <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4846      	ldr	r0, [pc, #280]	; (8000e08 <main+0x8dc>)
 8000cee:	f006 f8ab 	bl	8006e48 <Usart2_SendData>
							Usart2_SendData(s_newline,strlen(s_newline));
 8000cf2:	4829      	ldr	r0, [pc, #164]	; (8000d98 <main+0x86c>)
 8000cf4:	f7ff fa2a 	bl	800014c <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4826      	ldr	r0, [pc, #152]	; (8000d98 <main+0x86c>)
 8000cfe:	f006 f8a3 	bl	8006e48 <Usart2_SendData>
						}
						switch (NUM_CMD) {
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <main+0x8d8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2bcb      	cmp	r3, #203	; 0xcb
 8000d08:	f000 85e0 	beq.w	80018cc <main+0x13a0>
 8000d0c:	2bcb      	cmp	r3, #203	; 0xcb
 8000d0e:	f300 85ee 	bgt.w	80018ee <main+0x13c2>
 8000d12:	2bca      	cmp	r3, #202	; 0xca
 8000d14:	f000 83e8 	beq.w	80014e8 <main+0xfbc>
 8000d18:	2bca      	cmp	r3, #202	; 0xca
 8000d1a:	f300 85e8 	bgt.w	80018ee <main+0x13c2>
 8000d1e:	2bc9      	cmp	r3, #201	; 0xc9
 8000d20:	f000 81f8 	beq.w	8001114 <main+0xbe8>
 8000d24:	2bc9      	cmp	r3, #201	; 0xc9
 8000d26:	f300 85e2 	bgt.w	80018ee <main+0x13c2>
 8000d2a:	2b67      	cmp	r3, #103	; 0x67
 8000d2c:	f000 8601 	beq.w	8001932 <main+0x1406>
 8000d30:	2b67      	cmp	r3, #103	; 0x67
 8000d32:	f300 85dc 	bgt.w	80018ee <main+0x13c2>
 8000d36:	2b65      	cmp	r3, #101	; 0x65
 8000d38:	d004      	beq.n	8000d44 <main+0x818>
 8000d3a:	2b66      	cmp	r3, #102	; 0x66
 8000d3c:	f000 80b8 	beq.w	8000eb0 <main+0x984>
 8000d40:	f000 bdd5 	b.w	80018ee <main+0x13c2>
							case 101:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000d44:	482e      	ldr	r0, [pc, #184]	; (8000e00 <main+0x8d4>)
 8000d46:	f7ff fa01 	bl	800014c <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	482c      	ldr	r0, [pc, #176]	; (8000e00 <main+0x8d4>)
 8000d50:	f006 f87a 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <main+0x86c>)
 8000d56:	f7ff f9f9 	bl	800014c <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <main+0x86c>)
 8000d60:	f006 f872 	bl	8006e48 <Usart2_SendData>

								uint8_t date_result;

								date_result = convert_time_from_android(&rtc_time, date_sBuffer);
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4922      	ldr	r1, [pc, #136]	; (8000df0 <main+0x8c4>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 fa53 	bl	8005214 <convert_time_from_android>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	75fb      	strb	r3, [r7, #23]
								switch(date_result){
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	f200 85de 	bhi.w	8001936 <main+0x140a>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <main+0x854>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000e0d 	.word	0x08000e0d
 8000d84:	08000e47 	.word	0x08000e47
 8000d88:	08000e69 	.word	0x08000e69
 8000d8c:	08000e8b 	.word	0x08000e8b
 8000d90:	2000014c 	.word	0x2000014c
 8000d94:	20000d90 	.word	0x20000d90
 8000d98:	20000168 	.word	0x20000168
 8000d9c:	200001ec 	.word	0x200001ec
 8000da0:	200001dc 	.word	0x200001dc
 8000da4:	200001d8 	.word	0x200001d8
 8000da8:	200001fc 	.word	0x200001fc
 8000dac:	200001e0 	.word	0x200001e0
 8000db0:	200001d4 	.word	0x200001d4
 8000db4:	200001e4 	.word	0x200001e4
 8000db8:	2000020c 	.word	0x2000020c
 8000dbc:	200001e8 	.word	0x200001e8
 8000dc0:	20000748 	.word	0x20000748
 8000dc4:	200007c8 	.word	0x200007c8
 8000dc8:	20000034 	.word	0x20000034
 8000dcc:	20000064 	.word	0x20000064
 8000dd0:	20000110 	.word	0x20000110
 8000dd4:	2000073e 	.word	0x2000073e
 8000dd8:	20000218 	.word	0x20000218
 8000ddc:	2000073f 	.word	0x2000073f
 8000de0:	2000058c 	.word	0x2000058c
 8000de4:	20000508 	.word	0x20000508
 8000de8:	20000509 	.word	0x20000509
 8000dec:	20000688 	.word	0x20000688
 8000df0:	20000604 	.word	0x20000604
 8000df4:	20000605 	.word	0x20000605
 8000df8:	08008668 	.word	0x08008668
 8000dfc:	2000043d 	.word	0x2000043d
 8000e00:	2000068c 	.word	0x2000068c
 8000e04:	20000920 	.word	0x20000920
 8000e08:	2000035c 	.word	0x2000035c
								case 0:
									tim = cal_to_timer(&rtc_time);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f004 f982 	bl	8005118 <cal_to_timer>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4ab2      	ldr	r2, [pc, #712]	; (80010e0 <main+0xbb4>)
 8000e18:	6013      	str	r3, [r2, #0]
									RTC_SET_COUNTER(tim);
 8000e1a:	4bb1      	ldr	r3, [pc, #708]	; (80010e0 <main+0xbb4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 f846 	bl	8004eb0 <RTC_SET_COUNTER>
									Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 8000e24:	48af      	ldr	r0, [pc, #700]	; (80010e4 <main+0xbb8>)
 8000e26:	f7ff f991 	bl	800014c <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	48ad      	ldr	r0, [pc, #692]	; (80010e4 <main+0xbb8>)
 8000e30:	f006 f80a 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e34:	48ac      	ldr	r0, [pc, #688]	; (80010e8 <main+0xbbc>)
 8000e36:	f7ff f989 	bl	800014c <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	48aa      	ldr	r0, [pc, #680]	; (80010e8 <main+0xbbc>)
 8000e40:	f006 f802 	bl	8006e48 <Usart2_SendData>
									break;
 8000e44:	e032      	b.n	8000eac <main+0x980>
								case 1:
									Usart2_SendData(incorrect_rtc_year,strlen(incorrect_rtc_year));
 8000e46:	48a9      	ldr	r0, [pc, #676]	; (80010ec <main+0xbc0>)
 8000e48:	f7ff f980 	bl	800014c <strlen>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	48a6      	ldr	r0, [pc, #664]	; (80010ec <main+0xbc0>)
 8000e52:	f005 fff9 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e56:	48a4      	ldr	r0, [pc, #656]	; (80010e8 <main+0xbbc>)
 8000e58:	f7ff f978 	bl	800014c <strlen>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	48a1      	ldr	r0, [pc, #644]	; (80010e8 <main+0xbbc>)
 8000e62:	f005 fff1 	bl	8006e48 <Usart2_SendData>
									break;
 8000e66:	e021      	b.n	8000eac <main+0x980>
								case 2:
									Usart2_SendData(incorrect_rtc_mon,strlen(incorrect_rtc_mon));
 8000e68:	48a1      	ldr	r0, [pc, #644]	; (80010f0 <main+0xbc4>)
 8000e6a:	f7ff f96f 	bl	800014c <strlen>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4619      	mov	r1, r3
 8000e72:	489f      	ldr	r0, [pc, #636]	; (80010f0 <main+0xbc4>)
 8000e74:	f005 ffe8 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e78:	489b      	ldr	r0, [pc, #620]	; (80010e8 <main+0xbbc>)
 8000e7a:	f7ff f967 	bl	800014c <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4899      	ldr	r0, [pc, #612]	; (80010e8 <main+0xbbc>)
 8000e84:	f005 ffe0 	bl	8006e48 <Usart2_SendData>
									break;
 8000e88:	e010      	b.n	8000eac <main+0x980>
								case 3:
									Usart2_SendData(incorrect_rtc_day,strlen(incorrect_rtc_day));
 8000e8a:	489a      	ldr	r0, [pc, #616]	; (80010f4 <main+0xbc8>)
 8000e8c:	f7ff f95e 	bl	800014c <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4619      	mov	r1, r3
 8000e94:	4897      	ldr	r0, [pc, #604]	; (80010f4 <main+0xbc8>)
 8000e96:	f005 ffd7 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8000e9a:	4893      	ldr	r0, [pc, #588]	; (80010e8 <main+0xbbc>)
 8000e9c:	f7ff f956 	bl	800014c <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4890      	ldr	r0, [pc, #576]	; (80010e8 <main+0xbbc>)
 8000ea6:	f005 ffcf 	bl	8006e48 <Usart2_SendData>
									break;
 8000eaa:	bf00      	nop

								}
								break;
 8000eac:	f000 bd43 	b.w	8001936 <main+0x140a>
							case 102:

								Usart2_SendData(test_buffer,strlen(test_buffer));
 8000eb0:	4891      	ldr	r0, [pc, #580]	; (80010f8 <main+0xbcc>)
 8000eb2:	f7ff f94b 	bl	800014c <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	488f      	ldr	r0, [pc, #572]	; (80010f8 <main+0xbcc>)
 8000ebc:	f005 ffc4 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8000ec0:	4889      	ldr	r0, [pc, #548]	; (80010e8 <main+0xbbc>)
 8000ec2:	f7ff f943 	bl	800014c <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4887      	ldr	r0, [pc, #540]	; (80010e8 <main+0xbbc>)
 8000ecc:	f005 ffbc 	bl	8006e48 <Usart2_SendData>

								timer = RTC_GET_COUNTER();
 8000ed0:	f003 ffde 	bl	8004e90 <RTC_GET_COUNTER>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a89      	ldr	r2, [pc, #548]	; (80010fc <main+0xbd0>)
 8000ed8:	6013      	str	r3, [r2, #0]
								timer_to_cal(timer, &rtc_time);
 8000eda:	4b88      	ldr	r3, [pc, #544]	; (80010fc <main+0xbd0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 f82e 	bl	8004f44 <timer_to_cal>
								tim = cal_to_timer(&rtc_time);
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f914 	bl	8005118 <cal_to_timer>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a7b      	ldr	r2, [pc, #492]	; (80010e0 <main+0xbb4>)
 8000ef4:	6013      	str	r3, [r2, #0]


								//*xxx*yyyy-MM-dd HH:mm:ss

								s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a81      	ldr	r2, [pc, #516]	; (8001100 <main+0xbd4>)
 8000efa:	fb82 1203 	smull	r1, r2, r2, r3
 8000efe:	1192      	asrs	r2, r2, #6
 8000f00:	17db      	asrs	r3, r3, #31
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	4b7f      	ldr	r3, [pc, #508]	; (8001104 <main+0xbd8>)
 8000f06:	fb83 1302 	smull	r1, r3, r3, r2
 8000f0a:	1099      	asrs	r1, r3, #2
 8000f0c:	17d3      	asrs	r3, r2, #31
 8000f0e:	1ac9      	subs	r1, r1, r3
 8000f10:	460b      	mov	r3, r1
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	1ad1      	subs	r1, r2, r3
 8000f1a:	b2cb      	uxtb	r3, r1
 8000f1c:	3330      	adds	r3, #48	; 0x30
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b79      	ldr	r3, [pc, #484]	; (8001108 <main+0xbdc>)
 8000f22:	701a      	strb	r2, [r3, #0]
								s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a79      	ldr	r2, [pc, #484]	; (800110c <main+0xbe0>)
 8000f28:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2c:	1152      	asrs	r2, r2, #5
 8000f2e:	17db      	asrs	r3, r3, #31
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	4b74      	ldr	r3, [pc, #464]	; (8001104 <main+0xbd8>)
 8000f34:	fb83 1302 	smull	r1, r3, r3, r2
 8000f38:	1099      	asrs	r1, r3, #2
 8000f3a:	17d3      	asrs	r3, r2, #31
 8000f3c:	1ac9      	subs	r1, r1, r3
 8000f3e:	460b      	mov	r3, r1
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	1ad1      	subs	r1, r2, r3
 8000f48:	b2cb      	uxtb	r3, r1
 8000f4a:	3330      	adds	r3, #48	; 0x30
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <main+0xbdc>)
 8000f50:	705a      	strb	r2, [r3, #1]
								s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a6b      	ldr	r2, [pc, #428]	; (8001104 <main+0xbd8>)
 8000f56:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5a:	1092      	asrs	r2, r2, #2
 8000f5c:	17db      	asrs	r3, r3, #31
 8000f5e:	1ad2      	subs	r2, r2, r3
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <main+0xbd8>)
 8000f62:	fb83 1302 	smull	r1, r3, r3, r2
 8000f66:	1099      	asrs	r1, r3, #2
 8000f68:	17d3      	asrs	r3, r2, #31
 8000f6a:	1ac9      	subs	r1, r1, r3
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	1ad1      	subs	r1, r2, r3
 8000f76:	b2cb      	uxtb	r3, r1
 8000f78:	3330      	adds	r3, #48	; 0x30
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b62      	ldr	r3, [pc, #392]	; (8001108 <main+0xbdc>)
 8000f7e:	709a      	strb	r2, [r3, #2]
								s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4b60      	ldr	r3, [pc, #384]	; (8001104 <main+0xbd8>)
 8000f84:	fb83 1302 	smull	r1, r3, r3, r2
 8000f88:	1099      	asrs	r1, r3, #2
 8000f8a:	17d3      	asrs	r3, r2, #31
 8000f8c:	1ac9      	subs	r1, r1, r3
 8000f8e:	460b      	mov	r3, r1
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	1ad1      	subs	r1, r2, r3
 8000f98:	b2cb      	uxtb	r3, r1
 8000f9a:	3330      	adds	r3, #48	; 0x30
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <main+0xbdc>)
 8000fa0:	70da      	strb	r2, [r3, #3]

								s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8000fa2:	7a3b      	ldrb	r3, [r7, #8]
 8000fa4:	4a5a      	ldr	r2, [pc, #360]	; (8001110 <main+0xbe4>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	3330      	adds	r3, #48	; 0x30
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b55      	ldr	r3, [pc, #340]	; (8001108 <main+0xbdc>)
 8000fb4:	715a      	strb	r2, [r3, #5]
								s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8000fb6:	7a3a      	ldrb	r2, [r7, #8]
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <main+0xbe4>)
 8000fba:	fba3 1302 	umull	r1, r3, r3, r2
 8000fbe:	08d9      	lsrs	r1, r3, #3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3330      	adds	r3, #48	; 0x30
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <main+0xbdc>)
 8000fd2:	719a      	strb	r2, [r3, #6]

								s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8000fd4:	7a7b      	ldrb	r3, [r7, #9]
 8000fd6:	4a4e      	ldr	r2, [pc, #312]	; (8001110 <main+0xbe4>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	3330      	adds	r3, #48	; 0x30
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b48      	ldr	r3, [pc, #288]	; (8001108 <main+0xbdc>)
 8000fe6:	721a      	strb	r2, [r3, #8]
								s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8000fe8:	7a7a      	ldrb	r2, [r7, #9]
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <main+0xbe4>)
 8000fec:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff0:	08d9      	lsrs	r1, r3, #3
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3330      	adds	r3, #48	; 0x30
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <main+0xbdc>)
 8001004:	725a      	strb	r2, [r3, #9]

								s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	4a41      	ldr	r2, [pc, #260]	; (8001110 <main+0xbe4>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3330      	adds	r3, #48	; 0x30
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <main+0xbdc>)
 8001018:	72da      	strb	r2, [r3, #11]
								s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 800101a:	7aba      	ldrb	r2, [r7, #10]
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <main+0xbe4>)
 800101e:	fba3 1302 	umull	r1, r3, r3, r2
 8001022:	08d9      	lsrs	r1, r3, #3
 8001024:	460b      	mov	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3330      	adds	r3, #48	; 0x30
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <main+0xbdc>)
 8001036:	731a      	strb	r2, [r3, #12]

								s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001038:	7afb      	ldrb	r3, [r7, #11]
 800103a:	4a35      	ldr	r2, [pc, #212]	; (8001110 <main+0xbe4>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3330      	adds	r3, #48	; 0x30
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <main+0xbdc>)
 800104a:	739a      	strb	r2, [r3, #14]
								s_cal_data[15] = 0x30 + (rtc_time.min%10);
 800104c:	7afa      	ldrb	r2, [r7, #11]
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <main+0xbe4>)
 8001050:	fba3 1302 	umull	r1, r3, r3, r2
 8001054:	08d9      	lsrs	r1, r3, #3
 8001056:	460b      	mov	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	3330      	adds	r3, #48	; 0x30
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <main+0xbdc>)
 8001068:	73da      	strb	r2, [r3, #15]

								s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	4a28      	ldr	r2, [pc, #160]	; (8001110 <main+0xbe4>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	3330      	adds	r3, #48	; 0x30
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <main+0xbdc>)
 800107c:	745a      	strb	r2, [r3, #17]
								s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 800107e:	7b3a      	ldrb	r2, [r7, #12]
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <main+0xbe4>)
 8001082:	fba3 1302 	umull	r1, r3, r3, r2
 8001086:	08d9      	lsrs	r1, r3, #3
 8001088:	460b      	mov	r3, r1
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3330      	adds	r3, #48	; 0x30
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <main+0xbdc>)
 800109a:	749a      	strb	r2, [r3, #18]

								Usart2_SendData(s_cal_data,strlen(s_cal_data));
 800109c:	481a      	ldr	r0, [pc, #104]	; (8001108 <main+0xbdc>)
 800109e:	f7ff f855 	bl	800014c <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4818      	ldr	r0, [pc, #96]	; (8001108 <main+0xbdc>)
 80010a8:	f005 fece 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <main+0xbbc>)
 80010ae:	f7ff f84d 	bl	800014c <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4619      	mov	r1, r3
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <main+0xbbc>)
 80010b8:	f005 fec6 	bl	8006e48 <Usart2_SendData>


								Usart2_SendData(s_lcd_ok,strlen(s_lcd_ok));
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <main+0xbb8>)
 80010be:	f7ff f845 	bl	800014c <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <main+0xbb8>)
 80010c8:	f005 febe 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <main+0xbbc>)
 80010ce:	f7ff f83d 	bl	800014c <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4619      	mov	r1, r3
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <main+0xbbc>)
 80010d8:	f005 feb6 	bl	8006e48 <Usart2_SendData>
								break;
 80010dc:	f000 bc2c 	b.w	8001938 <main+0x140c>
 80010e0:	2000091c 	.word	0x2000091c
 80010e4:	20000058 	.word	0x20000058
 80010e8:	20000168 	.word	0x20000168
 80010ec:	20000370 	.word	0x20000370
 80010f0:	20000380 	.word	0x20000380
 80010f4:	20000390 	.word	0x20000390
 80010f8:	2000068c 	.word	0x2000068c
 80010fc:	20000338 	.word	0x20000338
 8001100:	10624dd3 	.word	0x10624dd3
 8001104:	66666667 	.word	0x66666667
 8001108:	20000220 	.word	0x20000220
 800110c:	51eb851f 	.word	0x51eb851f
 8001110:	cccccccd 	.word	0xcccccccd
							case 103://отправка настроек устройства

								break;
							case 201://чтение последнего штрих-кода
								Usart2_SendData(android_last_barcode,strlen(android_last_barcode));
 8001114:	481f      	ldr	r0, [pc, #124]	; (8001194 <main+0xc68>)
 8001116:	f7ff f819 	bl	800014c <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	4619      	mov	r1, r3
 800111e:	481d      	ldr	r0, [pc, #116]	; (8001194 <main+0xc68>)
 8001120:	f005 fe92 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <main+0xc6c>)
 8001126:	f7ff f811 	bl	800014c <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	4619      	mov	r1, r3
 800112e:	481a      	ldr	r0, [pc, #104]	; (8001198 <main+0xc6c>)
 8001130:	f005 fe8a 	bl	8006e48 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8001134:	bf00      	nop
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <main+0xc70>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <main+0xc22>
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	4817      	ldr	r0, [pc, #92]	; (80011a0 <main+0xc74>)
 8001144:	f005 fb76 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f3      	bne.n	8001136 <main+0xc0a>
								SPI_FLASH_CONFIG();
 800114e:	f004 fc2d 	bl	80059ac <SPI_FLASH_CONFIG>



								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	2100      	movs	r1, #0
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <main+0xc78>)
 8001158:	f006 f922 	bl	80073a0 <memset>
								spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <main+0xc7c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <main+0xc80>)
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	b291      	uxth	r1, r2
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <main+0xc78>)
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fc77 	bl	8005a5c <spiFlash_Read>
								for(int j = 0; j < 7; j++){
 800116e:	2300      	movs	r3, #0
 8001170:	643b      	str	r3, [r7, #64]	; 0x40
 8001172:	e024      	b.n	80011be <main+0xc92>
									if(rd_test_buff[j] == 0xFF){
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <main+0xc78>)
 8001176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2bff      	cmp	r3, #255	; 0xff
 800117e:	d11b      	bne.n	80011b8 <main+0xc8c>
										val_cnt = rd_test_buff[j-1];
 8001180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001182:	3b01      	subs	r3, #1
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <main+0xc78>)
 8001186:	5cd2      	ldrb	r2, [r2, r3]
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <main+0xc84>)
 800118a:	701a      	strb	r2, [r3, #0]
										bcd_cnt_addr = j;
 800118c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <main+0xc88>)
 8001190:	6013      	str	r3, [r2, #0]
										break;
 8001192:	e017      	b.n	80011c4 <main+0xc98>
 8001194:	200003a0 	.word	0x200003a0
 8001198:	20000168 	.word	0x20000168
 800119c:	20000d2e 	.word	0x20000d2e
 80011a0:	40003800 	.word	0x40003800
 80011a4:	200009dc 	.word	0x200009dc
 80011a8:	2000093c 	.word	0x2000093c
 80011ac:	2000092c 	.word	0x2000092c
 80011b0:	2000094a 	.word	0x2000094a
 80011b4:	2000095c 	.word	0x2000095c
								for(int j = 0; j < 7; j++){
 80011b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ba:	3301      	adds	r3, #1
 80011bc:	643b      	str	r3, [r7, #64]	; 0x40
 80011be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	ddd7      	ble.n	8001174 <main+0xc48>
									}
								}
								if(val_cnt == 0){
 80011c4:	4bb4      	ldr	r3, [pc, #720]	; (8001498 <main+0xf6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10f      	bne.n	80011ec <main+0xcc0>
									Usart2_SendData(android_empty_bar_mem,strlen(android_empty_bar_mem));
 80011cc:	48b3      	ldr	r0, [pc, #716]	; (800149c <main+0xf70>)
 80011ce:	f7fe ffbd 	bl	800014c <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	48b1      	ldr	r0, [pc, #708]	; (800149c <main+0xf70>)
 80011d8:	f005 fe36 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 80011dc:	48b0      	ldr	r0, [pc, #704]	; (80014a0 <main+0xf74>)
 80011de:	f7fe ffb5 	bl	800014c <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4619      	mov	r1, r3
 80011e6:	48ae      	ldr	r0, [pc, #696]	; (80014a0 <main+0xf74>)
 80011e8:	f005 fe2e 	bl	8006e48 <Usart2_SendData>

									}

								if(val_cnt > 0 && val_cnt < 7){
 80011ec:	4baa      	ldr	r3, [pc, #680]	; (8001498 <main+0xf6c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 814a 	beq.w	800148a <main+0xf5e>
 80011f6:	4ba8      	ldr	r3, [pc, #672]	; (8001498 <main+0xf6c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	f200 8145 	bhi.w	800148a <main+0xf5e>
									bar_flash_addr = 8192 + (val_cnt - 1) * 16;
 8001200:	4ba5      	ldr	r3, [pc, #660]	; (8001498 <main+0xf6c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	461a      	mov	r2, r3
 800120c:	4ba5      	ldr	r3, [pc, #660]	; (80014a4 <main+0xf78>)
 800120e:	601a      	str	r2, [r3, #0]
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001210:	22ff      	movs	r2, #255	; 0xff
 8001212:	2100      	movs	r1, #0
 8001214:	48a4      	ldr	r0, [pc, #656]	; (80014a8 <main+0xf7c>)
 8001216:	f006 f8c3 	bl	80073a0 <memset>
									memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 800121a:	2210      	movs	r2, #16
 800121c:	2100      	movs	r1, #0
 800121e:	48a3      	ldr	r0, [pc, #652]	; (80014ac <main+0xf80>)
 8001220:	f006 f8be 	bl	80073a0 <memset>
									spiFlash_Read(bar_flash_addr, cnt_flash, rd_flash_buff);
 8001224:	4b9f      	ldr	r3, [pc, #636]	; (80014a4 <main+0xf78>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4aa1      	ldr	r2, [pc, #644]	; (80014b0 <main+0xf84>)
 800122a:	8811      	ldrh	r1, [r2, #0]
 800122c:	4a9f      	ldr	r2, [pc, #636]	; (80014ac <main+0xf80>)
 800122e:	4618      	mov	r0, r3
 8001230:	f004 fc14 	bl	8005a5c <spiFlash_Read>
									flash_timer = flash_conv2_timer(rd_flash_buff);
 8001234:	489d      	ldr	r0, [pc, #628]	; (80014ac <main+0xf80>)
 8001236:	f002 faaf 	bl	8003798 <flash_conv2_timer>
 800123a:	4603      	mov	r3, r0
 800123c:	4a9d      	ldr	r2, [pc, #628]	; (80014b4 <main+0xf88>)
 800123e:	6013      	str	r3, [r2, #0]
									timer_to_cal(flash_timer, &rtc_time);
 8001240:	4b9c      	ldr	r3, [pc, #624]	; (80014b4 <main+0xf88>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1d3a      	adds	r2, r7, #4
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fe7b 	bl	8004f44 <timer_to_cal>

									s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a99      	ldr	r2, [pc, #612]	; (80014b8 <main+0xf8c>)
 8001252:	fb82 1203 	smull	r1, r2, r2, r3
 8001256:	1192      	asrs	r2, r2, #6
 8001258:	17db      	asrs	r3, r3, #31
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	4b97      	ldr	r3, [pc, #604]	; (80014bc <main+0xf90>)
 800125e:	fb83 1302 	smull	r1, r3, r3, r2
 8001262:	1099      	asrs	r1, r3, #2
 8001264:	17d3      	asrs	r3, r2, #31
 8001266:	1ac9      	subs	r1, r1, r3
 8001268:	460b      	mov	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	1ad1      	subs	r1, r2, r3
 8001272:	b2cb      	uxtb	r3, r1
 8001274:	3330      	adds	r3, #48	; 0x30
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b91      	ldr	r3, [pc, #580]	; (80014c0 <main+0xf94>)
 800127a:	701a      	strb	r2, [r3, #0]
									s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a91      	ldr	r2, [pc, #580]	; (80014c4 <main+0xf98>)
 8001280:	fb82 1203 	smull	r1, r2, r2, r3
 8001284:	1152      	asrs	r2, r2, #5
 8001286:	17db      	asrs	r3, r3, #31
 8001288:	1ad2      	subs	r2, r2, r3
 800128a:	4b8c      	ldr	r3, [pc, #560]	; (80014bc <main+0xf90>)
 800128c:	fb83 1302 	smull	r1, r3, r3, r2
 8001290:	1099      	asrs	r1, r3, #2
 8001292:	17d3      	asrs	r3, r2, #31
 8001294:	1ac9      	subs	r1, r1, r3
 8001296:	460b      	mov	r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	1ad1      	subs	r1, r2, r3
 80012a0:	b2cb      	uxtb	r3, r1
 80012a2:	3330      	adds	r3, #48	; 0x30
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b86      	ldr	r3, [pc, #536]	; (80014c0 <main+0xf94>)
 80012a8:	705a      	strb	r2, [r3, #1]
									s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a83      	ldr	r2, [pc, #524]	; (80014bc <main+0xf90>)
 80012ae:	fb82 1203 	smull	r1, r2, r2, r3
 80012b2:	1092      	asrs	r2, r2, #2
 80012b4:	17db      	asrs	r3, r3, #31
 80012b6:	1ad2      	subs	r2, r2, r3
 80012b8:	4b80      	ldr	r3, [pc, #512]	; (80014bc <main+0xf90>)
 80012ba:	fb83 1302 	smull	r1, r3, r3, r2
 80012be:	1099      	asrs	r1, r3, #2
 80012c0:	17d3      	asrs	r3, r2, #31
 80012c2:	1ac9      	subs	r1, r1, r3
 80012c4:	460b      	mov	r3, r1
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	1ad1      	subs	r1, r2, r3
 80012ce:	b2cb      	uxtb	r3, r1
 80012d0:	3330      	adds	r3, #48	; 0x30
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <main+0xf94>)
 80012d6:	709a      	strb	r2, [r3, #2]
									s_cal_data[3] = 0x30 + (rtc_time.year%10);
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4b78      	ldr	r3, [pc, #480]	; (80014bc <main+0xf90>)
 80012dc:	fb83 1302 	smull	r1, r3, r3, r2
 80012e0:	1099      	asrs	r1, r3, #2
 80012e2:	17d3      	asrs	r3, r2, #31
 80012e4:	1ac9      	subs	r1, r1, r3
 80012e6:	460b      	mov	r3, r1
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	1ad1      	subs	r1, r2, r3
 80012f0:	b2cb      	uxtb	r3, r1
 80012f2:	3330      	adds	r3, #48	; 0x30
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b72      	ldr	r3, [pc, #456]	; (80014c0 <main+0xf94>)
 80012f8:	70da      	strb	r2, [r3, #3]

									s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	4a72      	ldr	r2, [pc, #456]	; (80014c8 <main+0xf9c>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	08db      	lsrs	r3, r3, #3
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3330      	adds	r3, #48	; 0x30
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <main+0xf94>)
 800130c:	715a      	strb	r2, [r3, #5]
									s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 800130e:	7a3a      	ldrb	r2, [r7, #8]
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <main+0xf9c>)
 8001312:	fba3 1302 	umull	r1, r3, r3, r2
 8001316:	08d9      	lsrs	r1, r3, #3
 8001318:	460b      	mov	r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	3330      	adds	r3, #48	; 0x30
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <main+0xf94>)
 800132a:	719a      	strb	r2, [r3, #6]

									s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 800132c:	7a7b      	ldrb	r3, [r7, #9]
 800132e:	4a66      	ldr	r2, [pc, #408]	; (80014c8 <main+0xf9c>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3330      	adds	r3, #48	; 0x30
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <main+0xf94>)
 800133e:	721a      	strb	r2, [r3, #8]
									s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8001340:	7a7a      	ldrb	r2, [r7, #9]
 8001342:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <main+0xf9c>)
 8001344:	fba3 1302 	umull	r1, r3, r3, r2
 8001348:	08d9      	lsrs	r1, r3, #3
 800134a:	460b      	mov	r3, r1
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3330      	adds	r3, #48	; 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <main+0xf94>)
 800135c:	725a      	strb	r2, [r3, #9]

									s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 800135e:	7abb      	ldrb	r3, [r7, #10]
 8001360:	4a59      	ldr	r2, [pc, #356]	; (80014c8 <main+0xf9c>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3330      	adds	r3, #48	; 0x30
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b54      	ldr	r3, [pc, #336]	; (80014c0 <main+0xf94>)
 8001370:	72da      	strb	r2, [r3, #11]
									s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001372:	7aba      	ldrb	r2, [r7, #10]
 8001374:	4b54      	ldr	r3, [pc, #336]	; (80014c8 <main+0xf9c>)
 8001376:	fba3 1302 	umull	r1, r3, r3, r2
 800137a:	08d9      	lsrs	r1, r3, #3
 800137c:	460b      	mov	r3, r1
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3330      	adds	r3, #48	; 0x30
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <main+0xf94>)
 800138e:	731a      	strb	r2, [r3, #12]

									s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <main+0xf9c>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3330      	adds	r3, #48	; 0x30
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <main+0xf94>)
 80013a2:	739a      	strb	r2, [r3, #14]
									s_cal_data[15] = 0x30 + (rtc_time.min%10);
 80013a4:	7afa      	ldrb	r2, [r7, #11]
 80013a6:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <main+0xf9c>)
 80013a8:	fba3 1302 	umull	r1, r3, r3, r2
 80013ac:	08d9      	lsrs	r1, r3, #3
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3330      	adds	r3, #48	; 0x30
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <main+0xf94>)
 80013c0:	73da      	strb	r2, [r3, #15]

									s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 80013c2:	7b3b      	ldrb	r3, [r7, #12]
 80013c4:	4a40      	ldr	r2, [pc, #256]	; (80014c8 <main+0xf9c>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	3330      	adds	r3, #48	; 0x30
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <main+0xf94>)
 80013d4:	745a      	strb	r2, [r3, #17]
									s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 80013d6:	7b3a      	ldrb	r2, [r7, #12]
 80013d8:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <main+0xf9c>)
 80013da:	fba3 1302 	umull	r1, r3, r3, r2
 80013de:	08d9      	lsrs	r1, r3, #3
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <main+0xf94>)
 80013f2:	749a      	strb	r2, [r3, #18]

									flash_conv2_bcode(rd_flash_buff);
 80013f4:	482d      	ldr	r0, [pc, #180]	; (80014ac <main+0xf80>)
 80013f6:	f002 f9eb 	bl	80037d0 <flash_conv2_bcode>
									memset(f_sBarCode,0,strlen(f_sNfcCode));
 80013fa:	4834      	ldr	r0, [pc, #208]	; (80014cc <main+0xfa0>)
 80013fc:	f7fe fea6 	bl	800014c <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	4832      	ldr	r0, [pc, #200]	; (80014d0 <main+0xfa4>)
 8001408:	f005 ffca 	bl	80073a0 <memset>
									strlcpy ( f_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 800140c:	221a      	movs	r2, #26
 800140e:	4931      	ldr	r1, [pc, #196]	; (80014d4 <main+0xfa8>)
 8001410:	482f      	ldr	r0, [pc, #188]	; (80014d0 <main+0xfa4>)
 8001412:	f005 ffe4 	bl	80073de <strlcpy>
									strcat(f_sBarCode,fl_bar_buff );
 8001416:	4930      	ldr	r1, [pc, #192]	; (80014d8 <main+0xfac>)
 8001418:	482d      	ldr	r0, [pc, #180]	; (80014d0 <main+0xfa4>)
 800141a:	f005 ffc9 	bl	80073b0 <strcat>
									strncat(s_flash_d_c, s_cal_data, 19);
 800141e:	2213      	movs	r2, #19
 8001420:	4927      	ldr	r1, [pc, #156]	; (80014c0 <main+0xf94>)
 8001422:	482e      	ldr	r0, [pc, #184]	; (80014dc <main+0xfb0>)
 8001424:	f005 fff0 	bl	8007408 <strncat>
									strncat(s_flash_d_c, s_space, strlen(s_space));
 8001428:	2300      	movs	r3, #0
 800142a:	461a      	mov	r2, r3
 800142c:	492c      	ldr	r1, [pc, #176]	; (80014e0 <main+0xfb4>)
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <main+0xfb0>)
 8001430:	f005 ffea 	bl	8007408 <strncat>
									strncat(s_flash_d_c, f_sBarCode, strlen(f_sBarCode));
 8001434:	4826      	ldr	r0, [pc, #152]	; (80014d0 <main+0xfa4>)
 8001436:	f7fe fe89 	bl	800014c <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <main+0xfa4>)
 8001440:	4826      	ldr	r0, [pc, #152]	; (80014dc <main+0xfb0>)
 8001442:	f005 ffe1 	bl	8007408 <strncat>
									strncat(s_flash_d_c, s_newline, strlen(s_newline));
 8001446:	4816      	ldr	r0, [pc, #88]	; (80014a0 <main+0xf74>)
 8001448:	f7fe fe80 	bl	800014c <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4913      	ldr	r1, [pc, #76]	; (80014a0 <main+0xf74>)
 8001452:	4822      	ldr	r0, [pc, #136]	; (80014dc <main+0xfb0>)
 8001454:	f005 ffd8 	bl	8007408 <strncat>

									Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 8001458:	4820      	ldr	r0, [pc, #128]	; (80014dc <main+0xfb0>)
 800145a:	f7fe fe77 	bl	800014c <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	4619      	mov	r1, r3
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <main+0xfb0>)
 8001464:	f005 fcf0 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <main+0xf74>)
 800146a:	f7fe fe6f 	bl	800014c <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <main+0xf74>)
 8001474:	f005 fce8 	bl	8006e48 <Usart2_SendData>

									memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <main+0xfb0>)
 800147a:	f7fe fe67 	bl	800014c <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	2100      	movs	r1, #0
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <main+0xfb0>)
 8001486:	f005 ff8b 	bl	80073a0 <memset>
								}

								SpiActive = 0;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <main+0xfb8>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 8001490:	f004 f97e 	bl	8005790 <PN532_SPIInit>
								break;
 8001494:	e250      	b.n	8001938 <main+0x140c>
 8001496:	bf00      	nop
 8001498:	2000094a 	.word	0x2000094a
 800149c:	200003f8 	.word	0x200003f8
 80014a0:	20000168 	.word	0x20000168
 80014a4:	20000950 	.word	0x20000950
 80014a8:	200009dc 	.word	0x200009dc
 80014ac:	20000adc 	.word	0x20000adc
 80014b0:	20000d16 	.word	0x20000d16
 80014b4:	20000958 	.word	0x20000958
 80014b8:	10624dd3 	.word	0x10624dd3
 80014bc:	66666667 	.word	0x66666667
 80014c0:	20000220 	.word	0x20000220
 80014c4:	51eb851f 	.word	0x51eb851f
 80014c8:	cccccccd 	.word	0xcccccccd
 80014cc:	200005e4 	.word	0x200005e4
 80014d0:	200005ac 	.word	0x200005ac
 80014d4:	200000d4 	.word	0x200000d4
 80014d8:	20000aec 	.word	0x20000aec
 80014dc:	2000089c 	.word	0x2000089c
 80014e0:	200001d0 	.word	0x200001d0
 80014e4:	20000d2e 	.word	0x20000d2e
							case 202://чтение последней NFC-метки
								Usart2_SendData(android_last_nfc,strlen(android_last_nfc));
 80014e8:	481f      	ldr	r0, [pc, #124]	; (8001568 <main+0x103c>)
 80014ea:	f7fe fe2f 	bl	800014c <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	481d      	ldr	r0, [pc, #116]	; (8001568 <main+0x103c>)
 80014f4:	f005 fca8 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <main+0x1040>)
 80014fa:	f7fe fe27 	bl	800014c <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	481a      	ldr	r0, [pc, #104]	; (800156c <main+0x1040>)
 8001504:	f005 fca0 	bl	8006e48 <Usart2_SendData>

								while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8001508:	bf00      	nop
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <main+0x1044>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <main+0xff6>
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	4817      	ldr	r0, [pc, #92]	; (8001574 <main+0x1048>)
 8001518:	f005 f98c 	bl	8006834 <SPI_I2S_GetFlagStatus>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f3      	bne.n	800150a <main+0xfde>
								SPI_FLASH_CONFIG();
 8001522:	f004 fa43 	bl	80059ac <SPI_FLASH_CONFIG>


								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 8001526:	22ff      	movs	r2, #255	; 0xff
 8001528:	2100      	movs	r1, #0
 800152a:	4813      	ldr	r0, [pc, #76]	; (8001578 <main+0x104c>)
 800152c:	f005 ff38 	bl	80073a0 <memset>
								spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <main+0x1050>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <main+0x1054>)
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	b291      	uxth	r1, r2
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <main+0x104c>)
 800153c:	4618      	mov	r0, r3
 800153e:	f004 fa8d 	bl	8005a5c <spiFlash_Read>
								for(int j = 0; j < 7; j++){
 8001542:	2300      	movs	r3, #0
 8001544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001546:	e024      	b.n	8001592 <main+0x1066>
								if(rd_test_buff[j] == 0xFF){
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <main+0x104c>)
 800154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2bff      	cmp	r3, #255	; 0xff
 8001552:	d11b      	bne.n	800158c <main+0x1060>
									val_cnt = rd_test_buff[j-1];
 8001554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001556:	3b01      	subs	r3, #1
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <main+0x104c>)
 800155a:	5cd2      	ldrb	r2, [r2, r3]
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <main+0x1058>)
 800155e:	701a      	strb	r2, [r3, #0]
									nfc_cnt_addr = j;
 8001560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <main+0x105c>)
 8001564:	6013      	str	r3, [r2, #0]
									break;
 8001566:	e017      	b.n	8001598 <main+0x106c>
 8001568:	200003bc 	.word	0x200003bc
 800156c:	20000168 	.word	0x20000168
 8001570:	20000d2e 	.word	0x20000d2e
 8001574:	40003800 	.word	0x40003800
 8001578:	200009dc 	.word	0x200009dc
 800157c:	20000944 	.word	0x20000944
 8001580:	2000092c 	.word	0x2000092c
 8001584:	2000094a 	.word	0x2000094a
 8001588:	20000960 	.word	0x20000960
								for(int j = 0; j < 7; j++){
 800158c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158e:	3301      	adds	r3, #1
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	2b06      	cmp	r3, #6
 8001596:	ddd7      	ble.n	8001548 <main+0x101c>
									}
								}
								if(val_cnt == 0){
 8001598:	4bb8      	ldr	r3, [pc, #736]	; (800187c <main+0x1350>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10f      	bne.n	80015c0 <main+0x1094>
								Usart2_SendData(android_empty_nfc_mem,strlen(android_empty_nfc_mem));
 80015a0:	48b7      	ldr	r0, [pc, #732]	; (8001880 <main+0x1354>)
 80015a2:	f7fe fdd3 	bl	800014c <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4619      	mov	r1, r3
 80015aa:	48b5      	ldr	r0, [pc, #724]	; (8001880 <main+0x1354>)
 80015ac:	f005 fc4c 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80015b0:	48b4      	ldr	r0, [pc, #720]	; (8001884 <main+0x1358>)
 80015b2:	f7fe fdcb 	bl	800014c <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4619      	mov	r1, r3
 80015ba:	48b2      	ldr	r0, [pc, #712]	; (8001884 <main+0x1358>)
 80015bc:	f005 fc44 	bl	8006e48 <Usart2_SendData>

								}

								if(val_cnt > 0 && val_cnt < 7){
 80015c0:	4bae      	ldr	r3, [pc, #696]	; (800187c <main+0x1350>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8152 	beq.w	800186e <main+0x1342>
 80015ca:	4bac      	ldr	r3, [pc, #688]	; (800187c <main+0x1350>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	f200 814d 	bhi.w	800186e <main+0x1342>
								nfc_flash_addr = 12288 + (val_cnt - 1) * 16;
 80015d4:	4ba9      	ldr	r3, [pc, #676]	; (800187c <main+0x1350>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f203 23ff 	addw	r3, r3, #767	; 0x2ff
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	461a      	mov	r2, r3
 80015e0:	4ba9      	ldr	r3, [pc, #676]	; (8001888 <main+0x135c>)
 80015e2:	601a      	str	r2, [r3, #0]
								memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значения счетчика записей
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	2100      	movs	r1, #0
 80015e8:	48a8      	ldr	r0, [pc, #672]	; (800188c <main+0x1360>)
 80015ea:	f005 fed9 	bl	80073a0 <memset>
								memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));
 80015ee:	2210      	movs	r2, #16
 80015f0:	2100      	movs	r1, #0
 80015f2:	48a7      	ldr	r0, [pc, #668]	; (8001890 <main+0x1364>)
 80015f4:	f005 fed4 	bl	80073a0 <memset>
								spiFlash_Read(nfc_flash_addr, cnt_flash, rd_flash_buff);
 80015f8:	4ba3      	ldr	r3, [pc, #652]	; (8001888 <main+0x135c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4aa5      	ldr	r2, [pc, #660]	; (8001894 <main+0x1368>)
 80015fe:	8811      	ldrh	r1, [r2, #0]
 8001600:	4aa3      	ldr	r2, [pc, #652]	; (8001890 <main+0x1364>)
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fa2a 	bl	8005a5c <spiFlash_Read>
								flash_timer = flash_conv2_timer(rd_flash_buff);
 8001608:	48a1      	ldr	r0, [pc, #644]	; (8001890 <main+0x1364>)
 800160a:	f002 f8c5 	bl	8003798 <flash_conv2_timer>
 800160e:	4603      	mov	r3, r0
 8001610:	4aa1      	ldr	r2, [pc, #644]	; (8001898 <main+0x136c>)
 8001612:	6013      	str	r3, [r2, #0]
								timer_to_cal(flash_timer, &rtc_time);
 8001614:	4ba0      	ldr	r3, [pc, #640]	; (8001898 <main+0x136c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	1d3a      	adds	r2, r7, #4
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fc91 	bl	8004f44 <timer_to_cal>

								s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a9d      	ldr	r2, [pc, #628]	; (800189c <main+0x1370>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	1192      	asrs	r2, r2, #6
 800162c:	17db      	asrs	r3, r3, #31
 800162e:	1ad2      	subs	r2, r2, r3
 8001630:	4b9b      	ldr	r3, [pc, #620]	; (80018a0 <main+0x1374>)
 8001632:	fb83 1302 	smull	r1, r3, r3, r2
 8001636:	1099      	asrs	r1, r3, #2
 8001638:	17d3      	asrs	r3, r2, #31
 800163a:	1ac9      	subs	r1, r1, r3
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	1ad1      	subs	r1, r2, r3
 8001646:	b2cb      	uxtb	r3, r1
 8001648:	3330      	adds	r3, #48	; 0x30
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b95      	ldr	r3, [pc, #596]	; (80018a4 <main+0x1378>)
 800164e:	701a      	strb	r2, [r3, #0]
								s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a95      	ldr	r2, [pc, #596]	; (80018a8 <main+0x137c>)
 8001654:	fb82 1203 	smull	r1, r2, r2, r3
 8001658:	1152      	asrs	r2, r2, #5
 800165a:	17db      	asrs	r3, r3, #31
 800165c:	1ad2      	subs	r2, r2, r3
 800165e:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <main+0x1374>)
 8001660:	fb83 1302 	smull	r1, r3, r3, r2
 8001664:	1099      	asrs	r1, r3, #2
 8001666:	17d3      	asrs	r3, r2, #31
 8001668:	1ac9      	subs	r1, r1, r3
 800166a:	460b      	mov	r3, r1
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	1ad1      	subs	r1, r2, r3
 8001674:	b2cb      	uxtb	r3, r1
 8001676:	3330      	adds	r3, #48	; 0x30
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b8a      	ldr	r3, [pc, #552]	; (80018a4 <main+0x1378>)
 800167c:	705a      	strb	r2, [r3, #1]
								s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a87      	ldr	r2, [pc, #540]	; (80018a0 <main+0x1374>)
 8001682:	fb82 1203 	smull	r1, r2, r2, r3
 8001686:	1092      	asrs	r2, r2, #2
 8001688:	17db      	asrs	r3, r3, #31
 800168a:	1ad2      	subs	r2, r2, r3
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <main+0x1374>)
 800168e:	fb83 1302 	smull	r1, r3, r3, r2
 8001692:	1099      	asrs	r1, r3, #2
 8001694:	17d3      	asrs	r3, r2, #31
 8001696:	1ac9      	subs	r1, r1, r3
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	1ad1      	subs	r1, r2, r3
 80016a2:	b2cb      	uxtb	r3, r1
 80016a4:	3330      	adds	r3, #48	; 0x30
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b7e      	ldr	r3, [pc, #504]	; (80018a4 <main+0x1378>)
 80016aa:	709a      	strb	r2, [r3, #2]
								s_cal_data[3] = 0x30 + (rtc_time.year%10);
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4b7c      	ldr	r3, [pc, #496]	; (80018a0 <main+0x1374>)
 80016b0:	fb83 1302 	smull	r1, r3, r3, r2
 80016b4:	1099      	asrs	r1, r3, #2
 80016b6:	17d3      	asrs	r3, r2, #31
 80016b8:	1ac9      	subs	r1, r1, r3
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	1ad1      	subs	r1, r2, r3
 80016c4:	b2cb      	uxtb	r3, r1
 80016c6:	3330      	adds	r3, #48	; 0x30
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <main+0x1378>)
 80016cc:	70da      	strb	r2, [r3, #3]

								s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 80016ce:	7a3b      	ldrb	r3, [r7, #8]
 80016d0:	4a76      	ldr	r2, [pc, #472]	; (80018ac <main+0x1380>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	3330      	adds	r3, #48	; 0x30
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <main+0x1378>)
 80016e0:	715a      	strb	r2, [r3, #5]
								s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 80016e2:	7a3a      	ldrb	r2, [r7, #8]
 80016e4:	4b71      	ldr	r3, [pc, #452]	; (80018ac <main+0x1380>)
 80016e6:	fba3 1302 	umull	r1, r3, r3, r2
 80016ea:	08d9      	lsrs	r1, r3, #3
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	3330      	adds	r3, #48	; 0x30
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <main+0x1378>)
 80016fe:	719a      	strb	r2, [r3, #6]

								s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001700:	7a7b      	ldrb	r3, [r7, #9]
 8001702:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <main+0x1380>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	3330      	adds	r3, #48	; 0x30
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <main+0x1378>)
 8001712:	721a      	strb	r2, [r3, #8]
								s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8001714:	7a7a      	ldrb	r2, [r7, #9]
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <main+0x1380>)
 8001718:	fba3 1302 	umull	r1, r3, r3, r2
 800171c:	08d9      	lsrs	r1, r3, #3
 800171e:	460b      	mov	r3, r1
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3330      	adds	r3, #48	; 0x30
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <main+0x1378>)
 8001730:	725a      	strb	r2, [r3, #9]

								s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001732:	7abb      	ldrb	r3, [r7, #10]
 8001734:	4a5d      	ldr	r2, [pc, #372]	; (80018ac <main+0x1380>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3330      	adds	r3, #48	; 0x30
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <main+0x1378>)
 8001744:	72da      	strb	r2, [r3, #11]
								s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001746:	7aba      	ldrb	r2, [r7, #10]
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <main+0x1380>)
 800174a:	fba3 1302 	umull	r1, r3, r3, r2
 800174e:	08d9      	lsrs	r1, r3, #3
 8001750:	460b      	mov	r3, r1
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	3330      	adds	r3, #48	; 0x30
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <main+0x1378>)
 8001762:	731a      	strb	r2, [r3, #12]

								s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	4a51      	ldr	r2, [pc, #324]	; (80018ac <main+0x1380>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	3330      	adds	r3, #48	; 0x30
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <main+0x1378>)
 8001776:	739a      	strb	r2, [r3, #14]
								s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8001778:	7afa      	ldrb	r2, [r7, #11]
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <main+0x1380>)
 800177c:	fba3 1302 	umull	r1, r3, r3, r2
 8001780:	08d9      	lsrs	r1, r3, #3
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3330      	adds	r3, #48	; 0x30
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <main+0x1378>)
 8001794:	73da      	strb	r2, [r3, #15]

								s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8001796:	7b3b      	ldrb	r3, [r7, #12]
 8001798:	4a44      	ldr	r2, [pc, #272]	; (80018ac <main+0x1380>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3330      	adds	r3, #48	; 0x30
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <main+0x1378>)
 80017a8:	745a      	strb	r2, [r3, #17]
								s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 80017aa:	7b3a      	ldrb	r2, [r7, #12]
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <main+0x1380>)
 80017ae:	fba3 1302 	umull	r1, r3, r3, r2
 80017b2:	08d9      	lsrs	r1, r3, #3
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3330      	adds	r3, #48	; 0x30
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <main+0x1378>)
 80017c6:	749a      	strb	r2, [r3, #18]

								flash_uid = flash_conv2_uid(rd_flash_buff);
 80017c8:	4831      	ldr	r0, [pc, #196]	; (8001890 <main+0x1364>)
 80017ca:	f002 f879 	bl	80038c0 <flash_conv2_uid>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a37      	ldr	r2, [pc, #220]	; (80018b0 <main+0x1384>)
 80017d2:	6013      	str	r3, [r2, #0]
								flash_conv2_nfc(flash_uid);
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <main+0x1384>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 f88f 	bl	80038fc <flash_conv2_nfc>

								memset(f_sNfcCode,0,strlen(f_sNfcCode));
 80017de:	4835      	ldr	r0, [pc, #212]	; (80018b4 <main+0x1388>)
 80017e0:	f7fe fcb4 	bl	800014c <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	2100      	movs	r1, #0
 80017ea:	4832      	ldr	r0, [pc, #200]	; (80018b4 <main+0x1388>)
 80017ec:	f005 fdd8 	bl	80073a0 <memset>
								strlcpy ( f_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 80017f0:	221a      	movs	r2, #26
 80017f2:	4931      	ldr	r1, [pc, #196]	; (80018b8 <main+0x138c>)
 80017f4:	482f      	ldr	r0, [pc, #188]	; (80018b4 <main+0x1388>)
 80017f6:	f005 fdf2 	bl	80073de <strlcpy>
								strcat(f_sNfcCode,nfc_uid_arr );
 80017fa:	4930      	ldr	r1, [pc, #192]	; (80018bc <main+0x1390>)
 80017fc:	482d      	ldr	r0, [pc, #180]	; (80018b4 <main+0x1388>)
 80017fe:	f005 fdd7 	bl	80073b0 <strcat>
								strncat(s_flash_d_c, s_cal_data, 19);
 8001802:	2213      	movs	r2, #19
 8001804:	4927      	ldr	r1, [pc, #156]	; (80018a4 <main+0x1378>)
 8001806:	482e      	ldr	r0, [pc, #184]	; (80018c0 <main+0x1394>)
 8001808:	f005 fdfe 	bl	8007408 <strncat>
								strncat(s_flash_d_c, s_space, strlen(s_space));
 800180c:	2300      	movs	r3, #0
 800180e:	461a      	mov	r2, r3
 8001810:	492c      	ldr	r1, [pc, #176]	; (80018c4 <main+0x1398>)
 8001812:	482b      	ldr	r0, [pc, #172]	; (80018c0 <main+0x1394>)
 8001814:	f005 fdf8 	bl	8007408 <strncat>
								strncat(s_flash_d_c, f_sNfcCode, strlen(f_sNfcCode));
 8001818:	4826      	ldr	r0, [pc, #152]	; (80018b4 <main+0x1388>)
 800181a:	f7fe fc97 	bl	800014c <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4924      	ldr	r1, [pc, #144]	; (80018b4 <main+0x1388>)
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <main+0x1394>)
 8001826:	f005 fdef 	bl	8007408 <strncat>
								strncat(s_flash_d_c, s_newline, strlen(s_newline));
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <main+0x1358>)
 800182c:	f7fe fc8e 	bl	800014c <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4913      	ldr	r1, [pc, #76]	; (8001884 <main+0x1358>)
 8001836:	4822      	ldr	r0, [pc, #136]	; (80018c0 <main+0x1394>)
 8001838:	f005 fde6 	bl	8007408 <strncat>

								Usart2_SendData(s_flash_d_c,strlen(s_flash_d_c));
 800183c:	4820      	ldr	r0, [pc, #128]	; (80018c0 <main+0x1394>)
 800183e:	f7fe fc85 	bl	800014c <strlen>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	481e      	ldr	r0, [pc, #120]	; (80018c0 <main+0x1394>)
 8001848:	f005 fafe 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <main+0x1358>)
 800184e:	f7fe fc7d 	bl	800014c <strlen>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <main+0x1358>)
 8001858:	f005 faf6 	bl	8006e48 <Usart2_SendData>

								memset(s_flash_d_c, 0, strlen(s_flash_d_c));
 800185c:	4818      	ldr	r0, [pc, #96]	; (80018c0 <main+0x1394>)
 800185e:	f7fe fc75 	bl	800014c <strlen>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	4815      	ldr	r0, [pc, #84]	; (80018c0 <main+0x1394>)
 800186a:	f005 fd99 	bl	80073a0 <memset>
								}

								SpiActive = 0;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <main+0x139c>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
								PN532_SPIInit();
 8001874:	f003 ff8c 	bl	8005790 <PN532_SPIInit>

								break;
 8001878:	e05e      	b.n	8001938 <main+0x140c>
 800187a:	bf00      	nop
 800187c:	2000094a 	.word	0x2000094a
 8001880:	2000041c 	.word	0x2000041c
 8001884:	20000168 	.word	0x20000168
 8001888:	20000954 	.word	0x20000954
 800188c:	200009dc 	.word	0x200009dc
 8001890:	20000adc 	.word	0x20000adc
 8001894:	20000d16 	.word	0x20000d16
 8001898:	20000958 	.word	0x20000958
 800189c:	10624dd3 	.word	0x10624dd3
 80018a0:	66666667 	.word	0x66666667
 80018a4:	20000220 	.word	0x20000220
 80018a8:	51eb851f 	.word	0x51eb851f
 80018ac:	cccccccd 	.word	0xcccccccd
 80018b0:	20000964 	.word	0x20000964
 80018b4:	200005e4 	.word	0x200005e4
 80018b8:	200000e0 	.word	0x200000e0
 80018bc:	200009b0 	.word	0x200009b0
 80018c0:	2000089c 	.word	0x2000089c
 80018c4:	200001d0 	.word	0x200001d0
 80018c8:	20000d2e 	.word	0x20000d2e
							case 203://чтение последних пяти записей
								Usart2_SendData(android_last_5records,strlen(android_last_5records));
 80018cc:	4869      	ldr	r0, [pc, #420]	; (8001a74 <main+0x1548>)
 80018ce:	f7fe fc3d 	bl	800014c <strlen>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4867      	ldr	r0, [pc, #412]	; (8001a74 <main+0x1548>)
 80018d8:	f005 fab6 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80018dc:	4866      	ldr	r0, [pc, #408]	; (8001a78 <main+0x154c>)
 80018de:	f7fe fc35 	bl	800014c <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4864      	ldr	r0, [pc, #400]	; (8001a78 <main+0x154c>)
 80018e8:	f005 faae 	bl	8006e48 <Usart2_SendData>
								break;
 80018ec:	e024      	b.n	8001938 <main+0x140c>
							default:
								Usart2_SendData(android_no_such_cmd,strlen(android_no_such_cmd));
 80018ee:	4863      	ldr	r0, [pc, #396]	; (8001a7c <main+0x1550>)
 80018f0:	f7fe fc2c 	bl	800014c <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4860      	ldr	r0, [pc, #384]	; (8001a7c <main+0x1550>)
 80018fa:	f005 faa5 	bl	8006e48 <Usart2_SendData>
								Usart2_SendData(s_newline,strlen(s_newline));
 80018fe:	485e      	ldr	r0, [pc, #376]	; (8001a78 <main+0x154c>)
 8001900:	f7fe fc24 	bl	800014c <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	4619      	mov	r1, r3
 8001908:	485b      	ldr	r0, [pc, #364]	; (8001a78 <main+0x154c>)
 800190a:	f005 fa9d 	bl	8006e48 <Usart2_SendData>
								break;
 800190e:	e013      	b.n	8001938 <main+0x140c>
						}
					} else {
						Usart2_SendData(android_no_cmd_error,strlen(android_no_cmd_error));
 8001910:	485b      	ldr	r0, [pc, #364]	; (8001a80 <main+0x1554>)
 8001912:	f7fe fc1b 	bl	800014c <strlen>
 8001916:	4603      	mov	r3, r0
 8001918:	4619      	mov	r1, r3
 800191a:	4859      	ldr	r0, [pc, #356]	; (8001a80 <main+0x1554>)
 800191c:	f005 fa94 	bl	8006e48 <Usart2_SendData>
						Usart2_SendData(s_newline,strlen(s_newline));
 8001920:	4855      	ldr	r0, [pc, #340]	; (8001a78 <main+0x154c>)
 8001922:	f7fe fc13 	bl	800014c <strlen>
 8001926:	4603      	mov	r3, r0
 8001928:	4619      	mov	r1, r3
 800192a:	4853      	ldr	r0, [pc, #332]	; (8001a78 <main+0x154c>)
 800192c:	f005 fa8c 	bl	8006e48 <Usart2_SendData>
 8001930:	e002      	b.n	8001938 <main+0x140c>
								break;
 8001932:	bf00      	nop
 8001934:	e000      	b.n	8001938 <main+0x140c>
								break;
 8001936:	bf00      	nop

					}



					Usart2_SendData(date_sBuffer,strlen(date_sBuffer));
 8001938:	4852      	ldr	r0, [pc, #328]	; (8001a84 <main+0x1558>)
 800193a:	f7fe fc07 	bl	800014c <strlen>
 800193e:	4603      	mov	r3, r0
 8001940:	4619      	mov	r1, r3
 8001942:	4850      	ldr	r0, [pc, #320]	; (8001a84 <main+0x1558>)
 8001944:	f005 fa80 	bl	8006e48 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 8001948:	484b      	ldr	r0, [pc, #300]	; (8001a78 <main+0x154c>)
 800194a:	f7fe fbff 	bl	800014c <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	4619      	mov	r1, r3
 8001952:	4849      	ldr	r0, [pc, #292]	; (8001a78 <main+0x154c>)
 8001954:	f005 fa78 	bl	8006e48 <Usart2_SendData>



					date_iBufferLength=0;
 8001958:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <main+0x155c>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

					memset(date_sBuffer, 0, strlen(date_sBuffer));
 800195e:	4849      	ldr	r0, [pc, #292]	; (8001a84 <main+0x1558>)
 8001960:	f7fe fbf4 	bl	800014c <strlen>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	2100      	movs	r1, #0
 800196a:	4846      	ldr	r0, [pc, #280]	; (8001a84 <main+0x1558>)
 800196c:	f005 fd18 	bl	80073a0 <memset>
				//GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);

				/*
				 * Декодирование данных сканера
				 */
				if (strstr(g_sBuffer, "\r\n") != NULL) {
 8001970:	4946      	ldr	r1, [pc, #280]	; (8001a8c <main+0x1560>)
 8001972:	4847      	ldr	r0, [pc, #284]	; (8001a90 <main+0x1564>)
 8001974:	f005 fd73 	bl	800745e <strstr>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 82d3 	beq.w	8001f26 <main+0x19fa>
					/* Выделение лексемы,
					 *  ограниченной справа одним из символов множества "\r\n"
					 */
					strtok ( g_sBuffer, "\r\n" );
 8001980:	4942      	ldr	r1, [pc, #264]	; (8001a8c <main+0x1560>)
 8001982:	4843      	ldr	r0, [pc, #268]	; (8001a90 <main+0x1564>)
 8001984:	f005 fd82 	bl	800748c <strtok>

					char * pBuffer = g_sBuffer;
 8001988:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <main+0x1564>)
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 800198c:	e002      	b.n	8001994 <main+0x1468>
						pBuffer++;
 800198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001990:	3301      	adds	r3, #1
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
					while (strpbrk ( pBuffer, "\n\xFF" ) != NULL) {
 8001994:	493f      	ldr	r1, [pc, #252]	; (8001a94 <main+0x1568>)
 8001996:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001998:	f005 fd49 	bl	800742e <strpbrk>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f5      	bne.n	800198e <main+0x1462>
					}

					memset(g_sBarCode,0,strlen(g_sBarCode));
 80019a2:	483d      	ldr	r0, [pc, #244]	; (8001a98 <main+0x156c>)
 80019a4:	f7fe fbd2 	bl	800014c <strlen>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	483a      	ldr	r0, [pc, #232]	; (8001a98 <main+0x156c>)
 80019b0:	f005 fcf6 	bl	80073a0 <memset>
					  strlcpy ( g_sBarCode, (const char *)s_lcd_barcode_read, USB_STATE_LEN );
 80019b4:	221a      	movs	r2, #26
 80019b6:	4939      	ldr	r1, [pc, #228]	; (8001a9c <main+0x1570>)
 80019b8:	4837      	ldr	r0, [pc, #220]	; (8001a98 <main+0x156c>)
 80019ba:	f005 fd10 	bl	80073de <strlcpy>
					  strcat(g_sBarCode,pBuffer );
 80019be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019c0:	4835      	ldr	r0, [pc, #212]	; (8001a98 <main+0x156c>)
 80019c2:	f005 fcf5 	bl	80073b0 <strcat>



						timer = RTC_GET_COUNTER();
 80019c6:	f003 fa63 	bl	8004e90 <RTC_GET_COUNTER>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <main+0x1574>)
 80019ce:	6013      	str	r3, [r2, #0]
						timer_to_cal(timer, &rtc_time);
 80019d0:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <main+0x1574>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	1d3a      	adds	r2, r7, #4
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fab3 	bl	8004f44 <timer_to_cal>
						tim = cal_to_timer(&rtc_time);
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fb99 	bl	8005118 <cal_to_timer>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <main+0x1578>)
 80019ea:	6013      	str	r3, [r2, #0]
						bcdflash = bcode_conv_to_flash(tim, g_sBuffer);
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <main+0x1578>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4927      	ldr	r1, [pc, #156]	; (8001a90 <main+0x1564>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fd9e 	bl	8003534 <bcode_conv_to_flash>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <main+0x157c>)
 80019fe:	e9c1 2300 	strd	r2, r3, [r1]
						data_conv2Flash(tim, bcdflash);
 8001a02:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <main+0x1578>)
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <main+0x157c>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	f001 fe25 	bl	800365c <data_conv2Flash>

					//	flash_conv2_bcode();



						while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8001a12:	bf00      	nop
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <main+0x1580>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <main+0x1500>
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	4823      	ldr	r0, [pc, #140]	; (8001ab0 <main+0x1584>)
 8001a22:	f004 ff07 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f3      	bne.n	8001a14 <main+0x14e8>
						SPI_FLASH_CONFIG();
 8001a2c:	f003 ffbe 	bl	80059ac <SPI_FLASH_CONFIG>


						memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));	//получение значения счетчика записей
 8001a30:	2210      	movs	r2, #16
 8001a32:	2100      	movs	r1, #0
 8001a34:	481f      	ldr	r0, [pc, #124]	; (8001ab4 <main+0x1588>)
 8001a36:	f005 fcb3 	bl	80073a0 <memset>
						spiFlash_Read(bcd_cnt_addr_start, cnt_flash_t, rd_test_buff);
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <main+0x158c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <main+0x1590>)
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	b291      	uxth	r1, r2
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <main+0x1594>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 f808 	bl	8005a5c <spiFlash_Read>
						for(int j = 0; j < 7; j++){
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a50:	e03f      	b.n	8001ad2 <main+0x15a6>
							if(rd_test_buff[j] == 0xFF){
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <main+0x1594>)
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2bff      	cmp	r3, #255	; 0xff
 8001a5c:	d136      	bne.n	8001acc <main+0x15a0>
								val_cnt = rd_test_buff[j-1];
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <main+0x1594>)
 8001a64:	5cd2      	ldrb	r2, [r2, r3]
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <main+0x1598>)
 8001a68:	701a      	strb	r2, [r3, #0]
								bcd_cnt_addr = j;
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <main+0x159c>)
 8001a6e:	6013      	str	r3, [r2, #0]
								break;
 8001a70:	e032      	b.n	8001ad8 <main+0x15ac>
 8001a72:	bf00      	nop
 8001a74:	200003d8 	.word	0x200003d8
 8001a78:	20000168 	.word	0x20000168
 8001a7c:	20000350 	.word	0x20000350
 8001a80:	2000033c 	.word	0x2000033c
 8001a84:	20000604 	.word	0x20000604
 8001a88:	20000688 	.word	0x20000688
 8001a8c:	08008668 	.word	0x08008668
 8001a90:	20000508 	.word	0x20000508
 8001a94:	08008678 	.word	0x08008678
 8001a98:	20000590 	.word	0x20000590
 8001a9c:	200000d4 	.word	0x200000d4
 8001aa0:	20000338 	.word	0x20000338
 8001aa4:	2000091c 	.word	0x2000091c
 8001aa8:	20000930 	.word	0x20000930
 8001aac:	20000d2e 	.word	0x20000d2e
 8001ab0:	40003800 	.word	0x40003800
 8001ab4:	20000adc 	.word	0x20000adc
 8001ab8:	2000093c 	.word	0x2000093c
 8001abc:	2000092c 	.word	0x2000092c
 8001ac0:	200009dc 	.word	0x200009dc
 8001ac4:	2000094a 	.word	0x2000094a
 8001ac8:	2000095c 	.word	0x2000095c
						for(int j = 0; j < 7; j++){
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	3301      	adds	r3, #1
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	ddbc      	ble.n	8001a52 <main+0x1526>
							}
						}

						if(val_cnt< 5){	//количество записей удовлетворяет диапазону
 8001ad8:	4bac      	ldr	r3, [pc, #688]	; (8001d8c <main+0x1860>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d841      	bhi.n	8001b64 <main+0x1638>
							memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8001ae0:	22ff      	movs	r2, #255	; 0xff
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	48aa      	ldr	r0, [pc, #680]	; (8001d90 <main+0x1864>)
 8001ae6:	f005 fc5b 	bl	80073a0 <memset>
							spiFlash_Read(bcd_addr_start, cnt_flash_t, rd_test_buff);
 8001aea:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <main+0x1868>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4aaa      	ldr	r2, [pc, #680]	; (8001d98 <main+0x186c>)
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	b291      	uxth	r1, r2
 8001af4:	4aa6      	ldr	r2, [pc, #664]	; (8001d90 <main+0x1864>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 ffb0 	bl	8005a5c <spiFlash_Read>
							bar_flash_addr = 8192 + val_cnt * 16;
 8001afc:	4ba3      	ldr	r3, [pc, #652]	; (8001d8c <main+0x1860>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	461a      	mov	r2, r3
 8001b08:	4ba4      	ldr	r3, [pc, #656]	; (8001d9c <main+0x1870>)
 8001b0a:	601a      	str	r2, [r3, #0]
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 8001b0c:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <main+0x1870>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4aa3      	ldr	r2, [pc, #652]	; (8001da0 <main+0x1874>)
 8001b12:	8811      	ldrh	r1, [r2, #0]
 8001b14:	4aa3      	ldr	r2, [pc, #652]	; (8001da4 <main+0x1878>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fcba 	bl	8005490 <Write_data_2Flash>
							spiFlash_write(bar_flash_addr, cnt_flash, data_to_flash);
 8001b1c:	4b9f      	ldr	r3, [pc, #636]	; (8001d9c <main+0x1870>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a9f      	ldr	r2, [pc, #636]	; (8001da0 <main+0x1874>)
 8001b22:	8811      	ldrh	r1, [r2, #0]
 8001b24:	4a9f      	ldr	r2, [pc, #636]	; (8001da4 <main+0x1878>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fff0 	bl	8005b0c <spiFlash_write>
							do {
									stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8001b2c:	2005      	movs	r0, #5
 8001b2e:	f004 f84b 	bl	8005bc8 <spiFlash_readStatus>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b9c      	ldr	r3, [pc, #624]	; (8001da8 <main+0x187c>)
 8001b38:	801a      	strh	r2, [r3, #0]
							} while (stat_reg1 & 0x01 );
 8001b3a:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <main+0x187c>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f2      	bne.n	8001b2c <main+0x1600>
							val_cnt++;
 8001b46:	4b91      	ldr	r3, [pc, #580]	; (8001d8c <main+0x1860>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b8f      	ldr	r3, [pc, #572]	; (8001d8c <main+0x1860>)
 8001b50:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//количество штрих-кодов
 8001b52:	4b96      	ldr	r3, [pc, #600]	; (8001dac <main+0x1880>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a96      	ldr	r2, [pc, #600]	; (8001db0 <main+0x1884>)
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	b291      	uxth	r1, r2
 8001b5c:	4a8b      	ldr	r2, [pc, #556]	; (8001d8c <main+0x1860>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fcea 	bl	8005538 <Set_Cnt_to_Flash>

						}
						if(bcd_cnt_addr == 6 ){		//стирка если больше диапазона
 8001b64:	4b91      	ldr	r3, [pc, #580]	; (8001dac <main+0x1880>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b06      	cmp	r3, #6
 8001b6a:	d166      	bne.n	8001c3a <main+0x170e>
							memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8001b6c:	22ff      	movs	r2, #255	; 0xff
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4887      	ldr	r0, [pc, #540]	; (8001d90 <main+0x1864>)
 8001b72:	f005 fc15 	bl	80073a0 <memset>
							spiFlash_Read(bcd_addr_start, cnt_flash_t, rd_test_buff);
 8001b76:	4b87      	ldr	r3, [pc, #540]	; (8001d94 <main+0x1868>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a87      	ldr	r2, [pc, #540]	; (8001d98 <main+0x186c>)
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	b291      	uxth	r1, r2
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <main+0x1864>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 ff6a 	bl	8005a5c <spiFlash_Read>
							bcd_cnt_addr = 0;
 8001b88:	4b88      	ldr	r3, [pc, #544]	; (8001dac <main+0x1880>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 8001b8e:	4b83      	ldr	r3, [pc, #524]	; (8001d9c <main+0x1870>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a83      	ldr	r2, [pc, #524]	; (8001da0 <main+0x1874>)
 8001b94:	8811      	ldrh	r1, [r2, #0]
 8001b96:	4a83      	ldr	r2, [pc, #524]	; (8001da4 <main+0x1878>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fc79 	bl	8005490 <Write_data_2Flash>
							bar_flash_addr = 8192;
 8001b9e:	4b7f      	ldr	r3, [pc, #508]	; (8001d9c <main+0x1870>)
 8001ba0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba4:	601a      	str	r2, [r3, #0]
							Safe_Flash_Erase(bar_flash_addr);
 8001ba6:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <main+0x1870>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fd2c 	bl	8005608 <Safe_Flash_Erase>
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 8001bb0:	4b7a      	ldr	r3, [pc, #488]	; (8001d9c <main+0x1870>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <main+0x1874>)
 8001bb6:	8811      	ldrh	r1, [r2, #0]
 8001bb8:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <main+0x1878>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fc68 	bl	8005490 <Write_data_2Flash>
							Safe_Flash_Erase(bcd_cnt_addr);
 8001bc0:	4b7a      	ldr	r3, [pc, #488]	; (8001dac <main+0x1880>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fd1f 	bl	8005608 <Safe_Flash_Erase>
							val_cnt = 0;
 8001bca:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <main+0x1860>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8001bd0:	4b76      	ldr	r3, [pc, #472]	; (8001dac <main+0x1880>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a76      	ldr	r2, [pc, #472]	; (8001db0 <main+0x1884>)
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	b291      	uxth	r1, r2
 8001bda:	4a6c      	ldr	r2, [pc, #432]	; (8001d8c <main+0x1860>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 fcab 	bl	8005538 <Set_Cnt_to_Flash>
							Write_data_2Flash(bar_flash_addr, cnt_flash, data_to_flash);
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <main+0x1870>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <main+0x1874>)
 8001be8:	8811      	ldrh	r1, [r2, #0]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <main+0x1878>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fc4f 	bl	8005490 <Write_data_2Flash>
							spiFlash_write(bar_flash_addr, cnt_flash, data_to_flash);
 8001bf2:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <main+0x1870>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <main+0x1874>)
 8001bf8:	8811      	ldrh	r1, [r2, #0]
 8001bfa:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <main+0x1878>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 ff85 	bl	8005b0c <spiFlash_write>
							do {
									stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8001c02:	2005      	movs	r0, #5
 8001c04:	f003 ffe0 	bl	8005bc8 <spiFlash_readStatus>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <main+0x187c>)
 8001c0e:	801a      	strh	r2, [r3, #0]
							} while (stat_reg1 & 0x01 );
 8001c10:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <main+0x187c>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f2      	bne.n	8001c02 <main+0x16d6>
							bcd_cnt_addr = 1;
 8001c1c:	4b63      	ldr	r3, [pc, #396]	; (8001dac <main+0x1880>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
							val_cnt = 1;
 8001c22:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <main+0x1860>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
							Set_Cnt_to_Flash(bcd_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8001c28:	4b60      	ldr	r3, [pc, #384]	; (8001dac <main+0x1880>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a60      	ldr	r2, [pc, #384]	; (8001db0 <main+0x1884>)
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	b291      	uxth	r1, r2
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <main+0x1860>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 fc7f 	bl	8005538 <Set_Cnt_to_Flash>
						}

						memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8001c3a:	22ff      	movs	r2, #255	; 0xff
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4854      	ldr	r0, [pc, #336]	; (8001d90 <main+0x1864>)
 8001c40:	f005 fbae 	bl	80073a0 <memset>
						spiFlash_Read(erase_addr, cnt_flash_t, rd_test_buff);
 8001c44:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <main+0x1888>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <main+0x186c>)
 8001c4a:	7812      	ldrb	r2, [r2, #0]
 8001c4c:	b291      	uxth	r1, r2
 8001c4e:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <main+0x1864>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 ff03 	bl	8005a5c <spiFlash_Read>

						memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	2100      	movs	r1, #0
 8001c5a:	484d      	ldr	r0, [pc, #308]	; (8001d90 <main+0x1864>)
 8001c5c:	f005 fba0 	bl	80073a0 <memset>
						spiFlash_Read(bar_flash_addr, cnt_flash_t, rd_test_buff);
 8001c60:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <main+0x1870>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <main+0x186c>)
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	b291      	uxth	r1, r2
 8001c6a:	4a49      	ldr	r2, [pc, #292]	; (8001d90 <main+0x1864>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fef5 	bl	8005a5c <spiFlash_Read>

						SpiActive = 0;
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <main+0x188c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
						PN532_SPIInit();
 8001c78:	f003 fd8a 	bl	8005790 <PN532_SPIInit>

						s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a4f      	ldr	r2, [pc, #316]	; (8001dbc <main+0x1890>)
 8001c80:	fb82 1203 	smull	r1, r2, r2, r3
 8001c84:	1192      	asrs	r2, r2, #6
 8001c86:	17db      	asrs	r3, r3, #31
 8001c88:	1ad2      	subs	r2, r2, r3
 8001c8a:	4b4d      	ldr	r3, [pc, #308]	; (8001dc0 <main+0x1894>)
 8001c8c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c90:	1099      	asrs	r1, r3, #2
 8001c92:	17d3      	asrs	r3, r2, #31
 8001c94:	1ac9      	subs	r1, r1, r3
 8001c96:	460b      	mov	r3, r1
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	1ad1      	subs	r1, r2, r3
 8001ca0:	b2cb      	uxtb	r3, r1
 8001ca2:	3330      	adds	r3, #48	; 0x30
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <main+0x1898>)
 8001ca8:	701a      	strb	r2, [r3, #0]
						s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a46      	ldr	r2, [pc, #280]	; (8001dc8 <main+0x189c>)
 8001cae:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb2:	1152      	asrs	r2, r2, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1ad2      	subs	r2, r2, r3
 8001cb8:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <main+0x1894>)
 8001cba:	fb83 1302 	smull	r1, r3, r3, r2
 8001cbe:	1099      	asrs	r1, r3, #2
 8001cc0:	17d3      	asrs	r3, r2, #31
 8001cc2:	1ac9      	subs	r1, r1, r3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	1ad1      	subs	r1, r2, r3
 8001cce:	b2cb      	uxtb	r3, r1
 8001cd0:	3330      	adds	r3, #48	; 0x30
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <main+0x1898>)
 8001cd6:	705a      	strb	r2, [r3, #1]
						s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a39      	ldr	r2, [pc, #228]	; (8001dc0 <main+0x1894>)
 8001cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce0:	1092      	asrs	r2, r2, #2
 8001ce2:	17db      	asrs	r3, r3, #31
 8001ce4:	1ad2      	subs	r2, r2, r3
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <main+0x1894>)
 8001ce8:	fb83 1302 	smull	r1, r3, r3, r2
 8001cec:	1099      	asrs	r1, r3, #2
 8001cee:	17d3      	asrs	r3, r2, #31
 8001cf0:	1ac9      	subs	r1, r1, r3
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	1ad1      	subs	r1, r2, r3
 8001cfc:	b2cb      	uxtb	r3, r1
 8001cfe:	3330      	adds	r3, #48	; 0x30
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <main+0x1898>)
 8001d04:	709a      	strb	r2, [r3, #2]
						s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <main+0x1894>)
 8001d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d0e:	1099      	asrs	r1, r3, #2
 8001d10:	17d3      	asrs	r3, r2, #31
 8001d12:	1ac9      	subs	r1, r1, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	1ad1      	subs	r1, r2, r3
 8001d1e:	b2cb      	uxtb	r3, r1
 8001d20:	3330      	adds	r3, #48	; 0x30
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <main+0x1898>)
 8001d26:	70da      	strb	r2, [r3, #3]

						s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8001d28:	7a3b      	ldrb	r3, [r7, #8]
 8001d2a:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <main+0x18a0>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3330      	adds	r3, #48	; 0x30
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <main+0x1898>)
 8001d3a:	715a      	strb	r2, [r3, #5]
						s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 8001d3c:	7a3a      	ldrb	r2, [r7, #8]
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <main+0x18a0>)
 8001d40:	fba3 1302 	umull	r1, r3, r3, r2
 8001d44:	08d9      	lsrs	r1, r3, #3
 8001d46:	460b      	mov	r3, r1
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3330      	adds	r3, #48	; 0x30
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <main+0x1898>)
 8001d58:	719a      	strb	r2, [r3, #6]

						s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8001d5a:	7a7b      	ldrb	r3, [r7, #9]
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <main+0x18a0>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3330      	adds	r3, #48	; 0x30
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <main+0x1898>)
 8001d6c:	721a      	strb	r2, [r3, #8]
						s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 8001d6e:	7a7a      	ldrb	r2, [r7, #9]
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <main+0x18a0>)
 8001d72:	fba3 1302 	umull	r1, r3, r3, r2
 8001d76:	08d9      	lsrs	r1, r3, #3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3330      	adds	r3, #48	; 0x30
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	e022      	b.n	8001dd0 <main+0x18a4>
 8001d8a:	bf00      	nop
 8001d8c:	2000094a 	.word	0x2000094a
 8001d90:	200009dc 	.word	0x200009dc
 8001d94:	20000938 	.word	0x20000938
 8001d98:	2000092c 	.word	0x2000092c
 8001d9c:	20000950 	.word	0x20000950
 8001da0:	20000d16 	.word	0x20000d16
 8001da4:	200009bc 	.word	0x200009bc
 8001da8:	20000d18 	.word	0x20000d18
 8001dac:	2000095c 	.word	0x2000095c
 8001db0:	20000949 	.word	0x20000949
 8001db4:	20000928 	.word	0x20000928
 8001db8:	20000d2e 	.word	0x20000d2e
 8001dbc:	10624dd3 	.word	0x10624dd3
 8001dc0:	66666667 	.word	0x66666667
 8001dc4:	20000220 	.word	0x20000220
 8001dc8:	51eb851f 	.word	0x51eb851f
 8001dcc:	cccccccd 	.word	0xcccccccd
 8001dd0:	4bb7      	ldr	r3, [pc, #732]	; (80020b0 <main+0x1b84>)
 8001dd2:	725a      	strb	r2, [r3, #9]

						s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 8001dd4:	7abb      	ldrb	r3, [r7, #10]
 8001dd6:	4ab7      	ldr	r2, [pc, #732]	; (80020b4 <main+0x1b88>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	3330      	adds	r3, #48	; 0x30
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4bb2      	ldr	r3, [pc, #712]	; (80020b0 <main+0x1b84>)
 8001de6:	72da      	strb	r2, [r3, #11]
						s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 8001de8:	7aba      	ldrb	r2, [r7, #10]
 8001dea:	4bb2      	ldr	r3, [pc, #712]	; (80020b4 <main+0x1b88>)
 8001dec:	fba3 1302 	umull	r1, r3, r3, r2
 8001df0:	08d9      	lsrs	r1, r3, #3
 8001df2:	460b      	mov	r3, r1
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3330      	adds	r3, #48	; 0x30
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4bab      	ldr	r3, [pc, #684]	; (80020b0 <main+0x1b84>)
 8001e04:	731a      	strb	r2, [r3, #12]

						s_cal_data[14] = 0x30 + (rtc_time.min/10);
 8001e06:	7afb      	ldrb	r3, [r7, #11]
 8001e08:	4aaa      	ldr	r2, [pc, #680]	; (80020b4 <main+0x1b88>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	08db      	lsrs	r3, r3, #3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3330      	adds	r3, #48	; 0x30
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4ba6      	ldr	r3, [pc, #664]	; (80020b0 <main+0x1b84>)
 8001e18:	739a      	strb	r2, [r3, #14]
						s_cal_data[15] = 0x30 + (rtc_time.min%10);
 8001e1a:	7afa      	ldrb	r2, [r7, #11]
 8001e1c:	4ba5      	ldr	r3, [pc, #660]	; (80020b4 <main+0x1b88>)
 8001e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e22:	08d9      	lsrs	r1, r3, #3
 8001e24:	460b      	mov	r3, r1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3330      	adds	r3, #48	; 0x30
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <main+0x1b84>)
 8001e36:	73da      	strb	r2, [r3, #15]

						s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 8001e38:	7b3b      	ldrb	r3, [r7, #12]
 8001e3a:	4a9e      	ldr	r2, [pc, #632]	; (80020b4 <main+0x1b88>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3330      	adds	r3, #48	; 0x30
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b99      	ldr	r3, [pc, #612]	; (80020b0 <main+0x1b84>)
 8001e4a:	745a      	strb	r2, [r3, #17]
						s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8001e4c:	7b3a      	ldrb	r2, [r7, #12]
 8001e4e:	4b99      	ldr	r3, [pc, #612]	; (80020b4 <main+0x1b88>)
 8001e50:	fba3 1302 	umull	r1, r3, r3, r2
 8001e54:	08d9      	lsrs	r1, r3, #3
 8001e56:	460b      	mov	r3, r1
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3330      	adds	r3, #48	; 0x30
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <main+0x1b84>)
 8001e68:	749a      	strb	r2, [r3, #18]
		*/
					//LCD_SetCursor ( LCD_CURSOR_1STR );
					//LCD_WriteString ( s_lcd_barcode );

					//if(b_firstrddata==DISABLE){
						LCD_SetCursor ( LCD_CURSOR_1STR );
 8001e6a:	2080      	movs	r0, #128	; 0x80
 8001e6c:	f001 feec 	bl	8003c48 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 8001e70:	4891      	ldr	r0, [pc, #580]	; (80020b8 <main+0x1b8c>)
 8001e72:	f001 ff99 	bl	8003da8 <LCD_WriteString>
						LCD_SetCursor ( LCD_CURSOR_2STR );
 8001e76:	20c0      	movs	r0, #192	; 0xc0
 8001e78:	f001 fee6 	bl	8003c48 <LCD_SetCursor>
						LCD_WriteString ( s_lcd_clrstr );
 8001e7c:	488e      	ldr	r0, [pc, #568]	; (80020b8 <main+0x1b8c>)
 8001e7e:	f001 ff93 	bl	8003da8 <LCD_WriteString>
						//b_firstrddata=ENABLE;

					//}

					LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001e88:	488c      	ldr	r0, [pc, #560]	; (80020bc <main+0x1b90>)
 8001e8a:	f002 f8c1 	bl	8004010 <LCD_RunStringBARCode>

					int strLength = strlen(g_sBuffer) + 1;
 8001e8e:	488c      	ldr	r0, [pc, #560]	; (80020c0 <main+0x1b94>)
 8001e90:	f7fe f95c 	bl	800014c <strlen>
 8001e94:	4603      	mov	r3, r0
 8001e96:	3301      	adds	r3, #1
 8001e98:	613b      	str	r3, [r7, #16]
					g_iBufferLength -= strLength;
 8001e9a:	4b8a      	ldr	r3, [pc, #552]	; (80020c4 <main+0x1b98>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	4a88      	ldr	r2, [pc, #544]	; (80020c4 <main+0x1b98>)
 8001ea4:	6013      	str	r3, [r2, #0]
					memmove ( g_sBuffer, g_sBuffer + strLength,
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4a85      	ldr	r2, [pc, #532]	; (80020c0 <main+0x1b94>)
 8001eaa:	1899      	adds	r1, r3, r2

							BUFFER_LEN + 1 - strLength );
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f1c3 0381 	rsb	r3, r3, #129	; 0x81
					memmove ( g_sBuffer, g_sBuffer + strLength,
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4882      	ldr	r0, [pc, #520]	; (80020c0 <main+0x1b94>)
 8001eb6:	f005 fa59 	bl	800736c <memmove>


					//*xxx*yyyy-MM-dd HH:mm:ss


					strncat(s_scan_d_c, s_cal_data, 19);
 8001eba:	2213      	movs	r2, #19
 8001ebc:	497c      	ldr	r1, [pc, #496]	; (80020b0 <main+0x1b84>)
 8001ebe:	4882      	ldr	r0, [pc, #520]	; (80020c8 <main+0x1b9c>)
 8001ec0:	f005 faa2 	bl	8007408 <strncat>
					strncat(s_scan_d_c, s_space, strlen(s_space));
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4980      	ldr	r1, [pc, #512]	; (80020cc <main+0x1ba0>)
 8001eca:	487f      	ldr	r0, [pc, #508]	; (80020c8 <main+0x1b9c>)
 8001ecc:	f005 fa9c 	bl	8007408 <strncat>
					strncat(s_scan_d_c, g_sBarCode, strlen(g_sBarCode));
 8001ed0:	487a      	ldr	r0, [pc, #488]	; (80020bc <main+0x1b90>)
 8001ed2:	f7fe f93b 	bl	800014c <strlen>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4978      	ldr	r1, [pc, #480]	; (80020bc <main+0x1b90>)
 8001edc:	487a      	ldr	r0, [pc, #488]	; (80020c8 <main+0x1b9c>)
 8001ede:	f005 fa93 	bl	8007408 <strncat>
					strncat(s_scan_d_c, s_newline, strlen(s_newline));
 8001ee2:	487b      	ldr	r0, [pc, #492]	; (80020d0 <main+0x1ba4>)
 8001ee4:	f7fe f932 	bl	800014c <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	4978      	ldr	r1, [pc, #480]	; (80020d0 <main+0x1ba4>)
 8001eee:	4876      	ldr	r0, [pc, #472]	; (80020c8 <main+0x1b9c>)
 8001ef0:	f005 fa8a 	bl	8007408 <strncat>



				//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
					Usart2_SendData(s_scan_d_c,strlen(s_scan_d_c));
 8001ef4:	4874      	ldr	r0, [pc, #464]	; (80020c8 <main+0x1b9c>)
 8001ef6:	f7fe f929 	bl	800014c <strlen>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4872      	ldr	r0, [pc, #456]	; (80020c8 <main+0x1b9c>)
 8001f00:	f004 ffa2 	bl	8006e48 <Usart2_SendData>
					Usart2_SendData(s_newline,strlen(s_newline));
 8001f04:	4872      	ldr	r0, [pc, #456]	; (80020d0 <main+0x1ba4>)
 8001f06:	f7fe f921 	bl	800014c <strlen>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4870      	ldr	r0, [pc, #448]	; (80020d0 <main+0x1ba4>)
 8001f10:	f004 ff9a 	bl	8006e48 <Usart2_SendData>

					memset(s_scan_d_c, 0, strlen(s_scan_d_c));
 8001f14:	486c      	ldr	r0, [pc, #432]	; (80020c8 <main+0x1b9c>)
 8001f16:	f7fe f919 	bl	800014c <strlen>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4869      	ldr	r0, [pc, #420]	; (80020c8 <main+0x1b9c>)
 8001f22:	f005 fa3d 	bl	80073a0 <memset>



				//*****************************************************************************
				//Если тест NFC пройден успешно,то сканируем ID
						if(statusDevice==ST_DEV_NFC_NOERR || statusDevice==ST_DEV_ALL_NOERR ){
 8001f26:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <main+0x1ba8>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d004      	beq.n	8001f38 <main+0x1a0c>
 8001f2e:	4b69      	ldr	r3, [pc, #420]	; (80020d4 <main+0x1ba8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b11      	cmp	r3, #17
 8001f34:	f040 850e 	bne.w	8002954 <main+0x2428>
							if(cntlooppn532==CNT_LOOP_PN532){
 8001f38:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <main+0x1bac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001f40:	4293      	cmp	r3, r2
 8001f42:	f040 84bd 	bne.w	80028c0 <main+0x2394>

								success=PN532_readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength,1500);
 8001f46:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f4a:	4a64      	ldr	r2, [pc, #400]	; (80020dc <main+0x1bb0>)
 8001f4c:	4964      	ldr	r1, [pc, #400]	; (80020e0 <main+0x1bb4>)
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f002 fa22 	bl	8004398 <PN532_readPassiveTargetID>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b62      	ldr	r3, [pc, #392]	; (80020e4 <main+0x1bb8>)
 8001f5a:	701a      	strb	r2, [r3, #0]

								if(success && !b_discannfc){
 8001f5c:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <main+0x1bb8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 84a3 	beq.w	80028ac <main+0x2380>
 8001f66:	4b60      	ldr	r3, [pc, #384]	; (80020e8 <main+0x1bbc>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 849e 	bne.w	80028ac <main+0x2380>

									b_discannfc=1;
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <main+0x1bbc>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]

									s_pn_uidlengthdata[0] = 0x30+(uidLength/100);
 8001f76:	4b59      	ldr	r3, [pc, #356]	; (80020dc <main+0x1bb0>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4a5c      	ldr	r2, [pc, #368]	; (80020ec <main+0x1bc0>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3330      	adds	r3, #48	; 0x30
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <main+0x1bc4>)
 8001f8a:	701a      	strb	r2, [r3, #0]
									s_pn_uidlengthdata[1] = 0x30+(uidLength/10%10);
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <main+0x1bb0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4a48      	ldr	r2, [pc, #288]	; (80020b4 <main+0x1b88>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	08db      	lsrs	r3, r3, #3
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <main+0x1b88>)
 8001f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa0:	08d9      	lsrs	r1, r3, #3
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3330      	adds	r3, #48	; 0x30
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <main+0x1bc4>)
 8001fb4:	705a      	strb	r2, [r3, #1]
									s_pn_uidlengthdata[2] = 0x30+(uidLength%10);
 8001fb6:	4b49      	ldr	r3, [pc, #292]	; (80020dc <main+0x1bb0>)
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <main+0x1b88>)
 8001fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	3330      	adds	r3, #48	; 0x30
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <main+0x1bc4>)
 8001fd4:	709a      	strb	r2, [r3, #2]

									Usart2_SendData(s_pn_foundcard,strlen(s_pn_foundcard));
 8001fd6:	4847      	ldr	r0, [pc, #284]	; (80020f4 <main+0x1bc8>)
 8001fd8:	f7fe f8b8 	bl	800014c <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4844      	ldr	r0, [pc, #272]	; (80020f4 <main+0x1bc8>)
 8001fe2:	f004 ff31 	bl	8006e48 <Usart2_SendData>

									Usart2_SendData(s_pn_uidlength,strlen(s_pn_uidlength));
 8001fe6:	4844      	ldr	r0, [pc, #272]	; (80020f8 <main+0x1bcc>)
 8001fe8:	f7fe f8b0 	bl	800014c <strlen>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4841      	ldr	r0, [pc, #260]	; (80020f8 <main+0x1bcc>)
 8001ff2:	f004 ff29 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_pn_uidlengthdata,strlen(s_pn_uidlengthdata));
 8001ff6:	483e      	ldr	r0, [pc, #248]	; (80020f0 <main+0x1bc4>)
 8001ff8:	f7fe f8a8 	bl	800014c <strlen>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	483b      	ldr	r0, [pc, #236]	; (80020f0 <main+0x1bc4>)
 8002002:	f004 ff21 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8002006:	4832      	ldr	r0, [pc, #200]	; (80020d0 <main+0x1ba4>)
 8002008:	f7fe f8a0 	bl	800014c <strlen>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	482f      	ldr	r0, [pc, #188]	; (80020d0 <main+0x1ba4>)
 8002012:	f004 ff19 	bl	8006e48 <Usart2_SendData>

									b_hextostr = fourbytes2strhex (&uid[0], &uidhex2pc4b[0]);
 8002016:	4939      	ldr	r1, [pc, #228]	; (80020fc <main+0x1bd0>)
 8002018:	4831      	ldr	r0, [pc, #196]	; (80020e0 <main+0x1bb4>)
 800201a:	f001 f8dd 	bl	80031d8 <fourbytes2strhex>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <main+0x1bd4>)
 8002024:	701a      	strb	r2, [r3, #0]

									Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 8002026:	4837      	ldr	r0, [pc, #220]	; (8002104 <main+0x1bd8>)
 8002028:	f7fe f890 	bl	800014c <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	4619      	mov	r1, r3
 8002030:	4834      	ldr	r0, [pc, #208]	; (8002104 <main+0x1bd8>)
 8002032:	f004 ff09 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(uidhex2pc4b,strlen(uidhex2pc4b));
 8002036:	4831      	ldr	r0, [pc, #196]	; (80020fc <main+0x1bd0>)
 8002038:	f7fe f888 	bl	800014c <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	4619      	mov	r1, r3
 8002040:	482e      	ldr	r0, [pc, #184]	; (80020fc <main+0x1bd0>)
 8002042:	f004 ff01 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 8002046:	4822      	ldr	r0, [pc, #136]	; (80020d0 <main+0x1ba4>)
 8002048:	f7fe f880 	bl	800014c <strlen>
 800204c:	4603      	mov	r3, r0
 800204e:	4619      	mov	r1, r3
 8002050:	481f      	ldr	r0, [pc, #124]	; (80020d0 <main+0x1ba4>)
 8002052:	f004 fef9 	bl	8006e48 <Usart2_SendData>

									decuid = UIDResponse(&uid[0], uidLength);
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <main+0x1bb0>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4619      	mov	r1, r3
 800205c:	4820      	ldr	r0, [pc, #128]	; (80020e0 <main+0x1bb4>)
 800205e:	f001 f92f 	bl	80032c0 <UIDResponse>
 8002062:	4603      	mov	r3, r0
 8002064:	4a28      	ldr	r2, [pc, #160]	; (8002108 <main+0x1bdc>)
 8002066:	6013      	str	r3, [r2, #0]

									tim = RTC_GET_COUNTER();
 8002068:	f002 ff12 	bl	8004e90 <RTC_GET_COUNTER>
 800206c:	4603      	mov	r3, r0
 800206e:	4a27      	ldr	r2, [pc, #156]	; (800210c <main+0x1be0>)
 8002070:	6013      	str	r3, [r2, #0]

									nfc_conv2Flash(tim, decuid);
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <main+0x1be0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <main+0x1bdc>)
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f001 fb59 	bl	8003734 <nfc_conv2Flash>

									while(SpiActive !=0 && SPI_I2S_GetFlagStatus(SPI2,SPI_SR_BSY) != RESET){}
 8002082:	bf00      	nop
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <main+0x1be4>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <main+0x1b70>
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	4820      	ldr	r0, [pc, #128]	; (8002114 <main+0x1be8>)
 8002092:	f004 fbcf 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f3      	bne.n	8002084 <main+0x1b58>
									SPI_FLASH_CONFIG();
 800209c:	f003 fc86 	bl	80059ac <SPI_FLASH_CONFIG>


									memset(rd_flash_buff,0x00,sizeof(rd_flash_buff));	//получение значения счетчика записей
 80020a0:	2210      	movs	r2, #16
 80020a2:	2100      	movs	r1, #0
 80020a4:	481c      	ldr	r0, [pc, #112]	; (8002118 <main+0x1bec>)
 80020a6:	f005 f97b 	bl	80073a0 <memset>
									spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <main+0x1bf0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e037      	b.n	8002120 <main+0x1bf4>
 80020b0:	20000220 	.word	0x20000220
 80020b4:	cccccccd 	.word	0xcccccccd
 80020b8:	200000b4 	.word	0x200000b4
 80020bc:	20000590 	.word	0x20000590
 80020c0:	20000508 	.word	0x20000508
 80020c4:	2000058c 	.word	0x2000058c
 80020c8:	2000085c 	.word	0x2000085c
 80020cc:	200001d0 	.word	0x200001d0
 80020d0:	20000168 	.word	0x20000168
 80020d4:	20000848 	.word	0x20000848
 80020d8:	2000072c 	.word	0x2000072c
 80020dc:	20000724 	.word	0x20000724
 80020e0:	20000714 	.word	0x20000714
 80020e4:	20000712 	.word	0x20000712
 80020e8:	20000711 	.word	0x20000711
 80020ec:	51eb851f 	.word	0x51eb851f
 80020f0:	200001ac 	.word	0x200001ac
 80020f4:	2000016c 	.word	0x2000016c
 80020f8:	20000180 	.word	0x20000180
 80020fc:	2000000c 	.word	0x2000000c
 8002100:	20000713 	.word	0x20000713
 8002104:	20000198 	.word	0x20000198
 8002108:	20000728 	.word	0x20000728
 800210c:	2000091c 	.word	0x2000091c
 8002110:	20000d2e 	.word	0x20000d2e
 8002114:	40003800 	.word	0x40003800
 8002118:	20000adc 	.word	0x20000adc
 800211c:	20000944 	.word	0x20000944
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <main+0x1c28>)
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	b291      	uxth	r1, r2
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <main+0x1c2c>)
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fc97 	bl	8005a5c <spiFlash_Read>
									for(int j = 0; j < 7; j++){
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	e01a      	b.n	800216a <main+0x1c3e>
										if(rd_test_buff[j] == 0xFF){
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <main+0x1c2c>)
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2bff      	cmp	r3, #255	; 0xff
 800213e:	d111      	bne.n	8002164 <main+0x1c38>
											val_cnt = rd_test_buff[j-1];
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	3b01      	subs	r3, #1
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <main+0x1c2c>)
 8002146:	5cd2      	ldrb	r2, [r2, r3]
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <main+0x1c30>)
 800214a:	701a      	strb	r2, [r3, #0]
											nfc_cnt_addr = j;
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <main+0x1c34>)
 8002150:	6013      	str	r3, [r2, #0]
											break;
 8002152:	e00d      	b.n	8002170 <main+0x1c44>
 8002154:	2000092c 	.word	0x2000092c
 8002158:	200009dc 	.word	0x200009dc
 800215c:	2000094a 	.word	0x2000094a
 8002160:	20000960 	.word	0x20000960
									for(int j = 0; j < 7; j++){
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	3301      	adds	r3, #1
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	2b06      	cmp	r3, #6
 800216e:	dde1      	ble.n	8002134 <main+0x1c08>
											}
									}

									if(val_cnt< 5){	//количество записей удовлетворяет диапазону
 8002170:	4baa      	ldr	r3, [pc, #680]	; (800241c <main+0x1ef0>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d847      	bhi.n	8002208 <main+0x1cdc>
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	2100      	movs	r1, #0
 800217c:	48a8      	ldr	r0, [pc, #672]	; (8002420 <main+0x1ef4>)
 800217e:	f005 f90f 	bl	80073a0 <memset>
									spiFlash_Read(nfc_addr_start, cnt_flash_t, rd_test_buff);
 8002182:	4ba8      	ldr	r3, [pc, #672]	; (8002424 <main+0x1ef8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4aa8      	ldr	r2, [pc, #672]	; (8002428 <main+0x1efc>)
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	b291      	uxth	r1, r2
 800218c:	4aa4      	ldr	r2, [pc, #656]	; (8002420 <main+0x1ef4>)
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fc64 	bl	8005a5c <spiFlash_Read>
									nfc_flash_addr = 12288 + val_cnt * 16;
 8002194:	4ba1      	ldr	r3, [pc, #644]	; (800241c <main+0x1ef0>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	461a      	mov	r2, r3
 80021a0:	4ba2      	ldr	r3, [pc, #648]	; (800242c <main+0x1f00>)
 80021a2:	601a      	str	r2, [r3, #0]
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 80021a4:	4ba1      	ldr	r3, [pc, #644]	; (800242c <main+0x1f00>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4aa1      	ldr	r2, [pc, #644]	; (8002430 <main+0x1f04>)
 80021aa:	8811      	ldrh	r1, [r2, #0]
 80021ac:	4aa1      	ldr	r2, [pc, #644]	; (8002434 <main+0x1f08>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 f96e 	bl	8005490 <Write_data_2Flash>
									spiFlash_write(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 80021b4:	4b9d      	ldr	r3, [pc, #628]	; (800242c <main+0x1f00>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a9d      	ldr	r2, [pc, #628]	; (8002430 <main+0x1f04>)
 80021ba:	8811      	ldrh	r1, [r2, #0]
 80021bc:	4a9d      	ldr	r2, [pc, #628]	; (8002434 <main+0x1f08>)
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fca4 	bl	8005b0c <spiFlash_write>
									do {
											stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80021c4:	2005      	movs	r0, #5
 80021c6:	f003 fcff 	bl	8005bc8 <spiFlash_readStatus>
 80021ca:	4603      	mov	r3, r0
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b9a      	ldr	r3, [pc, #616]	; (8002438 <main+0x1f0c>)
 80021d0:	801a      	strh	r2, [r3, #0]
									} while (stat_reg1 & 0x01 );
 80021d2:	4b99      	ldr	r3, [pc, #612]	; (8002438 <main+0x1f0c>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f2      	bne.n	80021c4 <main+0x1c98>
									val_cnt++;
 80021de:	4b8f      	ldr	r3, [pc, #572]	; (800241c <main+0x1ef0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b8d      	ldr	r3, [pc, #564]	; (800241c <main+0x1ef0>)
 80021e8:	701a      	strb	r2, [r3, #0]
									nfc_cnt_addr = 4096 + nfc_cnt_addr;
 80021ea:	4b94      	ldr	r3, [pc, #592]	; (800243c <main+0x1f10>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f2:	4a92      	ldr	r2, [pc, #584]	; (800243c <main+0x1f10>)
 80021f4:	6013      	str	r3, [r2, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//количество штрих-кодов
 80021f6:	4b91      	ldr	r3, [pc, #580]	; (800243c <main+0x1f10>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a91      	ldr	r2, [pc, #580]	; (8002440 <main+0x1f14>)
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	b291      	uxth	r1, r2
 8002200:	4a86      	ldr	r2, [pc, #536]	; (800241c <main+0x1ef0>)
 8002202:	4618      	mov	r0, r3
 8002204:	f003 f998 	bl	8005538 <Set_Cnt_to_Flash>

									}
									if(nfc_cnt_addr == 6 ){		//стирка если больше диапазона
 8002208:	4b8c      	ldr	r3, [pc, #560]	; (800243c <main+0x1f10>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b06      	cmp	r3, #6
 800220e:	d168      	bne.n	80022e2 <main+0x1db6>
									memset(rd_test_buff,0x00,sizeof(rd_test_buff));	//получение значение адреса для записи
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	2100      	movs	r1, #0
 8002214:	4882      	ldr	r0, [pc, #520]	; (8002420 <main+0x1ef4>)
 8002216:	f005 f8c3 	bl	80073a0 <memset>
									spiFlash_Read(nfc_addr_start, cnt_flash_t, rd_test_buff);
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <main+0x1ef8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a82      	ldr	r2, [pc, #520]	; (8002428 <main+0x1efc>)
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	b291      	uxth	r1, r2
 8002224:	4a7e      	ldr	r2, [pc, #504]	; (8002420 <main+0x1ef4>)
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fc18 	bl	8005a5c <spiFlash_Read>
									nfc_cnt_addr = 4096;
 800222c:	4b83      	ldr	r3, [pc, #524]	; (800243c <main+0x1f10>)
 800222e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002232:	601a      	str	r2, [r3, #0]
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002234:	4b7d      	ldr	r3, [pc, #500]	; (800242c <main+0x1f00>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a7d      	ldr	r2, [pc, #500]	; (8002430 <main+0x1f04>)
 800223a:	8811      	ldrh	r1, [r2, #0]
 800223c:	4a7d      	ldr	r2, [pc, #500]	; (8002434 <main+0x1f08>)
 800223e:	4618      	mov	r0, r3
 8002240:	f003 f926 	bl	8005490 <Write_data_2Flash>
									nfc_flash_addr = 12288;
 8002244:	4b79      	ldr	r3, [pc, #484]	; (800242c <main+0x1f00>)
 8002246:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800224a:	601a      	str	r2, [r3, #0]
									Safe_Flash_Erase(nfc_cnt_addr);
 800224c:	4b7b      	ldr	r3, [pc, #492]	; (800243c <main+0x1f10>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f003 f9d9 	bl	8005608 <Safe_Flash_Erase>
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002256:	4b75      	ldr	r3, [pc, #468]	; (800242c <main+0x1f00>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <main+0x1f04>)
 800225c:	8811      	ldrh	r1, [r2, #0]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <main+0x1f08>)
 8002260:	4618      	mov	r0, r3
 8002262:	f003 f915 	bl	8005490 <Write_data_2Flash>
									Safe_Flash_Erase(nfc_flash_addr);
 8002266:	4b71      	ldr	r3, [pc, #452]	; (800242c <main+0x1f00>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 f9cc 	bl	8005608 <Safe_Flash_Erase>
									val_cnt = 0;
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <main+0x1ef0>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 8002276:	4b71      	ldr	r3, [pc, #452]	; (800243c <main+0x1f10>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a71      	ldr	r2, [pc, #452]	; (8002440 <main+0x1f14>)
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	b291      	uxth	r1, r2
 8002280:	4a66      	ldr	r2, [pc, #408]	; (800241c <main+0x1ef0>)
 8002282:	4618      	mov	r0, r3
 8002284:	f003 f958 	bl	8005538 <Set_Cnt_to_Flash>
									Write_data_2Flash(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <main+0x1f00>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a68      	ldr	r2, [pc, #416]	; (8002430 <main+0x1f04>)
 800228e:	8811      	ldrh	r1, [r2, #0]
 8002290:	4a68      	ldr	r2, [pc, #416]	; (8002434 <main+0x1f08>)
 8002292:	4618      	mov	r0, r3
 8002294:	f003 f8fc 	bl	8005490 <Write_data_2Flash>
									spiFlash_write(nfc_flash_addr, cnt_flash, nfc_data_2flash);
 8002298:	4b64      	ldr	r3, [pc, #400]	; (800242c <main+0x1f00>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a64      	ldr	r2, [pc, #400]	; (8002430 <main+0x1f04>)
 800229e:	8811      	ldrh	r1, [r2, #0]
 80022a0:	4a64      	ldr	r2, [pc, #400]	; (8002434 <main+0x1f08>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fc32 	bl	8005b0c <spiFlash_write>
									do {
											stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80022a8:	2005      	movs	r0, #5
 80022aa:	f003 fc8d 	bl	8005bc8 <spiFlash_readStatus>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	4b61      	ldr	r3, [pc, #388]	; (8002438 <main+0x1f0c>)
 80022b4:	801a      	strh	r2, [r3, #0]
									} while (stat_reg1 & 0x01 );
 80022b6:	4b60      	ldr	r3, [pc, #384]	; (8002438 <main+0x1f0c>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f2      	bne.n	80022a8 <main+0x1d7c>
									nfc_cnt_addr = 4097;
 80022c2:	4b5e      	ldr	r3, [pc, #376]	; (800243c <main+0x1f10>)
 80022c4:	f241 0201 	movw	r2, #4097	; 0x1001
 80022c8:	601a      	str	r2, [r3, #0]
									val_cnt = 1;
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <main+0x1ef0>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
									Set_Cnt_to_Flash(nfc_cnt_addr, cnt_4cnt, &val_cnt);	//обнуление счетчика записей
 80022d0:	4b5a      	ldr	r3, [pc, #360]	; (800243c <main+0x1f10>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a5a      	ldr	r2, [pc, #360]	; (8002440 <main+0x1f14>)
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	b291      	uxth	r1, r2
 80022da:	4a50      	ldr	r2, [pc, #320]	; (800241c <main+0x1ef0>)
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 f92b 	bl	8005538 <Set_Cnt_to_Flash>
									}

									memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 80022e2:	22ff      	movs	r2, #255	; 0xff
 80022e4:	2100      	movs	r1, #0
 80022e6:	484e      	ldr	r0, [pc, #312]	; (8002420 <main+0x1ef4>)
 80022e8:	f005 f85a 	bl	80073a0 <memset>
									spiFlash_Read(nfc_cnt_addr_start, cnt_flash_t, rd_test_buff);
 80022ec:	4b55      	ldr	r3, [pc, #340]	; (8002444 <main+0x1f18>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a4d      	ldr	r2, [pc, #308]	; (8002428 <main+0x1efc>)
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	b291      	uxth	r1, r2
 80022f6:	4a4a      	ldr	r2, [pc, #296]	; (8002420 <main+0x1ef4>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 fbaf 	bl	8005a5c <spiFlash_Read>

									memset(rd_test_buff,0x00,sizeof(rd_test_buff));
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	2100      	movs	r1, #0
 8002302:	4847      	ldr	r0, [pc, #284]	; (8002420 <main+0x1ef4>)
 8002304:	f005 f84c 	bl	80073a0 <memset>
									spiFlash_Read(nfc_flash_addr, cnt_flash_t, rd_test_buff);
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <main+0x1f00>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a46      	ldr	r2, [pc, #280]	; (8002428 <main+0x1efc>)
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	b291      	uxth	r1, r2
 8002312:	4a43      	ldr	r2, [pc, #268]	; (8002420 <main+0x1ef4>)
 8002314:	4618      	mov	r0, r3
 8002316:	f003 fba1 	bl	8005a5c <spiFlash_Read>

									SpiActive = 0;
 800231a:	4b4b      	ldr	r3, [pc, #300]	; (8002448 <main+0x1f1c>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
									PN532_SPIInit();
 8002320:	f003 fa36 	bl	8005790 <PN532_SPIInit>


									s_pn_uiddecdata[0] = 0x30+(decuid/1000000000);
 8002324:	4b49      	ldr	r3, [pc, #292]	; (800244c <main+0x1f20>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0a5b      	lsrs	r3, r3, #9
 800232a:	4a49      	ldr	r2, [pc, #292]	; (8002450 <main+0x1f24>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	09db      	lsrs	r3, r3, #7
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3330      	adds	r3, #48	; 0x30
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <main+0x1f28>)
 800233a:	701a      	strb	r2, [r3, #0]
									s_pn_uiddecdata[1] = 0x30+(decuid/100000000%10);
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <main+0x1f20>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a45      	ldr	r2, [pc, #276]	; (8002458 <main+0x1f2c>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0e59      	lsrs	r1, r3, #25
 8002348:	4b44      	ldr	r3, [pc, #272]	; (800245c <main+0x1f30>)
 800234a:	fba3 2301 	umull	r2, r3, r3, r1
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	1aca      	subs	r2, r1, r3
 800235a:	b2d3      	uxtb	r3, r2
 800235c:	3330      	adds	r3, #48	; 0x30
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <main+0x1f28>)
 8002362:	705a      	strb	r2, [r3, #1]
									s_pn_uiddecdata[2] = 0x30+(decuid/10000000%10);
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <main+0x1f20>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <main+0x1f34>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0d99      	lsrs	r1, r3, #22
 8002370:	4b3a      	ldr	r3, [pc, #232]	; (800245c <main+0x1f30>)
 8002372:	fba3 2301 	umull	r2, r3, r3, r1
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	1aca      	subs	r2, r1, r3
 8002382:	b2d3      	uxtb	r3, r2
 8002384:	3330      	adds	r3, #48	; 0x30
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b32      	ldr	r3, [pc, #200]	; (8002454 <main+0x1f28>)
 800238a:	709a      	strb	r2, [r3, #2]
									s_pn_uiddecdata[3] = 0x30+(decuid/1000000%10);
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <main+0x1f20>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a34      	ldr	r2, [pc, #208]	; (8002464 <main+0x1f38>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c99      	lsrs	r1, r3, #18
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <main+0x1f30>)
 800239a:	fba3 2301 	umull	r2, r3, r3, r1
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	1aca      	subs	r2, r1, r3
 80023aa:	b2d3      	uxtb	r3, r2
 80023ac:	3330      	adds	r3, #48	; 0x30
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <main+0x1f28>)
 80023b2:	70da      	strb	r2, [r3, #3]
									s_pn_uiddecdata[4] = 0x30+(decuid/100000%10);
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <main+0x1f20>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <main+0x1f3c>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	09d9      	lsrs	r1, r3, #7
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <main+0x1f30>)
 80023c4:	fba3 2301 	umull	r2, r3, r3, r1
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	1aca      	subs	r2, r1, r3
 80023d4:	b2d3      	uxtb	r3, r2
 80023d6:	3330      	adds	r3, #48	; 0x30
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <main+0x1f28>)
 80023dc:	711a      	strb	r2, [r3, #4]
									s_pn_uiddecdata[5] = 0x30+(decuid/10000%10);
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <main+0x1f20>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a22      	ldr	r2, [pc, #136]	; (800246c <main+0x1f40>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	0b59      	lsrs	r1, r3, #13
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <main+0x1f30>)
 80023ec:	fba3 2301 	umull	r2, r3, r3, r1
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	1aca      	subs	r2, r1, r3
 80023fc:	b2d3      	uxtb	r3, r2
 80023fe:	3330      	adds	r3, #48	; 0x30
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <main+0x1f28>)
 8002404:	715a      	strb	r2, [r3, #5]
									s_pn_uiddecdata[6] = 0x30+(decuid/1000%10);
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <main+0x1f20>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a19      	ldr	r2, [pc, #100]	; (8002470 <main+0x1f44>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0999      	lsrs	r1, r3, #6
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <main+0x1f30>)
 8002414:	fba3 2301 	umull	r2, r3, r3, r1
 8002418:	e02c      	b.n	8002474 <main+0x1f48>
 800241a:	bf00      	nop
 800241c:	2000094a 	.word	0x2000094a
 8002420:	200009dc 	.word	0x200009dc
 8002424:	20000940 	.word	0x20000940
 8002428:	2000092c 	.word	0x2000092c
 800242c:	20000954 	.word	0x20000954
 8002430:	20000d16 	.word	0x20000d16
 8002434:	200009cc 	.word	0x200009cc
 8002438:	20000d18 	.word	0x20000d18
 800243c:	20000960 	.word	0x20000960
 8002440:	20000949 	.word	0x20000949
 8002444:	20000944 	.word	0x20000944
 8002448:	20000d2e 	.word	0x20000d2e
 800244c:	20000728 	.word	0x20000728
 8002450:	00044b83 	.word	0x00044b83
 8002454:	200001b0 	.word	0x200001b0
 8002458:	55e63b89 	.word	0x55e63b89
 800245c:	cccccccd 	.word	0xcccccccd
 8002460:	6b5fca6b 	.word	0x6b5fca6b
 8002464:	431bde83 	.word	0x431bde83
 8002468:	0a7c5ac5 	.word	0x0a7c5ac5
 800246c:	d1b71759 	.word	0xd1b71759
 8002470:	10624dd3 	.word	0x10624dd3
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	1aca      	subs	r2, r1, r3
 8002480:	b2d3      	uxtb	r3, r2
 8002482:	3330      	adds	r3, #48	; 0x30
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <main+0x20b8>)
 8002488:	719a      	strb	r2, [r3, #6]
									s_pn_uiddecdata[7] = 0x30+(decuid/100%10);
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <main+0x20bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <main+0x20c0>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	0959      	lsrs	r1, r3, #5
 8002496:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <main+0x20c4>)
 8002498:	fba3 2301 	umull	r2, r3, r3, r1
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	1aca      	subs	r2, r1, r3
 80024a8:	b2d3      	uxtb	r3, r2
 80024aa:	3330      	adds	r3, #48	; 0x30
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <main+0x20b8>)
 80024b0:	71da      	strb	r2, [r3, #7]
									s_pn_uiddecdata[8] = 0x30+(decuid/10%10);
 80024b2:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <main+0x20bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4e      	ldr	r2, [pc, #312]	; (80025f0 <main+0x20c4>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	08d9      	lsrs	r1, r3, #3
 80024be:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <main+0x20c4>)
 80024c0:	fba3 2301 	umull	r2, r3, r3, r1
 80024c4:	08da      	lsrs	r2, r3, #3
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	1aca      	subs	r2, r1, r3
 80024d0:	b2d3      	uxtb	r3, r2
 80024d2:	3330      	adds	r3, #48	; 0x30
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <main+0x20b8>)
 80024d8:	721a      	strb	r2, [r3, #8]
									s_pn_uiddecdata[9] = 0x30+(decuid%10);
 80024da:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <main+0x20bc>)
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <main+0x20c4>)
 80024e0:	fba3 2301 	umull	r2, r3, r3, r1
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	1aca      	subs	r2, r1, r3
 80024f0:	b2d3      	uxtb	r3, r2
 80024f2:	3330      	adds	r3, #48	; 0x30
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <main+0x20b8>)
 80024f8:	725a      	strb	r2, [r3, #9]

									Usart2_SendData(s_pn_uiddecvalue,strlen(s_pn_uiddecvalue));
 80024fa:	483e      	ldr	r0, [pc, #248]	; (80025f4 <main+0x20c8>)
 80024fc:	f7fd fe26 	bl	800014c <strlen>
 8002500:	4603      	mov	r3, r0
 8002502:	4619      	mov	r1, r3
 8002504:	483b      	ldr	r0, [pc, #236]	; (80025f4 <main+0x20c8>)
 8002506:	f004 fc9f 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_pn_uiddecdata,strlen(s_pn_uiddecdata));
 800250a:	4836      	ldr	r0, [pc, #216]	; (80025e4 <main+0x20b8>)
 800250c:	f7fd fe1e 	bl	800014c <strlen>
 8002510:	4603      	mov	r3, r0
 8002512:	4619      	mov	r1, r3
 8002514:	4833      	ldr	r0, [pc, #204]	; (80025e4 <main+0x20b8>)
 8002516:	f004 fc97 	bl	8006e48 <Usart2_SendData>
									Usart2_SendData(s_newline,strlen(s_newline));
 800251a:	4837      	ldr	r0, [pc, #220]	; (80025f8 <main+0x20cc>)
 800251c:	f7fd fe16 	bl	800014c <strlen>
 8002520:	4603      	mov	r3, r0
 8002522:	4619      	mov	r1, r3
 8002524:	4834      	ldr	r0, [pc, #208]	; (80025f8 <main+0x20cc>)
 8002526:	f004 fc8f 	bl	8006e48 <Usart2_SendData>
									//memset(g_sBarCode,0,strlen(g_sBarCode));
									//strlcpy ( g_sBarCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );


									//if(b_firstrddata==DISABLE){
										LCD_SetCursor ( LCD_CURSOR_1STR );
 800252a:	2080      	movs	r0, #128	; 0x80
 800252c:	f001 fb8c 	bl	8003c48 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 8002530:	4832      	ldr	r0, [pc, #200]	; (80025fc <main+0x20d0>)
 8002532:	f001 fc39 	bl	8003da8 <LCD_WriteString>
										LCD_SetCursor ( LCD_CURSOR_2STR );
 8002536:	20c0      	movs	r0, #192	; 0xc0
 8002538:	f001 fb86 	bl	8003c48 <LCD_SetCursor>
										LCD_WriteString ( s_lcd_clrstr );
 800253c:	482f      	ldr	r0, [pc, #188]	; (80025fc <main+0x20d0>)
 800253e:	f001 fc33 	bl	8003da8 <LCD_WriteString>
										//b_firstrddata=ENABLE;

									//}

									memset(g_sNfcCode,0,strlen(g_sNfcCode));
 8002542:	482f      	ldr	r0, [pc, #188]	; (8002600 <main+0x20d4>)
 8002544:	f7fd fe02 	bl	800014c <strlen>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	2100      	movs	r1, #0
 800254e:	482c      	ldr	r0, [pc, #176]	; (8002600 <main+0x20d4>)
 8002550:	f004 ff26 	bl	80073a0 <memset>

									  strlcpy ( g_sNfcCode, (const char *)s_lcd_nfc_read, USB_STATE_LEN );
 8002554:	221a      	movs	r2, #26
 8002556:	492b      	ldr	r1, [pc, #172]	; (8002604 <main+0x20d8>)
 8002558:	4829      	ldr	r0, [pc, #164]	; (8002600 <main+0x20d4>)
 800255a:	f004 ff40 	bl	80073de <strlcpy>
									  strcat(g_sNfcCode, s_pn_uiddecdata );
 800255e:	4921      	ldr	r1, [pc, #132]	; (80025e4 <main+0x20b8>)
 8002560:	4827      	ldr	r0, [pc, #156]	; (8002600 <main+0x20d4>)
 8002562:	f004 ff25 	bl	80073b0 <strcat>

									//strlcpy ( g_sNfcCode, (const char *)s_pn_uiddecdata,strlen(s_pn_uiddecdata)+1 );

									//LCD_SetCursor ( LCD_CURSOR_1STR );
									//LCD_WriteString ( s_lcd_nfc );
									LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 0 );
 8002566:	2200      	movs	r2, #0
 8002568:	f44f 7148 	mov.w	r1, #800	; 0x320
 800256c:	4824      	ldr	r0, [pc, #144]	; (8002600 <main+0x20d4>)
 800256e:	f001 fde3 	bl	8004138 <LCD_RunStringNFCCode>


								//	PN532_WriteID();
									pn532_rd_stat=PN532_Read_Data(uid,uidLength,1,  rdDataBlock);
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <main+0x20dc>)
 8002574:	7819      	ldrb	r1, [r3, #0]
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <main+0x20e0>)
 8002578:	2201      	movs	r2, #1
 800257a:	4825      	ldr	r0, [pc, #148]	; (8002610 <main+0x20e4>)
 800257c:	f002 fbb4 	bl	8004ce8 <PN532_Read_Data>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <main+0x20e8>)
 8002586:	701a      	strb	r2, [r3, #0]

									switch(pn532_rd_stat){
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <main+0x20e8>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d047      	beq.n	8002620 <main+0x20f4>
 8002590:	2b02      	cmp	r3, #2
 8002592:	dc56      	bgt.n	8002642 <main+0x2116>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <main+0x2072>
 8002598:	2b01      	cmp	r3, #1
 800259a:	d011      	beq.n	80025c0 <main+0x2094>
 800259c:	e051      	b.n	8002642 <main+0x2116>
									case 0:
										Usart2_SendData(s_pc_PN532_info1,strlen(s_pc_PN532_info1));
 800259e:	481e      	ldr	r0, [pc, #120]	; (8002618 <main+0x20ec>)
 80025a0:	f7fd fdd4 	bl	800014c <strlen>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	481b      	ldr	r0, [pc, #108]	; (8002618 <main+0x20ec>)
 80025aa:	f004 fc4d 	bl	8006e48 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 80025ae:	4812      	ldr	r0, [pc, #72]	; (80025f8 <main+0x20cc>)
 80025b0:	f7fd fdcc 	bl	800014c <strlen>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4619      	mov	r1, r3
 80025b8:	480f      	ldr	r0, [pc, #60]	; (80025f8 <main+0x20cc>)
 80025ba:	f004 fc45 	bl	8006e48 <Usart2_SendData>
										break;
 80025be:	e040      	b.n	8002642 <main+0x2116>
									case 1:
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 80025c0:	4816      	ldr	r0, [pc, #88]	; (800261c <main+0x20f0>)
 80025c2:	f7fd fdc3 	bl	800014c <strlen>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	4814      	ldr	r0, [pc, #80]	; (800261c <main+0x20f0>)
 80025cc:	f004 fc3c 	bl	8006e48 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 80025d0:	4809      	ldr	r0, [pc, #36]	; (80025f8 <main+0x20cc>)
 80025d2:	f7fd fdbb 	bl	800014c <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4619      	mov	r1, r3
 80025da:	4807      	ldr	r0, [pc, #28]	; (80025f8 <main+0x20cc>)
 80025dc:	f004 fc34 	bl	8006e48 <Usart2_SendData>
										break;
 80025e0:	e02f      	b.n	8002642 <main+0x2116>
 80025e2:	bf00      	nop
 80025e4:	200001b0 	.word	0x200001b0
 80025e8:	20000728 	.word	0x20000728
 80025ec:	51eb851f 	.word	0x51eb851f
 80025f0:	cccccccd 	.word	0xcccccccd
 80025f4:	200001bc 	.word	0x200001bc
 80025f8:	20000168 	.word	0x20000168
 80025fc:	200000b4 	.word	0x200000b4
 8002600:	200005c8 	.word	0x200005c8
 8002604:	200000e0 	.word	0x200000e0
 8002608:	20000724 	.word	0x20000724
 800260c:	2000084c 	.word	0x2000084c
 8002610:	20000714 	.word	0x20000714
 8002614:	20000741 	.word	0x20000741
 8002618:	20000238 	.word	0x20000238
 800261c:	20000270 	.word	0x20000270
									case 2:
										Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8002620:	48b3      	ldr	r0, [pc, #716]	; (80028f0 <main+0x23c4>)
 8002622:	f7fd fd93 	bl	800014c <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	48b1      	ldr	r0, [pc, #708]	; (80028f0 <main+0x23c4>)
 800262c:	f004 fc0c 	bl	8006e48 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8002630:	48b0      	ldr	r0, [pc, #704]	; (80028f4 <main+0x23c8>)
 8002632:	f7fd fd8b 	bl	800014c <strlen>
 8002636:	4603      	mov	r3, r0
 8002638:	4619      	mov	r1, r3
 800263a:	48ae      	ldr	r0, [pc, #696]	; (80028f4 <main+0x23c8>)
 800263c:	f004 fc04 	bl	8006e48 <Usart2_SendData>
										break;
 8002640:	bf00      	nop
										Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
										Usart2_SendData(s_newline,strlen(s_newline));
									}
								*/

									Usart2_SendData(s_pn_data_block0,strlen(s_pn_data_block0));
 8002642:	48ad      	ldr	r0, [pc, #692]	; (80028f8 <main+0x23cc>)
 8002644:	f7fd fd82 	bl	800014c <strlen>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	48aa      	ldr	r0, [pc, #680]	; (80028f8 <main+0x23cc>)
 800264e:	f004 fbfb 	bl	8006e48 <Usart2_SendData>


									//if(pn532_rd_stat==0){
									BytesHex2Str(rdDataBlock, sizeof(rdDataBlock), DataHex2pc);
 8002652:	4aaa      	ldr	r2, [pc, #680]	; (80028fc <main+0x23d0>)
 8002654:	2110      	movs	r1, #16
 8002656:	48aa      	ldr	r0, [pc, #680]	; (8002900 <main+0x23d4>)
 8002658:	f000 fe64 	bl	8003324 <BytesHex2Str>
										Usart2_SendData(DataHex2pc,sizeof(DataHex2pc));
 800265c:	212f      	movs	r1, #47	; 0x2f
 800265e:	48a7      	ldr	r0, [pc, #668]	; (80028fc <main+0x23d0>)
 8002660:	f004 fbf2 	bl	8006e48 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 8002664:	48a3      	ldr	r0, [pc, #652]	; (80028f4 <main+0x23c8>)
 8002666:	f7fd fd71 	bl	800014c <strlen>
 800266a:	4603      	mov	r3, r0
 800266c:	4619      	mov	r1, r3
 800266e:	48a1      	ldr	r0, [pc, #644]	; (80028f4 <main+0x23c8>)
 8002670:	f004 fbea 	bl	8006e48 <Usart2_SendData>

									//}
										timer = RTC_GET_COUNTER();
 8002674:	f002 fc0c 	bl	8004e90 <RTC_GET_COUNTER>
 8002678:	4603      	mov	r3, r0
 800267a:	4aa2      	ldr	r2, [pc, #648]	; (8002904 <main+0x23d8>)
 800267c:	6013      	str	r3, [r2, #0]
										timer_to_cal(timer, &rtc_time);
 800267e:	4ba1      	ldr	r3, [pc, #644]	; (8002904 <main+0x23d8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	1d3a      	adds	r2, r7, #4
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fc5c 	bl	8004f44 <timer_to_cal>
										tim = cal_to_timer(&rtc_time);
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4618      	mov	r0, r3
 8002690:	f002 fd42 	bl	8005118 <cal_to_timer>
 8002694:	4603      	mov	r3, r0
 8002696:	4a9c      	ldr	r2, [pc, #624]	; (8002908 <main+0x23dc>)
 8002698:	6013      	str	r3, [r2, #0]

										//*xxx*yyyy-MM-dd HH:mm:ss

										s_cal_data[0] = 0x30 + (rtc_time.year/1000%10);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a9b      	ldr	r2, [pc, #620]	; (800290c <main+0x23e0>)
 800269e:	fb82 1203 	smull	r1, r2, r2, r3
 80026a2:	1192      	asrs	r2, r2, #6
 80026a4:	17db      	asrs	r3, r3, #31
 80026a6:	1ad2      	subs	r2, r2, r3
 80026a8:	4b99      	ldr	r3, [pc, #612]	; (8002910 <main+0x23e4>)
 80026aa:	fb83 1302 	smull	r1, r3, r3, r2
 80026ae:	1099      	asrs	r1, r3, #2
 80026b0:	17d3      	asrs	r3, r2, #31
 80026b2:	1ac9      	subs	r1, r1, r3
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	1ad1      	subs	r1, r2, r3
 80026be:	b2cb      	uxtb	r3, r1
 80026c0:	3330      	adds	r3, #48	; 0x30
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b93      	ldr	r3, [pc, #588]	; (8002914 <main+0x23e8>)
 80026c6:	701a      	strb	r2, [r3, #0]
										s_cal_data[1] = 0x30 + (rtc_time.year/100%10);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a93      	ldr	r2, [pc, #588]	; (8002918 <main+0x23ec>)
 80026cc:	fb82 1203 	smull	r1, r2, r2, r3
 80026d0:	1152      	asrs	r2, r2, #5
 80026d2:	17db      	asrs	r3, r3, #31
 80026d4:	1ad2      	subs	r2, r2, r3
 80026d6:	4b8e      	ldr	r3, [pc, #568]	; (8002910 <main+0x23e4>)
 80026d8:	fb83 1302 	smull	r1, r3, r3, r2
 80026dc:	1099      	asrs	r1, r3, #2
 80026de:	17d3      	asrs	r3, r2, #31
 80026e0:	1ac9      	subs	r1, r1, r3
 80026e2:	460b      	mov	r3, r1
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	1ad1      	subs	r1, r2, r3
 80026ec:	b2cb      	uxtb	r3, r1
 80026ee:	3330      	adds	r3, #48	; 0x30
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b88      	ldr	r3, [pc, #544]	; (8002914 <main+0x23e8>)
 80026f4:	705a      	strb	r2, [r3, #1]
										s_cal_data[2] = 0x30 + (rtc_time.year/10%10);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a85      	ldr	r2, [pc, #532]	; (8002910 <main+0x23e4>)
 80026fa:	fb82 1203 	smull	r1, r2, r2, r3
 80026fe:	1092      	asrs	r2, r2, #2
 8002700:	17db      	asrs	r3, r3, #31
 8002702:	1ad2      	subs	r2, r2, r3
 8002704:	4b82      	ldr	r3, [pc, #520]	; (8002910 <main+0x23e4>)
 8002706:	fb83 1302 	smull	r1, r3, r3, r2
 800270a:	1099      	asrs	r1, r3, #2
 800270c:	17d3      	asrs	r3, r2, #31
 800270e:	1ac9      	subs	r1, r1, r3
 8002710:	460b      	mov	r3, r1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	1ad1      	subs	r1, r2, r3
 800271a:	b2cb      	uxtb	r3, r1
 800271c:	3330      	adds	r3, #48	; 0x30
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4b7c      	ldr	r3, [pc, #496]	; (8002914 <main+0x23e8>)
 8002722:	709a      	strb	r2, [r3, #2]
										s_cal_data[3] = 0x30 + (rtc_time.year%10);
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <main+0x23e4>)
 8002728:	fb83 1302 	smull	r1, r3, r3, r2
 800272c:	1099      	asrs	r1, r3, #2
 800272e:	17d3      	asrs	r3, r2, #31
 8002730:	1ac9      	subs	r1, r1, r3
 8002732:	460b      	mov	r3, r1
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	1ad1      	subs	r1, r2, r3
 800273c:	b2cb      	uxtb	r3, r1
 800273e:	3330      	adds	r3, #48	; 0x30
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b74      	ldr	r3, [pc, #464]	; (8002914 <main+0x23e8>)
 8002744:	70da      	strb	r2, [r3, #3]

										s_cal_data[5] = 0x30 + (rtc_time.mon/10);
 8002746:	7a3b      	ldrb	r3, [r7, #8]
 8002748:	4a74      	ldr	r2, [pc, #464]	; (800291c <main+0x23f0>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	08db      	lsrs	r3, r3, #3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	3330      	adds	r3, #48	; 0x30
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b6f      	ldr	r3, [pc, #444]	; (8002914 <main+0x23e8>)
 8002758:	715a      	strb	r2, [r3, #5]
										s_cal_data[6] = 0x30 + (rtc_time.mon%10);
 800275a:	7a3a      	ldrb	r2, [r7, #8]
 800275c:	4b6f      	ldr	r3, [pc, #444]	; (800291c <main+0x23f0>)
 800275e:	fba3 1302 	umull	r1, r3, r3, r2
 8002762:	08d9      	lsrs	r1, r3, #3
 8002764:	460b      	mov	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3330      	adds	r3, #48	; 0x30
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b67      	ldr	r3, [pc, #412]	; (8002914 <main+0x23e8>)
 8002776:	719a      	strb	r2, [r3, #6]

										s_cal_data[8] = 0x30 + (rtc_time.mday/10);
 8002778:	7a7b      	ldrb	r3, [r7, #9]
 800277a:	4a68      	ldr	r2, [pc, #416]	; (800291c <main+0x23f0>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3330      	adds	r3, #48	; 0x30
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b62      	ldr	r3, [pc, #392]	; (8002914 <main+0x23e8>)
 800278a:	721a      	strb	r2, [r3, #8]
										s_cal_data[9] = 0x30 + (rtc_time.mday%10);
 800278c:	7a7a      	ldrb	r2, [r7, #9]
 800278e:	4b63      	ldr	r3, [pc, #396]	; (800291c <main+0x23f0>)
 8002790:	fba3 1302 	umull	r1, r3, r3, r2
 8002794:	08d9      	lsrs	r1, r3, #3
 8002796:	460b      	mov	r3, r1
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3330      	adds	r3, #48	; 0x30
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b5b      	ldr	r3, [pc, #364]	; (8002914 <main+0x23e8>)
 80027a8:	725a      	strb	r2, [r3, #9]

										s_cal_data[11] = 0x30 + (rtc_time.hour/10);
 80027aa:	7abb      	ldrb	r3, [r7, #10]
 80027ac:	4a5b      	ldr	r2, [pc, #364]	; (800291c <main+0x23f0>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	08db      	lsrs	r3, r3, #3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3330      	adds	r3, #48	; 0x30
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b56      	ldr	r3, [pc, #344]	; (8002914 <main+0x23e8>)
 80027bc:	72da      	strb	r2, [r3, #11]
										s_cal_data[12] = 0x30 + (rtc_time.hour%10);
 80027be:	7aba      	ldrb	r2, [r7, #10]
 80027c0:	4b56      	ldr	r3, [pc, #344]	; (800291c <main+0x23f0>)
 80027c2:	fba3 1302 	umull	r1, r3, r3, r2
 80027c6:	08d9      	lsrs	r1, r3, #3
 80027c8:	460b      	mov	r3, r1
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3330      	adds	r3, #48	; 0x30
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b4e      	ldr	r3, [pc, #312]	; (8002914 <main+0x23e8>)
 80027da:	731a      	strb	r2, [r3, #12]

										s_cal_data[14] = 0x30 + (rtc_time.min/10);
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	4a4f      	ldr	r2, [pc, #316]	; (800291c <main+0x23f0>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	08db      	lsrs	r3, r3, #3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3330      	adds	r3, #48	; 0x30
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <main+0x23e8>)
 80027ee:	739a      	strb	r2, [r3, #14]
										s_cal_data[15] = 0x30 + (rtc_time.min%10);
 80027f0:	7afa      	ldrb	r2, [r7, #11]
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <main+0x23f0>)
 80027f4:	fba3 1302 	umull	r1, r3, r3, r2
 80027f8:	08d9      	lsrs	r1, r3, #3
 80027fa:	460b      	mov	r3, r1
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3330      	adds	r3, #48	; 0x30
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b42      	ldr	r3, [pc, #264]	; (8002914 <main+0x23e8>)
 800280c:	73da      	strb	r2, [r3, #15]

										s_cal_data[17] = 0x30 + (rtc_time.sec/10);
 800280e:	7b3b      	ldrb	r3, [r7, #12]
 8002810:	4a42      	ldr	r2, [pc, #264]	; (800291c <main+0x23f0>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3330      	adds	r3, #48	; 0x30
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <main+0x23e8>)
 8002820:	745a      	strb	r2, [r3, #17]
										s_cal_data[18] = 0x30 + (rtc_time.sec%10);
 8002822:	7b3a      	ldrb	r2, [r7, #12]
 8002824:	4b3d      	ldr	r3, [pc, #244]	; (800291c <main+0x23f0>)
 8002826:	fba3 1302 	umull	r1, r3, r3, r2
 800282a:	08d9      	lsrs	r1, r3, #3
 800282c:	460b      	mov	r3, r1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3330      	adds	r3, #48	; 0x30
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b35      	ldr	r3, [pc, #212]	; (8002914 <main+0x23e8>)
 800283e:	749a      	strb	r2, [r3, #18]

										strncat(s_nfc_tag_date, s_cal_data, 19);
 8002840:	2213      	movs	r2, #19
 8002842:	4934      	ldr	r1, [pc, #208]	; (8002914 <main+0x23e8>)
 8002844:	4836      	ldr	r0, [pc, #216]	; (8002920 <main+0x23f4>)
 8002846:	f004 fddf 	bl	8007408 <strncat>
										strncat(s_nfc_tag_date, s_space, strlen(s_space));
 800284a:	2300      	movs	r3, #0
 800284c:	461a      	mov	r2, r3
 800284e:	4935      	ldr	r1, [pc, #212]	; (8002924 <main+0x23f8>)
 8002850:	4833      	ldr	r0, [pc, #204]	; (8002920 <main+0x23f4>)
 8002852:	f004 fdd9 	bl	8007408 <strncat>
										strncat(s_nfc_tag_date, g_sNfcCode, strlen(g_sNfcCode));
 8002856:	4834      	ldr	r0, [pc, #208]	; (8002928 <main+0x23fc>)
 8002858:	f7fd fc78 	bl	800014c <strlen>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4931      	ldr	r1, [pc, #196]	; (8002928 <main+0x23fc>)
 8002862:	482f      	ldr	r0, [pc, #188]	; (8002920 <main+0x23f4>)
 8002864:	f004 fdd0 	bl	8007408 <strncat>
										strncat(s_nfc_tag_date, s_newline, strlen(s_newline));
 8002868:	4822      	ldr	r0, [pc, #136]	; (80028f4 <main+0x23c8>)
 800286a:	f7fd fc6f 	bl	800014c <strlen>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4920      	ldr	r1, [pc, #128]	; (80028f4 <main+0x23c8>)
 8002874:	482a      	ldr	r0, [pc, #168]	; (8002920 <main+0x23f4>)
 8002876:	f004 fdc7 	bl	8007408 <strncat>



									//	Usart2_SendData(s_cal_data,strlen(s_cal_data));
										Usart2_SendData(s_nfc_tag_date,strlen(s_nfc_tag_date));
 800287a:	4829      	ldr	r0, [pc, #164]	; (8002920 <main+0x23f4>)
 800287c:	f7fd fc66 	bl	800014c <strlen>
 8002880:	4603      	mov	r3, r0
 8002882:	4619      	mov	r1, r3
 8002884:	4826      	ldr	r0, [pc, #152]	; (8002920 <main+0x23f4>)
 8002886:	f004 fadf 	bl	8006e48 <Usart2_SendData>
										Usart2_SendData(s_newline,strlen(s_newline));
 800288a:	481a      	ldr	r0, [pc, #104]	; (80028f4 <main+0x23c8>)
 800288c:	f7fd fc5e 	bl	800014c <strlen>
 8002890:	4603      	mov	r3, r0
 8002892:	4619      	mov	r1, r3
 8002894:	4817      	ldr	r0, [pc, #92]	; (80028f4 <main+0x23c8>)
 8002896:	f004 fad7 	bl	8006e48 <Usart2_SendData>

										memset(s_nfc_tag_date, 0, strlen(s_nfc_tag_date));
 800289a:	4821      	ldr	r0, [pc, #132]	; (8002920 <main+0x23f4>)
 800289c:	f7fd fc56 	bl	800014c <strlen>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	481e      	ldr	r0, [pc, #120]	; (8002920 <main+0x23f4>)
 80028a8:	f004 fd7a 	bl	80073a0 <memset>

								}
								if(!success)
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <main+0x2400>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <main+0x238e>
								{

									//Usart2_SendData(s_pn_notfoundcard,sizeof(s_pn_notfoundcard));
									b_discannfc=0;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <main+0x2404>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]

								}

								cntlooppn532=0;
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <main+0x2408>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
							}//конец if(cntlooppn532==CNT_LOOP_PN532)

							cntlooppn532++;
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <main+0x2408>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <main+0x2408>)
 80028c8:	6013      	str	r3, [r2, #0]

							LCD_RunStringNFCCode ( g_sNfcCode, RUN_STR_DELAY, 1 );
 80028ca:	2201      	movs	r2, #1
 80028cc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80028d0:	4815      	ldr	r0, [pc, #84]	; (8002928 <main+0x23fc>)
 80028d2:	f001 fc31 	bl	8004138 <LCD_RunStringNFCCode>
 80028d6:	e03d      	b.n	8002954 <main+0x2428>

		}//конец если не режим записи метки NFC
		else{ //если режим записи метки NFC


			if(!b_1secflg){
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <main+0x240c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12f      	bne.n	8002940 <main+0x2414>
				LCD_SetCursor ( LCD_CURSOR_2STR );
 80028e0:	20c0      	movs	r0, #192	; 0xc0
 80028e2:	f001 f9b1 	bl	8003c48 <LCD_SetCursor>
				LCD_WriteString (uidnfcwrdara );
 80028e6:	4815      	ldr	r0, [pc, #84]	; (800293c <main+0x2410>)
 80028e8:	f001 fa5e 	bl	8003da8 <LCD_WriteString>
 80028ec:	e032      	b.n	8002954 <main+0x2428>
 80028ee:	bf00      	nop
 80028f0:	200002d8 	.word	0x200002d8
 80028f4:	20000168 	.word	0x20000168
 80028f8:	20000324 	.word	0x20000324
 80028fc:	200002f4 	.word	0x200002f4
 8002900:	2000084c 	.word	0x2000084c
 8002904:	20000338 	.word	0x20000338
 8002908:	2000091c 	.word	0x2000091c
 800290c:	10624dd3 	.word	0x10624dd3
 8002910:	66666667 	.word	0x66666667
 8002914:	20000220 	.word	0x20000220
 8002918:	51eb851f 	.word	0x51eb851f
 800291c:	cccccccd 	.word	0xcccccccd
 8002920:	200008dc 	.word	0x200008dc
 8002924:	200001d0 	.word	0x200001d0
 8002928:	200005c8 	.word	0x200005c8
 800292c:	20000712 	.word	0x20000712
 8002930:	20000711 	.word	0x20000711
 8002934:	2000072c 	.word	0x2000072c
 8002938:	20000730 	.word	0x20000730
 800293c:	20000020 	.word	0x20000020

			}
			else{
				LCD_SetCursor ( LCD_CURSOR_2STR+u8_cntindex );
 8002940:	4b6c      	ldr	r3, [pc, #432]	; (8002af4 <main+0x25c8>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3b40      	subs	r3, #64	; 0x40
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	f001 f97d 	bl	8003c48 <LCD_SetCursor>
				LCD_WriteString (s_space);
 800294e:	486a      	ldr	r0, [pc, #424]	; (8002af8 <main+0x25cc>)
 8002950:	f001 fa2a 	bl	8003da8 <LCD_WriteString>

			}
		}


		if(u8_wrnfcstatus!=0 && b_wrstr1==TRUE){
 8002954:	4b69      	ldr	r3, [pc, #420]	; (8002afc <main+0x25d0>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01a      	beq.n	8002992 <main+0x2466>
 800295c:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <main+0x25d4>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d116      	bne.n	8002992 <main+0x2466>
			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8002964:	4867      	ldr	r0, [pc, #412]	; (8002b04 <main+0x25d8>)
 8002966:	f7fd fbf1 	bl	800014c <strlen>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	2100      	movs	r1, #0
 8002970:	4864      	ldr	r0, [pc, #400]	; (8002b04 <main+0x25d8>)
 8002972:	f004 fd15 	bl	80073a0 <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_wrnfc, USB_STATE_LEN );
 8002976:	221a      	movs	r2, #26
 8002978:	4963      	ldr	r1, [pc, #396]	; (8002b08 <main+0x25dc>)
 800297a:	4862      	ldr	r0, [pc, #392]	; (8002b04 <main+0x25d8>)
 800297c:	f004 fd2f 	bl	80073de <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8002980:	2200      	movs	r2, #0
 8002982:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002986:	485f      	ldr	r0, [pc, #380]	; (8002b04 <main+0x25d8>)
 8002988:	f001 fb42 	bl	8004010 <LCD_RunStringBARCode>
			  b_wrstr1=FALSE;
 800298c:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <main+0x25d4>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
		}

		LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 1 );
 8002992:	2201      	movs	r2, #1
 8002994:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002998:	485a      	ldr	r0, [pc, #360]	; (8002b04 <main+0x25d8>)
 800299a:	f001 fb39 	bl	8004010 <LCD_RunStringBARCode>

		if(u8_wrnfcstatus==9){
 800299e:	4b57      	ldr	r3, [pc, #348]	; (8002afc <main+0x25d0>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	f47e a8fb 	bne.w	8000b9e <main+0x672>
			PN532_WriteTagtoHex();
 80029a8:	f000 fd20 	bl	80033ec <PN532_WriteTagtoHex>

			//b_hextostr = fourbytes2strhex (&outwrdata[0], &uidhex2pc4b[0]);

			Usart2_SendData(s_pn_uidvalue,strlen(s_pn_uidvalue));
 80029ac:	4857      	ldr	r0, [pc, #348]	; (8002b0c <main+0x25e0>)
 80029ae:	f7fd fbcd 	bl	800014c <strlen>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4619      	mov	r1, r3
 80029b6:	4855      	ldr	r0, [pc, #340]	; (8002b0c <main+0x25e0>)
 80029b8:	f004 fa46 	bl	8006e48 <Usart2_SendData>
			Usart2_SendData(outwrdata,sizeof(outwrdata));
 80029bc:	2104      	movs	r1, #4
 80029be:	4854      	ldr	r0, [pc, #336]	; (8002b10 <main+0x25e4>)
 80029c0:	f004 fa42 	bl	8006e48 <Usart2_SendData>
			Usart2_SendData(s_newline,strlen(s_newline));
 80029c4:	4853      	ldr	r0, [pc, #332]	; (8002b14 <main+0x25e8>)
 80029c6:	f7fd fbc1 	bl	800014c <strlen>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4619      	mov	r1, r3
 80029ce:	4851      	ldr	r0, [pc, #324]	; (8002b14 <main+0x25e8>)
 80029d0:	f004 fa3a 	bl	8006e48 <Usart2_SendData>

			pn532_wr_stat=PN532_Write_Data(uid,uidLength, 1, outwrdata);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <main+0x25ec>)
 80029d6:	7819      	ldrb	r1, [r3, #0]
 80029d8:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <main+0x25e4>)
 80029da:	2201      	movs	r2, #1
 80029dc:	484f      	ldr	r0, [pc, #316]	; (8002b1c <main+0x25f0>)
 80029de:	f7fd fcf5 	bl	80003cc <PN532_Write_Data>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <main+0x25f4>)
 80029e8:	701a      	strb	r2, [r3, #0]

			switch(pn532_wr_stat){
 80029ea:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <main+0x25f4>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d861      	bhi.n	8002ab6 <main+0x258a>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <main+0x24cc>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a0d 	.word	0x08002a0d
 80029fc:	08002a2f 	.word	0x08002a2f
 8002a00:	08002a51 	.word	0x08002a51
 8002a04:	08002a73 	.word	0x08002a73
 8002a08:	08002a95 	.word	0x08002a95
			case 0:
				Usart2_SendData(s_pc_PN532_info2,strlen(s_pc_PN532_info2));
 8002a0c:	4845      	ldr	r0, [pc, #276]	; (8002b24 <main+0x25f8>)
 8002a0e:	f7fd fb9d 	bl	800014c <strlen>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4843      	ldr	r0, [pc, #268]	; (8002b24 <main+0x25f8>)
 8002a18:	f004 fa16 	bl	8006e48 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002a1c:	483d      	ldr	r0, [pc, #244]	; (8002b14 <main+0x25e8>)
 8002a1e:	f7fd fb95 	bl	800014c <strlen>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	483b      	ldr	r0, [pc, #236]	; (8002b14 <main+0x25e8>)
 8002a28:	f004 fa0e 	bl	8006e48 <Usart2_SendData>
				break;
 8002a2c:	e043      	b.n	8002ab6 <main+0x258a>
			case 1:
				Usart2_SendData(s_pc_PN532_err1,strlen(s_pc_PN532_err1));
 8002a2e:	483e      	ldr	r0, [pc, #248]	; (8002b28 <main+0x25fc>)
 8002a30:	f7fd fb8c 	bl	800014c <strlen>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4619      	mov	r1, r3
 8002a38:	483b      	ldr	r0, [pc, #236]	; (8002b28 <main+0x25fc>)
 8002a3a:	f004 fa05 	bl	8006e48 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002a3e:	4835      	ldr	r0, [pc, #212]	; (8002b14 <main+0x25e8>)
 8002a40:	f7fd fb84 	bl	800014c <strlen>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4619      	mov	r1, r3
 8002a48:	4832      	ldr	r0, [pc, #200]	; (8002b14 <main+0x25e8>)
 8002a4a:	f004 f9fd 	bl	8006e48 <Usart2_SendData>
				break;
 8002a4e:	e032      	b.n	8002ab6 <main+0x258a>
			case 2:
				Usart2_SendData(s_pc_PN532_err4,strlen(s_pc_PN532_err4));
 8002a50:	4836      	ldr	r0, [pc, #216]	; (8002b2c <main+0x2600>)
 8002a52:	f7fd fb7b 	bl	800014c <strlen>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4834      	ldr	r0, [pc, #208]	; (8002b2c <main+0x2600>)
 8002a5c:	f004 f9f4 	bl	8006e48 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002a60:	482c      	ldr	r0, [pc, #176]	; (8002b14 <main+0x25e8>)
 8002a62:	f7fd fb73 	bl	800014c <strlen>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	482a      	ldr	r0, [pc, #168]	; (8002b14 <main+0x25e8>)
 8002a6c:	f004 f9ec 	bl	8006e48 <Usart2_SendData>
				break;
 8002a70:	e021      	b.n	8002ab6 <main+0x258a>
			case 3:
				Usart2_SendData(s_pc_PN532_err2,strlen(s_pc_PN532_err2));
 8002a72:	482f      	ldr	r0, [pc, #188]	; (8002b30 <main+0x2604>)
 8002a74:	f7fd fb6a 	bl	800014c <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	482c      	ldr	r0, [pc, #176]	; (8002b30 <main+0x2604>)
 8002a7e:	f004 f9e3 	bl	8006e48 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002a82:	4824      	ldr	r0, [pc, #144]	; (8002b14 <main+0x25e8>)
 8002a84:	f7fd fb62 	bl	800014c <strlen>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4821      	ldr	r0, [pc, #132]	; (8002b14 <main+0x25e8>)
 8002a8e:	f004 f9db 	bl	8006e48 <Usart2_SendData>
				break;
 8002a92:	e010      	b.n	8002ab6 <main+0x258a>
			case 4:
				Usart2_SendData(s_pc_PN532_err3,strlen(s_pc_PN532_err3));
 8002a94:	4827      	ldr	r0, [pc, #156]	; (8002b34 <main+0x2608>)
 8002a96:	f7fd fb59 	bl	800014c <strlen>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4825      	ldr	r0, [pc, #148]	; (8002b34 <main+0x2608>)
 8002aa0:	f004 f9d2 	bl	8006e48 <Usart2_SendData>
				Usart2_SendData(s_newline,strlen(s_newline));
 8002aa4:	481b      	ldr	r0, [pc, #108]	; (8002b14 <main+0x25e8>)
 8002aa6:	f7fd fb51 	bl	800014c <strlen>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4819      	ldr	r0, [pc, #100]	; (8002b14 <main+0x25e8>)
 8002ab0:	f004 f9ca 	bl	8006e48 <Usart2_SendData>
				break;
 8002ab4:	bf00      	nop

			}

			//PN532_WriteID();

			u8_wrnfcstatus=0;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <main+0x25d0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]

			   memset(g_sBarCode,0,strlen(g_sBarCode));
 8002abc:	4811      	ldr	r0, [pc, #68]	; (8002b04 <main+0x25d8>)
 8002abe:	f7fd fb45 	bl	800014c <strlen>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	480e      	ldr	r0, [pc, #56]	; (8002b04 <main+0x25d8>)
 8002aca:	f004 fc69 	bl	80073a0 <memset>
			  strlcpy ( g_sBarCode, (const char *)s_lcd_scanner_rdy, USB_STATE_LEN );
 8002ace:	221a      	movs	r2, #26
 8002ad0:	4919      	ldr	r1, [pc, #100]	; (8002b38 <main+0x260c>)
 8002ad2:	480c      	ldr	r0, [pc, #48]	; (8002b04 <main+0x25d8>)
 8002ad4:	f004 fc83 	bl	80073de <strlcpy>
			  LCD_RunStringBARCode ( g_sBarCode, RUN_STR_DELAY, 0 );
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002ade:	4809      	ldr	r0, [pc, #36]	; (8002b04 <main+0x25d8>)
 8002ae0:	f001 fa96 	bl	8004010 <LCD_RunStringBARCode>


			//LCD_SetCursor ( LCD_CURSOR_1STR );
		//	LCD_WriteString (s_lcd_scanner_rdy );

			LCD_SetCursor ( LCD_CURSOR_2STR );
 8002ae4:	20c0      	movs	r0, #192	; 0xc0
 8002ae6:	f001 f8af 	bl	8003c48 <LCD_SetCursor>
			LCD_WriteString (s_lcd_ready );
 8002aea:	4814      	ldr	r0, [pc, #80]	; (8002b3c <main+0x2610>)
 8002aec:	f001 f95c 	bl	8003da8 <LCD_WriteString>
	while(1){
 8002af0:	f7fe b855 	b.w	8000b9e <main+0x672>
 8002af4:	2000071c 	.word	0x2000071c
 8002af8:	200001d0 	.word	0x200001d0
 8002afc:	2000073f 	.word	0x2000073f
 8002b00:	20000740 	.word	0x20000740
 8002b04:	20000590 	.word	0x20000590
 8002b08:	200000c8 	.word	0x200000c8
 8002b0c:	20000198 	.word	0x20000198
 8002b10:	20000720 	.word	0x20000720
 8002b14:	20000168 	.word	0x20000168
 8002b18:	20000724 	.word	0x20000724
 8002b1c:	20000714 	.word	0x20000714
 8002b20:	20000742 	.word	0x20000742
 8002b24:	20000254 	.word	0x20000254
 8002b28:	20000270 	.word	0x20000270
 8002b2c:	200002d8 	.word	0x200002d8
 8002b30:	20000294 	.word	0x20000294
 8002b34:	200002b0 	.word	0x200002b0
 8002b38:	20000034 	.word	0x20000034
 8002b3c:	20000064 	.word	0x20000064

08002b40 <NVIC_EnableIRQ>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2201      	movs	r2, #1
 8002b52:	fa02 f103 	lsl.w	r1, r2, r3
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <NVIC_EnableIRQ+0x2c>)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <LED_Init>:

NVIC_InitTypeDef        NVIC_InitTmr1Structure;
EXTI_InitTypeDef		EXTI_InitExtiStruct;
NVIC_InitTypeDef		NVIC_InitExtiStruct;

void LED_Init(void) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0


	/*
	 * EXTI pin configure
	 */
	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );
 8002b76:	2101      	movs	r1, #1
 8002b78:	2004      	movs	r0, #4
 8002b7a:	f003 fd25 	bl	80065c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002b82:	2310      	movs	r3, #16
 8002b84:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4806      	ldr	r0, [pc, #24]	; (8002bac <LED_Init+0x3c>)
 8002b92:	f003 f985 	bl	8005ea0 <GPIO_Init>
//#define LED_GPIO_PORT					GPIOA
//#define LED_PIN							GPIO_Pin_12


	GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9c:	4803      	ldr	r0, [pc, #12]	; (8002bac <LED_Init+0x3c>)
 8002b9e:	f003 fa54 	bl	800604a <GPIO_WriteBit>
//	NVIC_InitStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitStruct );
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40010800 	.word	0x40010800

08002bb0 <BTN_Init>:





void BTN_Init(void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	/*
	 * EXTI pin configure
	 */
	BTN_RCC_PERIPH_CLOCK_CMD ( BTN_RCC_GPIO_PORT, ENABLE );
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2008      	movs	r0, #8
 8002bba:	f003 fd05 	bl	80065c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8002bc2:	2348      	movs	r3, #72	; 0x48
 8002bc4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = BTN_PIN;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( BTN_GPIO_PORT, &GPIO_InitStruct );
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4803      	ldr	r0, [pc, #12]	; (8002bdc <BTN_Init+0x2c>)
 8002bd0:	f003 f966 	bl	8005ea0 <GPIO_Init>
//	NVIC_InitExtiStruct.NVIC_IRQChannel = BTN_IRQ;
//	NVIC_InitExtiStruct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_InitExtiStruct.NVIC_IRQChannelPreemptionPriority = 0;
//	NVIC_InitExtiStruct.NVIC_IRQChannelSubPriority = 1;
//	NVIC_Init ( &NVIC_InitExtiStruct );
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40010c00 	.word	0x40010c00

08002be0 <BTN_IRQHandler>:



void BTN_IRQHandler ( void ) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus ( BTN_EXTI_LINE ) == SET) {
 8002be4:	2001      	movs	r0, #1
 8002be6:	f003 f933 	bl	8005e50 <EXTI_GetFlagStatus>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d134      	bne.n	8002c5a <BTN_IRQHandler+0x7a>
		if(u8_btnstate==BTN_UNPRESSED){
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <BTN_IRQHandler+0x80>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d117      	bne.n	8002c28 <BTN_IRQHandler+0x48>

		  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <BTN_IRQHandler+0x84>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	70da      	strb	r2, [r3, #3]
		  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <BTN_IRQHandler+0x88>)
 8002c00:	2208      	movs	r2, #8
 8002c02:	715a      	strb	r2, [r3, #5]
		  NVIC_Init ( &NVIC_InitExtiStruct );
 8002c04:	4817      	ldr	r0, [pc, #92]	; (8002c64 <BTN_IRQHandler+0x84>)
 8002c06:	f003 f8c1 	bl	8005d8c <NVIC_Init>
		  cnttimer1=0;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <BTN_IRQHandler+0x8c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	801a      	strh	r2, [r3, #0]
		  u8_btnstate=BTN_PRESSED;
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <BTN_IRQHandler+0x80>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
		  EnableTimer1Interrupt();
 8002c16:	f000 f869 	bl	8002cec <EnableTimer1Interrupt>
		  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 1);
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c20:	4813      	ldr	r0, [pc, #76]	; (8002c70 <BTN_IRQHandler+0x90>)
 8002c22:	f003 fa12 	bl	800604a <GPIO_WriteBit>
 8002c26:	e015      	b.n	8002c54 <BTN_IRQHandler+0x74>
		}
		else{
			//DisableTimer1Interrupt
			  NVIC_InitExtiStruct.NVIC_IRQChannelCmd = DISABLE;
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <BTN_IRQHandler+0x84>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	70da      	strb	r2, [r3, #3]
			  EXTI_InitExtiStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <BTN_IRQHandler+0x88>)
 8002c30:	220c      	movs	r2, #12
 8002c32:	715a      	strb	r2, [r3, #5]
			  NVIC_Init ( &NVIC_InitExtiStruct );
 8002c34:	480b      	ldr	r0, [pc, #44]	; (8002c64 <BTN_IRQHandler+0x84>)
 8002c36:	f003 f8a9 	bl	8005d8c <NVIC_Init>
			  timer1data=cnttimer1;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <BTN_IRQHandler+0x8c>)
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <BTN_IRQHandler+0x94>)
 8002c40:	801a      	strh	r2, [r3, #0]
			  u8_btnstate=BTN_UNPRESSED;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <BTN_IRQHandler+0x80>)
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
			  GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c4e:	4808      	ldr	r0, [pc, #32]	; (8002c70 <BTN_IRQHandler+0x90>)
 8002c50:	f003 f9fb 	bl	800604a <GPIO_WriteBit>
//		}
//		else{
//			GPIO_WriteBit(LED_GPIO_PORT, LED_PIN, 0);
//			b_ledbtnstate=FALSE;
//		}
		EXTI_ClearITPendingBit ( BTN_EXTI_LINE );
 8002c54:	2001      	movs	r0, #1
 8002c56:	f003 f915 	bl	8005e84 <EXTI_ClearITPendingBit>


	}
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000739 	.word	0x20000739
 8002c64:	20000b08 	.word	0x20000b08
 8002c68:	20000b00 	.word	0x20000b00
 8002c6c:	20000736 	.word	0x20000736
 8002c70:	40010800 	.word	0x40010800
 8002c74:	2000073a 	.word	0x2000073a

08002c78 <Timer1Init>:


void Timer1Init(void)	{		//	(функция инициализации таймера)
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
TIM_TimeBaseInitTypeDef		TIMER1_InitStruct;


//	LED_RCC_PERIPH_CLOCK_CMD ( LED_RCC_GPIO_PORT, ENABLE );

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002c7e:	2101      	movs	r1, #1
 8002c80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c84:	f003 fca0 	bl	80065c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Pin = LED_PIN;
	GPIO_Init ( LED_GPIO_PORT, &GPIO_InitStruct );

*/
	TIMER1_InitStruct.TIM_Prescaler=TIMER1_PRESCALER-1;	//предделитель 720-1
 8002c88:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002c8c:	80bb      	strh	r3, [r7, #4]
	TIMER1_InitStruct.TIM_CounterMode=TIM_CounterMode_Up;	//режим прямого счета
 8002c8e:	2300      	movs	r3, #0
 8002c90:	80fb      	strh	r3, [r7, #6]
	TIMER1_InitStruct.TIM_Period=TIMER1_RELOAD_PERIOD;		//множитель периодов?
 8002c92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c96:	813b      	strh	r3, [r7, #8]
	TIMER1_InitStruct.TIM_ClockDivision=TIM_CKD_DIV1;		//делитель самого таймера(можно не ставить)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	817b      	strh	r3, [r7, #10]
	TIMER1_InitStruct.TIM_RepetitionCounter=0x0000;		//счетчик повторов?
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	733b      	strb	r3, [r7, #12]
	TIM_TimeBaseInit(TIM1,&TIMER1_InitStruct);
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480f      	ldr	r0, [pc, #60]	; (8002ce4 <Timer1Init+0x6c>)
 8002ca6:	f003 fde1 	bl	800686c <TIM_TimeBaseInit>


	//timer1data=1;
    NVIC_InitTmr1Structure.NVIC_IRQChannel = TIM1_UP_IRQn;
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <Timer1Init+0x70>)
 8002cac:	2219      	movs	r2, #25
 8002cae:	701a      	strb	r2, [r3, #0]
    NVIC_InitTmr1Structure.NVIC_IRQChannelPreemptionPriority = 0;
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <Timer1Init+0x70>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	705a      	strb	r2, [r3, #1]
    NVIC_InitTmr1Structure.NVIC_IRQChannelSubPriority = 1;
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <Timer1Init+0x70>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	709a      	strb	r2, [r3, #2]
    NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = DISABLE;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <Timer1Init+0x70>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&NVIC_InitTmr1Structure);
 8002cc2:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <Timer1Init+0x70>)
 8002cc4:	f003 f862 	bl	8005d8c <NVIC_Init>

	TIM_ITConfig(TIM1, TIM_IT_Update, DISABLE);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <Timer1Init+0x6c>)
 8002cce:	f003 fe68 	bl	80069a2 <TIM_ITConfig>
	TIM_Cmd(TIM1,DISABLE);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <Timer1Init+0x6c>)
 8002cd6:	f003 fe45 	bl	8006964 <TIM_Cmd>


	//NVIC_EnableIRQ(TIM1_UP_IRQn);


}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	20000afc 	.word	0x20000afc

08002cec <EnableTimer1Interrupt>:



void EnableTimer1Interrupt()
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
    //NVIC_InitTmr1Structure.NVIC_IRQChannelCmd = ENABLE;
    //NVIC_Init(&NVIC_InitTmr1Structure);
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4805      	ldr	r0, [pc, #20]	; (8002d0c <EnableTimer1Interrupt+0x20>)
 8002cf6:	f003 fe54 	bl	80069a2 <TIM_ITConfig>
	TIM_Cmd(TIM1,ENABLE);
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4803      	ldr	r0, [pc, #12]	; (8002d0c <EnableTimer1Interrupt+0x20>)
 8002cfe:	f003 fe31 	bl	8006964 <TIM_Cmd>

    NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002d02:	2019      	movs	r0, #25
 8002d04:	f7ff ff1c 	bl	8002b40 <NVIC_EnableIRQ>

}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40012c00 	.word	0x40012c00

08002d10 <TIM1_IRQHandler>:




void TIM1_IRQHandler()
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
uint8_t u8_cntindex;
//--------------------------------------------------------------------------------------------

 */

	if(TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET){
 8002d14:	2101      	movs	r1, #1
 8002d16:	4887      	ldr	r0, [pc, #540]	; (8002f34 <TIM1_IRQHandler+0x224>)
 8002d18:	f003 fe66 	bl	80069e8 <TIM_GetITStatus>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8105 	beq.w	8002f2e <TIM1_IRQHandler+0x21e>


		if (GPIO_ReadInputDataBit ( BTN_GPIO_PORT, BTN_PIN ) == Bit_RESET) {//если кнопка нажата
 8002d24:	2101      	movs	r1, #1
 8002d26:	4884      	ldr	r0, [pc, #528]	; (8002f38 <TIM1_IRQHandler+0x228>)
 8002d28:	f003 f976 	bl	8006018 <GPIO_ReadInputDataBit>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d12d      	bne.n	8002d8e <TIM1_IRQHandler+0x7e>

			   if (previousState==1){
 8002d32:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <TIM1_IRQHandler+0x22c>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d106      	bne.n	8002d48 <TIM1_IRQHandler+0x38>
				   u8_btnstate=0;
 8002d3a:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <TIM1_IRQHandler+0x230>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
				   cnttimer1=0;
 8002d40:	4b80      	ldr	r3, [pc, #512]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e0ea      	b.n	8002f1e <TIM1_IRQHandler+0x20e>

				}
			   else{
				   cnttimer1++;
 8002d48:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b7c      	ldr	r3, [pc, #496]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002d52:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==60 && u8_wrnfcstatus==0) {
 8002d54:	4b7b      	ldr	r3, [pc, #492]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	2b3c      	cmp	r3, #60	; 0x3c
 8002d5a:	f040 80e0 	bne.w	8002f1e <TIM1_IRQHandler+0x20e>
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 80db 	bne.w	8002f1e <TIM1_IRQHandler+0x20e>

					   u8_wrnfcstatus=1; b_wrstr1=TRUE;//флаг выдачи первой строки в режиме записи
 8002d68:	4b77      	ldr	r3, [pc, #476]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <TIM1_IRQHandler+0x23c>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
					   u8_cntchar=0; u8_cntindex=0;
 8002d74:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
					   b_1secflg=FALSE;
 8002d80:	4b75      	ldr	r3, [pc, #468]	; (8002f58 <TIM1_IRQHandler+0x248>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
					   cnttimer1sec=0;
 8002d86:	4b75      	ldr	r3, [pc, #468]	; (8002f5c <TIM1_IRQHandler+0x24c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	e0c7      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
			   }

		}
		else{//если кнопка не нажата

			 if(previousState==0){
 8002d8e:	4b6b      	ldr	r3, [pc, #428]	; (8002f3c <TIM1_IRQHandler+0x22c>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d131      	bne.n	8002dfa <TIM1_IRQHandler+0xea>
				 u8_btnstate=1;
 8002d96:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <TIM1_IRQHandler+0x230>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
				 cnttimer1=0;
 8002d9c:	4b69      	ldr	r3, [pc, #420]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	801a      	strh	r2, [r3, #0]
				 cnttimer30sec=0;
 8002da2:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <TIM1_IRQHandler+0x250>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	801a      	strh	r2, [r3, #0]
				 switch (u8_wrnfcstatus){
 8002da8:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	2b07      	cmp	r3, #7
 8002db0:	f200 80b5 	bhi.w	8002f1e <TIM1_IRQHandler+0x20e>
				 case 4:
				 case 5:
				 case 6:
				 case 7:
				 case 8:
					    u8_cntchar++;
 8002db4:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b64      	ldr	r3, [pc, #400]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002dbe:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar>15) u8_cntchar=0;
 8002dc0:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d902      	bls.n	8002dce <TIM1_IRQHandler+0xbe>
 8002dc8:	4b61      	ldr	r3, [pc, #388]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
					    if (u8_cntchar<10){
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b09      	cmp	r3, #9
 8002dd4:	d808      	bhi.n	8002de8 <TIM1_IRQHandler+0xd8>
					       uidnfcwrdara[u8_cntindex]= 48 + u8_cntchar;
 8002dd6:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4a5e      	ldr	r2, [pc, #376]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	3330      	adds	r3, #48	; 0x30
 8002de0:	b2d9      	uxtb	r1, r3
 8002de2:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <TIM1_IRQHandler+0x254>)
 8002de4:	5499      	strb	r1, [r3, r2]
					    }
					    else{
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
					    }
					 break;
 8002de6:	e09a      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					    	uidnfcwrdara[u8_cntindex]= 55 + u8_cntchar;
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4a59      	ldr	r2, [pc, #356]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	3337      	adds	r3, #55	; 0x37
 8002df2:	b2d9      	uxtb	r1, r3
 8002df4:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <TIM1_IRQHandler+0x254>)
 8002df6:	5499      	strb	r1, [r3, r2]
					 break;
 8002df8:	e091      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
				 }

				}

			   else{
				   cnttimer30sec++;
 8002dfa:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <TIM1_IRQHandler+0x250>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <TIM1_IRQHandler+0x250>)
 8002e04:	801a      	strh	r2, [r3, #0]
				   if(cnttimer30sec==600){
 8002e06:	4b56      	ldr	r3, [pc, #344]	; (8002f60 <TIM1_IRQHandler+0x250>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e0e:	d105      	bne.n	8002e1c <TIM1_IRQHandler+0x10c>
					   u8_wrnfcstatus=0;
 8002e10:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
					   cnttimer30sec=0;
 8002e16:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <TIM1_IRQHandler+0x250>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	801a      	strh	r2, [r3, #0]
				   }


				   cnttimer1sec++;
 8002e1c:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <TIM1_IRQHandler+0x24c>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <TIM1_IRQHandler+0x24c>)
 8002e26:	801a      	strh	r2, [r3, #0]
				   if(cnttimer1sec==10){
 8002e28:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <TIM1_IRQHandler+0x24c>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	2b0a      	cmp	r3, #10
 8002e2e:	d108      	bne.n	8002e42 <TIM1_IRQHandler+0x132>
					   cnttimer1sec=0;
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <TIM1_IRQHandler+0x24c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	801a      	strh	r2, [r3, #0]
					   b_1secflg=~b_1secflg;
 8002e36:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <TIM1_IRQHandler+0x248>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <TIM1_IRQHandler+0x248>)
 8002e40:	701a      	strb	r2, [r3, #0]
				   }

				   cnttimer1++;
 8002e42:	4b40      	ldr	r3, [pc, #256]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002e4c:	801a      	strh	r2, [r3, #0]
				   if (cnttimer1==100 ) {
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <TIM1_IRQHandler+0x234>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d162      	bne.n	8002f1c <TIM1_IRQHandler+0x20c>
					   switch (u8_wrnfcstatus){
 8002e56:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d85e      	bhi.n	8002f1e <TIM1_IRQHandler+0x20e>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <TIM1_IRQHandler+0x158>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e89 	.word	0x08002e89
 8002e6c:	08002e9d 	.word	0x08002e9d
 8002e70:	08002eb1 	.word	0x08002eb1
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	08002ed9 	.word	0x08002ed9
 8002e7c:	08002eed 	.word	0x08002eed
 8002e80:	08002f01 	.word	0x08002f01
 8002e84:	08002f15 	.word	0x08002f15
					   case 1:
						   u8_wrnfcstatus=2;
 8002e88:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=1;
 8002e8e:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
						   break;
 8002e9a:	e040      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   case 2:
						   u8_wrnfcstatus=3;
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=2;
 8002ea2:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002eaa:	2202      	movs	r2, #2
 8002eac:	701a      	strb	r2, [r3, #0]
						   break;
 8002eae:	e036      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   case 3:
						   u8_wrnfcstatus=4;
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=3;
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	701a      	strb	r2, [r3, #0]
						   break;
 8002ec2:	e02c      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   case 4:
						   u8_wrnfcstatus=5;
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=4;
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
						   break;
 8002ed6:	e022      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   case 5:
						   u8_wrnfcstatus=6;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002eda:	2206      	movs	r2, #6
 8002edc:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=5;
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	701a      	strb	r2, [r3, #0]
						   break;
 8002eea:	e018      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   case 6:
						   u8_wrnfcstatus=7;
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002eee:	2207      	movs	r2, #7
 8002ef0:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=6;
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002efa:	2206      	movs	r2, #6
 8002efc:	701a      	strb	r2, [r3, #0]
						   break;
 8002efe:	e00e      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   case 7:
						   u8_wrnfcstatus=8;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002f02:	2208      	movs	r2, #8
 8002f04:	701a      	strb	r2, [r3, #0]
						   u8_cntchar=0; u8_cntindex=7;
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <TIM1_IRQHandler+0x240>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <TIM1_IRQHandler+0x244>)
 8002f0e:	2207      	movs	r2, #7
 8002f10:	701a      	strb	r2, [r3, #0]
						   break;
 8002f12:	e004      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   case 8:
					   		u8_wrnfcstatus=9;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <TIM1_IRQHandler+0x238>)
 8002f16:	2209      	movs	r2, #9
 8002f18:	701a      	strb	r2, [r3, #0]

					   		break;
 8002f1a:	e000      	b.n	8002f1e <TIM1_IRQHandler+0x20e>
					   }

				   }
 8002f1c:	bf00      	nop
			   }

		}

		previousState=u8_btnstate;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <TIM1_IRQHandler+0x230>)
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <TIM1_IRQHandler+0x22c>)
 8002f24:	701a      	strb	r2, [r3, #0]
//	}
//



    TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
 8002f26:	2101      	movs	r1, #1
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <TIM1_IRQHandler+0x224>)
 8002f2a:	f003 fd86 	bl	8006a3a <TIM_ClearITPendingBit>

	}
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40010c00 	.word	0x40010c00
 8002f3c:	20000738 	.word	0x20000738
 8002f40:	20000739 	.word	0x20000739
 8002f44:	20000736 	.word	0x20000736
 8002f48:	2000073f 	.word	0x2000073f
 8002f4c:	20000740 	.word	0x20000740
 8002f50:	2000071b 	.word	0x2000071b
 8002f54:	2000071c 	.word	0x2000071c
 8002f58:	20000730 	.word	0x20000730
 8002f5c:	20000734 	.word	0x20000734
 8002f60:	20000732 	.word	0x20000732
 8002f64:	20000020 	.word	0x20000020

08002f68 <GetTickCount>:

uint32_t GetTickCount() {
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	return tick;
 8002f6c:	4b02      	ldr	r3, [pc, #8]	; (8002f78 <GetTickCount+0x10>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000b0c 	.word	0x20000b0c

08002f7c <PN532_FirmWareVersion2String>:


void PN532_FirmWareVersion2String(uint32_t version){
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

		 pn_chip=version>>24;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0e1b      	lsrs	r3, r3, #24
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <PN532_FirmWareVersion2String+0x13c>)
 8002f8c:	701a      	strb	r2, [r3, #0]
		 pn_fw1chip=version>>16;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b49      	ldr	r3, [pc, #292]	; (80030bc <PN532_FirmWareVersion2String+0x140>)
 8002f96:	701a      	strb	r2, [r3, #0]
		 pn_fw2chip=version>>8;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <PN532_FirmWareVersion2String+0x144>)
 8002fa0:	701a      	strb	r2, [r3, #0]
		 pn_suppchip=version&0xFF;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <PN532_FirmWareVersion2String+0x148>)
 8002fa8:	701a      	strb	r2, [r3, #0]

		 s_pn_nchip[0] = 0x30 + (pn_chip >> 4);
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <PN532_FirmWareVersion2String+0x13c>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3330      	adds	r3, #48	; 0x30
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <PN532_FirmWareVersion2String+0x14c>)
 8002fb8:	701a      	strb	r2, [r3, #0]
		 s_pn_nchip[1] = 0x30 + (pn_chip & 0x0F);
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <PN532_FirmWareVersion2String+0x13c>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3330      	adds	r3, #48	; 0x30
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <PN532_FirmWareVersion2String+0x14c>)
 8002fca:	705a      	strb	r2, [r3, #1]

		 s_pn_fw1nchip[0] = 0x30+(pn_fw1chip/100);
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <PN532_FirmWareVersion2String+0x140>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4a3e      	ldr	r2, [pc, #248]	; (80030cc <PN532_FirmWareVersion2String+0x150>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3330      	adds	r3, #48	; 0x30
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <PN532_FirmWareVersion2String+0x154>)
 8002fe0:	701a      	strb	r2, [r3, #0]
		 s_pn_fw1nchip[1] = 0x30+(pn_fw1chip/10%10);
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <PN532_FirmWareVersion2String+0x140>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	4a3b      	ldr	r2, [pc, #236]	; (80030d4 <PN532_FirmWareVersion2String+0x158>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <PN532_FirmWareVersion2String+0x158>)
 8002ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff6:	08d9      	lsrs	r1, r3, #3
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3330      	adds	r3, #48	; 0x30
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <PN532_FirmWareVersion2String+0x154>)
 800300a:	705a      	strb	r2, [r3, #1]
		 s_pn_fw1nchip[2] = 0x30+(pn_fw1chip%10);
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <PN532_FirmWareVersion2String+0x140>)
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <PN532_FirmWareVersion2String+0x158>)
 8003012:	fba3 1302 	umull	r1, r3, r3, r2
 8003016:	08d9      	lsrs	r1, r3, #3
 8003018:	460b      	mov	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3330      	adds	r3, #48	; 0x30
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <PN532_FirmWareVersion2String+0x154>)
 800302a:	709a      	strb	r2, [r3, #2]

		 s_pn_fw2nchip[0] = 0x30+(pn_fw2chip/100);
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <PN532_FirmWareVersion2String+0x144>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <PN532_FirmWareVersion2String+0x150>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3330      	adds	r3, #48	; 0x30
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <PN532_FirmWareVersion2String+0x15c>)
 8003040:	701a      	strb	r2, [r3, #0]
		 s_pn_fw2nchip[1] = 0x30+(pn_fw2chip/10%10);
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <PN532_FirmWareVersion2String+0x144>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <PN532_FirmWareVersion2String+0x158>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	b2da      	uxtb	r2, r3
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <PN532_FirmWareVersion2String+0x158>)
 8003052:	fba3 1302 	umull	r1, r3, r3, r2
 8003056:	08d9      	lsrs	r1, r3, #3
 8003058:	460b      	mov	r3, r1
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3330      	adds	r3, #48	; 0x30
 8003066:	b2da      	uxtb	r2, r3
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <PN532_FirmWareVersion2String+0x15c>)
 800306a:	705a      	strb	r2, [r3, #1]
		 s_pn_fw2nchip[2] = 0x30+(pn_fw2chip%10);
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <PN532_FirmWareVersion2String+0x144>)
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <PN532_FirmWareVersion2String+0x158>)
 8003072:	fba3 1302 	umull	r1, r3, r3, r2
 8003076:	08d9      	lsrs	r1, r3, #3
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3330      	adds	r3, #48	; 0x30
 8003086:	b2da      	uxtb	r2, r3
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <PN532_FirmWareVersion2String+0x15c>)
 800308a:	709a      	strb	r2, [r3, #2]

		 s_pn_suchip[0] = 0x30 + (pn_suppchip >> 4);
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <PN532_FirmWareVersion2String+0x148>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3330      	adds	r3, #48	; 0x30
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <PN532_FirmWareVersion2String+0x160>)
 800309a:	701a      	strb	r2, [r3, #0]
		 s_pn_suchip[1] = 0x30 + (pn_suppchip & 0x0F);
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <PN532_FirmWareVersion2String+0x148>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3330      	adds	r3, #48	; 0x30
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <PN532_FirmWareVersion2String+0x160>)
 80030ac:	705a      	strb	r2, [r3, #1]

}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000743 	.word	0x20000743
 80030bc:	20000744 	.word	0x20000744
 80030c0:	20000745 	.word	0x20000745
 80030c4:	20000746 	.word	0x20000746
 80030c8:	200001dc 	.word	0x200001dc
 80030cc:	51eb851f 	.word	0x51eb851f
 80030d0:	200001e0 	.word	0x200001e0
 80030d4:	cccccccd 	.word	0xcccccccd
 80030d8:	200001e4 	.word	0x200001e4
 80030dc:	200001e8 	.word	0x200001e8

080030e0 <ValueInterrupToStr>:



void ValueInterrupToStr(){
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
	b_bounce_value[0] = 0x30+(testtimer1/10000%10);
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <ValueInterrupToStr+0xe0>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <ValueInterrupToStr+0xe4>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <ValueInterrupToStr+0xe8>)
 80030f4:	fba3 1302 	umull	r1, r3, r3, r2
 80030f8:	08d9      	lsrs	r1, r3, #3
 80030fa:	460b      	mov	r3, r1
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3330      	adds	r3, #48	; 0x30
 800310a:	b2da      	uxtb	r2, r3
 800310c:	4b2f      	ldr	r3, [pc, #188]	; (80031cc <ValueInterrupToStr+0xec>)
 800310e:	701a      	strb	r2, [r3, #0]
	b_bounce_value[1] = 0x30+(testtimer1/1000%10);
 8003110:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <ValueInterrupToStr+0xe0>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <ValueInterrupToStr+0xf0>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <ValueInterrupToStr+0xe8>)
 8003120:	fba3 1302 	umull	r1, r3, r3, r2
 8003124:	08d9      	lsrs	r1, r3, #3
 8003126:	460b      	mov	r3, r1
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	b29b      	uxth	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3330      	adds	r3, #48	; 0x30
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <ValueInterrupToStr+0xec>)
 800313a:	705a      	strb	r2, [r3, #1]
	b_bounce_value[2] = 0x30+(testtimer1/100%10);
 800313c:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <ValueInterrupToStr+0xe0>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <ValueInterrupToStr+0xf4>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <ValueInterrupToStr+0xe8>)
 800314c:	fba3 1302 	umull	r1, r3, r3, r2
 8003150:	08d9      	lsrs	r1, r3, #3
 8003152:	460b      	mov	r3, r1
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	b29b      	uxth	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3330      	adds	r3, #48	; 0x30
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <ValueInterrupToStr+0xec>)
 8003166:	709a      	strb	r2, [r3, #2]
	b_bounce_value[3] = 0x30+(testtimer1/10%10);
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <ValueInterrupToStr+0xe0>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <ValueInterrupToStr+0xe8>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <ValueInterrupToStr+0xe8>)
 8003178:	fba3 1302 	umull	r1, r3, r3, r2
 800317c:	08d9      	lsrs	r1, r3, #3
 800317e:	460b      	mov	r3, r1
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	b29b      	uxth	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3330      	adds	r3, #48	; 0x30
 800318e:	b2da      	uxtb	r2, r3
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <ValueInterrupToStr+0xec>)
 8003192:	70da      	strb	r2, [r3, #3]
	b_bounce_value[4] = 0x30+(testtimer1%10);
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <ValueInterrupToStr+0xe0>)
 8003196:	881a      	ldrh	r2, [r3, #0]
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <ValueInterrupToStr+0xe8>)
 800319a:	fba3 1302 	umull	r1, r3, r3, r2
 800319e:	08d9      	lsrs	r1, r3, #3
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3330      	adds	r3, #48	; 0x30
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <ValueInterrupToStr+0xec>)
 80031b4:	711a      	strb	r2, [r3, #4]

}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000073c 	.word	0x2000073c
 80031c4:	d1b71759 	.word	0xd1b71759
 80031c8:	cccccccd 	.word	0xcccccccd
 80031cc:	20000218 	.word	0x20000218
 80031d0:	10624dd3 	.word	0x10624dd3
 80031d4:	51eb851f 	.word	0x51eb851f

080031d8 <fourbytes2strhex>:



bool fourbytes2strhex(uint8_t *indatarray, uint8_t *outstrhex){
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
	uint8_t b=0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73bb      	strb	r3, [r7, #14]
	uint8_t th=0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	737b      	strb	r3, [r7, #13]
	uint8_t tl=0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	733b      	strb	r3, [r7, #12]

		for ( b=0; b<4; b++){
 80031f2:	2300      	movs	r3, #0
 80031f4:	73bb      	strb	r3, [r7, #14]
 80031f6:	e05a      	b.n	80032ae <fourbytes2strhex+0xd6>


			th = indatarray[b] >> 4;
 80031f8:	7bbb      	ldrb	r3, [r7, #14]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	737b      	strb	r3, [r7, #13]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 8003204:	7b7b      	ldrb	r3, [r7, #13]
 8003206:	2b09      	cmp	r3, #9
 8003208:	d803      	bhi.n	8003212 <fourbytes2strhex+0x3a>
 800320a:	7b7b      	ldrb	r3, [r7, #13]
 800320c:	3330      	adds	r3, #48	; 0x30
 800320e:	737b      	strb	r3, [r7, #13]
 8003210:	e008      	b.n	8003224 <fourbytes2strhex+0x4c>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 8003212:	7b7b      	ldrb	r3, [r7, #13]
 8003214:	2b09      	cmp	r3, #9
 8003216:	d905      	bls.n	8003224 <fourbytes2strhex+0x4c>
 8003218:	7b7b      	ldrb	r3, [r7, #13]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	d802      	bhi.n	8003224 <fourbytes2strhex+0x4c>
 800321e:	7b7b      	ldrb	r3, [r7, #13]
 8003220:	3337      	adds	r3, #55	; 0x37
 8003222:	737b      	strb	r3, [r7, #13]
			}

			tl = indatarray[b]& 0x0F;
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	733b      	strb	r3, [r7, #12]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 8003232:	7b3b      	ldrb	r3, [r7, #12]
 8003234:	2b09      	cmp	r3, #9
 8003236:	d803      	bhi.n	8003240 <fourbytes2strhex+0x68>
 8003238:	7b3b      	ldrb	r3, [r7, #12]
 800323a:	3330      	adds	r3, #48	; 0x30
 800323c:	733b      	strb	r3, [r7, #12]
 800323e:	e008      	b.n	8003252 <fourbytes2strhex+0x7a>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 8003240:	7b3b      	ldrb	r3, [r7, #12]
 8003242:	2b09      	cmp	r3, #9
 8003244:	d905      	bls.n	8003252 <fourbytes2strhex+0x7a>
 8003246:	7b3b      	ldrb	r3, [r7, #12]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d802      	bhi.n	8003252 <fourbytes2strhex+0x7a>
 800324c:	7b3b      	ldrb	r3, [r7, #12]
 800324e:	3337      	adds	r3, #55	; 0x37
 8003250:	733b      	strb	r3, [r7, #12]

			}

			outstrhex[i] = '0';	i++;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	4413      	add	r3, r2
 8003258:	2230      	movs	r2, #48	; 0x30
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	3301      	adds	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = 'x';	i++;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	4413      	add	r3, r2
 8003268:	2278      	movs	r2, #120	; 0x78
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	3301      	adds	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = th;  i++;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	4413      	add	r3, r2
 8003278:	7b7a      	ldrb	r2, [r7, #13]
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	3301      	adds	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
			outstrhex[i] = tl;	i++;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	4413      	add	r3, r2
 8003288:	7b3a      	ldrb	r2, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	3301      	adds	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
			//outstrhex[i] = ' '; i++;
			if(i<18){ outstrhex[i] = ' '; i++; }
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b11      	cmp	r3, #17
 8003296:	d807      	bhi.n	80032a8 <fourbytes2strhex+0xd0>
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4413      	add	r3, r2
 800329e:	2220      	movs	r2, #32
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	3301      	adds	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
		for ( b=0; b<4; b++){
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	3301      	adds	r3, #1
 80032ac:	73bb      	strb	r3, [r7, #14]
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d9a1      	bls.n	80031f8 <fourbytes2strhex+0x20>


		}
		return 1;
 80032b4:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <UIDResponse>:



uint32_t UIDResponse(uint8_t *uid,  uint8_t uidLength){
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
	uint32_t result;
	result=0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]

	if(uidLength==4){
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d120      	bne.n	8003318 <UIDResponse+0x58>

		result = uid[0];
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	60fb      	str	r3, [r7, #12]
		result |= uid[1];
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3301      	adds	r3, #1
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	60fb      	str	r3, [r7, #12]
		result |= uid[2];
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3302      	adds	r3, #2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
		result <<= 8;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	60fb      	str	r3, [r7, #12]
		result |= uid[3];
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3303      	adds	r3, #3
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
	}
return result;
 8003318:	68fb      	ldr	r3, [r7, #12]

}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <BytesHex2Str>:


bool BytesHex2Str(uint8_t *indatarray, uint8_t size_array, uint8_t *outstrhex){
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	460b      	mov	r3, r1
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	72fb      	strb	r3, [r7, #11]

	uint8_t i=0;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
	uint8_t b=0;
 8003336:	2300      	movs	r3, #0
 8003338:	75bb      	strb	r3, [r7, #22]
	uint8_t th=0;
 800333a:	2300      	movs	r3, #0
 800333c:	757b      	strb	r3, [r7, #21]
	uint8_t tl=0;
 800333e:	2300      	movs	r3, #0
 8003340:	753b      	strb	r3, [r7, #20]

		for ( b=0; b<size_array; b++){
 8003342:	2300      	movs	r3, #0
 8003344:	75bb      	strb	r3, [r7, #22]
 8003346:	e047      	b.n	80033d8 <BytesHex2Str+0xb4>


			th = indatarray[b] >> 4;
 8003348:	7dbb      	ldrb	r3, [r7, #22]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	757b      	strb	r3, [r7, #21]
			if ((th>=0) && (th <= 9))   { th = th + 0x30; }
 8003354:	7d7b      	ldrb	r3, [r7, #21]
 8003356:	2b09      	cmp	r3, #9
 8003358:	d803      	bhi.n	8003362 <BytesHex2Str+0x3e>
 800335a:	7d7b      	ldrb	r3, [r7, #21]
 800335c:	3330      	adds	r3, #48	; 0x30
 800335e:	757b      	strb	r3, [r7, #21]
 8003360:	e008      	b.n	8003374 <BytesHex2Str+0x50>
			else{
			     if ((th>=0x0A) && (th<=0x0F) ) { th = th + 0x37;}
 8003362:	7d7b      	ldrb	r3, [r7, #21]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d905      	bls.n	8003374 <BytesHex2Str+0x50>
 8003368:	7d7b      	ldrb	r3, [r7, #21]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d802      	bhi.n	8003374 <BytesHex2Str+0x50>
 800336e:	7d7b      	ldrb	r3, [r7, #21]
 8003370:	3337      	adds	r3, #55	; 0x37
 8003372:	757b      	strb	r3, [r7, #21]
			}

			tl = indatarray[b]& 0x0F;
 8003374:	7dbb      	ldrb	r3, [r7, #22]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	753b      	strb	r3, [r7, #20]

			if ((tl>=0) && (tl <= 9) )   { tl = tl + 0x30; }
 8003382:	7d3b      	ldrb	r3, [r7, #20]
 8003384:	2b09      	cmp	r3, #9
 8003386:	d803      	bhi.n	8003390 <BytesHex2Str+0x6c>
 8003388:	7d3b      	ldrb	r3, [r7, #20]
 800338a:	3330      	adds	r3, #48	; 0x30
 800338c:	753b      	strb	r3, [r7, #20]
 800338e:	e008      	b.n	80033a2 <BytesHex2Str+0x7e>
			else{
				if ((tl>=0x0A) && (tl<=0x0F) ) { tl = tl + 0x37;}
 8003390:	7d3b      	ldrb	r3, [r7, #20]
 8003392:	2b09      	cmp	r3, #9
 8003394:	d905      	bls.n	80033a2 <BytesHex2Str+0x7e>
 8003396:	7d3b      	ldrb	r3, [r7, #20]
 8003398:	2b0f      	cmp	r3, #15
 800339a:	d802      	bhi.n	80033a2 <BytesHex2Str+0x7e>
 800339c:	7d3b      	ldrb	r3, [r7, #20]
 800339e:	3337      	adds	r3, #55	; 0x37
 80033a0:	753b      	strb	r3, [r7, #20]

			}

		//	outstrhex[i] = '0';	i++;
		//	outstrhex[i] = 'x';	i++;
			outstrhex[i] = th;  i++;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	7d7a      	ldrb	r2, [r7, #21]
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	3301      	adds	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
			outstrhex[i] = tl;	i++;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	7d3a      	ldrb	r2, [r7, #20]
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	3301      	adds	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
			//outstrhex[i] = ' '; i++;

			 outstrhex[i] = ' '; i++;
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	2220      	movs	r2, #32
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	3301      	adds	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
		for ( b=0; b<size_array; b++){
 80033d2:	7dbb      	ldrb	r3, [r7, #22]
 80033d4:	3301      	adds	r3, #1
 80033d6:	75bb      	strb	r3, [r7, #22]
 80033d8:	7dba      	ldrb	r2, [r7, #22]
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3b3      	bcc.n	8003348 <BytesHex2Str+0x24>




		}
		return 1;
 80033e0:	2301      	movs	r3, #1
	//}
	//else{
	//	return 0;
	//}
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <PN532_WriteTagtoHex>:

void PN532_WriteTagtoHex(){
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
	uint8_t u8_cntindex;
	//--------------------------------------------------------------------------------------------

	 */

	uint8_t k=0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx=0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	71bb      	strb	r3, [r7, #6]
	uint8_t x=0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	717b      	strb	r3, [r7, #5]

	for ( x=0; x<4 ; x++){
 80033fe:	2300      	movs	r3, #0
 8003400:	717b      	strb	r3, [r7, #5]
 8003402:	e055      	b.n	80034b0 <PN532_WriteTagtoHex+0xc4>


				//tx = uidnfcwrdara[k];

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	2b2f      	cmp	r3, #47	; 0x2f
 800340c:	d90a      	bls.n	8003424 <PN532_WriteTagtoHex+0x38>
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	2b39      	cmp	r3, #57	; 0x39
 8003416:	d805      	bhi.n	8003424 <PN532_WriteTagtoHex+0x38>
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	3b30      	subs	r3, #48	; 0x30
 8003420:	71bb      	strb	r3, [r7, #6]
 8003422:	e00e      	b.n	8003442 <PN532_WriteTagtoHex+0x56>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003428:	5cd3      	ldrb	r3, [r2, r3]
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d909      	bls.n	8003442 <PN532_WriteTagtoHex+0x56>
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	2b46      	cmp	r3, #70	; 0x46
 8003436:	d804      	bhi.n	8003442 <PN532_WriteTagtoHex+0x56>
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 800343c:	5cd3      	ldrb	r3, [r2, r3]
 800343e:	3b37      	subs	r3, #55	; 0x37
 8003440:	71bb      	strb	r3, [r7, #6]
				}

				outwrdata[x]=tx<<4;
 8003442:	797b      	ldrb	r3, [r7, #5]
 8003444:	79ba      	ldrb	r2, [r7, #6]
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	b2d1      	uxtb	r1, r2
 800344a:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <PN532_WriteTagtoHex+0xdc>)
 800344c:	54d1      	strb	r1, [r2, r3]
				k++;
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	3301      	adds	r3, #1
 8003452:	71fb      	strb	r3, [r7, #7]

				if ((uidnfcwrdara[k]>='0') && (uidnfcwrdara[k] <= '9'))   { tx = uidnfcwrdara[k] - 0x30; }
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	2b2f      	cmp	r3, #47	; 0x2f
 800345c:	d90a      	bls.n	8003474 <PN532_WriteTagtoHex+0x88>
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	2b39      	cmp	r3, #57	; 0x39
 8003466:	d805      	bhi.n	8003474 <PN532_WriteTagtoHex+0x88>
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 800346c:	5cd3      	ldrb	r3, [r2, r3]
 800346e:	3b30      	subs	r3, #48	; 0x30
 8003470:	71bb      	strb	r3, [r7, #6]
 8003472:	e00e      	b.n	8003492 <PN532_WriteTagtoHex+0xa6>
				else{
				     if ((uidnfcwrdara[k]>='A') && (uidnfcwrdara[k]<='F') ) { tx = uidnfcwrdara[k] - 0x37;}
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003478:	5cd3      	ldrb	r3, [r2, r3]
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d909      	bls.n	8003492 <PN532_WriteTagtoHex+0xa6>
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	2b46      	cmp	r3, #70	; 0x46
 8003486:	d804      	bhi.n	8003492 <PN532_WriteTagtoHex+0xa6>
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <PN532_WriteTagtoHex+0xd8>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	3b37      	subs	r3, #55	; 0x37
 8003490:	71bb      	strb	r3, [r7, #6]
				}
				outwrdata[x]|=tx;
 8003492:	797b      	ldrb	r3, [r7, #5]
 8003494:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <PN532_WriteTagtoHex+0xdc>)
 8003496:	5cd1      	ldrb	r1, [r2, r3]
 8003498:	797b      	ldrb	r3, [r7, #5]
 800349a:	79ba      	ldrb	r2, [r7, #6]
 800349c:	430a      	orrs	r2, r1
 800349e:	b2d1      	uxtb	r1, r2
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <PN532_WriteTagtoHex+0xdc>)
 80034a2:	54d1      	strb	r1, [r2, r3]
				k++;
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	3301      	adds	r3, #1
 80034a8:	71fb      	strb	r3, [r7, #7]
	for ( x=0; x<4 ; x++){
 80034aa:	797b      	ldrb	r3, [r7, #5]
 80034ac:	3301      	adds	r3, #1
 80034ae:	717b      	strb	r3, [r7, #5]
 80034b0:	797b      	ldrb	r3, [r7, #5]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d9a6      	bls.n	8003404 <PN532_WriteTagtoHex+0x18>

			}


}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000020 	.word	0x20000020
 80034c8:	20000720 	.word	0x20000720

080034cc <spi_gpio_init>:



void spi_gpio_init(void){
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  		GPIO_InitStruct;

	SPI_RCC_PORT_CLOCK_CMD ( SPI_RCC_PORT, ENABLE);
 80034d2:	2101      	movs	r1, #1
 80034d4:	2008      	movs	r0, #8
 80034d6:	f003 f877 	bl	80065c8 <RCC_APB2PeriphClockCmd>
	SPI_RCC_PERIPH_CLOCK_CMD ( SPI_RCC_APBPORT, ENABLE );
 80034da:	2101      	movs	r1, #1
 80034dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034e0:	f003 f890 	bl	8006604 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 80034e4:	2303      	movs	r3, #3
 80034e6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode =  GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 80034e8:	2318      	movs	r3, #24
 80034ea:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MOSI_PIN | SPI_SCK_PIN;
 80034ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80034f0:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	480e      	ldr	r0, [pc, #56]	; (8003530 <spi_gpio_init+0x64>)
 80034f8:	f002 fcd2 	bl	8005ea0 <GPIO_Init>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_2MHz;
 80034fc:	2303      	movs	r3, #3
 80034fe:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;//GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
 8003500:	2310      	movs	r3, #16
 8003502:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_NSS_PIN | SPI_FLASH_NSS;
 8003504:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003508:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4808      	ldr	r0, [pc, #32]	; (8003530 <spi_gpio_init+0x64>)
 8003510:	f002 fcc6 	bl	8005ea0 <GPIO_Init>


	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;//GPIO_Mode_AF_PP;//GPIO_Mode_IN_FLOATING;//GPIO_Mode_IPU;
 8003514:	2348      	movs	r3, #72	; 0x48
 8003516:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Pin = SPI_MISO_PIN;
 8003518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800351c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init ( SPI_GPIO_PORT, &GPIO_InitStruct );
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4803      	ldr	r0, [pc, #12]	; (8003530 <spi_gpio_init+0x64>)
 8003524:	f002 fcbc 	bl	8005ea0 <GPIO_Init>





}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40010c00 	.word	0x40010c00

08003534 <bcode_conv_to_flash>:



uint64_t bcode_conv_to_flash(uint32_t rtc_time, char *bar_buff){
 8003534:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]

	uint8_t s;
	char *pBar = bar_buff;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	613b      	str	r3, [r7, #16]
	if(bar_buff[0] =='\n'){
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b0a      	cmp	r3, #10
 800354a:	d102      	bne.n	8003552 <bcode_conv_to_flash+0x1e>
		*pBar++;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3301      	adds	r3, #1
 8003550:	613b      	str	r3, [r7, #16]
	}
	for(int i = 0; i < 13; i++){
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e00b      	b.n	8003570 <bcode_conv_to_flash+0x3c>
		barcode[i] = *pBar++;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	613a      	str	r2, [r7, #16]
 800355e:	7819      	ldrb	r1, [r3, #0]
 8003560:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <bcode_conv_to_flash+0x120>)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	460a      	mov	r2, r1
 8003568:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 13; i++){
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3301      	adds	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	ddf0      	ble.n	8003558 <bcode_conv_to_flash+0x24>
	}

	for(int a=0;a<7;a++){
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	e05e      	b.n	800363a <bcode_conv_to_flash+0x106>
		if(a==0){
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d114      	bne.n	80035ac <bcode_conv_to_flash+0x78>
			s=barcode[a]-0x30;
 8003582:	4a34      	ldr	r2, [pc, #208]	; (8003654 <bcode_conv_to_flash+0x120>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4413      	add	r3, r2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	3b30      	subs	r3, #48	; 0x30
 800358c:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a+1]-0x30;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3301      	adds	r3, #1
 8003598:	4a2e      	ldr	r2, [pc, #184]	; (8003654 <bcode_conv_to_flash+0x120>)
 800359a:	5cd3      	ldrb	r3, [r2, r3]
 800359c:	3b30      	subs	r3, #48	; 0x30
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	b25a      	sxtb	r2, r3
 80035a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	75fb      	strb	r3, [r7, #23]
		}
		if(a>0 && a<=5){
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dd18      	ble.n	80035e4 <bcode_conv_to_flash+0xb0>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	dc15      	bgt.n	80035e4 <bcode_conv_to_flash+0xb0>
			s=barcode[a*2]-0x30;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4a25      	ldr	r2, [pc, #148]	; (8003654 <bcode_conv_to_flash+0x120>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	3b30      	subs	r3, #48	; 0x30
 80035c2:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	75fb      	strb	r3, [r7, #23]
			s|=barcode[a*2+1]-0x30;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	3301      	adds	r3, #1
 80035d0:	4a20      	ldr	r2, [pc, #128]	; (8003654 <bcode_conv_to_flash+0x120>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	3b30      	subs	r3, #48	; 0x30
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	b25a      	sxtb	r2, r3
 80035da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035de:	4313      	orrs	r3, r2
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	75fb      	strb	r3, [r7, #23]
		}
		if(a==6){
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d108      	bne.n	80035fc <bcode_conv_to_flash+0xc8>
			s=barcode[a*2]-0x30;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4a19      	ldr	r2, [pc, #100]	; (8003654 <bcode_conv_to_flash+0x120>)
 80035f0:	5cd3      	ldrb	r3, [r2, r3]
 80035f2:	3b30      	subs	r3, #48	; 0x30
 80035f4:	75fb      	strb	r3, [r7, #23]
			s<<=4;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	75fb      	strb	r3, [r7, #23]
		}

		bcode<<=8;
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <bcode_conv_to_flash+0x124>)
 80035fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	020b      	lsls	r3, r1, #8
 800360c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003610:	0202      	lsls	r2, r0, #8
 8003612:	4911      	ldr	r1, [pc, #68]	; (8003658 <bcode_conv_to_flash+0x124>)
 8003614:	e9c1 2300 	strd	r2, r3, [r1]
		bcode|=(uint64_t)s;
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	2200      	movs	r2, #0
 800361c:	461c      	mov	r4, r3
 800361e:	4615      	mov	r5, r2
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <bcode_conv_to_flash+0x124>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	ea44 0802 	orr.w	r8, r4, r2
 800362a:	ea45 0903 	orr.w	r9, r5, r3
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <bcode_conv_to_flash+0x124>)
 8003630:	e9c3 8900 	strd	r8, r9, [r3]
	for(int a=0;a<7;a++){
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3301      	adds	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b06      	cmp	r3, #6
 800363e:	dd9d      	ble.n	800357c <bcode_conv_to_flash+0x48>

	}


	return bcode;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <bcode_conv_to_flash+0x124>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]

}
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003652:	4770      	bx	lr
 8003654:	20000970 	.word	0x20000970
 8003658:	20000968 	.word	0x20000968

0800365c <data_conv2Flash>:
	nfc_to_flash[0]=rtc_time;
	nfc_to_flash[1]=nfc_tag;
}


void data_conv2Flash(uint32_t cnt_timer, uint64_t data ){
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	e9c7 2300 	strd	r2, r3, [r7]


	data_to_flash[0]=(cnt_timer >> 24) & 0xFF;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	0e1b      	lsrs	r3, r3, #24
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <data_conv2Flash+0xd4>)
 8003670:	701a      	strb	r2, [r3, #0]
	data_to_flash[1]=(cnt_timer >> 16) & 0xFF;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <data_conv2Flash+0xd4>)
 800367a:	705a      	strb	r2, [r3, #1]
	data_to_flash[2]=(cnt_timer >> 8) & 0xFF;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <data_conv2Flash+0xd4>)
 8003684:	709a      	strb	r2, [r3, #2]
	data_to_flash[3]=cnt_timer & 0xFF;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <data_conv2Flash+0xd4>)
 800368c:	70da      	strb	r2, [r3, #3]

	data_to_flash[4]=(data >> 48) & 0xFF;
 800368e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	0c0a      	lsrs	r2, r1, #16
 800369c:	2300      	movs	r3, #0
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <data_conv2Flash+0xd4>)
 80036a2:	711a      	strb	r2, [r3, #4]
	data_to_flash[5]=(data >> 40) & 0xFF;
 80036a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	0a0a      	lsrs	r2, r1, #8
 80036b2:	2300      	movs	r3, #0
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <data_conv2Flash+0xd4>)
 80036b8:	715a      	strb	r2, [r3, #5]
	data_to_flash[6]=(data >> 32) & 0xFF;
 80036ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	000a      	movs	r2, r1
 80036c8:	2300      	movs	r3, #0
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <data_conv2Flash+0xd4>)
 80036ce:	719a      	strb	r2, [r3, #6]
	data_to_flash[7]=(data >> 24) & 0xFF;
 80036d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	0e02      	lsrs	r2, r0, #24
 80036de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036e2:	0e0b      	lsrs	r3, r1, #24
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <data_conv2Flash+0xd4>)
 80036e8:	71da      	strb	r2, [r3, #7]
	data_to_flash[8]=(data >> 16) & 0xFF;
 80036ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	0c02      	lsrs	r2, r0, #16
 80036f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036fc:	0c0b      	lsrs	r3, r1, #16
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <data_conv2Flash+0xd4>)
 8003702:	721a      	strb	r2, [r3, #8]
	data_to_flash[9]=(data >> 8) & 0xFF;
 8003704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	0a02      	lsrs	r2, r0, #8
 8003712:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003716:	0a0b      	lsrs	r3, r1, #8
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <data_conv2Flash+0xd4>)
 800371c:	725a      	strb	r2, [r3, #9]
	data_to_flash[10]=data & 0xFF;
 800371e:	783a      	ldrb	r2, [r7, #0]
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <data_conv2Flash+0xd4>)
 8003722:	729a      	strb	r2, [r3, #10]


}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	200009bc 	.word	0x200009bc

08003734 <nfc_conv2Flash>:

void nfc_conv2Flash(uint32_t cnt_timer, uint32_t data ){
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]


	nfc_data_2flash[0]=(cnt_timer >> 24) & 0xFF;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0e1b      	lsrs	r3, r3, #24
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <nfc_conv2Flash+0x60>)
 8003746:	701a      	strb	r2, [r3, #0]
	nfc_data_2flash[1]=(cnt_timer >> 16) & 0xFF;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <nfc_conv2Flash+0x60>)
 8003750:	705a      	strb	r2, [r3, #1]
	nfc_data_2flash[2]=(cnt_timer >> 8) & 0xFF;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	b2da      	uxtb	r2, r3
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <nfc_conv2Flash+0x60>)
 800375a:	709a      	strb	r2, [r3, #2]
	nfc_data_2flash[3]=cnt_timer & 0xFF;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <nfc_conv2Flash+0x60>)
 8003762:	70da      	strb	r2, [r3, #3]

	nfc_data_2flash[4]=(data >> 24) & 0xFF;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	0e1b      	lsrs	r3, r3, #24
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <nfc_conv2Flash+0x60>)
 800376c:	711a      	strb	r2, [r3, #4]
	nfc_data_2flash[5]=(data >> 16) & 0xFF;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <nfc_conv2Flash+0x60>)
 8003776:	715a      	strb	r2, [r3, #5]
	nfc_data_2flash[6]=(data >> 8) & 0xFF;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <nfc_conv2Flash+0x60>)
 8003780:	719a      	strb	r2, [r3, #6]
	nfc_data_2flash[7]=data & 0xFF;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b03      	ldr	r3, [pc, #12]	; (8003794 <nfc_conv2Flash+0x60>)
 8003788:	71da      	strb	r2, [r3, #7]


}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	200009cc 	.word	0x200009cc

08003798 <flash_conv2_timer>:
	uint32_t addr2_wr = (padBuf[0] << 24) | (padBuf[1] << 16) | (padBuf[2] << 8) | padBuf[3];
	return addr2_wr;

}

uint32_t flash_conv2_timer(uint8_t *pdBuf){
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

	uint32_t timer_flash = (pdBuf[0] << 24) | (pdBuf[1] << 16) | (pdBuf[2] << 8) | pdBuf[3];
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	061a      	lsls	r2, r3, #24
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3301      	adds	r3, #1
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3302      	adds	r3, #2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	4313      	orrs	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	3203      	adds	r2, #3
 80037be:	7812      	ldrb	r2, [r2, #0]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
	return timer_flash;
 80037c4:	68fb      	ldr	r3, [r7, #12]

}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <flash_conv2_bcode>:

void flash_conv2_bcode(){
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0

	fl_bar_buff[0] = (rd_flash_buff[4] >> 4) + 0x30;
 80037d4:	4b38      	ldr	r3, [pc, #224]	; (80038b8 <flash_conv2_bcode+0xe8>)
 80037d6:	791b      	ldrb	r3, [r3, #4]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3330      	adds	r3, #48	; 0x30
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <flash_conv2_bcode+0xec>)
 80037e2:	701a      	strb	r2, [r3, #0]
	fl_bar_buff[1] = (rd_flash_buff[4] & 0x0F) + 0x30;
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <flash_conv2_bcode+0xe8>)
 80037e6:	791b      	ldrb	r3, [r3, #4]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	3330      	adds	r3, #48	; 0x30
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b32      	ldr	r3, [pc, #200]	; (80038bc <flash_conv2_bcode+0xec>)
 80037f4:	705a      	strb	r2, [r3, #1]
	fl_bar_buff[2] = (rd_flash_buff[5] >> 4) + 0x30;
 80037f6:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <flash_conv2_bcode+0xe8>)
 80037f8:	795b      	ldrb	r3, [r3, #5]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3330      	adds	r3, #48	; 0x30
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <flash_conv2_bcode+0xec>)
 8003804:	709a      	strb	r2, [r3, #2]
	fl_bar_buff[3] = (rd_flash_buff[5] & 0x0F) + 0x30;
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <flash_conv2_bcode+0xe8>)
 8003808:	795b      	ldrb	r3, [r3, #5]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3330      	adds	r3, #48	; 0x30
 8003812:	b2da      	uxtb	r2, r3
 8003814:	4b29      	ldr	r3, [pc, #164]	; (80038bc <flash_conv2_bcode+0xec>)
 8003816:	70da      	strb	r2, [r3, #3]
	fl_bar_buff[4] = (rd_flash_buff[6] >> 4) + 0x30;
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <flash_conv2_bcode+0xe8>)
 800381a:	799b      	ldrb	r3, [r3, #6]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3330      	adds	r3, #48	; 0x30
 8003822:	b2da      	uxtb	r2, r3
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <flash_conv2_bcode+0xec>)
 8003826:	711a      	strb	r2, [r3, #4]
	fl_bar_buff[5] = (rd_flash_buff[6] & 0x0F) + 0x30;
 8003828:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <flash_conv2_bcode+0xe8>)
 800382a:	799b      	ldrb	r3, [r3, #6]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	b2db      	uxtb	r3, r3
 8003832:	3330      	adds	r3, #48	; 0x30
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4b21      	ldr	r3, [pc, #132]	; (80038bc <flash_conv2_bcode+0xec>)
 8003838:	715a      	strb	r2, [r3, #5]
	fl_bar_buff[6] = (rd_flash_buff[7] >> 4) + 0x30;
 800383a:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <flash_conv2_bcode+0xe8>)
 800383c:	79db      	ldrb	r3, [r3, #7]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3330      	adds	r3, #48	; 0x30
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <flash_conv2_bcode+0xec>)
 8003848:	719a      	strb	r2, [r3, #6]
	fl_bar_buff[7] = (rd_flash_buff[7] & 0x0F) + 0x30;
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <flash_conv2_bcode+0xe8>)
 800384c:	79db      	ldrb	r3, [r3, #7]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3330      	adds	r3, #48	; 0x30
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <flash_conv2_bcode+0xec>)
 800385a:	71da      	strb	r2, [r3, #7]
	fl_bar_buff[8] = (rd_flash_buff[8] >> 4) + 0x30;
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <flash_conv2_bcode+0xe8>)
 800385e:	7a1b      	ldrb	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3330      	adds	r3, #48	; 0x30
 8003866:	b2da      	uxtb	r2, r3
 8003868:	4b14      	ldr	r3, [pc, #80]	; (80038bc <flash_conv2_bcode+0xec>)
 800386a:	721a      	strb	r2, [r3, #8]
	fl_bar_buff[9] = (rd_flash_buff[8] & 0x0F) + 0x30;
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <flash_conv2_bcode+0xe8>)
 800386e:	7a1b      	ldrb	r3, [r3, #8]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3330      	adds	r3, #48	; 0x30
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <flash_conv2_bcode+0xec>)
 800387c:	725a      	strb	r2, [r3, #9]
	fl_bar_buff[10] = (rd_flash_buff[9] >> 4) + 0x30;
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <flash_conv2_bcode+0xe8>)
 8003880:	7a5b      	ldrb	r3, [r3, #9]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	b2db      	uxtb	r3, r3
 8003886:	3330      	adds	r3, #48	; 0x30
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <flash_conv2_bcode+0xec>)
 800388c:	729a      	strb	r2, [r3, #10]
	fl_bar_buff[11] = (rd_flash_buff[9] & 0x0F) + 0x30;
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <flash_conv2_bcode+0xe8>)
 8003890:	7a5b      	ldrb	r3, [r3, #9]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3330      	adds	r3, #48	; 0x30
 800389a:	b2da      	uxtb	r2, r3
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <flash_conv2_bcode+0xec>)
 800389e:	72da      	strb	r2, [r3, #11]
	fl_bar_buff[12] = (rd_flash_buff[10] >> 4) + 0x30;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <flash_conv2_bcode+0xe8>)
 80038a2:	7a9b      	ldrb	r3, [r3, #10]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3330      	adds	r3, #48	; 0x30
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <flash_conv2_bcode+0xec>)
 80038ae:	731a      	strb	r2, [r3, #12]

}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	20000adc 	.word	0x20000adc
 80038bc:	20000aec 	.word	0x20000aec

080038c0 <flash_conv2_uid>:

uint32_t flash_conv2_uid(uint8_t *pdBuf){
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

	uint32_t decuid_flash = (pdBuf[4] << 24) | (pdBuf[5] << 16) | (pdBuf[6] << 8) | pdBuf[7];
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	061a      	lsls	r2, r3, #24
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3305      	adds	r3, #5
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3306      	adds	r3, #6
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	4313      	orrs	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	3207      	adds	r2, #7
 80038e8:	7812      	ldrb	r2, [r2, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
	return decuid_flash;
 80038ee:	68fb      	ldr	r3, [r7, #12]

}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
	...

080038fc <flash_conv2_nfc>:

void flash_conv2_nfc(uint32_t flash_nfc_uid ){
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]


	nfc_uid_arr[0] = 0x30+(flash_nfc_uid/1000000000);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0a5b      	lsrs	r3, r3, #9
 8003908:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <flash_conv2_nfc+0x178>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	09db      	lsrs	r3, r3, #7
 8003910:	b2db      	uxtb	r3, r3
 8003912:	3330      	adds	r3, #48	; 0x30
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4b58      	ldr	r3, [pc, #352]	; (8003a78 <flash_conv2_nfc+0x17c>)
 8003918:	701a      	strb	r2, [r3, #0]
	nfc_uid_arr[1] = 0x30+(flash_nfc_uid/100000000%10);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <flash_conv2_nfc+0x180>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0e59      	lsrs	r1, r3, #25
 8003924:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <flash_conv2_nfc+0x184>)
 8003926:	fba3 2301 	umull	r2, r3, r3, r1
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	1aca      	subs	r2, r1, r3
 8003936:	b2d3      	uxtb	r3, r2
 8003938:	3330      	adds	r3, #48	; 0x30
 800393a:	b2da      	uxtb	r2, r3
 800393c:	4b4e      	ldr	r3, [pc, #312]	; (8003a78 <flash_conv2_nfc+0x17c>)
 800393e:	705a      	strb	r2, [r3, #1]
	nfc_uid_arr[2] = 0x30+(flash_nfc_uid/10000000%10);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a50      	ldr	r2, [pc, #320]	; (8003a84 <flash_conv2_nfc+0x188>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	0d99      	lsrs	r1, r3, #22
 800394a:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <flash_conv2_nfc+0x184>)
 800394c:	fba3 2301 	umull	r2, r3, r3, r1
 8003950:	08da      	lsrs	r2, r3, #3
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	1aca      	subs	r2, r1, r3
 800395c:	b2d3      	uxtb	r3, r2
 800395e:	3330      	adds	r3, #48	; 0x30
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4b45      	ldr	r3, [pc, #276]	; (8003a78 <flash_conv2_nfc+0x17c>)
 8003964:	709a      	strb	r2, [r3, #2]
	nfc_uid_arr[3] = 0x30+(flash_nfc_uid/1000000%10);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a47      	ldr	r2, [pc, #284]	; (8003a88 <flash_conv2_nfc+0x18c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0c99      	lsrs	r1, r3, #18
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <flash_conv2_nfc+0x184>)
 8003972:	fba3 2301 	umull	r2, r3, r3, r1
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	1aca      	subs	r2, r1, r3
 8003982:	b2d3      	uxtb	r3, r2
 8003984:	3330      	adds	r3, #48	; 0x30
 8003986:	b2da      	uxtb	r2, r3
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <flash_conv2_nfc+0x17c>)
 800398a:	70da      	strb	r2, [r3, #3]
	nfc_uid_arr[4] = 0x30+(flash_nfc_uid/100000%10);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <flash_conv2_nfc+0x190>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	09d9      	lsrs	r1, r3, #7
 8003998:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <flash_conv2_nfc+0x184>)
 800399a:	fba3 2301 	umull	r2, r3, r3, r1
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	1aca      	subs	r2, r1, r3
 80039aa:	b2d3      	uxtb	r3, r2
 80039ac:	3330      	adds	r3, #48	; 0x30
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <flash_conv2_nfc+0x17c>)
 80039b2:	711a      	strb	r2, [r3, #4]
	nfc_uid_arr[5] = 0x30+(flash_nfc_uid/10000%10);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a36      	ldr	r2, [pc, #216]	; (8003a90 <flash_conv2_nfc+0x194>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	0b59      	lsrs	r1, r3, #13
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <flash_conv2_nfc+0x184>)
 80039c0:	fba3 2301 	umull	r2, r3, r3, r1
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	1aca      	subs	r2, r1, r3
 80039d0:	b2d3      	uxtb	r3, r2
 80039d2:	3330      	adds	r3, #48	; 0x30
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <flash_conv2_nfc+0x17c>)
 80039d8:	715a      	strb	r2, [r3, #5]
	nfc_uid_arr[6] = 0x30+(flash_nfc_uid/1000%10);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <flash_conv2_nfc+0x198>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0999      	lsrs	r1, r3, #6
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <flash_conv2_nfc+0x184>)
 80039e6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	1aca      	subs	r2, r1, r3
 80039f6:	b2d3      	uxtb	r3, r2
 80039f8:	3330      	adds	r3, #48	; 0x30
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <flash_conv2_nfc+0x17c>)
 80039fe:	719a      	strb	r2, [r3, #6]
	nfc_uid_arr[7] = 0x30+(flash_nfc_uid/100%10);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <flash_conv2_nfc+0x19c>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	0959      	lsrs	r1, r3, #5
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <flash_conv2_nfc+0x184>)
 8003a0c:	fba3 2301 	umull	r2, r3, r3, r1
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	1aca      	subs	r2, r1, r3
 8003a1c:	b2d3      	uxtb	r3, r2
 8003a1e:	3330      	adds	r3, #48	; 0x30
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <flash_conv2_nfc+0x17c>)
 8003a24:	71da      	strb	r2, [r3, #7]
	nfc_uid_arr[8] = 0x30+(flash_nfc_uid/10%10);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <flash_conv2_nfc+0x184>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	08d9      	lsrs	r1, r3, #3
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <flash_conv2_nfc+0x184>)
 8003a32:	fba3 2301 	umull	r2, r3, r3, r1
 8003a36:	08da      	lsrs	r2, r3, #3
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	1aca      	subs	r2, r1, r3
 8003a42:	b2d3      	uxtb	r3, r2
 8003a44:	3330      	adds	r3, #48	; 0x30
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <flash_conv2_nfc+0x17c>)
 8003a4a:	721a      	strb	r2, [r3, #8]
	nfc_uid_arr[9] = 0x30+(flash_nfc_uid%10);
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <flash_conv2_nfc+0x184>)
 8003a50:	fba3 2301 	umull	r2, r3, r3, r1
 8003a54:	08da      	lsrs	r2, r3, #3
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	1aca      	subs	r2, r1, r3
 8003a60:	b2d3      	uxtb	r3, r2
 8003a62:	3330      	adds	r3, #48	; 0x30
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <flash_conv2_nfc+0x17c>)
 8003a68:	725a      	strb	r2, [r3, #9]


}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	00044b83 	.word	0x00044b83
 8003a78:	200009b0 	.word	0x200009b0
 8003a7c:	55e63b89 	.word	0x55e63b89
 8003a80:	cccccccd 	.word	0xcccccccd
 8003a84:	6b5fca6b 	.word	0x6b5fca6b
 8003a88:	431bde83 	.word	0x431bde83
 8003a8c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003a90:	d1b71759 	.word	0xd1b71759
 8003a94:	10624dd3 	.word	0x10624dd3
 8003a98:	51eb851f 	.word	0x51eb851f

08003a9c <TimingDelay_Decrement>:
/**
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement ( void ) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00) {
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <TimingDelay_Decrement+0x28>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <TimingDelay_Decrement+0x16>
		TimingDelay--;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <TimingDelay_Decrement+0x28>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <TimingDelay_Decrement+0x28>)
 8003ab0:	6013      	str	r3, [r2, #0]
	}
	tick++;
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <TimingDelay_Decrement+0x2c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a03      	ldr	r2, [pc, #12]	; (8003ac8 <TimingDelay_Decrement+0x2c>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	200004f0 	.word	0x200004f0
 8003ac8:	20000b0c 	.word	0x20000b0c

08003acc <Delay>:
/**
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in milliseconds
 * @retval None
 */
void Delay ( uint32_t nTime ) {
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <Delay+0x24>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
	while (TimingDelay != 0);
 8003ada:	bf00      	nop
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <Delay+0x24>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1fb      	bne.n	8003adc <Delay+0x10>
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	200004f0 	.word	0x200004f0

08003af4 <LCD_CtrlLinesConfig>:
}




void LCD_CtrlLinesConfig(void) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
	I2C_InitTypeDef			I2C_InitStruct;

	/*
	 * I2C pins configure
	 */
	LCD_I2C_SCL_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SCL_RCC_PORT, ENABLE );
 8003afa:	2101      	movs	r1, #1
 8003afc:	2008      	movs	r0, #8
 8003afe:	f002 fd63 	bl	80065c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8003b02:	2302      	movs	r3, #2
 8003b04:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8003b06:	2318      	movs	r3, #24
 8003b08:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SCL_PIN;
 8003b0a:	2340      	movs	r3, #64	; 0x40
 8003b0c:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SCL_GPIO_PORT, &GPIO_InitStruct );
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	4619      	mov	r1, r3
 8003b14:	481a      	ldr	r0, [pc, #104]	; (8003b80 <LCD_CtrlLinesConfig+0x8c>)
 8003b16:	f002 f9c3 	bl	8005ea0 <GPIO_Init>

	LCD_I2C_SDA_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_SDA_RCC_PORT, ENABLE );
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2008      	movs	r0, #8
 8003b1e:	f002 fd53 	bl	80065c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8003b22:	2302      	movs	r3, #2
 8003b24:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_OD;
 8003b26:	231c      	movs	r3, #28
 8003b28:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = LCD_I2C_SDA_PIN;
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( LCD_I2C_SDA_GPIO_PORT, &GPIO_InitStruct );
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	4812      	ldr	r0, [pc, #72]	; (8003b80 <LCD_CtrlLinesConfig+0x8c>)
 8003b36:	f002 f9b3 	bl	8005ea0 <GPIO_Init>

	LCD_I2C_RCC_PERIPH_CLOCK_CMD ( LCD_I2C_RCC_APBPORT, ENABLE );
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b40:	f002 fd60 	bl	8006604 <RCC_APB1PeriphClockCmd>

	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8003b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b48:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003b4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b4e:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_ClockSpeed = 50000;
 8003b50:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003b54:	607b      	str	r3, [r7, #4]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8003b56:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003b5a:	817b      	strh	r3, [r7, #10]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	813b      	strh	r3, [r7, #8]
	I2C_InitStruct.I2C_OwnAddress1 = 1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	81bb      	strh	r3, [r7, #12]
	I2C_Init ( LCD_I2C_NUM, &I2C_InitStruct );
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4806      	ldr	r0, [pc, #24]	; (8003b84 <LCD_CtrlLinesConfig+0x90>)
 8003b6a:	f002 fa85 	bl	8006078 <I2C_Init>

	I2C_Cmd ( LCD_I2C_NUM, ENABLE );
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4804      	ldr	r0, [pc, #16]	; (8003b84 <LCD_CtrlLinesConfig+0x90>)
 8003b72:	f002 fb43 	bl	80061fc <I2C_Cmd>
}
 8003b76:	bf00      	nop
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40010c00 	.word	0x40010c00
 8003b84:	40005400 	.word	0x40005400

08003b88 <I2C_SingleRandomWrite>:
  * @param  Addr: register address
  * @param  Data: data to be written to the specific register
  * @retval 0x00 if write operation is OK
  *         0xFF if timeout condition occured (device not connected or bus error).
  */
uint8_t I2C_SingleRandomWrite ( I2C_TypeDef* I2Cx, uint8_t Device, uint8_t Data ) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
 8003b94:	4613      	mov	r3, r2
 8003b96:	70bb      	strb	r3, [r7, #2]
	uint32_t timeout = TIMEOUT_MAX;
 8003b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b9c:	60fb      	str	r3, [r7, #12]

	/* Generate the Start Condition */
	I2C_GenerateSTART ( I2Cx, ENABLE );
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f002 fb4a 	bl	800623a <I2C_GenerateSTART>

	/* Test on I2Cx EV5 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8003ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003baa:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 8003bac:	e006      	b.n	8003bbc <I2C_SingleRandomWrite+0x34>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e5a      	subs	r2, r3, #1
 8003bb2:	60fa      	str	r2, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <I2C_SingleRandomWrite+0x34>
			return 0xFF;
 8003bb8:	23ff      	movs	r3, #255	; 0xff
 8003bba:	e03a      	b.n	8003c32 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_MODE_SELECT )) {
 8003bbc:	491f      	ldr	r1, [pc, #124]	; (8003c3c <I2C_SingleRandomWrite+0xb4>)
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f002 fba5 	bl	800630e <I2C_CheckEvent>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f1      	beq.n	8003bae <I2C_SingleRandomWrite+0x26>
	}

	/* Send TS selected device slave Address for write */
	I2C_Send7bitAddress ( I2Cx, Device, I2C_Direction_Transmitter );
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f002 fb7f 	bl	80062d4 <I2C_Send7bitAddress>

	/* Test on I2Cx EV6 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8003bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bda:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 8003bdc:	e006      	b.n	8003bec <I2C_SingleRandomWrite+0x64>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	60fa      	str	r2, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <I2C_SingleRandomWrite+0x64>
			return 0xFF;
 8003be8:	23ff      	movs	r3, #255	; 0xff
 8003bea:	e022      	b.n	8003c32 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING )) {
 8003bec:	4914      	ldr	r1, [pc, #80]	; (8003c40 <I2C_SingleRandomWrite+0xb8>)
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f002 fb8d 	bl	800630e <I2C_CheckEvent>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f1      	beq.n	8003bde <I2C_SingleRandomWrite+0x56>
	}

	/* Send Data */
	I2C_SendData ( I2Cx, Data );
 8003bfa:	78bb      	ldrb	r3, [r7, #2]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f002 fb59 	bl	80062b6 <I2C_SendData>

	/* Test on I2Cx EV8 and clear it */
	timeout = TIMEOUT_MAX; /* Initialize timeout value */
 8003c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c08:	60fb      	str	r3, [r7, #12]
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 8003c0a:	e006      	b.n	8003c1a <I2C_SingleRandomWrite+0x92>
		/* If the timeout delay is exceeded, exit with error code */
		if ((timeout--) == 0)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e5a      	subs	r2, r3, #1
 8003c10:	60fa      	str	r2, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <I2C_SingleRandomWrite+0x92>
			return 0xFF;
 8003c16:	23ff      	movs	r3, #255	; 0xff
 8003c18:	e00b      	b.n	8003c32 <I2C_SingleRandomWrite+0xaa>
	while (!I2C_CheckEvent ( I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 8003c1a:	490a      	ldr	r1, [pc, #40]	; (8003c44 <I2C_SingleRandomWrite+0xbc>)
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f002 fb76 	bl	800630e <I2C_CheckEvent>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f1      	beq.n	8003c0c <I2C_SingleRandomWrite+0x84>
	}

	/* Send I2Cx STOP Condition */
	I2C_GenerateSTOP ( I2Cx, ENABLE );
 8003c28:	2101      	movs	r1, #1
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f002 fb24 	bl	8006278 <I2C_GenerateSTOP>

	/* If operation is OK, return 0 */
	return 0;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	00030001 	.word	0x00030001
 8003c40:	00070080 	.word	0x00070080
 8003c44:	00070084 	.word	0x00070084

08003c48 <LCD_SetCursor>:
//******************************************************************
void LCD_SetCursor ( uint8_t index ) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
	uint8_t index_hi = index & 0xF0;
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	f023 030f 	bic.w	r3, r3, #15
 8003c58:	73fb      	strb	r3, [r7, #15]
	uint8_t index_lo = (index & 0x0F) << 4;
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	f023 0307 	bic.w	r3, r3, #7
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	214e      	movs	r1, #78	; 0x4e
 8003c6c:	481c      	ldr	r0, [pc, #112]	; (8003ce0 <LCD_SetCursor+0x98>)
 8003c6e:	f7ff ff8b 	bl	8003b88 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_hi | LCD_E) & ~LCD_RS & ~LCD_RW );
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003c7a:	f023 0305 	bic.w	r3, r3, #5
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	214e      	movs	r1, #78	; 0x4e
 8003c84:	4816      	ldr	r0, [pc, #88]	; (8003ce0 <LCD_SetCursor+0x98>)
 8003c86:	f7ff ff7f 	bl	8003b88 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	f023 0307 	bic.w	r3, r3, #7
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	214e      	movs	r1, #78	; 0x4e
 8003c96:	4812      	ldr	r0, [pc, #72]	; (8003ce0 <LCD_SetCursor+0x98>)
 8003c98:	f7ff ff76 	bl	8003b88 <I2C_SingleRandomWrite>
			(index_hi & ~LCD_E) & ~LCD_RS & ~LCD_RW );

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003c9c:	7bbb      	ldrb	r3, [r7, #14]
 8003c9e:	f023 0307 	bic.w	r3, r3, #7
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	214e      	movs	r1, #78	; 0x4e
 8003ca8:	480d      	ldr	r0, [pc, #52]	; (8003ce0 <LCD_SetCursor+0x98>)
 8003caa:	f7ff ff6d 	bl	8003b88 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			(index_lo | LCD_E) & ~LCD_RS & ~LCD_RW );
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003cb6:	f023 0305 	bic.w	r3, r3, #5
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	214e      	movs	r1, #78	; 0x4e
 8003cc0:	4807      	ldr	r0, [pc, #28]	; (8003ce0 <LCD_SetCursor+0x98>)
 8003cc2:	f7ff ff61 	bl	8003b88 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003cc6:	7bbb      	ldrb	r3, [r7, #14]
 8003cc8:	f023 0307 	bic.w	r3, r3, #7
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	214e      	movs	r1, #78	; 0x4e
 8003cd2:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <LCD_SetCursor+0x98>)
 8003cd4:	f7ff ff58 	bl	8003b88 <I2C_SingleRandomWrite>
			(index_lo & ~LCD_E) & ~LCD_RS & ~LCD_RW );
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40005400 	.word	0x40005400

08003ce4 <LCD_WriteData>:
//******************************************************************
void LCD_WriteData ( uint8_t data ) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
	uint8_t data_hi = data & 0xF0;
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	f023 030f 	bic.w	r3, r3, #15
 8003cf4:	73fb      	strb	r3, [r7, #15]
	uint8_t data_lo = (data & 0x0F) << 4;
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	73bb      	strb	r3, [r7, #14]

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8003cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	f043 0304 	orr.w	r3, r3, #4
 8003d0a:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	214e      	movs	r1, #78	; 0x4e
 8003d12:	4824      	ldr	r0, [pc, #144]	; (8003da4 <LCD_WriteData+0xc0>)
 8003d14:	f7ff ff38 	bl	8003b88 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi | LCD_E) | LCD_RS) & ~LCD_RW );
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	f043 0306 	orr.w	r3, r3, #6
 8003d1e:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	214e      	movs	r1, #78	; 0x4e
 8003d2a:	481e      	ldr	r0, [pc, #120]	; (8003da4 <LCD_WriteData+0xc0>)
 8003d2c:	f7ff ff2c 	bl	8003b88 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_hi & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8003d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d34:	f023 0307 	bic.w	r3, r3, #7
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	214e      	movs	r1, #78	; 0x4e
 8003d46:	4817      	ldr	r0, [pc, #92]	; (8003da4 <LCD_WriteData+0xc0>)
 8003d48:	f7ff ff1e 	bl	8003b88 <I2C_SingleRandomWrite>

	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8003d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	f043 0304 	orr.w	r3, r3, #4
 8003d5a:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	214e      	movs	r1, #78	; 0x4e
 8003d62:	4810      	ldr	r0, [pc, #64]	; (8003da4 <LCD_WriteData+0xc0>)
 8003d64:	f7ff ff10 	bl	8003b88 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo | LCD_E)  | LCD_RS) & ~LCD_RW );
 8003d68:	7bbb      	ldrb	r3, [r7, #14]
 8003d6a:	f043 0306 	orr.w	r3, r3, #6
 8003d6e:	b2db      	uxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	214e      	movs	r1, #78	; 0x4e
 8003d7a:	480a      	ldr	r0, [pc, #40]	; (8003da4 <LCD_WriteData+0xc0>)
 8003d7c:	f7ff ff04 	bl	8003b88 <I2C_SingleRandomWrite>
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
			((data_lo & ~LCD_E) | LCD_RS) & ~LCD_RW );
 8003d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d84:	f023 0307 	bic.w	r3, r3, #7
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	b25b      	sxtb	r3, r3
	I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	214e      	movs	r1, #78	; 0x4e
 8003d96:	4803      	ldr	r0, [pc, #12]	; (8003da4 <LCD_WriteData+0xc0>)
 8003d98:	f7ff fef6 	bl	8003b88 <I2C_SingleRandomWrite>
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40005400 	.word	0x40005400

08003da8 <LCD_WriteString>:
//******************************************************************
void LCD_WriteString ( char * str ) {
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < strlen(str); i++) {
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	e009      	b.n	8003dca <LCD_WriteString+0x22>
		LCD_WriteData ( str[i] );
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ff90 	bl	8003ce4 <LCD_WriteData>
	for (i = 0; i < strlen(str); i++) {
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	7bfc      	ldrb	r4, [r7, #15]
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fc f9bd 	bl	800014c <strlen>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d3ee      	bcc.n	8003db6 <LCD_WriteString+0xe>
	}

}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd90      	pop	{r4, r7, pc}
	...

08003de4 <LCD_RunStringDevInfo>:
//******************************************************************
//******************************************************************
void LCD_RunStringDevInfo ( char * str1line,char * str2line, uint32_t delay) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
	char str1Frame[LCD_STR_LEN + 1];
	char str2Frame[LCD_STR_LEN + 1];
	uint8_t i;
	uint8_t cnt;

		tick = GetTickCount();
 8003df0:	f7ff f8ba 	bl	8002f68 <GetTickCount>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4a7f      	ldr	r2, [pc, #508]	; (8003ff4 <LCD_RunStringDevInfo+0x210>)
 8003df8:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <LCD_RunStringDevInfo+0x214>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr1 = '\0';
 8003e06:	4b7d      	ldr	r3, [pc, #500]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
		*runStr2 = '\0';
 8003e0c:	4b7c      	ldr	r3, [pc, #496]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e18:	e01c      	b.n	8003e54 <LCD_RunStringDevInfo+0x70>
			strcat ( runStr1, " " );
 8003e1a:	4878      	ldr	r0, [pc, #480]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003e1c:	f7fc f996 	bl	800014c <strlen>
 8003e20:	4603      	mov	r3, r0
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b75      	ldr	r3, [pc, #468]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003e26:	4413      	add	r3, r2
 8003e28:	4976      	ldr	r1, [pc, #472]	; (8004004 <LCD_RunStringDevInfo+0x220>)
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8003e32:	4873      	ldr	r0, [pc, #460]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003e34:	f7fc f98a 	bl	800014c <strlen>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b70      	ldr	r3, [pc, #448]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	4970      	ldr	r1, [pc, #448]	; (8004004 <LCD_RunStringDevInfo+0x220>)
 8003e42:	461a      	mov	r2, r3
 8003e44:	460b      	mov	r3, r1
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d9de      	bls.n	8003e1a <LCD_RunStringDevInfo+0x36>
		}
		strcat ( runStr1, str1line );
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	4867      	ldr	r0, [pc, #412]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003e60:	f003 faa6 	bl	80073b0 <strcat>
		strcat ( runStr2, str2line );
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4866      	ldr	r0, [pc, #408]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003e68:	f003 faa2 	bl	80073b0 <strcat>

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e72:	e01c      	b.n	8003eae <LCD_RunStringDevInfo+0xca>
			strcat ( runStr1, " " );
 8003e74:	4861      	ldr	r0, [pc, #388]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003e76:	f7fc f969 	bl	800014c <strlen>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b5f      	ldr	r3, [pc, #380]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003e80:	4413      	add	r3, r2
 8003e82:	4960      	ldr	r1, [pc, #384]	; (8004004 <LCD_RunStringDevInfo+0x220>)
 8003e84:	461a      	mov	r2, r3
 8003e86:	460b      	mov	r3, r1
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	8013      	strh	r3, [r2, #0]
			strcat ( runStr2, " " );
 8003e8c:	485c      	ldr	r0, [pc, #368]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003e8e:	f7fc f95d 	bl	800014c <strlen>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	495a      	ldr	r1, [pc, #360]	; (8004004 <LCD_RunStringDevInfo+0x220>)
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8003ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d9de      	bls.n	8003e74 <LCD_RunStringDevInfo+0x90>
		}

		runStr1Len = strlen ( runStr1 );
 8003eb6:	4851      	ldr	r0, [pc, #324]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003eb8:	f7fc f948 	bl	800014c <strlen>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	4b51      	ldr	r3, [pc, #324]	; (8004008 <LCD_RunStringDevInfo+0x224>)
 8003ec2:	701a      	strb	r2, [r3, #0]
		runStr2Len = strlen ( runStr2 );
 8003ec4:	484e      	ldr	r0, [pc, #312]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003ec6:	f7fc f941 	bl	800014c <strlen>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4b4f      	ldr	r3, [pc, #316]	; (800400c <LCD_RunStringDevInfo+0x228>)
 8003ed0:	701a      	strb	r2, [r3, #0]

	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 8003ed2:	e07a      	b.n	8003fca <LCD_RunStringDevInfo+0x1e6>
		if (GetTickCount() - tick > delay) {
 8003ed4:	f7ff f848 	bl	8002f68 <GetTickCount>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <LCD_RunStringDevInfo+0x210>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d271      	bcs.n	8003fca <LCD_RunStringDevInfo+0x1e6>
			tick = GetTickCount();
 8003ee6:	f7ff f83f 	bl	8002f68 <GetTickCount>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4a41      	ldr	r2, [pc, #260]	; (8003ff4 <LCD_RunStringDevInfo+0x210>)
 8003eee:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 8003ef0:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <LCD_RunStringDevInfo+0x214>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <LCD_RunStringDevInfo+0x214>)
 8003efa:	701a      	strb	r2, [r3, #0]

			if (cnt<(runStr1Len-1)) {
 8003efc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003f00:	4b41      	ldr	r3, [pc, #260]	; (8004008 <LCD_RunStringDevInfo+0x224>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	429a      	cmp	r2, r3
 8003f08:	da29      	bge.n	8003f5e <LCD_RunStringDevInfo+0x17a>
			for (i = 0; i < LCD_STR_LEN; i++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f10:	e019      	b.n	8003f46 <LCD_RunStringDevInfo+0x162>
				str1Frame[i] = runStr1[(strFrameIndex + i) % runStr1Len];
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <LCD_RunStringDevInfo+0x214>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4a3a      	ldr	r2, [pc, #232]	; (8004008 <LCD_RunStringDevInfo+0x224>)
 8003f20:	7812      	ldrb	r2, [r2, #0]
 8003f22:	fb93 f1f2 	sdiv	r1, r3, r2
 8003f26:	fb01 f202 	mul.w	r2, r1, r2
 8003f2a:	1a9a      	subs	r2, r3, r2
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f30:	4932      	ldr	r1, [pc, #200]	; (8003ffc <LCD_RunStringDevInfo+0x218>)
 8003f32:	5c8a      	ldrb	r2, [r1, r2]
 8003f34:	3328      	adds	r3, #40	; 0x28
 8003f36:	443b      	add	r3, r7
 8003f38:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++)
 8003f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f40:	3301      	adds	r3, #1
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	d9e1      	bls.n	8003f12 <LCD_RunStringDevInfo+0x12e>

			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку строку
 8003f4e:	2080      	movs	r0, #128	; 0x80
 8003f50:	f7ff fe7a 	bl	8003c48 <LCD_SetCursor>
			LCD_WriteString ( str1Frame );
 8003f54:	f107 031c 	add.w	r3, r7, #28
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff25 	bl	8003da8 <LCD_WriteString>
			}

			if (cnt<(runStr2Len-1)){
 8003f5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <LCD_RunStringDevInfo+0x228>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	da29      	bge.n	8003fc0 <LCD_RunStringDevInfo+0x1dc>
			for (i = 0; i < LCD_STR_LEN; i++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f72:	e019      	b.n	8003fa8 <LCD_RunStringDevInfo+0x1c4>
				str2Frame[i] = runStr2[(strFrameIndex + i) % runStr2Len];
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <LCD_RunStringDevInfo+0x214>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f7e:	4413      	add	r3, r2
 8003f80:	4a22      	ldr	r2, [pc, #136]	; (800400c <LCD_RunStringDevInfo+0x228>)
 8003f82:	7812      	ldrb	r2, [r2, #0]
 8003f84:	fb93 f1f2 	sdiv	r1, r3, r2
 8003f88:	fb01 f202 	mul.w	r2, r1, r2
 8003f8c:	1a9a      	subs	r2, r3, r2
 8003f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f92:	491b      	ldr	r1, [pc, #108]	; (8004000 <LCD_RunStringDevInfo+0x21c>)
 8003f94:	5c8a      	ldrb	r2, [r1, r2]
 8003f96:	3328      	adds	r3, #40	; 0x28
 8003f98:	443b      	add	r3, r7
 8003f9a:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < LCD_STR_LEN; i++)
 8003f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	d9e1      	bls.n	8003f74 <LCD_RunStringDevInfo+0x190>

			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8003fb0:	20c0      	movs	r0, #192	; 0xc0
 8003fb2:	f7ff fe49 	bl	8003c48 <LCD_SetCursor>
			LCD_WriteString ( str2Frame );
 8003fb6:	f107 0310 	add.w	r3, r7, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fef4 	bl	8003da8 <LCD_WriteString>
			}

			cnt++;
 8003fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while(cnt<(runStr1Len-1)||cnt<(runStr2Len-1))
 8003fca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <LCD_RunStringDevInfo+0x224>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	f6ff af7d 	blt.w	8003ed4 <LCD_RunStringDevInfo+0xf0>
 8003fda:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <LCD_RunStringDevInfo+0x228>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	f6ff af75 	blt.w	8003ed4 <LCD_RunStringDevInfo+0xf0>
		}

}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	3728      	adds	r7, #40	; 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000b10 	.word	0x20000b10
 8003ff8:	20000b14 	.word	0x20000b14
 8003ffc:	20000b18 	.word	0x20000b18
 8004000:	20000b90 	.word	0x20000b90
 8004004:	0800867c 	.word	0x0800867c
 8004008:	20000c05 	.word	0x20000c05
 800400c:	20000c06 	.word	0x20000c06

08004010 <LCD_RunStringBARCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера штрих-кодов бегущей строкой в первой строчке LCD
void LCD_RunStringBARCode ( char * str, uint32_t delay, uint8_t start ) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d13f      	bne.n	80040a4 <LCD_RunStringBARCode+0x94>
		tick = GetTickCount();
 8004024:	f7fe ffa0 	bl	8002f68 <GetTickCount>
 8004028:	4603      	mov	r3, r0
 800402a:	4a3e      	ldr	r2, [pc, #248]	; (8004124 <LCD_RunStringBARCode+0x114>)
 800402c:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 800402e:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <LCD_RunStringBARCode+0x118>)
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 8004034:	4b3d      	ldr	r3, [pc, #244]	; (800412c <LCD_RunStringBARCode+0x11c>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800403a:	2300      	movs	r3, #0
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e00e      	b.n	800405e <LCD_RunStringBARCode+0x4e>
			strcat ( runStr, " " );
 8004040:	483a      	ldr	r0, [pc, #232]	; (800412c <LCD_RunStringBARCode+0x11c>)
 8004042:	f7fc f883 	bl	800014c <strlen>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	4b38      	ldr	r3, [pc, #224]	; (800412c <LCD_RunStringBARCode+0x11c>)
 800404c:	4413      	add	r3, r2
 800404e:	4938      	ldr	r1, [pc, #224]	; (8004130 <LCD_RunStringBARCode+0x120>)
 8004050:	461a      	mov	r2, r3
 8004052:	460b      	mov	r3, r1
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004058:	7ffb      	ldrb	r3, [r7, #31]
 800405a:	3301      	adds	r3, #1
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b06      	cmp	r3, #6
 8004062:	d9ed      	bls.n	8004040 <LCD_RunStringBARCode+0x30>
		}
		strcat ( runStr, str );
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	4831      	ldr	r0, [pc, #196]	; (800412c <LCD_RunStringBARCode+0x11c>)
 8004068:	f003 f9a2 	bl	80073b0 <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800406c:	2300      	movs	r3, #0
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e00e      	b.n	8004090 <LCD_RunStringBARCode+0x80>
			strcat ( runStr, " " );
 8004072:	482e      	ldr	r0, [pc, #184]	; (800412c <LCD_RunStringBARCode+0x11c>)
 8004074:	f7fc f86a 	bl	800014c <strlen>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <LCD_RunStringBARCode+0x11c>)
 800407e:	4413      	add	r3, r2
 8004080:	492b      	ldr	r1, [pc, #172]	; (8004130 <LCD_RunStringBARCode+0x120>)
 8004082:	461a      	mov	r2, r3
 8004084:	460b      	mov	r3, r1
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 800408a:	7ffb      	ldrb	r3, [r7, #31]
 800408c:	3301      	adds	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	7ffb      	ldrb	r3, [r7, #31]
 8004092:	2b06      	cmp	r3, #6
 8004094:	d9ed      	bls.n	8004072 <LCD_RunStringBARCode+0x62>
		}
		runStrLen = strlen ( runStr );
 8004096:	4825      	ldr	r0, [pc, #148]	; (800412c <LCD_RunStringBARCode+0x11c>)
 8004098:	f7fc f858 	bl	800014c <strlen>
 800409c:	4603      	mov	r3, r0
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	4b24      	ldr	r3, [pc, #144]	; (8004134 <LCD_RunStringBARCode+0x124>)
 80040a2:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d037      	beq.n	800411c <LCD_RunStringBARCode+0x10c>
		if (GetTickCount() - tick > delay) {
 80040ac:	f7fe ff5c 	bl	8002f68 <GetTickCount>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <LCD_RunStringBARCode+0x114>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d22e      	bcs.n	800411c <LCD_RunStringBARCode+0x10c>
			tick = GetTickCount();
 80040be:	f7fe ff53 	bl	8002f68 <GetTickCount>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4a17      	ldr	r2, [pc, #92]	; (8004124 <LCD_RunStringBARCode+0x114>)
 80040c6:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 80040c8:	4b17      	ldr	r3, [pc, #92]	; (8004128 <LCD_RunStringBARCode+0x118>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <LCD_RunStringBARCode+0x118>)
 80040d2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e015      	b.n	8004106 <LCD_RunStringBARCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <LCD_RunStringBARCode+0x118>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	7ffb      	ldrb	r3, [r7, #31]
 80040e2:	4413      	add	r3, r2
 80040e4:	4a13      	ldr	r2, [pc, #76]	; (8004134 <LCD_RunStringBARCode+0x124>)
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80040ec:	fb01 f202 	mul.w	r2, r1, r2
 80040f0:	1a9a      	subs	r2, r3, r2
 80040f2:	7ffb      	ldrb	r3, [r7, #31]
 80040f4:	490d      	ldr	r1, [pc, #52]	; (800412c <LCD_RunStringBARCode+0x11c>)
 80040f6:	5c8a      	ldrb	r2, [r1, r2]
 80040f8:	3320      	adds	r3, #32
 80040fa:	443b      	add	r3, r7
 80040fc:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8004100:	7ffb      	ldrb	r3, [r7, #31]
 8004102:	3301      	adds	r3, #1
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	7ffb      	ldrb	r3, [r7, #31]
 8004108:	2b07      	cmp	r3, #7
 800410a:	d9e6      	bls.n	80040da <LCD_RunStringBARCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_1STR );//вывод в первую строку
 800410c:	2080      	movs	r0, #128	; 0x80
 800410e:	f7ff fd9b 	bl	8003c48 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fe46 	bl	8003da8 <LCD_WriteString>
		}
	}
}
 800411c:	bf00      	nop
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000c08 	.word	0x20000c08
 8004128:	20000c0c 	.word	0x20000c0c
 800412c:	20000c10 	.word	0x20000c10
 8004130:	0800867c 	.word	0x0800867c
 8004134:	20000c3b 	.word	0x20000c3b

08004138 <LCD_RunStringNFCCode>:
//******************************************************************
//******************************************************************
//Отображение кода сканера NFC бегущей строкой во второй строчке LCD
void LCD_RunStringNFCCode ( char * str, uint32_t delay, uint8_t start ) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	71fb      	strb	r3, [r7, #7]
	static char runStr[USB_STATE_LEN + 2 * LCD_STR_LEN + 1];
	static uint8_t runStrLen;
	char strFrame[LCD_STR_LEN + 1];
	uint8_t i;

	if (start == 0) {
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d13f      	bne.n	80041cc <LCD_RunStringNFCCode+0x94>
		tick = GetTickCount();
 800414c:	f7fe ff0c 	bl	8002f68 <GetTickCount>
 8004150:	4603      	mov	r3, r0
 8004152:	4a3e      	ldr	r2, [pc, #248]	; (800424c <LCD_RunStringNFCCode+0x114>)
 8004154:	6013      	str	r3, [r2, #0]
		strFrameIndex = 0;
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <LCD_RunStringNFCCode+0x118>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]

		/*
		 * Копирование исходной строки в буфер
		 *  с учётом добавления с двух сторон пробелов
		 */
		*runStr = '\0';
 800415c:	4b3d      	ldr	r3, [pc, #244]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004162:	2300      	movs	r3, #0
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e00e      	b.n	8004186 <LCD_RunStringNFCCode+0x4e>
			strcat ( runStr, " " );
 8004168:	483a      	ldr	r0, [pc, #232]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 800416a:	f7fb ffef 	bl	800014c <strlen>
 800416e:	4603      	mov	r3, r0
 8004170:	461a      	mov	r2, r3
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 8004174:	4413      	add	r3, r2
 8004176:	4938      	ldr	r1, [pc, #224]	; (8004258 <LCD_RunStringNFCCode+0x120>)
 8004178:	461a      	mov	r2, r3
 800417a:	460b      	mov	r3, r1
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004180:	7ffb      	ldrb	r3, [r7, #31]
 8004182:	3301      	adds	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	7ffb      	ldrb	r3, [r7, #31]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d9ed      	bls.n	8004168 <LCD_RunStringNFCCode+0x30>
		}
		strcat ( runStr, str );
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	4831      	ldr	r0, [pc, #196]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 8004190:	f003 f90e 	bl	80073b0 <strcat>
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e00e      	b.n	80041b8 <LCD_RunStringNFCCode+0x80>
			strcat ( runStr, " " );
 800419a:	482e      	ldr	r0, [pc, #184]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 800419c:	f7fb ffd6 	bl	800014c <strlen>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 80041a6:	4413      	add	r3, r2
 80041a8:	492b      	ldr	r1, [pc, #172]	; (8004258 <LCD_RunStringNFCCode+0x120>)
 80041aa:	461a      	mov	r2, r3
 80041ac:	460b      	mov	r3, r1
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < (LCD_STR_LEN - 1); i++) {
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	3301      	adds	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	d9ed      	bls.n	800419a <LCD_RunStringNFCCode+0x62>
		}
		runStrLen = strlen ( runStr );
 80041be:	4825      	ldr	r0, [pc, #148]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 80041c0:	f7fb ffc4 	bl	800014c <strlen>
 80041c4:	4603      	mov	r3, r0
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	4b24      	ldr	r3, [pc, #144]	; (800425c <LCD_RunStringNFCCode+0x124>)
 80041ca:	701a      	strb	r2, [r3, #0]
	}

	if (strlen(str)) {
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d037      	beq.n	8004244 <LCD_RunStringNFCCode+0x10c>
		if (GetTickCount() - tick > delay) {
 80041d4:	f7fe fec8 	bl	8002f68 <GetTickCount>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b1c      	ldr	r3, [pc, #112]	; (800424c <LCD_RunStringNFCCode+0x114>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d22e      	bcs.n	8004244 <LCD_RunStringNFCCode+0x10c>
			tick = GetTickCount();
 80041e6:	f7fe febf 	bl	8002f68 <GetTickCount>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <LCD_RunStringNFCCode+0x114>)
 80041ee:	6013      	str	r3, [r2, #0]
			strFrameIndex++;
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <LCD_RunStringNFCCode+0x118>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <LCD_RunStringNFCCode+0x118>)
 80041fa:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < LCD_STR_LEN; i++) {
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e015      	b.n	800422e <LCD_RunStringNFCCode+0xf6>
				strFrame[i] = runStr[(strFrameIndex + i) % runStrLen];
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <LCD_RunStringNFCCode+0x118>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	7ffb      	ldrb	r3, [r7, #31]
 800420a:	4413      	add	r3, r2
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <LCD_RunStringNFCCode+0x124>)
 800420e:	7812      	ldrb	r2, [r2, #0]
 8004210:	fb93 f1f2 	sdiv	r1, r3, r2
 8004214:	fb01 f202 	mul.w	r2, r1, r2
 8004218:	1a9a      	subs	r2, r3, r2
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	490d      	ldr	r1, [pc, #52]	; (8004254 <LCD_RunStringNFCCode+0x11c>)
 800421e:	5c8a      	ldrb	r2, [r1, r2]
 8004220:	3320      	adds	r3, #32
 8004222:	443b      	add	r3, r7
 8004224:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < LCD_STR_LEN; i++) {
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	3301      	adds	r3, #1
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	7ffb      	ldrb	r3, [r7, #31]
 8004230:	2b07      	cmp	r3, #7
 8004232:	d9e6      	bls.n	8004202 <LCD_RunStringNFCCode+0xca>
			}
			LCD_SetCursor ( LCD_CURSOR_2STR );//вывод во вторую строку
 8004234:	20c0      	movs	r0, #192	; 0xc0
 8004236:	f7ff fd07 	bl	8003c48 <LCD_SetCursor>
			LCD_WriteString ( strFrame );
 800423a:	f107 0314 	add.w	r3, r7, #20
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fdb2 	bl	8003da8 <LCD_WriteString>
		}
	}
}
 8004244:	bf00      	nop
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000c3c 	.word	0x20000c3c
 8004250:	20000c40 	.word	0x20000c40
 8004254:	20000c44 	.word	0x20000c44
 8004258:	0800867c 	.word	0x0800867c
 800425c:	20000c6f 	.word	0x20000c6f

08004260 <LCD_Init>:
//******************************************************************

void LCD_Init(void) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
	uint8_t i;

	LCD_CtrlLinesConfig();
 8004266:	f7ff fc45 	bl	8003af4 <LCD_CtrlLinesConfig>

	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 800426a:	2300      	movs	r3, #0
 800426c:	71fb      	strb	r3, [r7, #7]
 800426e:	e02d      	b.n	80042cc <LCD_Init+0x6c>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <LCD_Init+0x94>)
 8004274:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	214e      	movs	r1, #78	; 0x4e
 800427e:	481e      	ldr	r0, [pc, #120]	; (80042f8 <LCD_Init+0x98>)
 8004280:	f7ff fc82 	bl	8003b88 <I2C_SingleRandomWrite>
		Delay(10);
 8004284:	200a      	movs	r0, #10
 8004286:	f7ff fc21 	bl	8003acc <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) | LCD_E) & ~LCD_RS & ~LCD_RW );
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <LCD_Init+0x94>)
 800428e:	5cd3      	ldrb	r3, [r2, r3]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	b25b      	sxtb	r3, r3
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	b25b      	sxtb	r3, r3
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	214e      	movs	r1, #78	; 0x4e
 80042a0:	4815      	ldr	r0, [pc, #84]	; (80042f8 <LCD_Init+0x98>)
 80042a2:	f7ff fc71 	bl	8003b88 <I2C_SingleRandomWrite>
		Delay(10);
 80042a6:	200a      	movs	r0, #10
 80042a8:	f7ff fc10 	bl	8003acc <Delay>
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
				((g_arInitDisplayCommands[i] << 4) & ~LCD_E) & ~LCD_RS & ~LCD_RW );
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <LCD_Init+0x94>)
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
		I2C_SingleRandomWrite ( LCD_I2C_NUM, LCD_I2C_ADDRESS,
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	214e      	movs	r1, #78	; 0x4e
 80042ba:	480f      	ldr	r0, [pc, #60]	; (80042f8 <LCD_Init+0x98>)
 80042bc:	f7ff fc64 	bl	8003b88 <I2C_SingleRandomWrite>
		Delay(10);
 80042c0:	200a      	movs	r0, #10
 80042c2:	f7ff fc03 	bl	8003acc <Delay>
	for (i = 0; i < sizeof(g_arInitDisplayCommands) / sizeof(uint8_t); i++) {
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	3301      	adds	r3, #1
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	2b0b      	cmp	r3, #11
 80042d0:	d9ce      	bls.n	8004270 <LCD_Init+0x10>
	}
	/*
	 * Очистка дисплея
	 */
	LCD_SetCursor ( LCD_CURSOR_1STR );
 80042d2:	2080      	movs	r0, #128	; 0x80
 80042d4:	f7ff fcb8 	bl	8003c48 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <LCD_Init+0x9c>)
 80042da:	f7ff fd65 	bl	8003da8 <LCD_WriteString>
	LCD_SetCursor ( LCD_CURSOR_2STR );
 80042de:	20c0      	movs	r0, #192	; 0xc0
 80042e0:	f7ff fcb2 	bl	8003c48 <LCD_SetCursor>
	LCD_WriteString ( "                   " );
 80042e4:	4805      	ldr	r0, [pc, #20]	; (80042fc <LCD_Init+0x9c>)
 80042e6:	f7ff fd5f 	bl	8003da8 <LCD_WriteString>
	//LCD_WriteString ( "SUM:               " );
	/*
	 * Отображение на дисплее текущей суммы
	 */
	//LCD_DisplaySum();
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000440 	.word	0x20000440
 80042f8:	40005400 	.word	0x40005400
 80042fc:	08008680 	.word	0x08008680

08004300 <PN532_Delay>:
int8_t _uid[7];      // ISO14443A uid
int8_t _uidLen;      // uid len
int8_t _key[6];      // Mifare Classic key
int8_t _inListedTag; // Tg number of inlisted tag.

void PN532_Delay(uint32_t cntdelay){
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	while(cntdelay--){};
 8004308:	bf00      	nop
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	1e5a      	subs	r2, r3, #1
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1fa      	bne.n	800430a <PN532_Delay+0xa>
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <PN532_WakeUp>:
//******************************************************************************
bool PN532_WakeUp(void){
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0

/*
    uint8_t packet[21];
    uint8_t *p = packet;
*/
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800432a:	4807      	ldr	r0, [pc, #28]	; (8004348 <PN532_WakeUp+0x28>)
 800432c:	f001 fe8d 	bl	800604a <GPIO_WriteBit>
	 Delay(10);
 8004330:	200a      	movs	r0, #10
 8004332:	f7ff fbcb 	bl	8003acc <Delay>
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004336:	2201      	movs	r2, #1
 8004338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800433c:	4802      	ldr	r0, [pc, #8]	; (8004348 <PN532_WakeUp+0x28>)
 800433e:	f001 fe84 	bl	800604a <GPIO_WriteBit>
    ///-----------------------------------------------------------------------------


	 PN532_write( packet,21);
*/
	  return TRUE;
 8004342:	2301      	movs	r3, #1

}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40010c00 	.word	0x40010c00

0800434c <PN532_setPassiveActivationRetries>:
                          after mxRetries

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_setPassiveActivationRetries(uint8_t maxRetries) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  pn532_packetbuffer[0] = PN532_COMMAND_RFCONFIGURATION;
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <PN532_setPassiveActivationRetries+0x48>)
 8004358:	2232      	movs	r2, #50	; 0x32
 800435a:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 5;    // Config item 5 (MaxRetries)
 800435c:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <PN532_setPassiveActivationRetries+0x48>)
 800435e:	2205      	movs	r2, #5
 8004360:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = 0xFF; // MxRtyATR (default = 0xFF)
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <PN532_setPassiveActivationRetries+0x48>)
 8004364:	22ff      	movs	r2, #255	; 0xff
 8004366:	709a      	strb	r2, [r3, #2]
  pn532_packetbuffer[3] = 0x01; // MxRtyPSL (default = 0x01)
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <PN532_setPassiveActivationRetries+0x48>)
 800436a:	2201      	movs	r2, #1
 800436c:	70da      	strb	r2, [r3, #3]
  pn532_packetbuffer[4] = maxRetries;
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <PN532_setPassiveActivationRetries+0x48>)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	7113      	strb	r3, [r2, #4]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 5,1000))
 8004374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004378:	2105      	movs	r1, #5
 800437a:	4806      	ldr	r0, [pc, #24]	; (8004394 <PN532_setPassiveActivationRetries+0x48>)
 800437c:	f000 f900 	bl	8004580 <PN532_sendCommandCheckAck>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <PN532_setPassiveActivationRetries+0x3e>
  { return 0x0;} // no ACK
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <PN532_setPassiveActivationRetries+0x40>

  return 1;
 800438a:	2301      	movs	r3, #1
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000c88 	.word	0x20000c88

08004398 <PN532_readPassiveTargetID>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readPassiveTargetID(uint8_t cardbaudrate, uint8_t *uid,
                                         uint8_t *uidLength, uint16_t timeout) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	4613      	mov	r3, r2
 80043aa:	81bb      	strh	r3, [r7, #12]
  pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <PN532_readPassiveTargetID+0x54>)
 80043ae:	224a      	movs	r2, #74	; 0x4a
 80043b0:	701a      	strb	r2, [r3, #0]
  pn532_packetbuffer[1] = 1; // max 1 cards at once (we can set this to 2 later)
 80043b2:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <PN532_readPassiveTargetID+0x54>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	705a      	strb	r2, [r3, #1]
  pn532_packetbuffer[2] = cardbaudrate;
 80043b8:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <PN532_readPassiveTargetID+0x54>)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	7093      	strb	r3, [r2, #2]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)) {
 80043be:	89bb      	ldrh	r3, [r7, #12]
 80043c0:	461a      	mov	r2, r3
 80043c2:	2103      	movs	r1, #3
 80043c4:	4809      	ldr	r0, [pc, #36]	; (80043ec <PN532_readPassiveTargetID+0x54>)
 80043c6:	f000 f8db 	bl	8004580 <PN532_sendCommandCheckAck>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <PN532_readPassiveTargetID+0x3c>
    return 0x0; // no cards read
 80043d0:	2300      	movs	r3, #0
 80043d2:	e007      	b.n	80043e4 <PN532_readPassiveTargetID+0x4c>
  }
  //Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
 //Задержка внутри PN532_sendCommandCheckAck(pn532_packetbuffer, 3, timeout)
 //Для чтения ID карты задежка не менее 10 мс обязательна!
     Delay(20);
 80043d4:	2014      	movs	r0, #20
 80043d6:	f7ff fb79 	bl	8003acc <Delay>
/*
  // wait for a card to enter the field (only possible with I2C)
  if (!waitready(timeout)) {
    return 0x0;   }
*/
  return PN532_readDetectedPassiveTargetID(uid, uidLength);
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	68b8      	ldr	r0, [r7, #8]
 80043de:	f000 f807 	bl	80043f0 <PN532_readDetectedPassiveTargetID>
 80043e2:	4603      	mov	r3, r0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000c88 	.word	0x20000c88

080043f0 <PN532_readDetectedPassiveTargetID>:
                          length of the card's UID.

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readDetectedPassiveTargetID(uint8_t *uid, uint8_t *uidLength) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  // read data packet
  PN532_readdata(pn532_readbuffer, 19, 0x00);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2113      	movs	r1, #19
 80043fe:	4819      	ldr	r0, [pc, #100]	; (8004464 <PN532_readDetectedPassiveTargetID+0x74>)
 8004400:	f000 f9c6 	bl	8004790 <PN532_readdata>
  PN532DEBUGPRINT.print(F("Found "));
  PN532DEBUGPRINT.print(pn532_packetbuffer[7], DEC);
  PN532DEBUGPRINT.println(F(" tags"));
#endif
*/
  if (pn532_readbuffer[7] != 1)
 8004404:	4b17      	ldr	r3, [pc, #92]	; (8004464 <PN532_readDetectedPassiveTargetID+0x74>)
 8004406:	79db      	ldrb	r3, [r3, #7]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d001      	beq.n	8004410 <PN532_readDetectedPassiveTargetID+0x20>
    return FALSE;
 800440c:	2300      	movs	r3, #0
 800440e:	e024      	b.n	800445a <PN532_readDetectedPassiveTargetID+0x6a>

  uint16_t sens_res = pn532_readbuffer[9];
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <PN532_readDetectedPassiveTargetID+0x74>)
 8004412:	7a5b      	ldrb	r3, [r3, #9]
 8004414:	81bb      	strh	r3, [r7, #12]
  sens_res <<= 8;
 8004416:	89bb      	ldrh	r3, [r7, #12]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	81bb      	strh	r3, [r7, #12]
  sens_res |= pn532_readbuffer[10];
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <PN532_readDetectedPassiveTargetID+0x74>)
 800441e:	7a9b      	ldrb	r3, [r3, #10]
 8004420:	b29a      	uxth	r2, r3
 8004422:	89bb      	ldrh	r3, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	81bb      	strh	r3, [r7, #12]
  PN532DEBUGPRINT.print(F("SAK: 0x"));
  PN532DEBUGPRINT.println(pn532_packetbuffer[11], HEX);
#endif
*/
  /* Card appears to be Mifare Classic */
  *uidLength = pn532_readbuffer[12];
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <PN532_readDetectedPassiveTargetID+0x74>)
 800442a:	7b1a      	ldrb	r2, [r3, #12]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	701a      	strb	r2, [r3, #0]
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.print(F("UID:"));
#endif
*/
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e00b      	b.n	800444e <PN532_readDetectedPassiveTargetID+0x5e>
    uid[i] = pn532_readbuffer[13 + i];
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	f103 020d 	add.w	r2, r3, #13
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	440b      	add	r3, r1
 8004442:	4908      	ldr	r1, [pc, #32]	; (8004464 <PN532_readDetectedPassiveTargetID+0x74>)
 8004444:	5c8a      	ldrb	r2, [r1, r2]
 8004446:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < pn532_readbuffer[12]; i++) {
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	3301      	adds	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <PN532_readDetectedPassiveTargetID+0x74>)
 8004450:	7b1b      	ldrb	r3, [r3, #12]
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	429a      	cmp	r2, r3
 8004456:	d3ee      	bcc.n	8004436 <PN532_readDetectedPassiveTargetID+0x46>
/*
#ifdef MIFAREDEBUG
  PN532DEBUGPRINT.println();
#endif
*/
  return TRUE;
 8004458:	2301      	movs	r3, #1
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000cc8 	.word	0x20000cc8

08004468 <PN532_SAMConfig>:

//******************************************************************************
bool PN532_SAMConfig(void){
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0

            return this.ExecuteCmd(cmd);
        }
 *
 */
	 pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <PN532_SAMConfig+0x50>)
 800446e:	2214      	movs	r2, #20
 8004470:	701a      	strb	r2, [r3, #0]
	 pn532_packetbuffer[1] = 0x01;//0x01;
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <PN532_SAMConfig+0x50>)
 8004474:	2201      	movs	r2, #1
 8004476:	705a      	strb	r2, [r3, #1]
	 pn532_packetbuffer[2] = 0x14;
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <PN532_SAMConfig+0x50>)
 800447a:	2214      	movs	r2, #20
 800447c:	709a      	strb	r2, [r3, #2]
	 pn532_packetbuffer[3] = 0x00;//не использоать прерывания
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <PN532_SAMConfig+0x50>)
 8004480:	2200      	movs	r2, #0
 8004482:	70da      	strb	r2, [r3, #3]

	  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,500)) {
 8004484:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004488:	2104      	movs	r1, #4
 800448a:	480b      	ldr	r0, [pc, #44]	; (80044b8 <PN532_SAMConfig+0x50>)
 800448c:	f000 f878 	bl	8004580 <PN532_sendCommandCheckAck>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <PN532_SAMConfig+0x32>
	    return 0;
 8004496:	2300      	movs	r3, #0
 8004498:	e00b      	b.n	80044b2 <PN532_SAMConfig+0x4a>

//Нужна задержка после выполнения подтверждения пакета перед чтением данных!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);
// read data packet
	  PN532_readdata(pn532_readbuffer, 9, 0xFF);
 800449a:	22ff      	movs	r2, #255	; 0xff
 800449c:	2109      	movs	r1, #9
 800449e:	4807      	ldr	r0, [pc, #28]	; (80044bc <PN532_SAMConfig+0x54>)
 80044a0:	f000 f976 	bl	8004790 <PN532_readdata>
	  	    }
*/
	    //int offset = 6;
	    //pn532_packetbuffer[offset] == 0x15

return (pn532_readbuffer[6] == 0x15);
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <PN532_SAMConfig+0x54>)
 80044a6:	799b      	ldrb	r3, [r3, #6]
 80044a8:	2b15      	cmp	r3, #21
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000c88 	.word	0x20000c88
 80044bc:	20000cc8 	.word	0x20000cc8

080044c0 <PN532_getFirmwareVersion>:
    Checks the firmware version of the PN5xx chip

    @returns  The chip's firmware version and ID
*/
/******************************************************************************/
 uint32_t PN532_getFirmwareVersion(void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 uint32_t response;
 const uint8_t pn532response_firmwarevers[] = {0x00, 0x00, 0xFF, 0x06, 0xFA, 0xD5};
 80044c6:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <PN532_getFirmwareVersion+0xb4>)
 80044c8:	463b      	mov	r3, r7
 80044ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ce:	6018      	str	r0, [r3, #0]
 80044d0:	3304      	adds	r3, #4
 80044d2:	8019      	strh	r1, [r3, #0]

  pn532_packetbuffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
 80044d4:	4b28      	ldr	r3, [pc, #160]	; (8004578 <PN532_getFirmwareVersion+0xb8>)
 80044d6:	2202      	movs	r2, #2
 80044d8:	701a      	strb	r2, [r3, #0]

  if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 1,500)) {
 80044da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044de:	2101      	movs	r1, #1
 80044e0:	4825      	ldr	r0, [pc, #148]	; (8004578 <PN532_getFirmwareVersion+0xb8>)
 80044e2:	f000 f84d 	bl	8004580 <PN532_sendCommandCheckAck>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <PN532_getFirmwareVersion+0x30>
    return 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e03c      	b.n	800456a <PN532_getFirmwareVersion+0xaa>

//Нужна задержка после выполнения подтверждения готовности!!!!!
//Задержка внутри 	PN532_sendCommandCheckAck
//     PN532_Delay(100);

   PN532_readdata(pn532_readbuffer, 13, 0xFF);
 80044f0:	22ff      	movs	r2, #255	; 0xff
 80044f2:	210d      	movs	r1, #13
 80044f4:	4821      	ldr	r0, [pc, #132]	; (800457c <PN532_getFirmwareVersion+0xbc>)
 80044f6:	f000 f94b 	bl	8004790 <PN532_readdata>
	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	    }
*/
   //сравнение полученных первых шести байт с массивом правильных данных
   //если сдержимое не одинаковое, от выход с ошибкой;
	if (0 != memcmp((char *)pn532_readbuffer, (char *)pn532response_firmwarevers, 6))
 80044fa:	463b      	mov	r3, r7
 80044fc:	2206      	movs	r2, #6
 80044fe:	4619      	mov	r1, r3
 8004500:	481e      	ldr	r0, [pc, #120]	; (800457c <PN532_getFirmwareVersion+0xbc>)
 8004502:	f002 ff15 	bl	8007330 <memcmp>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <PN532_getFirmwareVersion+0x50>
	   { return 0; }
 800450c:	2300      	movs	r3, #0
 800450e:	e02c      	b.n	800456a <PN532_getFirmwareVersion+0xaa>

  int offset = 7;
 8004510:	2307      	movs	r3, #7
 8004512:	60fb      	str	r3, [r7, #12]

  response = pn532_readbuffer[offset++];
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	60fa      	str	r2, [r7, #12]
 800451a:	4a18      	ldr	r2, [pc, #96]	; (800457c <PN532_getFirmwareVersion+0xbc>)
 800451c:	5cd3      	ldrb	r3, [r2, r3]
 800451e:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <PN532_getFirmwareVersion+0xbc>)
 800452e:	5cd3      	ldrb	r3, [r2, r3]
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	4a0d      	ldr	r2, [pc, #52]	; (800457c <PN532_getFirmwareVersion+0xbc>)
 8004546:	5cd3      	ldrb	r3, [r2, r3]
 8004548:	461a      	mov	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
  response <<= 8;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	60bb      	str	r3, [r7, #8]
  response |= pn532_readbuffer[offset++];
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	60fa      	str	r2, [r7, #12]
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <PN532_getFirmwareVersion+0xbc>)
 800455e:	5cd3      	ldrb	r3, [r2, r3]
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]

  return response;
 8004568:	68bb      	ldr	r3, [r7, #8]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	08008694 	.word	0x08008694
 8004578:	20000c88 	.word	0x20000c88
 800457c:	20000cc8 	.word	0x20000cc8

08004580 <PN532_sendCommandCheckAck>:
     @returns  1 if everything is OK, 0 if timeout occured before an
               ACK was recieved
 */
 /**************************************************************************/

 bool PN532_sendCommandCheckAck(uint8_t *cmd, uint8_t cmdlen, uint16_t timeout) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
 800458c:	4613      	mov	r3, r2
 800458e:	803b      	strh	r3, [r7, #0]

	 PN532_writecommand(cmd, cmdlen);
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f81b 	bl	80045d0 <PN532_writecommand>

#endif
//------------------------------------------------------------------------------
*/
//Ожидание и чтение байта готовности (0x01)
   if (!PN532_waitready(timeout)) {
 800459a:	883b      	ldrh	r3, [r7, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fa91 	bl	8004ac4 <PN532_waitready>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <PN532_sendCommandCheckAck+0x2c>
	  return FALSE; }
 80045a8:	2300      	movs	r3, #0
 80045aa:	e00d      	b.n	80045c8 <PN532_sendCommandCheckAck+0x48>

//Нужна задержка после выполнения подтверждения готовности!!!!!
   PN532_Delay(100);
 80045ac:	2064      	movs	r0, #100	; 0x64
 80045ae:	f7ff fea7 	bl	8004300 <PN532_Delay>
  	}
  #endif
//------------------------------------------------------------------------------
*/
// чтение подтверждения
  if (!PN532_readack()) {  return FALSE;  }
 80045b2:	f000 f95f 	bl	8004874 <PN532_readack>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <PN532_sendCommandCheckAck+0x40>
 80045bc:	2300      	movs	r3, #0
 80045be:	e003      	b.n	80045c8 <PN532_sendCommandCheckAck+0x48>

   // For SPI only wait for the chip to be ready again.
   // This is unnecessary with I2C.
  PN532_Delay(100);
 80045c0:	2064      	movs	r0, #100	; 0x64
 80045c2:	f7ff fe9d 	bl	8004300 <PN532_Delay>

//Delay(2);
 //  if (!PN532_waitready(timeout)) {  return FALSE;}
//Delay(1);

   return TRUE; // ack'd command
 80045c6:	2301      	movs	r3, #1

 }
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <PN532_writecommand>:

     @param  cmd       Pointer to the command buffer
     @param  cmdlen    Command length in bytes
 */
 /**************************************************************************/
 void PN532_writecommand(uint8_t *cmd, uint8_t cmdlen) {
 80045d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045d4:	b089      	sub	sp, #36	; 0x24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	70fb      	strb	r3, [r7, #3]
 80045de:	466b      	mov	r3, sp
 80045e0:	461e      	mov	r6, r3

     uint8_t checksum;
     uint8_t packet[8 + cmdlen];
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	f103 0108 	add.w	r1, r3, #8
 80045e8:	1e4b      	subs	r3, r1, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	460a      	mov	r2, r1
 80045ee:	2300      	movs	r3, #0
 80045f0:	4690      	mov	r8, r2
 80045f2:	4699      	mov	r9, r3
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004600:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004604:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004608:	460a      	mov	r2, r1
 800460a:	2300      	movs	r3, #0
 800460c:	4614      	mov	r4, r2
 800460e:	461d      	mov	r5, r3
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	00eb      	lsls	r3, r5, #3
 800461a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800461e:	00e2      	lsls	r2, r4, #3
 8004620:	460b      	mov	r3, r1
 8004622:	3307      	adds	r3, #7
 8004624:	08db      	lsrs	r3, r3, #3
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	ebad 0d03 	sub.w	sp, sp, r3
 800462c:	466b      	mov	r3, sp
 800462e:	3300      	adds	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
     uint8_t *p = packet;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	61bb      	str	r3, [r7, #24]
     cmdlen++;
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	3301      	adds	r3, #1
 800463a:	70fb      	strb	r3, [r7, #3]

     p[0] = PN532_SPI_DATAWRITE;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
     p++;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	3301      	adds	r3, #1
 8004646:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_PREAMBLE;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
     p++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3301      	adds	r3, #1
 8004652:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE1;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
     p++;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3301      	adds	r3, #1
 800465e:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_STARTCODE2;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	701a      	strb	r2, [r3, #0]
     p++;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3301      	adds	r3, #1
 800466a:	61bb      	str	r3, [r7, #24]
     checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
 800466c:	23ff      	movs	r3, #255	; 0xff
 800466e:	75fb      	strb	r3, [r7, #23]

     p[0] = cmdlen;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	701a      	strb	r2, [r3, #0]
     p++;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	3301      	adds	r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
     p[0] = ~cmdlen + 1;
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	425b      	negs	r3, r3
 8004680:	b2da      	uxtb	r2, r3
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	701a      	strb	r2, [r3, #0]
     p++;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3301      	adds	r3, #1
 800468a:	61bb      	str	r3, [r7, #24]

     p[0] = PN532_HOSTTOPN532;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	22d4      	movs	r2, #212	; 0xd4
 8004690:	701a      	strb	r2, [r3, #0]
     p++;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	3301      	adds	r3, #1
 8004696:	61bb      	str	r3, [r7, #24]
     checksum += PN532_HOSTTOPN532;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	3b2c      	subs	r3, #44	; 0x2c
 800469c:	75fb      	strb	r3, [r7, #23]

     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 800469e:	2300      	movs	r3, #0
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e012      	b.n	80046ca <PN532_writecommand+0xfa>
       p[0] = cmd[i];
 80046a4:	7ffb      	ldrb	r3, [r7, #31]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	701a      	strb	r2, [r3, #0]
       p++;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3301      	adds	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
       checksum += cmd[i];
 80046b6:	7ffb      	ldrb	r3, [r7, #31]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4413      	add	r3, r2
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	4413      	add	r3, r2
 80046c2:	75fb      	strb	r3, [r7, #23]
     for (uint8_t i = 0; i < cmdlen - 1; i++) {
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
 80046c6:	3301      	adds	r3, #1
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	7ffa      	ldrb	r2, [r7, #31]
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	429a      	cmp	r2, r3
 80046d2:	dbe7      	blt.n	80046a4 <PN532_writecommand+0xd4>
     }

     p[0] = ~checksum;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	701a      	strb	r2, [r3, #0]
     p++;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61bb      	str	r3, [r7, #24]
     p[0] = PN532_POSTAMBLE;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
     p++;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61bb      	str	r3, [r7, #24]
//		USART_SendData(USART2_NUM,0x0D);
//		while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
#endif
//-----------------------------------------------------------------------------

     PN532_write( packet, 8 + cmdlen);
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	3308      	adds	r3, #8
 80046f4:	4619      	mov	r1, r3
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f806 	bl	8004708 <PN532_write>
 80046fc:	46b5      	mov	sp, r6

 }
 80046fe:	bf00      	nop
 8004700:	3724      	adds	r7, #36	; 0x24
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004708 <PN532_write>:
/******************************************************************************/
 void PN532_write( uint8_t *buffer, size_t len) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу
    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8004712:	bf00      	nop
 8004714:	2102      	movs	r1, #2
 8004716:	481c      	ldr	r0, [pc, #112]	; (8004788 <PN532_write+0x80>)
 8004718:	f002 f88c 	bl	8006834 <SPI_I2S_GetFlagStatus>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f8      	beq.n	8004714 <PN532_write+0xc>

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 8004722:	2200      	movs	r2, #0
 8004724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004728:	4818      	ldr	r0, [pc, #96]	; (800478c <PN532_write+0x84>)
 800472a:	f001 fc8e 	bl	800604a <GPIO_WriteBit>

	  //PN532_Delay(100);
	  Delay(2);
 800472e:	2002      	movs	r0, #2
 8004730:	f7ff f9cc 	bl	8003acc <Delay>
	for (size_t i = 0; i < len; i++) {
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e017      	b.n	800476a <PN532_write+0x62>

		SPI_I2S_SendData(SPI2,buffer[i]);
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	4619      	mov	r1, r3
 8004746:	4810      	ldr	r0, [pc, #64]	; (8004788 <PN532_write+0x80>)
 8004748:	f002 f81c 	bl	8006784 <SPI_I2S_SendData>

	    PN532_Delay(400);
 800474c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004750:	f7ff fdd6 	bl	8004300 <PN532_Delay>

	    while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET){};  // ждём пока данные уйдут
 8004754:	bf00      	nop
 8004756:	2102      	movs	r1, #2
 8004758:	480b      	ldr	r0, [pc, #44]	; (8004788 <PN532_write+0x80>)
 800475a:	f002 f86b 	bl	8006834 <SPI_I2S_GetFlagStatus>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f8      	beq.n	8004756 <PN532_write+0x4e>
	for (size_t i = 0; i < len; i++) {
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d3e3      	bcc.n	800473a <PN532_write+0x32>

     }

//	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004772:	2201      	movs	r2, #1
 8004774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004778:	4804      	ldr	r0, [pc, #16]	; (800478c <PN532_write+0x84>)
 800477a:	f001 fc66 	bl	800604a <GPIO_WriteBit>


 }
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40003800 	.word	0x40003800
 800478c:	40010c00 	.word	0x40010c00

08004790 <PN532_readdata>:

     @param  rd_buff      Pointer to the buffer where data will be written
     @param  len_rd_buff         Number of bytes to be read
 */
 /**************************************************************************/
 void PN532_readdata(uint8_t *rd_buff, uint8_t len_rd_buff,uint16_t sendvalue) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	70fb      	strb	r3, [r7, #3]
 800479c:	4613      	mov	r3, r2
 800479e:	803b      	strh	r3, [r7, #0]
      //uint8_t cmd = PN532_SPI_DATAREAD;
	//while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 80047a0:	2200      	movs	r2, #0
 80047a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047a6:	4831      	ldr	r0, [pc, #196]	; (800486c <PN532_readdata+0xdc>)
 80047a8:	f001 fc4f 	bl	800604a <GPIO_WriteBit>

    // PN532_Delay(100);
     Delay(2);
 80047ac:	2002      	movs	r0, #2
 80047ae:	f7ff f98d 	bl	8003acc <Delay>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80047b2:	bf00      	nop
 80047b4:	2102      	movs	r1, #2
 80047b6:	482e      	ldr	r0, [pc, #184]	; (8004870 <PN532_readdata+0xe0>)
 80047b8:	f002 f83c 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f8      	beq.n	80047b4 <PN532_readdata+0x24>
	   SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 80047c2:	2103      	movs	r1, #3
 80047c4:	482a      	ldr	r0, [pc, #168]	; (8004870 <PN532_readdata+0xe0>)
 80047c6:	f001 ffdd 	bl	8006784 <SPI_I2S_SendData>
	   while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80047ca:	bf00      	nop
 80047cc:	2102      	movs	r1, #2
 80047ce:	4828      	ldr	r0, [pc, #160]	; (8004870 <PN532_readdata+0xe0>)
 80047d0:	f002 f830 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f8      	beq.n	80047cc <PN532_readdata+0x3c>
	   while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80047da:	bf00      	nop
 80047dc:	2101      	movs	r1, #1
 80047de:	4824      	ldr	r0, [pc, #144]	; (8004870 <PN532_readdata+0xe0>)
 80047e0:	f002 f828 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f8      	beq.n	80047dc <PN532_readdata+0x4c>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 80047ea:	4821      	ldr	r0, [pc, #132]	; (8004870 <PN532_readdata+0xe0>)
 80047ec:	f001 ffd8 	bl	80067a0 <SPI_I2S_ReceiveData>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73bb      	strb	r3, [r7, #14]

	   // чтение
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e029      	b.n	800484e <PN532_readdata+0xbe>
	         PN532_Delay(400);
 80047fa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80047fe:	f7ff fd7f 	bl	8004300 <PN532_Delay>

	    	 SPI_I2S_SendData(SPI2, sendvalue);
 8004802:	883b      	ldrh	r3, [r7, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	481a      	ldr	r0, [pc, #104]	; (8004870 <PN532_readdata+0xe0>)
 8004808:	f001 ffbc 	bl	8006784 <SPI_I2S_SendData>

	         PN532_Delay(400);
 800480c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004810:	f7ff fd76 	bl	8004300 <PN532_Delay>

			 while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8004814:	bf00      	nop
 8004816:	2102      	movs	r1, #2
 8004818:	4815      	ldr	r0, [pc, #84]	; (8004870 <PN532_readdata+0xe0>)
 800481a:	f002 f80b 	bl	8006834 <SPI_I2S_GetFlagStatus>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f8      	beq.n	8004816 <PN532_readdata+0x86>

	    	 while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появтся
 8004824:	bf00      	nop
 8004826:	2101      	movs	r1, #1
 8004828:	4811      	ldr	r0, [pc, #68]	; (8004870 <PN532_readdata+0xe0>)
 800482a:	f002 f803 	bl	8006834 <SPI_I2S_GetFlagStatus>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f8      	beq.n	8004826 <PN532_readdata+0x96>

	    	 rd_buff[i] =SPI_I2S_ReceiveData(SPI2);
 8004834:	480e      	ldr	r0, [pc, #56]	; (8004870 <PN532_readdata+0xe0>)
 8004836:	f001 ffb3 	bl	80067a0 <SPI_I2S_ReceiveData>
 800483a:	4603      	mov	r3, r0
 800483c:	4619      	mov	r1, r3
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	b2ca      	uxtb	r2, r1
 8004846:	701a      	strb	r2, [r3, #0]
	     for (uint8_t i = 0; i < len_rd_buff; i++) {
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	3301      	adds	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	7bfa      	ldrb	r2, [r7, #15]
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	429a      	cmp	r2, r3
 8004854:	d3d1      	bcc.n	80047fa <PN532_readdata+0x6a>


//	 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу


	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN, 1);
 8004856:	2201      	movs	r2, #1
 8004858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800485c:	4803      	ldr	r0, [pc, #12]	; (800486c <PN532_readdata+0xdc>)
 800485e:	f001 fbf4 	bl	800604a <GPIO_WriteBit>
	    	USART_SendData(USART2_NUM,rd_buff[i]);
	    }
#endif
//------------------------------------------------------------------------------

}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40010c00 	.word	0x40010c00
 8004870:	40003800 	.word	0x40003800

08004874 <PN532_readack>:
 /**************************************************************************/
 /*!
     @brief  Tries to read the SPI or I2C ACK signal
 */
 /**************************************************************************/
 bool PN532_readack() {
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0

	 const uint8_t pn532ack[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00};
 800487a:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <PN532_readack+0x104>)
 800487c:	f107 0308 	add.w	r3, r7, #8
 8004880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004884:	6018      	str	r0, [r3, #0]
 8004886:	3304      	adds	r3, #4
 8004888:	8019      	strh	r1, [r3, #0]
	 uint8_t ackbuff[6];
	 //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 0
	 GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 800488a:	2200      	movs	r2, #0
 800488c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004890:	483a      	ldr	r0, [pc, #232]	; (800497c <PN532_readack+0x108>)
 8004892:	f001 fbda 	bl	800604a <GPIO_WriteBit>

	 //PN532_Delay(100);
	 Delay(2);
 8004896:	2002      	movs	r0, #2
 8004898:	f7ff f918 	bl	8003acc <Delay>
//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 800489c:	bf00      	nop
 800489e:	2102      	movs	r1, #2
 80048a0:	4837      	ldr	r0, [pc, #220]	; (8004980 <PN532_readack+0x10c>)
 80048a2:	f001 ffc7 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f8      	beq.n	800489e <PN532_readack+0x2a>

	  SPI_I2S_SendData(SPI2, PN532_SPI_DATAREAD);
 80048ac:	2103      	movs	r1, #3
 80048ae:	4834      	ldr	r0, [pc, #208]	; (8004980 <PN532_readack+0x10c>)
 80048b0:	f001 ff68 	bl	8006784 <SPI_I2S_SendData>
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80048b4:	bf00      	nop
 80048b6:	2102      	movs	r1, #2
 80048b8:	4831      	ldr	r0, [pc, #196]	; (8004980 <PN532_readack+0x10c>)
 80048ba:	f001 ffbb 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f8      	beq.n	80048b6 <PN532_readack+0x42>

//Читаем данные, чтобы очистить приемный буфер иначе там данные от байта готовности!!????(непонятно!)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80048c4:	bf00      	nop
 80048c6:	2101      	movs	r1, #1
 80048c8:	482d      	ldr	r0, [pc, #180]	; (8004980 <PN532_readack+0x10c>)
 80048ca:	f001 ffb3 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f8      	beq.n	80048c6 <PN532_readack+0x52>
	   uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
 80048d4:	482a      	ldr	r0, [pc, #168]	; (8004980 <PN532_readack+0x10c>)
 80048d6:	f001 ff63 	bl	80067a0 <SPI_I2S_ReceiveData>
 80048da:	4603      	mov	r3, r0
 80048dc:	73bb      	strb	r3, [r7, #14]

//Читаем 6 байт пакета подтверждения
	  for (uint8_t i = 0; i < 6; i++) {
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e02f      	b.n	8004944 <PN532_readack+0xd0>

		  PN532_Delay(100);
 80048e4:	2064      	movs	r0, #100	; 0x64
 80048e6:	f7ff fd0b 	bl	8004300 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80048ea:	bf00      	nop
 80048ec:	2102      	movs	r1, #2
 80048ee:	4824      	ldr	r0, [pc, #144]	; (8004980 <PN532_readack+0x10c>)
 80048f0:	f001 ffa0 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f8      	beq.n	80048ec <PN532_readack+0x78>
	      SPI_I2S_SendData(SPI2, 0x00);
 80048fa:	2100      	movs	r1, #0
 80048fc:	4820      	ldr	r0, [pc, #128]	; (8004980 <PN532_readack+0x10c>)
 80048fe:	f001 ff41 	bl	8006784 <SPI_I2S_SendData>

	      PN532_Delay(100);
 8004902:	2064      	movs	r0, #100	; 0x64
 8004904:	f7ff fcfc 	bl	8004300 <PN532_Delay>

	      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 8004908:	bf00      	nop
 800490a:	2102      	movs	r1, #2
 800490c:	481c      	ldr	r0, [pc, #112]	; (8004980 <PN532_readack+0x10c>)
 800490e:	f001 ff91 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f8      	beq.n	800490a <PN532_readack+0x96>
    	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 8004918:	bf00      	nop
 800491a:	2101      	movs	r1, #1
 800491c:	4818      	ldr	r0, [pc, #96]	; (8004980 <PN532_readack+0x10c>)
 800491e:	f001 ff89 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f8      	beq.n	800491a <PN532_readack+0xa6>
	      ackbuff[i] =SPI_I2S_ReceiveData(SPI2);
 8004928:	4815      	ldr	r0, [pc, #84]	; (8004980 <PN532_readack+0x10c>)
 800492a:	f001 ff39 	bl	80067a0 <SPI_I2S_ReceiveData>
 800492e:	4603      	mov	r3, r0
 8004930:	461a      	mov	r2, r3
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	3310      	adds	r3, #16
 8004938:	443b      	add	r3, r7
 800493a:	f803 2c10 	strb.w	r2, [r3, #-16]
	  for (uint8_t i = 0; i < 6; i++) {
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	3301      	adds	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b05      	cmp	r3, #5
 8004948:	d9cc      	bls.n	80048e4 <PN532_readack+0x70>

	     }

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

	    GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 800494a:	2201      	movs	r2, #1
 800494c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004950:	480a      	ldr	r0, [pc, #40]	; (800497c <PN532_readack+0x108>)
 8004952:	f001 fb7a 	bl	800604a <GPIO_WriteBit>
//------------------------------------------------------------------------------

//сравнение полученных  шести байт с массивом правильных данных
//если сдержимое не одинаковое, от выход с ошибкой;
//проверка подтверждения (ack)
   return (0 == memcmp((char *)ackbuff, (char *)pn532ack, sizeof(pn532ack)));
 8004956:	f107 0108 	add.w	r1, r7, #8
 800495a:	463b      	mov	r3, r7
 800495c:	2206      	movs	r2, #6
 800495e:	4618      	mov	r0, r3
 8004960:	f002 fce6 	bl	8007330 <memcmp>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3

}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	0800869c 	.word	0x0800869c
 800497c:	40010c00 	.word	0x40010c00
 8004980:	40003800 	.word	0x40003800

08004984 <PN532_isready>:
 /**************************************************************************/
 /*!
     @brief  Return true if the PN532 is ready with a response.
 */
 /**************************************************************************/
 bool PN532_isready() {
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
     uint8_t reply;
// 	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 800498a:	bf00      	nop
 800498c:	2102      	movs	r1, #2
 800498e:	4849      	ldr	r0, [pc, #292]	; (8004ab4 <PN532_isready+0x130>)
 8004990:	f001 ff50 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f8      	beq.n	800498c <PN532_isready+0x8>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить принимающий регистр (не понятно зачем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 800499a:	bf00      	nop
 800499c:	2101      	movs	r1, #1
 800499e:	4845      	ldr	r0, [pc, #276]	; (8004ab4 <PN532_isready+0x130>)
 80049a0:	f001 ff48 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f8      	beq.n	800499c <PN532_isready+0x18>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 80049aa:	4842      	ldr	r0, [pc, #264]	; (8004ab4 <PN532_isready+0x130>)
 80049ac:	f001 fef8 	bl	80067a0 <SPI_I2S_ReceiveData>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4619      	mov	r1, r3
 80049b4:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <PN532_isready+0x134>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	b2c9      	uxtb	r1, r1
 80049bc:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <PN532_isready+0x138>)
 80049be:	5499      	strb	r1, [r3, r2]
	  rl++;
 80049c0:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <PN532_isready+0x134>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	4b3b      	ldr	r3, [pc, #236]	; (8004ab8 <PN532_isready+0x134>)
 80049ca:	701a      	strb	r2, [r3, #0]
//NSS устанавливаем в 0
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,0);
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049d2:	483b      	ldr	r0, [pc, #236]	; (8004ac0 <PN532_isready+0x13c>)
 80049d4:	f001 fb39 	bl	800604a <GPIO_WriteBit>

	    //PN532_Delay(100);
	    Delay(2);
 80049d8:	2002      	movs	r0, #2
 80049da:	f7ff f877 	bl	8003acc <Delay>
	  SPI_I2S_SendData(SPI2, PN532_SPI_STATREAD);//посылка команды чтения байта состояния
 80049de:	2102      	movs	r1, #2
 80049e0:	4834      	ldr	r0, [pc, #208]	; (8004ab4 <PN532_isready+0x130>)
 80049e2:	f001 fecf 	bl	8006784 <SPI_I2S_SendData>

//Перед началом передачи проверяем свободен ли передающий буфер для записи новых данных
//Пока флаг SPI_I2S_FLAG_TXE ==0 (не установлен) передача новых данных невозможна
	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET);  // ждём пока данные уйдут
 80049e6:	bf00      	nop
 80049e8:	2102      	movs	r1, #2
 80049ea:	4832      	ldr	r0, [pc, #200]	; (8004ab4 <PN532_isready+0x130>)
 80049ec:	f001 ff22 	bl	8006834 <SPI_I2S_GetFlagStatus>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f8      	beq.n	80049e8 <PN532_isready+0x64>

//Перед началом передачи проверяем пустой ли принимающий буфер
//Читаем данные, чтобы очистить примнающий регистр (не понятно зачем)
//Получается, что нужно прочитать 2 раза приемный буфер, что бы потом получить корретные данные
//при посылке байта и чтении данных после его передачи (странно!!! установленно опытным путем)
	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);  // ждём пока данные появятся
 80049f6:	bf00      	nop
 80049f8:	2101      	movs	r1, #1
 80049fa:	482e      	ldr	r0, [pc, #184]	; (8004ab4 <PN532_isready+0x130>)
 80049fc:	f001 ff1a 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f8      	beq.n	80049f8 <PN532_isready+0x74>
	  //uint8_t rdrd =SPI_I2S_ReceiveData(SPI2);
	  replybuff[rl]=SPI_I2S_ReceiveData(SPI2);
 8004a06:	482b      	ldr	r0, [pc, #172]	; (8004ab4 <PN532_isready+0x130>)
 8004a08:	f001 feca 	bl	80067a0 <SPI_I2S_ReceiveData>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4b29      	ldr	r3, [pc, #164]	; (8004ab8 <PN532_isready+0x134>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	b2c9      	uxtb	r1, r1
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <PN532_isready+0x138>)
 8004a1a:	5499      	strb	r1, [r3, r2]
	  rl++;
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <PN532_isready+0x134>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <PN532_isready+0x134>)
 8004a26:	701a      	strb	r2, [r3, #0]

	     PN532_Delay(400);
 8004a28:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004a2c:	f7ff fc68 	bl	8004300 <PN532_Delay>

      while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8004a30:	bf00      	nop
 8004a32:	2102      	movs	r1, #2
 8004a34:	481f      	ldr	r0, [pc, #124]	; (8004ab4 <PN532_isready+0x130>)
 8004a36:	f001 fefd 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f8      	beq.n	8004a32 <PN532_isready+0xae>

	  SPI_I2S_SendData(SPI2, 0XFF);//посылка "пустышки", чтобы забрать байт состояния
 8004a40:	21ff      	movs	r1, #255	; 0xff
 8004a42:	481c      	ldr	r0, [pc, #112]	; (8004ab4 <PN532_isready+0x130>)
 8004a44:	f001 fe9e 	bl	8006784 <SPI_I2S_SendData>

	     PN532_Delay(400);
 8004a48:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004a4c:	f7ff fc58 	bl	8004300 <PN532_Delay>

   	  while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE) == RESET) {};  // ждём пока данные уйдут
 8004a50:	bf00      	nop
 8004a52:	2102      	movs	r1, #2
 8004a54:	4817      	ldr	r0, [pc, #92]	; (8004ab4 <PN532_isready+0x130>)
 8004a56:	f001 feed 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f8      	beq.n	8004a52 <PN532_isready+0xce>

	  while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {};  // ждём пока данные появятся
 8004a60:	bf00      	nop
 8004a62:	2101      	movs	r1, #1
 8004a64:	4813      	ldr	r0, [pc, #76]	; (8004ab4 <PN532_isready+0x130>)
 8004a66:	f001 fee5 	bl	8006834 <SPI_I2S_GetFlagStatus>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f8      	beq.n	8004a62 <PN532_isready+0xde>

	  reply = SPI_I2S_ReceiveData(SPI2);
 8004a70:	4810      	ldr	r0, [pc, #64]	; (8004ab4 <PN532_isready+0x130>)
 8004a72:	f001 fe95 	bl	80067a0 <SPI_I2S_ReceiveData>
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]

//		while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);  // ждём пока SPI не закончит работу

//NSS устанавливаем в 1
	  GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a80:	480f      	ldr	r0, [pc, #60]	; (8004ac0 <PN532_isready+0x13c>)
 8004a82:	f001 fae2 	bl	800604a <GPIO_WriteBit>

	   replybuff[rl]=reply;
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <PN532_isready+0x134>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <PN532_isready+0x138>)
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	5453      	strb	r3, [r2, r1]
       rl++;
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <PN532_isready+0x134>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <PN532_isready+0x134>)
 8004a9c:	701a      	strb	r2, [r3, #0]

       //USART_SendData(USART2_NUM,reply);

// Проверка ответа с байтом готовности (0x01);
     return reply == PN532_SPI_READY;
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3


 }
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40003800 	.word	0x40003800
 8004ab8:	20000c84 	.word	0x20000c84
 8004abc:	20000c70 	.word	0x20000c70
 8004ac0:	40010c00 	.word	0x40010c00

08004ac4 <PN532_waitready>:
     @brief  Waits until the PN532 is ready.

     @param  timeout   Timeout before giving up
 */
 /**************************************************************************/
 bool PN532_waitready(uint16_t timeout) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	80fb      	strh	r3, [r7, #6]
   uint16_t timer = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	81fb      	strh	r3, [r7, #14]

   Delay(5);
 8004ad2:	2005      	movs	r0, #5
 8004ad4:	f7fe fffa 	bl	8003acc <Delay>
   timer += 5;
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
 8004ada:	3305      	adds	r3, #5
 8004adc:	81fb      	strh	r3, [r7, #14]
   //USART_SendData(USART2_NUM,0xFF);

   while (!PN532_isready()) {
 8004ade:	e00e      	b.n	8004afe <PN532_waitready+0x3a>
     if (timeout != 0) {
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <PN532_waitready+0x34>
       timer += 5;
 8004ae6:	89fb      	ldrh	r3, [r7, #14]
 8004ae8:	3305      	adds	r3, #5
 8004aea:	81fb      	strh	r3, [r7, #14]
       if (timer > timeout) {
 8004aec:	89fa      	ldrh	r2, [r7, #14]
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d901      	bls.n	8004af8 <PN532_waitready+0x34>
         return FALSE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e008      	b.n	8004b0a <PN532_waitready+0x46>
       }
     }
     Delay(5);
 8004af8:	2005      	movs	r0, #5
 8004afa:	f7fe ffe7 	bl	8003acc <Delay>
   while (!PN532_isready()) {
 8004afe:	f7ff ff41 	bl	8004984 <PN532_isready>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0eb      	beq.n	8004ae0 <PN532_waitready+0x1c>
   }
   return TRUE;
 8004b08:	2301      	movs	r3, #1
 }
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <PN532_mifareclassic_AuthenticateBlock>:
 /**************************************************************************/
 uint8_t PN532_mifareclassic_AuthenticateBlock(uint8_t *uid,
                                                         uint8_t uidLen,
                                                         uint32_t blockNumber,
                                                         uint8_t keyNumber,
                                                         uint8_t *keyData) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	460b      	mov	r3, r1
 8004b22:	72fb      	strb	r3, [r7, #11]
 8004b24:	4613      	mov	r3, r2
 8004b26:	72bb      	strb	r3, [r7, #10]
   // uint8_t len;
   uint8_t i;

   // Hang on to the key and uid data
   memcpy(_key, keyData, 6);
 8004b28:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	6810      	ldr	r0, [r2, #0]
 8004b2e:	6018      	str	r0, [r3, #0]
 8004b30:	8892      	ldrh	r2, [r2, #4]
 8004b32:	809a      	strh	r2, [r3, #4]
   memcpy(_uid, uid, uidLen);
 8004b34:	7afb      	ldrb	r3, [r7, #11]
 8004b36:	461a      	mov	r2, r3
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	482c      	ldr	r0, [pc, #176]	; (8004bec <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 8004b3c:	f002 fc08 	bl	8007350 <memcpy>
   _uidLen = uidLen;
 8004b40:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8004b44:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8004b46:	701a      	strb	r2, [r3, #0]
   PN532DEBUGPRINT.print(F(": "));
   Adafruit_PN532::PrintHex(_key, 6);
 #endif
*/
   // Prepare the authentication command //
   pn532_packetbuffer[0] =
 8004b48:	4b2a      	ldr	r3, [pc, #168]	; (8004bf4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	701a      	strb	r2, [r3, #0]
       PN532_COMMAND_INDATAEXCHANGE; /* Data Exchange Header */
   pn532_packetbuffer[1] = 1;        /* Max card numbers */
 8004b4e:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
 8004b54:	7abb      	ldrb	r3, [r7, #10]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <PN532_mifareclassic_AuthenticateBlock+0x4a>
 8004b5a:	2261      	movs	r2, #97	; 0x61
 8004b5c:	e000      	b.n	8004b60 <PN532_mifareclassic_AuthenticateBlock+0x4c>
 8004b5e:	2260      	movs	r2, #96	; 0x60
 8004b60:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004b62:	709a      	strb	r2, [r3, #2]
   //pn532_packetbuffer[2] = 0x61;
   pn532_packetbuffer[3] =
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004b6a:	70da      	strb	r2, [r3, #3]
       blockNumber; /* Block Number (1K = 0..63, 4K = 0..255 */
   memcpy(pn532_packetbuffer + 4, _key, 6);
 8004b6c:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <PN532_mifareclassic_AuthenticateBlock+0xe4>)
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <PN532_mifareclassic_AuthenticateBlock+0xd4>)
 8004b70:	6810      	ldr	r0, [r2, #0]
 8004b72:	6018      	str	r0, [r3, #0]
 8004b74:	8892      	ldrh	r2, [r2, #4]
 8004b76:	809a      	strh	r2, [r3, #4]
   for (i = 0; i < _uidLen; i++) {
 8004b78:	2300      	movs	r3, #0
 8004b7a:	75fb      	strb	r3, [r7, #23]
 8004b7c:	e00a      	b.n	8004b94 <PN532_mifareclassic_AuthenticateBlock+0x80>
     pn532_packetbuffer[10 + i] = _uid[i]; /* 4 byte card ID */
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <PN532_mifareclassic_AuthenticateBlock+0xd8>)
 8004b82:	56d2      	ldrsb	r2, [r2, r3]
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	330a      	adds	r3, #10
 8004b88:	b2d1      	uxtb	r1, r2
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004b8c:	54d1      	strb	r1, [r2, r3]
   for (i = 0; i < _uidLen; i++) {
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	3301      	adds	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	4a16      	ldr	r2, [pc, #88]	; (8004bf0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8004b98:	f992 2000 	ldrsb.w	r2, [r2]
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	dbee      	blt.n	8004b7e <PN532_mifareclassic_AuthenticateBlock+0x6a>
  	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
  	    	USART_SendData(USART2_NUM,pn532_packetbuffer[i]);
  	    }
*/

   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 10 + _uidLen,100))
 8004ba0:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <PN532_mifareclassic_AuthenticateBlock+0xdc>)
 8004ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	330a      	adds	r3, #10
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2264      	movs	r2, #100	; 0x64
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4810      	ldr	r0, [pc, #64]	; (8004bf4 <PN532_mifareclassic_AuthenticateBlock+0xe0>)
 8004bb2:	f7ff fce5 	bl	8004580 <PN532_sendCommandCheckAck>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <PN532_mifareclassic_AuthenticateBlock+0xac>
     return 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e00e      	b.n	8004bde <PN532_mifareclassic_AuthenticateBlock+0xca>
   Delay(10);
 8004bc0:	200a      	movs	r0, #10
 8004bc2:	f7fe ff83 	bl	8003acc <Delay>
   // Read the response packet
   PN532_readdata(pn532_readbuffer, 12,0xFF);
 8004bc6:	22ff      	movs	r2, #255	; 0xff
 8004bc8:	210c      	movs	r1, #12
 8004bca:	480c      	ldr	r0, [pc, #48]	; (8004bfc <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 8004bcc:	f7ff fde0 	bl	8004790 <PN532_readdata>
*/
   // check if the response is valid and we are authenticated???
   // for an auth success it should be bytes 5-7: 0xD5 0x41 0x00
   // Mifare auth error is technically byte 7: 0x14 but anything other and 0x00
   // is not good
   if (pn532_readbuffer[7] != 0x00) {
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <PN532_mifareclassic_AuthenticateBlock+0xe8>)
 8004bd2:	79db      	ldrb	r3, [r3, #7]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <PN532_mifareclassic_AuthenticateBlock+0xc8>
	   for (uint8_t i = 0; i < 12; i++) {
	 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
	 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
	 	    }
 #endif
     return 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e000      	b.n	8004bde <PN532_mifareclassic_AuthenticateBlock+0xca>
   }

   return 1;
 8004bdc:	2301      	movs	r3, #1
 }
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000d10 	.word	0x20000d10
 8004bec:	20000d08 	.word	0x20000d08
 8004bf0:	20000d0f 	.word	0x20000d0f
 8004bf4:	20000c88 	.word	0x20000c88
 8004bf8:	20000c8c 	.word	0x20000c8c
 8004bfc:	20000cc8 	.word	0x20000cc8

08004c00 <PN532_mifareclassic_ReadDataBlock>:
                           retrieved data (if any)
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_ReadDataBlock(uint8_t blockNumber,
                                                     uint8_t *data) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	71fb      	strb	r3, [r7, #7]
 //  PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));
   //PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;               /* Card number */
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_READ; /* Mifare Read command = 0x30 */
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8004c1a:	2230      	movs	r2, #48	; 0x30
 8004c1c:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] = blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	70d3      	strb	r3, [r2, #3]

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 4,100)) {
 8004c24:	2264      	movs	r2, #100	; 0x64
 8004c26:	2104      	movs	r1, #4
 8004c28:	4810      	ldr	r0, [pc, #64]	; (8004c6c <PN532_mifareclassic_ReadDataBlock+0x6c>)
 8004c2a:	f7ff fca9 	bl	8004580 <PN532_sendCommandCheckAck>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <PN532_mifareclassic_ReadDataBlock+0x38>
 #ifdef MIFAREDEBUG
   //  PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
 #endif
     return 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e014      	b.n	8004c62 <PN532_mifareclassic_ReadDataBlock+0x62>
   }
Delay(10);
 8004c38:	200a      	movs	r0, #10
 8004c3a:	f7fe ff47 	bl	8003acc <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 8004c3e:	22ff      	movs	r2, #255	; 0xff
 8004c40:	211a      	movs	r1, #26
 8004c42:	480b      	ldr	r0, [pc, #44]	; (8004c70 <PN532_mifareclassic_ReadDataBlock+0x70>)
 8004c44:	f7ff fda4 	bl	8004790 <PN532_readdata>

   /* If byte 8 isn't 0x00 we probably have an error */
   if (pn532_readbuffer[7] != 0x00) {
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <PN532_mifareclassic_ReadDataBlock+0x70>)
 8004c4a:	79db      	ldrb	r3, [r3, #7]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <PN532_mifareclassic_ReadDataBlock+0x54>
 #ifdef MIFAREDEBUG
  //   PN532DEBUGPRINT.println(F("Unexpected response"));
    // Adafruit_PN532::PrintHexChar(pn532_packetbuffer, 26);
 #endif
     return 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e006      	b.n	8004c62 <PN532_mifareclassic_ReadDataBlock+0x62>
   }

   /* Copy the 16 data bytes to the output buffer        */
   /* Block content starts at byte 9 of a valid response */
   memcpy(data, pn532_readbuffer + 8, 16);
 8004c54:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <PN532_mifareclassic_ReadDataBlock+0x74>)
 8004c56:	2210      	movs	r2, #16
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6838      	ldr	r0, [r7, #0]
 8004c5c:	f002 fb78 	bl	8007350 <memcpy>
  // PN532DEBUGPRINT.print(F("Block "));
  // PN532DEBUGPRINT.println(blockNumber);
  // Adafruit_PN532::PrintHexChar(data, 16);
 #endif

   return 1;
 8004c60:	2301      	movs	r3, #1
 }
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000c88 	.word	0x20000c88
 8004c70:	20000cc8 	.word	0x20000cc8
 8004c74:	20000cd0 	.word	0x20000cd0

08004c78 <PN532_mifareclassic_WriteDataBlock>:
     @param  data          The byte array that contains the data to write.
     @returns 1 if everything executed properly, 0 for an error
 */
 /**************************************************************************/
 uint8_t PN532_mifareclassic_WriteDataBlock(uint8_t blockNumber,
                                                      uint8_t *data) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	6039      	str	r1, [r7, #0]
 8004c82:	71fb      	strb	r3, [r7, #7]
  // PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));
  // PN532DEBUGPRINT.println(blockNumber);
 #endif

   /* Prepare the first command */
   pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8004c84:	4b15      	ldr	r3, [pc, #84]	; (8004cdc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004c86:	2240      	movs	r2, #64	; 0x40
 8004c88:	701a      	strb	r2, [r3, #0]
   pn532_packetbuffer[1] = 1;                /* Card number */
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	705a      	strb	r2, [r3, #1]
   pn532_packetbuffer[2] = MIFARE_CMD_WRITE; /* Mifare Write command = 0xA0 */
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004c92:	22a0      	movs	r2, #160	; 0xa0
 8004c94:	709a      	strb	r2, [r3, #2]
   pn532_packetbuffer[3] =
 8004c96:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	70d3      	strb	r3, [r2, #3]
       blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
   memcpy(pn532_packetbuffer + 4, data, 16); /* Data Payload */
 8004c9c:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <PN532_mifareclassic_WriteDataBlock+0x68>)
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f002 fb54 	bl	8007350 <memcpy>

   /* Send the command */
   if (!PN532_sendCommandCheckAck(pn532_packetbuffer, 20,100)) {
 8004ca8:	2264      	movs	r2, #100	; 0x64
 8004caa:	2114      	movs	r1, #20
 8004cac:	480b      	ldr	r0, [pc, #44]	; (8004cdc <PN532_mifareclassic_WriteDataBlock+0x64>)
 8004cae:	f7ff fc67 	bl	8004580 <PN532_sendCommandCheckAck>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <PN532_mifareclassic_WriteDataBlock+0x44>
 #ifdef MIFAREDEBUG
 //    PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
 #endif
     return 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e00b      	b.n	8004cd4 <PN532_mifareclassic_WriteDataBlock+0x5c>
   }
   Delay(10);
 8004cbc:	200a      	movs	r0, #10
 8004cbe:	f7fe ff05 	bl	8003acc <Delay>
   Delay(10);
 8004cc2:	200a      	movs	r0, #10
 8004cc4:	f7fe ff02 	bl	8003acc <Delay>
   /* Read the response packet */
   PN532_readdata(pn532_readbuffer, 26,0xFF);
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	211a      	movs	r1, #26
 8004ccc:	4805      	ldr	r0, [pc, #20]	; (8004ce4 <PN532_mifareclassic_WriteDataBlock+0x6c>)
 8004cce:	f7ff fd5f 	bl	8004790 <PN532_readdata>
   for (uint8_t i = 0; i < 26; i++) {
 	    	while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE)==RESET){};
 	    	USART_SendData(USART2_NUM,pn532_readbuffer[i]);
 	    }
*/
   return 1;
 8004cd2:	2301      	movs	r3, #1
 }
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000c88 	.word	0x20000c88
 8004ce0:	20000c8c 	.word	0x20000c8c
 8004ce4:	20000cc8 	.word	0x20000cc8

08004ce8 <PN532_Read_Data>:

 /**************************************************************************/
 uint8_t PN532_Read_Data(uint8_t *uid_card, uint8_t uid_card_len, uint8_t blockNumber, uint8_t *data)
 {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08e      	sub	sp, #56	; 0x38
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	72fb      	strb	r3, [r7, #11]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	72bb      	strb	r3, [r7, #10]
 	uint8_t success=0;	// Flag to check if there was an error with the PN532
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 	uint8_t KEY_DEFAULT_KEYAB[6]={0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// The default Mifare Classic key
 8004d00:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <PN532_Read_Data+0x9c>)
 8004d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d0a:	6018      	str	r0, [r3, #0]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	8019      	strh	r1, [r3, #0]

	uint8_t res_excep;

 	bool authenticated = FALSE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 	uint8_t blockBuffer[16];                  // Buffer to store block contents
 	uint8_t blankAccessBits[3] = { 0xff, 0x07, 0x80 };
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <PN532_Read_Data+0xa0>)
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	8019      	strh	r1, [r3, #0]
 8004d22:	3302      	adds	r3, #2
 8004d24:	0c12      	lsrs	r2, r2, #16
 8004d26:	701a      	strb	r2, [r3, #0]
 static char s_pc_PN532_err1[]="Authentication failed for sector";
 static char s_pc_PN532_err4[]="Unable to read data block";


 //success = PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB);
 	        if (!(PN532_mifareclassic_AuthenticateBlock (uid_card, uid_card_len, 0, 1, (uint8_t *)KEY_DEFAULT_KEYAB)))
 8004d28:	7af9      	ldrb	r1, [r7, #11]
 8004d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2301      	movs	r3, #1
 8004d32:	2200      	movs	r2, #0
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff feed 	bl	8004b14 <PN532_mifareclassic_AuthenticateBlock>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <PN532_Read_Data+0x64>
 	        {
 	          return res_excep=1;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004d46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d4a:	e016      	b.n	8004d7a <PN532_Read_Data+0x92>
 	        }

 	       if(!(res_excep=PN532_mifareclassic_ReadDataBlock(blockNumber, data)))
 8004d4c:	7abb      	ldrb	r3, [r7, #10]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff55 	bl	8004c00 <PN532_mifareclassic_ReadDataBlock>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004d5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <PN532_Read_Data+0x88>
 	       {
 	          return res_excep=2;
 8004d64:	2302      	movs	r3, #2
 8004d66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004d6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d6e:	e004      	b.n	8004d7a <PN532_Read_Data+0x92>
 	       }else return res_excep=0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004d76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 }
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3730      	adds	r7, #48	; 0x30
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	080086d8 	.word	0x080086d8
 8004d88:	080086e0 	.word	0x080086e0

08004d8c <RTC_INIT>:
#include "rtc.h"



void RTC_INIT(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
	if((RCC->BDCR & RCC_BDCR_RTCEN) != RCC_BDCR_RTCEN){		// проверка работы часов, если не включены, то инициализировать
 8004d90:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <RTC_INIT+0xf4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	d06c      	beq.n	8004e78 <RTC_INIT+0xec>
		RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <RTC_INIT+0xf4>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	4a37      	ldr	r2, [pc, #220]	; (8004e80 <RTC_INIT+0xf4>)
 8004da4:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8004da8:	61d3      	str	r3, [r2, #28]
		PWR->CR |= PWR_CR_DBP;		// разрешение доступа к Backup области
 8004daa:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <RTC_INIT+0xf8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a35      	ldr	r2, [pc, #212]	; (8004e84 <RTC_INIT+0xf8>)
 8004db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db4:	6013      	str	r3, [r2, #0]
		RCC->BDCR |= RCC_BDCR_BDRST;	// сброс Backup области
 8004db6:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <RTC_INIT+0xf4>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4a31      	ldr	r2, [pc, #196]	; (8004e80 <RTC_INIT+0xf4>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6213      	str	r3, [r2, #32]
		RCC->BDCR &= ~RCC_BDCR_BDRST;
 8004dc2:	4b2f      	ldr	r3, [pc, #188]	; (8004e80 <RTC_INIT+0xf4>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4a2e      	ldr	r2, [pc, #184]	; (8004e80 <RTC_INIT+0xf4>)
 8004dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dcc:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_LSE;	// выбор LSE источника (кварц 32768) и подача тактирования
 8004dce:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <RTC_INIT+0xf4>)
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <RTC_INIT+0xf4>)
 8004dd4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dd8:	6213      	str	r3, [r2, #32]
		RCC->BDCR |= RCC_BDCR_LSEON;
 8004dda:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <RTC_INIT+0xf4>)
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <RTC_INIT+0xf4>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	6213      	str	r3, [r2, #32]
		while((RCC->BDCR&RCC_BDCR_LSEON) != RCC_BDCR_LSEON){}	// ожидание включения
 8004de6:	bf00      	nop
 8004de8:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <RTC_INIT+0xf4>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d1f9      	bne.n	8004de8 <RTC_INIT+0x5c>
		BKP->RTCCR |= 3;	// калибровка RTC
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <RTC_INIT+0xfc>)
 8004df6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <RTC_INIT+0xfc>)
 8004dfc:	f043 0303 	orr.w	r3, r3, #3
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8593      	strh	r3, [r2, #44]	; 0x2c
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// проверка на конец изменений регистров RTC
 8004e04:	bf00      	nop
 8004e06:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <RTC_INIT+0x100>)
 8004e08:	889b      	ldrh	r3, [r3, #4]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f8      	beq.n	8004e06 <RTC_INIT+0x7a>
		RTC->CRL |= RTC_CRL_CNF;		// разрешение записи в регистры RTC
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <RTC_INIT+0x100>)
 8004e16:	889b      	ldrh	r3, [r3, #4]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <RTC_INIT+0x100>)
 8004e1c:	f043 0310 	orr.w	r3, r3, #16
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	8093      	strh	r3, [r2, #4]
		RTC->PRLL = 0x7FFF;		// настройка делителя на 32768
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <RTC_INIT+0x100>)
 8004e26:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004e2a:	819a      	strh	r2, [r3, #12]
		RTC->CRL &= ~RTC_CRL_CNF;	// запрет записи в регистры RTC
 8004e2c:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <RTC_INIT+0x100>)
 8004e2e:	889b      	ldrh	r3, [r3, #4]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <RTC_INIT+0x100>)
 8004e34:	f023 0310 	bic.w	r3, r3, #16
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8093      	strh	r3, [r2, #4]
		while(!(RTC->CRL&RTC_CRL_RTOFF));	// ожидание конца записи
 8004e3c:	bf00      	nop
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <RTC_INIT+0x100>)
 8004e40:	889b      	ldrh	r3, [r3, #4]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f8      	beq.n	8004e3e <RTC_INIT+0xb2>
		RTC->CRL &= (uint16_t)~RTC_CRL_CNF;		//синхронизация RTC
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <RTC_INIT+0x100>)
 8004e4e:	889b      	ldrh	r3, [r3, #4]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <RTC_INIT+0x100>)
 8004e54:	f023 0310 	bic.w	r3, r3, #16
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8093      	strh	r3, [r2, #4]
		while((RTC->CRL&RTC_CRL_RSF) != RTC_CRL_RSF){}	// ожидание синхронизации
 8004e5c:	bf00      	nop
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <RTC_INIT+0x100>)
 8004e60:	889b      	ldrh	r3, [r3, #4]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d1f8      	bne.n	8004e5e <RTC_INIT+0xd2>
		PWR->CR &= ~(PWR_CR_DBP);	// запрет доступа к Backup области
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <RTC_INIT+0xf8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <RTC_INIT+0xf8>)
 8004e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e76:	6013      	str	r3, [r2, #0]

	}
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40007000 	.word	0x40007000
 8004e88:	40006c00 	.word	0x40006c00
 8004e8c:	40002800 	.word	0x40002800

08004e90 <RTC_GET_COUNTER>:


uint32_t RTC_GET_COUNTER(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	return (uint32_t)((RTC->CNTH << 16) | RTC->CNTL);	// получение значения счетчика
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <RTC_GET_COUNTER+0x1c>)
 8004e96:	8b1b      	ldrh	r3, [r3, #24]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4a03      	ldr	r2, [pc, #12]	; (8004eac <RTC_GET_COUNTER+0x1c>)
 8004e9e:	8b92      	ldrh	r2, [r2, #28]
 8004ea0:	b292      	uxth	r2, r2
 8004ea2:	4313      	orrs	r3, r2
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	40002800 	.word	0x40002800

08004eb0 <RTC_SET_COUNTER>:

void RTC_SET_COUNTER(uint32_t count)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;	// включение тактирования PWR и Backup
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <RTC_SET_COUNTER+0x88>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <RTC_SET_COUNTER+0x88>)
 8004ebe:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8004ec2:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;	// разрешение доступа к Backup области
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <RTC_SET_COUNTER+0x8c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <RTC_SET_COUNTER+0x8c>)
 8004eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ece:	6013      	str	r3, [r2, #0]
	while(!(RTC->CRL & RTC_CRL_RTOFF)); // проверка конца изменения регистров RTC
 8004ed0:	bf00      	nop
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004ed4:	889b      	ldrh	r3, [r3, #4]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f8      	beq.n	8004ed2 <RTC_SET_COUNTER+0x22>
	RTC->CRL |= RTC_CRL_CNF;	// разрешение записи в регистры RTC
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004ee2:	889b      	ldrh	r3, [r3, #4]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004ee8:	f043 0310 	orr.w	r3, r3, #16
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8093      	strh	r3, [r2, #4]
	RTC->CNTH = count >> 16;	// запись нового значения счетного регистра
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	0c1a      	lsrs	r2, r3, #16
 8004ef4:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	831a      	strh	r2, [r3, #24]
	RTC->CNTL = count;
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	b292      	uxth	r2, r2
 8004f00:	839a      	strh	r2, [r3, #28]
	RTC->CRL &= ~RTC_CRL_CNF;		// запрет записи в регистры RTC
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004f04:	889b      	ldrh	r3, [r3, #4]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4a0d      	ldr	r2, [pc, #52]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004f0a:	f023 0310 	bic.w	r3, r3, #16
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8093      	strh	r3, [r2, #4]
	while(!(RTC->CRL & RTC_CRL_RTOFF));	// ожидание конца записи
 8004f12:	bf00      	nop
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <RTC_SET_COUNTER+0x90>)
 8004f16:	889b      	ldrh	r3, [r3, #4]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f8      	beq.n	8004f14 <RTC_SET_COUNTER+0x64>
	PWR->CR &= ~PWR_CR_DBP;		// запрет доступа к Backup области
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <RTC_SET_COUNTER+0x8c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a05      	ldr	r2, [pc, #20]	; (8004f3c <RTC_SET_COUNTER+0x8c>)
 8004f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2c:	6013      	str	r3, [r2, #0]

}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	40002800 	.word	0x40002800

08004f44 <timer_to_cal>:
#include "rtc_time.h"

void timer_to_cal (unsigned long timer, rtc_cal * rtc_time)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	char b;
	char c;
	char d;
	unsigned long time;

	time = timer%SEC_A_DAY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a65      	ldr	r2, [pc, #404]	; (80050e8 <timer_to_cal+0x1a4>)
 8004f52:	fba2 1203 	umull	r1, r2, r2, r3
 8004f56:	0c12      	lsrs	r2, r2, #16
 8004f58:	4964      	ldr	r1, [pc, #400]	; (80050ec <timer_to_cal+0x1a8>)
 8004f5a:	fb01 f202 	mul.w	r2, r1, r2
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
	a = ((timer+43200)/(86400>>1)) + (2440587<<1) + 1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8004f68:	33c0      	adds	r3, #192	; 0xc0
 8004f6a:	4a5f      	ldr	r2, [pc, #380]	; (80050e8 <timer_to_cal+0x1a4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	0bda      	lsrs	r2, r3, #15
 8004f72:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <timer_to_cal+0x1ac>)
 8004f74:	4413      	add	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
	a>>=1;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	613b      	str	r3, [r7, #16]
	rtc_time->wday = a%7;
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4b5c      	ldr	r3, [pc, #368]	; (80050f4 <timer_to_cal+0x1b0>)
 8004f82:	fba3 1302 	umull	r1, r3, r3, r2
 8004f86:	1ad1      	subs	r1, r2, r3
 8004f88:	0849      	lsrs	r1, r1, #1
 8004f8a:	440b      	add	r3, r1
 8004f8c:	0899      	lsrs	r1, r3, #2
 8004f8e:	460b      	mov	r3, r1
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	1a5b      	subs	r3, r3, r1
 8004f94:	1ad1      	subs	r1, r2, r3
 8004f96:	b2ca      	uxtb	r2, r1
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	725a      	strb	r2, [r3, #9]
	a+=32044;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8004fa2:	332c      	adds	r3, #44	; 0x2c
 8004fa4:	613b      	str	r3, [r7, #16]
	b=(4*a+3)/146097;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	3303      	adds	r3, #3
 8004fac:	4a52      	ldr	r2, [pc, #328]	; (80050f8 <timer_to_cal+0x1b4>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	0bdb      	lsrs	r3, r3, #15
 8004fb4:	73fb      	strb	r3, [r7, #15]
	a=a-(146097*b)/4;
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	4a50      	ldr	r2, [pc, #320]	; (80050fc <timer_to_cal+0x1b8>)
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da00      	bge.n	8004fc4 <timer_to_cal+0x80>
 8004fc2:	3303      	adds	r3, #3
 8004fc4:	109b      	asrs	r3, r3, #2
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
	c=(4*a+3)/1461;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	3303      	adds	r3, #3
 8004fd4:	4a4a      	ldr	r2, [pc, #296]	; (8005100 <timer_to_cal+0x1bc>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	09db      	lsrs	r3, r3, #7
 8004fdc:	73bb      	strb	r3, [r7, #14]
	a=a-(1461*c)/4;
 8004fde:	7bbb      	ldrb	r3, [r7, #14]
 8004fe0:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	da00      	bge.n	8004fee <timer_to_cal+0xaa>
 8004fec:	3303      	adds	r3, #3
 8004fee:	109b      	asrs	r3, r3, #2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
	d=(5*a+2)/153;
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	3302      	adds	r3, #2
 8005002:	4a40      	ldr	r2, [pc, #256]	; (8005104 <timer_to_cal+0x1c0>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	09db      	lsrs	r3, r3, #7
 800500a:	737b      	strb	r3, [r7, #13]
	rtc_time->mday=a-(153*d+2)/5+1;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	b2d9      	uxtb	r1, r3
 8005010:	7b7a      	ldrb	r2, [r7, #13]
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	4413      	add	r3, r2
 8005018:	011a      	lsls	r2, r3, #4
 800501a:	4413      	add	r3, r2
 800501c:	3302      	adds	r3, #2
 800501e:	4a3a      	ldr	r2, [pc, #232]	; (8005108 <timer_to_cal+0x1c4>)
 8005020:	fb82 0203 	smull	r0, r2, r2, r3
 8005024:	1052      	asrs	r2, r2, #1
 8005026:	17db      	asrs	r3, r3, #31
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	1acb      	subs	r3, r1, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3301      	adds	r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	715a      	strb	r2, [r3, #5]
	rtc_time->mon=d+3-12*(d/10);
 8005038:	7b7b      	ldrb	r3, [r7, #13]
 800503a:	4a34      	ldr	r2, [pc, #208]	; (800510c <timer_to_cal+0x1c8>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	b2da      	uxtb	r2, r3
 800504e:	7b7b      	ldrb	r3, [r7, #13]
 8005050:	4413      	add	r3, r2
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3303      	adds	r3, #3
 8005056:	b2da      	uxtb	r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	711a      	strb	r2, [r3, #4]
	rtc_time->year=100*b+c-4800+(d/10);
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2264      	movs	r2, #100	; 0x64
 8005060:	fb03 f202 	mul.w	r2, r3, r2
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	4413      	add	r3, r2
 8005068:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 800506c:	7b7a      	ldrb	r2, [r7, #13]
 800506e:	4927      	ldr	r1, [pc, #156]	; (800510c <timer_to_cal+0x1c8>)
 8005070:	fba1 1202 	umull	r1, r2, r1, r2
 8005074:	08d2      	lsrs	r2, r2, #3
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	441a      	add	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	601a      	str	r2, [r3, #0]
	rtc_time->hour=time/3600;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	4a23      	ldr	r2, [pc, #140]	; (8005110 <timer_to_cal+0x1cc>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0adb      	lsrs	r3, r3, #11
 8005088:	b2da      	uxtb	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	719a      	strb	r2, [r3, #6]
	rtc_time->min=(time%3600)/60;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <timer_to_cal+0x1cc>)
 8005092:	fba3 1302 	umull	r1, r3, r3, r2
 8005096:	0adb      	lsrs	r3, r3, #11
 8005098:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <timer_to_cal+0x1d0>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	71da      	strb	r2, [r3, #7]
	rtc_time->sec=(time%3600)%60;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4a17      	ldr	r2, [pc, #92]	; (8005110 <timer_to_cal+0x1cc>)
 80050b4:	fba2 1203 	umull	r1, r2, r2, r3
 80050b8:	0ad2      	lsrs	r2, r2, #11
 80050ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80050be:	fb01 f202 	mul.w	r2, r1, r2
 80050c2:	1a9a      	subs	r2, r3, r2
 80050c4:	4b13      	ldr	r3, [pc, #76]	; (8005114 <timer_to_cal+0x1d0>)
 80050c6:	fba3 1302 	umull	r1, r3, r3, r2
 80050ca:	0959      	lsrs	r1, r3, #5
 80050cc:	460b      	mov	r3, r1
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	1a5b      	subs	r3, r3, r1
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	1ad1      	subs	r1, r2, r3
 80050d6:	b2ca      	uxtb	r2, r1
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	721a      	strb	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	c22e4507 	.word	0xc22e4507
 80050ec:	00015180 	.word	0x00015180
 80050f0:	004a7b17 	.word	0x004a7b17
 80050f4:	24924925 	.word	0x24924925
 80050f8:	396b06bd 	.word	0x396b06bd
 80050fc:	00023ab1 	.word	0x00023ab1
 8005100:	166db073 	.word	0x166db073
 8005104:	d62b80d7 	.word	0xd62b80d7
 8005108:	66666667 	.word	0x66666667
 800510c:	cccccccd 	.word	0xcccccccd
 8005110:	91a2b3c5 	.word	0x91a2b3c5
 8005114:	88888889 	.word	0x88888889

08005118 <cal_to_timer>:

unsigned long cal_to_timer (rtc_cal * rtc_time)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	int y;
	char m;
	unsigned long Uday;
	unsigned long time;

	a=((14-rtc_time->mon)/12);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	791b      	ldrb	r3, [r3, #4]
 8005124:	f1c3 030e 	rsb	r3, r3, #14
 8005128:	4a35      	ldr	r2, [pc, #212]	; (8005200 <cal_to_timer+0xe8>)
 800512a:	fb82 1203 	smull	r1, r2, r2, r3
 800512e:	1052      	asrs	r2, r2, #1
 8005130:	17db      	asrs	r3, r3, #31
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	77fb      	strb	r3, [r7, #31]
	y=rtc_time->year+4800-a;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
 800513e:	7ffb      	ldrb	r3, [r7, #31]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	61bb      	str	r3, [r7, #24]
	m=rtc_time->mon+(12*a)-3;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	791a      	ldrb	r2, [r3, #4]
 8005148:	7ffb      	ldrb	r3, [r7, #31]
 800514a:	4619      	mov	r1, r3
 800514c:	0049      	lsls	r1, r1, #1
 800514e:	440b      	add	r3, r1
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	b2db      	uxtb	r3, r3
 8005154:	4413      	add	r3, r2
 8005156:	b2db      	uxtb	r3, r3
 8005158:	3b03      	subs	r3, #3
 800515a:	75fb      	strb	r3, [r7, #23]
	Uday=(rtc_time->mday+((153*m+2)/5)+365*y+(y/4)-(y/100)+(y/400)-32045)-2440588;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	795b      	ldrb	r3, [r3, #5]
 8005160:	4619      	mov	r1, r3
 8005162:	7dfa      	ldrb	r2, [r7, #23]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	011a      	lsls	r2, r3, #4
 800516c:	4413      	add	r3, r2
 800516e:	3302      	adds	r3, #2
 8005170:	4a24      	ldr	r2, [pc, #144]	; (8005204 <cal_to_timer+0xec>)
 8005172:	fb82 0203 	smull	r0, r2, r2, r3
 8005176:	1052      	asrs	r2, r2, #1
 8005178:	17db      	asrs	r3, r3, #31
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	18ca      	adds	r2, r1, r3
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f240 116d 	movw	r1, #365	; 0x16d
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	441a      	add	r2, r3
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	da00      	bge.n	8005192 <cal_to_timer+0x7a>
 8005190:	3303      	adds	r3, #3
 8005192:	109b      	asrs	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	491b      	ldr	r1, [pc, #108]	; (8005208 <cal_to_timer+0xf0>)
 800519a:	fb81 0103 	smull	r0, r1, r1, r3
 800519e:	1149      	asrs	r1, r1, #5
 80051a0:	17db      	asrs	r3, r3, #31
 80051a2:	1a5b      	subs	r3, r3, r1
 80051a4:	441a      	add	r2, r3
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	4917      	ldr	r1, [pc, #92]	; (8005208 <cal_to_timer+0xf0>)
 80051aa:	fb81 0103 	smull	r0, r1, r1, r3
 80051ae:	11c9      	asrs	r1, r1, #7
 80051b0:	17db      	asrs	r3, r3, #31
 80051b2:	1acb      	subs	r3, r1, r3
 80051b4:	441a      	add	r2, r3
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <cal_to_timer+0xf4>)
 80051b8:	4413      	add	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
	time=Uday*86400;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4a14      	ldr	r2, [pc, #80]	; (8005210 <cal_to_timer+0xf8>)
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	60fb      	str	r3, [r7, #12]
	time+=rtc_time->sec+rtc_time->min*60+rtc_time->hour*3600;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7a1b      	ldrb	r3, [r3, #8]
 80051ca:	4619      	mov	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	79db      	ldrb	r3, [r3, #7]
 80051d0:	461a      	mov	r2, r3
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	18ca      	adds	r2, r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	799b      	ldrb	r3, [r3, #6]
 80051e0:	4619      	mov	r1, r3
 80051e2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	4413      	add	r3, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
	return time;
 80051f4:	68fb      	ldr	r3, [r7, #12]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3724      	adds	r7, #36	; 0x24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	2aaaaaab 	.word	0x2aaaaaab
 8005204:	66666667 	.word	0x66666667
 8005208:	51eb851f 	.word	0x51eb851f
 800520c:	ffda4547 	.word	0xffda4547
 8005210:	00015180 	.word	0x00015180

08005214 <convert_time_from_android>:

uint8_t convert_time_from_android(rtc_cal *rtc_time, char *date){
 8005214:	b580      	push	{r7, lr}
 8005216:	b096      	sub	sp, #88	; 0x58
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]

	//*xxx*yyyy-MM-dd HH:mm:ss

	uint8_t res_date = DATE_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int s;
	char buf[64];

	char *p_rtc = date;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	653b      	str	r3, [r7, #80]	; 0x50

	*p_rtc++;
 8005228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522a:	3301      	adds	r3, #1
 800522c:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 800522e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005230:	3301      	adds	r3, #1
 8005232:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8005234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005236:	3301      	adds	r3, #1
 8005238:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 800523a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523c:	3301      	adds	r3, #1
 800523e:	653b      	str	r3, [r7, #80]	; 0x50
	*p_rtc++;
 8005240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005242:	3301      	adds	r3, #1
 8005244:	653b      	str	r3, [r7, #80]	; 0x50

	for(s = 0; s < 4; s++){
 8005246:	2300      	movs	r3, #0
 8005248:	657b      	str	r3, [r7, #84]	; 0x54
 800524a:	e00c      	b.n	8005266 <convert_time_from_android+0x52>
		buf[s] = *p_rtc++;
 800524c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	653a      	str	r2, [r7, #80]	; 0x50
 8005252:	7819      	ldrb	r1, [r3, #0]
 8005254:	f107 020c 	add.w	r2, r7, #12
 8005258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525a:	4413      	add	r3, r2
 800525c:	460a      	mov	r2, r1
 800525e:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 4; s++){
 8005260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005262:	3301      	adds	r3, #1
 8005264:	657b      	str	r3, [r7, #84]	; 0x54
 8005266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005268:	2b03      	cmp	r3, #3
 800526a:	ddef      	ble.n	800524c <convert_time_from_android+0x38>
	}
	rtc_time->year=atoi(buf);
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	4618      	mov	r0, r3
 8005272:	f002 f82f 	bl	80072d4 <atoi>
 8005276:	4602      	mov	r2, r0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	601a      	str	r2, [r3, #0]
			if(rtc_time->year == 0 || rtc_time->year < 1980)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <convert_time_from_android+0x7c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800528c:	4293      	cmp	r3, r2
 800528e:	dc05      	bgt.n	800529c <convert_time_from_android+0x88>
				return res_date = INCORRECT_YEAR;
 8005290:	2301      	movs	r3, #1
 8005292:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005296:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800529a:	e0f4      	b.n	8005486 <convert_time_from_android+0x272>
	*p_rtc++;
 800529c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529e:	3301      	adds	r3, #1
 80052a0:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 80052a2:	f107 030c 	add.w	r3, r7, #12
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fa ff50 	bl	800014c <strlen>
 80052ac:	4602      	mov	r2, r0
 80052ae:	f107 030c 	add.w	r3, r7, #12
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f002 f873 	bl	80073a0 <memset>
	for(s = 0; s < 2; s++){
 80052ba:	2300      	movs	r3, #0
 80052bc:	657b      	str	r3, [r7, #84]	; 0x54
 80052be:	e00c      	b.n	80052da <convert_time_from_android+0xc6>
		buf[s] = *p_rtc++;
 80052c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	653a      	str	r2, [r7, #80]	; 0x50
 80052c6:	7819      	ldrb	r1, [r3, #0]
 80052c8:	f107 020c 	add.w	r2, r7, #12
 80052cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ce:	4413      	add	r3, r2
 80052d0:	460a      	mov	r2, r1
 80052d2:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 80052d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d6:	3301      	adds	r3, #1
 80052d8:	657b      	str	r3, [r7, #84]	; 0x54
 80052da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052dc:	2b01      	cmp	r3, #1
 80052de:	ddef      	ble.n	80052c0 <convert_time_from_android+0xac>
	}
	rtc_time->mon=(char)atoi(buf);
 80052e0:	f107 030c 	add.w	r3, r7, #12
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 fff5 	bl	80072d4 <atoi>
 80052ea:	4603      	mov	r3, r0
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	711a      	strb	r2, [r3, #4]
			if(rtc_time->mon == 0 || rtc_time->mon > 12)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	791b      	ldrb	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <convert_time_from_android+0xee>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	791b      	ldrb	r3, [r3, #4]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d905      	bls.n	800530e <convert_time_from_android+0xfa>
					return res_date = INCORRECT_MONTH;
 8005302:	2302      	movs	r3, #2
 8005304:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005308:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800530c:	e0bb      	b.n	8005486 <convert_time_from_android+0x272>
	*p_rtc++;
 800530e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005310:	3301      	adds	r3, #1
 8005312:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005314:	f107 030c 	add.w	r3, r7, #12
 8005318:	4618      	mov	r0, r3
 800531a:	f7fa ff17 	bl	800014c <strlen>
 800531e:	4602      	mov	r2, r0
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f002 f83a 	bl	80073a0 <memset>
	for(s = 0; s < 2; s++){
 800532c:	2300      	movs	r3, #0
 800532e:	657b      	str	r3, [r7, #84]	; 0x54
 8005330:	e00c      	b.n	800534c <convert_time_from_android+0x138>
		buf[s] = *p_rtc++;
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	653a      	str	r2, [r7, #80]	; 0x50
 8005338:	7819      	ldrb	r1, [r3, #0]
 800533a:	f107 020c 	add.w	r2, r7, #12
 800533e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005340:	4413      	add	r3, r2
 8005342:	460a      	mov	r2, r1
 8005344:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8005346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005348:	3301      	adds	r3, #1
 800534a:	657b      	str	r3, [r7, #84]	; 0x54
 800534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534e:	2b01      	cmp	r3, #1
 8005350:	ddef      	ble.n	8005332 <convert_time_from_android+0x11e>
	}
	rtc_time->mday=(char)atoi(buf);
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	4618      	mov	r0, r3
 8005358:	f001 ffbc 	bl	80072d4 <atoi>
 800535c:	4603      	mov	r3, r0
 800535e:	b2da      	uxtb	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	715a      	strb	r2, [r3, #5]
			if(rtc_time->mday == 0 || rtc_time->mday > 31)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	795b      	ldrb	r3, [r3, #5]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <convert_time_from_android+0x160>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	795b      	ldrb	r3, [r3, #5]
 8005370:	2b1f      	cmp	r3, #31
 8005372:	d905      	bls.n	8005380 <convert_time_from_android+0x16c>
					return res_date = INCORRECT_DAY;
 8005374:	2303      	movs	r3, #3
 8005376:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800537a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800537e:	e082      	b.n	8005486 <convert_time_from_android+0x272>
	*p_rtc++;
 8005380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005382:	3301      	adds	r3, #1
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	4618      	mov	r0, r3
 800538c:	f7fa fede 	bl	800014c <strlen>
 8005390:	4602      	mov	r2, r0
 8005392:	f107 030c 	add.w	r3, r7, #12
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f002 f801 	bl	80073a0 <memset>
	for(s = 0; s < 2; s++){
 800539e:	2300      	movs	r3, #0
 80053a0:	657b      	str	r3, [r7, #84]	; 0x54
 80053a2:	e00c      	b.n	80053be <convert_time_from_android+0x1aa>
		buf[s] = *p_rtc++;
 80053a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	653a      	str	r2, [r7, #80]	; 0x50
 80053aa:	7819      	ldrb	r1, [r3, #0]
 80053ac:	f107 020c 	add.w	r2, r7, #12
 80053b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b2:	4413      	add	r3, r2
 80053b4:	460a      	mov	r2, r1
 80053b6:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 80053b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ba:	3301      	adds	r3, #1
 80053bc:	657b      	str	r3, [r7, #84]	; 0x54
 80053be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	ddef      	ble.n	80053a4 <convert_time_from_android+0x190>
	}
	rtc_time->hour=(char)atoi(buf);
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 ff83 	bl	80072d4 <atoi>
 80053ce:	4603      	mov	r3, r0
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	719a      	strb	r2, [r3, #6]
	*p_rtc++;
 80053d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d8:	3301      	adds	r3, #1
 80053da:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 80053dc:	f107 030c 	add.w	r3, r7, #12
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fa feb3 	bl	800014c <strlen>
 80053e6:	4602      	mov	r2, r0
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 ffd6 	bl	80073a0 <memset>
	for(s = 0; s < 2; s++){
 80053f4:	2300      	movs	r3, #0
 80053f6:	657b      	str	r3, [r7, #84]	; 0x54
 80053f8:	e00c      	b.n	8005414 <convert_time_from_android+0x200>
		buf[s] = *p_rtc++;
 80053fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	653a      	str	r2, [r7, #80]	; 0x50
 8005400:	7819      	ldrb	r1, [r3, #0]
 8005402:	f107 020c 	add.w	r2, r7, #12
 8005406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005408:	4413      	add	r3, r2
 800540a:	460a      	mov	r2, r1
 800540c:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 800540e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005410:	3301      	adds	r3, #1
 8005412:	657b      	str	r3, [r7, #84]	; 0x54
 8005414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005416:	2b01      	cmp	r3, #1
 8005418:	ddef      	ble.n	80053fa <convert_time_from_android+0x1e6>
	}
	rtc_time->min=(char)atoi(buf);
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	4618      	mov	r0, r3
 8005420:	f001 ff58 	bl	80072d4 <atoi>
 8005424:	4603      	mov	r3, r0
 8005426:	b2da      	uxtb	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	71da      	strb	r2, [r3, #7]
	*p_rtc++;
 800542c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542e:	3301      	adds	r3, #1
 8005430:	653b      	str	r3, [r7, #80]	; 0x50
	memset(buf,0,strlen(buf));
 8005432:	f107 030c 	add.w	r3, r7, #12
 8005436:	4618      	mov	r0, r3
 8005438:	f7fa fe88 	bl	800014c <strlen>
 800543c:	4602      	mov	r2, r0
 800543e:	f107 030c 	add.w	r3, r7, #12
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f001 ffab 	bl	80073a0 <memset>
	for(s = 0; s < 2; s++){
 800544a:	2300      	movs	r3, #0
 800544c:	657b      	str	r3, [r7, #84]	; 0x54
 800544e:	e00c      	b.n	800546a <convert_time_from_android+0x256>
		buf[s] = *p_rtc++;
 8005450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	653a      	str	r2, [r7, #80]	; 0x50
 8005456:	7819      	ldrb	r1, [r3, #0]
 8005458:	f107 020c 	add.w	r2, r7, #12
 800545c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545e:	4413      	add	r3, r2
 8005460:	460a      	mov	r2, r1
 8005462:	701a      	strb	r2, [r3, #0]
	for(s = 0; s < 2; s++){
 8005464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005466:	3301      	adds	r3, #1
 8005468:	657b      	str	r3, [r7, #84]	; 0x54
 800546a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546c:	2b01      	cmp	r3, #1
 800546e:	ddef      	ble.n	8005450 <convert_time_from_android+0x23c>
	}
	rtc_time->sec=(char)atoi(buf);
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	4618      	mov	r0, r3
 8005476:	f001 ff2d 	bl	80072d4 <atoi>
 800547a:	4603      	mov	r3, r0
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	721a      	strb	r2, [r3, #8]

	return res_date;
 8005482:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
//	if(date[])

}
 8005486:	4618      	mov	r0, r3
 8005488:	3758      	adds	r7, #88	; 0x58
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <Write_data_2Flash>:


}


void Write_data_2Flash(uint32_t addr, uint16_t cnt_flash, uint8_t* pBuf){
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	460b      	mov	r3, r1
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	817b      	strh	r3, [r7, #10]

	wr_en = spiFlash_wrtEnbl();
 800549e:	f000 fbc5 	bl	8005c2c <spiFlash_wrtEnbl>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <Write_data_2Flash+0x98>)
 80054a8:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80054aa:	2005      	movs	r0, #5
 80054ac:	f000 fb8c 	bl	8005bc8 <spiFlash_readStatus>
 80054b0:	4603      	mov	r3, r0
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <Write_data_2Flash+0x9c>)
 80054b6:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80054b8:	2035      	movs	r0, #53	; 0x35
 80054ba:	f000 fb85 	bl	8005bc8 <spiFlash_readStatus>
 80054be:	4603      	mov	r3, r0
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <Write_data_2Flash+0xa0>)
 80054c4:	801a      	strh	r2, [r3, #0]
		if(stat_reg1!=2){
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <Write_data_2Flash+0x9c>)
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d027      	beq.n	800551e <Write_data_2Flash+0x8e>
			wr_stat_en = spiFlash_wrtStatReg();
 80054ce:	f000 fbd9 	bl	8005c84 <spiFlash_wrtStatReg>
 80054d2:	4603      	mov	r3, r0
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <Write_data_2Flash+0xa4>)
 80054d8:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80054da:	2005      	movs	r0, #5
 80054dc:	f000 fb74 	bl	8005bc8 <spiFlash_readStatus>
 80054e0:	4603      	mov	r3, r0
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	4b11      	ldr	r3, [pc, #68]	; (800552c <Write_data_2Flash+0x9c>)
 80054e6:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80054e8:	2035      	movs	r0, #53	; 0x35
 80054ea:	f000 fb6d 	bl	8005bc8 <spiFlash_readStatus>
 80054ee:	4603      	mov	r3, r0
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <Write_data_2Flash+0xa0>)
 80054f4:	801a      	strh	r2, [r3, #0]
			wr_en = spiFlash_wrtEnbl();
 80054f6:	f000 fb99 	bl	8005c2c <spiFlash_wrtEnbl>
 80054fa:	4603      	mov	r3, r0
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <Write_data_2Flash+0x98>)
 8005500:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005502:	2005      	movs	r0, #5
 8005504:	f000 fb60 	bl	8005bc8 <spiFlash_readStatus>
 8005508:	4603      	mov	r3, r0
 800550a:	b29a      	uxth	r2, r3
 800550c:	4b07      	ldr	r3, [pc, #28]	; (800552c <Write_data_2Flash+0x9c>)
 800550e:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005510:	2035      	movs	r0, #53	; 0x35
 8005512:	f000 fb59 	bl	8005bc8 <spiFlash_readStatus>
 8005516:	4603      	mov	r3, r0
 8005518:	b29a      	uxth	r2, r3
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <Write_data_2Flash+0xa0>)
 800551c:	801a      	strh	r2, [r3, #0]
						}



}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000d1c 	.word	0x20000d1c
 800552c:	20000d18 	.word	0x20000d18
 8005530:	20000d1a 	.word	0x20000d1a
 8005534:	20000d1d 	.word	0x20000d1d

08005538 <Set_Cnt_to_Flash>:
	wr_stat_en = spiFlash_wrtStatReg();
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
}

void Set_Cnt_to_Flash(uint32_t addr, uint16_t cnt_flash, uint8_t* pBuf){
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	460b      	mov	r3, r1
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	817b      	strh	r3, [r7, #10]

	wr_en = spiFlash_wrtEnbl();
 8005546:	f000 fb71 	bl	8005c2c <spiFlash_wrtEnbl>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	4b2a      	ldr	r3, [pc, #168]	; (80055f8 <Set_Cnt_to_Flash+0xc0>)
 8005550:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005552:	2005      	movs	r0, #5
 8005554:	f000 fb38 	bl	8005bc8 <spiFlash_readStatus>
 8005558:	4603      	mov	r3, r0
 800555a:	b29a      	uxth	r2, r3
 800555c:	4b27      	ldr	r3, [pc, #156]	; (80055fc <Set_Cnt_to_Flash+0xc4>)
 800555e:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005560:	2035      	movs	r0, #53	; 0x35
 8005562:	f000 fb31 	bl	8005bc8 <spiFlash_readStatus>
 8005566:	4603      	mov	r3, r0
 8005568:	b29a      	uxth	r2, r3
 800556a:	4b25      	ldr	r3, [pc, #148]	; (8005600 <Set_Cnt_to_Flash+0xc8>)
 800556c:	801a      	strh	r2, [r3, #0]
		if(stat_reg1!=2){
 800556e:	4b23      	ldr	r3, [pc, #140]	; (80055fc <Set_Cnt_to_Flash+0xc4>)
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d027      	beq.n	80055c6 <Set_Cnt_to_Flash+0x8e>
			wr_stat_en = spiFlash_wrtStatReg();
 8005576:	f000 fb85 	bl	8005c84 <spiFlash_wrtStatReg>
 800557a:	4603      	mov	r3, r0
 800557c:	461a      	mov	r2, r3
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <Set_Cnt_to_Flash+0xcc>)
 8005580:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005582:	2005      	movs	r0, #5
 8005584:	f000 fb20 	bl	8005bc8 <spiFlash_readStatus>
 8005588:	4603      	mov	r3, r0
 800558a:	b29a      	uxth	r2, r3
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <Set_Cnt_to_Flash+0xc4>)
 800558e:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005590:	2035      	movs	r0, #53	; 0x35
 8005592:	f000 fb19 	bl	8005bc8 <spiFlash_readStatus>
 8005596:	4603      	mov	r3, r0
 8005598:	b29a      	uxth	r2, r3
 800559a:	4b19      	ldr	r3, [pc, #100]	; (8005600 <Set_Cnt_to_Flash+0xc8>)
 800559c:	801a      	strh	r2, [r3, #0]
			wr_en = spiFlash_wrtEnbl();
 800559e:	f000 fb45 	bl	8005c2c <spiFlash_wrtEnbl>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <Set_Cnt_to_Flash+0xc0>)
 80055a8:	701a      	strb	r2, [r3, #0]
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80055aa:	2005      	movs	r0, #5
 80055ac:	f000 fb0c 	bl	8005bc8 <spiFlash_readStatus>
 80055b0:	4603      	mov	r3, r0
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <Set_Cnt_to_Flash+0xc4>)
 80055b6:	801a      	strh	r2, [r3, #0]
			stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 80055b8:	2035      	movs	r0, #53	; 0x35
 80055ba:	f000 fb05 	bl	8005bc8 <spiFlash_readStatus>
 80055be:	4603      	mov	r3, r0
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <Set_Cnt_to_Flash+0xc8>)
 80055c4:	801a      	strh	r2, [r3, #0]
						}
	spiFlash_write(addr, cnt_flash, pBuf);
 80055c6:	897b      	ldrh	r3, [r7, #10]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4619      	mov	r1, r3
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fa9d 	bl	8005b0c <spiFlash_write>
	do {
			stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 80055d2:	2005      	movs	r0, #5
 80055d4:	f000 faf8 	bl	8005bc8 <spiFlash_readStatus>
 80055d8:	4603      	mov	r3, r0
 80055da:	b29a      	uxth	r2, r3
 80055dc:	4b07      	ldr	r3, [pc, #28]	; (80055fc <Set_Cnt_to_Flash+0xc4>)
 80055de:	801a      	strh	r2, [r3, #0]
	} while (stat_reg1 & 0x01 );
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <Set_Cnt_to_Flash+0xc4>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f2      	bne.n	80055d2 <Set_Cnt_to_Flash+0x9a>
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000d1c 	.word	0x20000d1c
 80055fc:	20000d18 	.word	0x20000d18
 8005600:	20000d1a 	.word	0x20000d1a
 8005604:	20000d1d 	.word	0x20000d1d

08005608 <Safe_Flash_Erase>:

void Safe_Flash_Erase(uint32_t erase_addr){
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	wr_en = spiFlash_wrtEnbl();
 8005610:	f000 fb0c 	bl	8005c2c <spiFlash_wrtEnbl>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <Safe_Flash_Erase+0xbc>)
 800561a:	701a      	strb	r2, [r3, #0]
	stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800561c:	2005      	movs	r0, #5
 800561e:	f000 fad3 	bl	8005bc8 <spiFlash_readStatus>
 8005622:	4603      	mov	r3, r0
 8005624:	b29a      	uxth	r2, r3
 8005626:	4b28      	ldr	r3, [pc, #160]	; (80056c8 <Safe_Flash_Erase+0xc0>)
 8005628:	801a      	strh	r2, [r3, #0]
	stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 800562a:	2035      	movs	r0, #53	; 0x35
 800562c:	f000 facc 	bl	8005bc8 <spiFlash_readStatus>
 8005630:	4603      	mov	r3, r0
 8005632:	b29a      	uxth	r2, r3
 8005634:	4b25      	ldr	r3, [pc, #148]	; (80056cc <Safe_Flash_Erase+0xc4>)
 8005636:	801a      	strh	r2, [r3, #0]
	if(stat_reg1!=2){
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <Safe_Flash_Erase+0xc0>)
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d027      	beq.n	8005690 <Safe_Flash_Erase+0x88>
		wr_stat_en = spiFlash_wrtStatReg();
 8005640:	f000 fb20 	bl	8005c84 <spiFlash_wrtStatReg>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <Safe_Flash_Erase+0xc8>)
 800564a:	701a      	strb	r2, [r3, #0]
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800564c:	2005      	movs	r0, #5
 800564e:	f000 fabb 	bl	8005bc8 <spiFlash_readStatus>
 8005652:	4603      	mov	r3, r0
 8005654:	b29a      	uxth	r2, r3
 8005656:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <Safe_Flash_Erase+0xc0>)
 8005658:	801a      	strh	r2, [r3, #0]
		stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 800565a:	2035      	movs	r0, #53	; 0x35
 800565c:	f000 fab4 	bl	8005bc8 <spiFlash_readStatus>
 8005660:	4603      	mov	r3, r0
 8005662:	b29a      	uxth	r2, r3
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <Safe_Flash_Erase+0xc4>)
 8005666:	801a      	strh	r2, [r3, #0]
		wr_en = spiFlash_wrtEnbl();
 8005668:	f000 fae0 	bl	8005c2c <spiFlash_wrtEnbl>
 800566c:	4603      	mov	r3, r0
 800566e:	461a      	mov	r2, r3
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <Safe_Flash_Erase+0xbc>)
 8005672:	701a      	strb	r2, [r3, #0]
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 8005674:	2005      	movs	r0, #5
 8005676:	f000 faa7 	bl	8005bc8 <spiFlash_readStatus>
 800567a:	4603      	mov	r3, r0
 800567c:	b29a      	uxth	r2, r3
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <Safe_Flash_Erase+0xc0>)
 8005680:	801a      	strh	r2, [r3, #0]
		stat_reg2 = spiFlash_readStatus(CMD_READ_STATUS_REG2);
 8005682:	2035      	movs	r0, #53	; 0x35
 8005684:	f000 faa0 	bl	8005bc8 <spiFlash_readStatus>
 8005688:	4603      	mov	r3, r0
 800568a:	b29a      	uxth	r2, r3
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <Safe_Flash_Erase+0xc4>)
 800568e:	801a      	strh	r2, [r3, #0]
	}

	res_erase = spiFlash_eraseSector(erase_addr);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb27 	bl	8005ce4 <spiFlash_eraseSector>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <Safe_Flash_Erase+0xcc>)
 800569c:	701a      	strb	r2, [r3, #0]
	do {
		stat_reg1 = spiFlash_readStatus(CMD_READ_STATUS_REG1);
 800569e:	2005      	movs	r0, #5
 80056a0:	f000 fa92 	bl	8005bc8 <spiFlash_readStatus>
 80056a4:	4603      	mov	r3, r0
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <Safe_Flash_Erase+0xc0>)
 80056aa:	801a      	strh	r2, [r3, #0]
	} while (stat_reg1 & 0x01 );
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <Safe_Flash_Erase+0xc0>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f2      	bne.n	800569e <Safe_Flash_Erase+0x96>
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000d1c 	.word	0x20000d1c
 80056c8:	20000d18 	.word	0x20000d18
 80056cc:	20000d1a 	.word	0x20000d1a
 80056d0:	20000d1d 	.word	0x20000d1d
 80056d4:	20000924 	.word	0x20000924

080056d8 <NVIC_EnableIRQ>:
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2201      	movs	r2, #1
 80056ea:	fa02 f103 	lsl.w	r1, r2, r3
 80056ee:	4a05      	ldr	r2, [pc, #20]	; (8005704 <NVIC_EnableIRQ+0x2c>)
 80056f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	e000e100 	.word	0xe000e100

08005708 <NVIC_DisableIRQ>:
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	2201      	movs	r2, #1
 800571a:	fa02 f103 	lsl.w	r1, r2, r3
 800571e:	4a06      	ldr	r2, [pc, #24]	; (8005738 <NVIC_DisableIRQ+0x30>)
 8005720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	3320      	adds	r3, #32
 8005728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	e000e100 	.word	0xe000e100

0800573c <NVIC_SetPriority>:
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	6039      	str	r1, [r7, #0]
 8005746:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8005748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574c:	2b00      	cmp	r3, #0
 800574e:	da0b      	bge.n	8005768 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	490c      	ldr	r1, [pc, #48]	; (8005788 <NVIC_SetPriority+0x4c>)
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	3b04      	subs	r3, #4
 800575e:	0112      	lsls	r2, r2, #4
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	440b      	add	r3, r1
 8005764:	761a      	strb	r2, [r3, #24]
}
 8005766:	e009      	b.n	800577c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	4907      	ldr	r1, [pc, #28]	; (800578c <NVIC_SetPriority+0x50>)
 800576e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005772:	0112      	lsls	r2, r2, #4
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	440b      	add	r3, r1
 8005778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	e000ed00 	.word	0xe000ed00
 800578c:	e000e100 	.word	0xe000e100

08005790 <PN532_SPIInit>:

volatile uint8_t SpiActive;					// флаг активной передачи



void PN532_SPIInit(void){
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0

	SpiActive = 1;
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <PN532_SPIInit+0x88>)
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]



//------------------------------------------------------------------------------
	//SPI_StructInit( &SPI_PN532_InitStruct);
	SPI_Cmd(SPI2, DISABLE);
 800579c:	2100      	movs	r1, #0
 800579e:	481f      	ldr	r0, [pc, #124]	; (800581c <PN532_SPIInit+0x8c>)
 80057a0:	f000 ffa1 	bl	80066e6 <SPI_Cmd>
	NVIC_DisableIRQ(SPI2_IRQn);
 80057a4:	2024      	movs	r0, #36	; 0x24
 80057a6:	f7ff ffaf 	bl	8005708 <NVIC_DisableIRQ>

	/* Initialize the SPI_Direction member */
	SPI_PN532_InitStruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 80057aa:	2300      	movs	r3, #0
 80057ac:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_PN532_InitStruct.SPI_Mode = SPI_Mode_Master;
 80057ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80057b2:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_PN532_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80057b4:	2300      	movs	r3, #0
 80057b6:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_PN532_InitStruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 80057b8:	2300      	movs	r3, #0
 80057ba:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_PN532_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80057bc:	2300      	movs	r3, #0
 80057be:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_PN532_InitStruct.SPI_NSS = SPI_NSS_Hard;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 80057c0:	2300      	movs	r3, #0
 80057c2:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_PN532_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 80057c4:	2338      	movs	r3, #56	; 0x38
 80057c6:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_PN532_InitStruct.SPI_FirstBit = SPI_FirstBit_LSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_PN532_InitStruct.SPI_CRCPolynomial = 7;
 80057cc:	2307      	movs	r3, #7
 80057ce:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_PN532_InitStruct);
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4811      	ldr	r0, [pc, #68]	; (800581c <PN532_SPIInit+0x8c>)
 80057d6:	f000 ff43 	bl	8006660 <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, DISABLE );
 80057da:	2200      	movs	r2, #0
 80057dc:	2160      	movs	r1, #96	; 0x60
 80057de:	480f      	ldr	r0, [pc, #60]	; (800581c <PN532_SPIInit+0x8c>)
 80057e0:	f000 ffa0 	bl	8006724 <SPI_I2S_ITConfig>

	SPI_CalculateCRC ( SPI2, DISABLE);
 80057e4:	2100      	movs	r1, #0
 80057e6:	480d      	ldr	r0, [pc, #52]	; (800581c <PN532_SPIInit+0x8c>)
 80057e8:	f001 f805 	bl	80067f6 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80057ec:	2201      	movs	r2, #1
 80057ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057f2:	480b      	ldr	r0, [pc, #44]	; (8005820 <PN532_SPIInit+0x90>)
 80057f4:	f000 fc29 	bl	800604a <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 80057f8:	2101      	movs	r1, #1
 80057fa:	4808      	ldr	r0, [pc, #32]	; (800581c <PN532_SPIInit+0x8c>)
 80057fc:	f000 ffdc 	bl	80067b8 <SPI_SSOutputCmd>
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/

	SPI_Cmd(SPI2, ENABLE);
 8005800:	2101      	movs	r1, #1
 8005802:	4806      	ldr	r0, [pc, #24]	; (800581c <PN532_SPIInit+0x8c>)
 8005804:	f000 ff6f 	bl	80066e6 <SPI_Cmd>

	SpiActive = 0;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <PN532_SPIInit+0x88>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]

}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000d2e 	.word	0x20000d2e
 800581c:	40003800 	.word	0x40003800
 8005820:	40010c00 	.word	0x40010c00

08005824 <SPI_Send_Recv>:
	return SPI_OK;
}


void SPI_Send_Recv(uint8_t *buf_tx, uint8_t *buf_rx, uint16_t len)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	80fb      	strh	r3, [r7, #6]
	SpiActive = 1;
 8005832:	4b16      	ldr	r3, [pc, #88]	; (800588c <SPI_Send_Recv+0x68>)
 8005834:	2201      	movs	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]

	pBufTx = buf_tx;
 8005838:	4a15      	ldr	r2, [pc, #84]	; (8005890 <SPI_Send_Recv+0x6c>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6013      	str	r3, [r2, #0]
	pBufRx = buf_rx;
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <SPI_Send_Recv+0x70>)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6013      	str	r3, [r2, #0]
	usBufPosRx = 0;
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <SPI_Send_Recv+0x74>)
 8005846:	2200      	movs	r2, #0
 8005848:	801a      	strh	r2, [r3, #0]
	usBufPosTx = 1;
 800584a:	4b14      	ldr	r3, [pc, #80]	; (800589c <SPI_Send_Recv+0x78>)
 800584c:	2201      	movs	r2, #1
 800584e:	801a      	strh	r2, [r3, #0]
	usBufCnt = len;
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <SPI_Send_Recv+0x7c>)
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	8013      	strh	r3, [r2, #0]

	while (!(SPI2->SR & SPI_SR_TXE)); //ожидание установки 1 в TXE(окончание передачи)
 8005856:	bf00      	nop
 8005858:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <SPI_Send_Recv+0x80>)
 800585a:	891b      	ldrh	r3, [r3, #8]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f8      	beq.n	8005858 <SPI_Send_Recv+0x34>
	if (pBufTx)
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <SPI_Send_Recv+0x6c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <SPI_Send_Recv+0x56>
		*(uint8_t*)&SPI2->DR = *pBufTx;
 800586e:	4b08      	ldr	r3, [pc, #32]	; (8005890 <SPI_Send_Recv+0x6c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a0d      	ldr	r2, [pc, #52]	; (80058a8 <SPI_Send_Recv+0x84>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	7013      	strb	r3, [r2, #0]
	//_SPI->DR = 5;
	else
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
//	while(SpiActive);
}
 8005878:	e002      	b.n	8005880 <SPI_Send_Recv+0x5c>
		*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <SPI_Send_Recv+0x84>)
 800587c:	22ff      	movs	r2, #255	; 0xff
 800587e:	701a      	strb	r2, [r3, #0]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000d2e 	.word	0x20000d2e
 8005890:	20000d20 	.word	0x20000d20
 8005894:	20000d24 	.word	0x20000d24
 8005898:	20000d28 	.word	0x20000d28
 800589c:	20000d2a 	.word	0x20000d2a
 80058a0:	20000d2c 	.word	0x20000d2c
 80058a4:	40003800 	.word	0x40003800
 80058a8:	4000380c 	.word	0x4000380c

080058ac <SpiSendRecvFlash>:


void SpiSendRecvFlash(uint8_t **a_buf_tx, uint8_t **a_buf_rx, uint16_t *a_buf_len, uint8_t cnt)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < cnt; i++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]
 80058be:	e01a      	b.n	80058f6 <SpiSendRecvFlash+0x4a>
			{

				SPI_Send_Recv(a_buf_tx[i], a_buf_rx[i], a_buf_len[i]);
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7ff ffa0 	bl	8005824 <SPI_Send_Recv>

				while(SpiActive);
 80058e4:	bf00      	nop
 80058e6:	4b08      	ldr	r3, [pc, #32]	; (8005908 <SpiSendRecvFlash+0x5c>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1fa      	bne.n	80058e6 <SpiSendRecvFlash+0x3a>
			for (uint8_t i = 0; i < cnt; i++)
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	3301      	adds	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
 80058f6:	7dfa      	ldrb	r2, [r7, #23]
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3e0      	bcc.n	80058c0 <SpiSendRecvFlash+0x14>
			}
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000d2e 	.word	0x20000d2e

0800590c <SPI2_IRQHandler>:

}


void SPI2_IRQHandler(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
	{
		volatile uint8_t ucByte = *(uint8_t*)&SPI2->DR;
 8005912:	4b1f      	ldr	r3, [pc, #124]	; (8005990 <SPI2_IRQHandler+0x84>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	71fb      	strb	r3, [r7, #7]

		if (pBufRx)
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <SPI2_IRQHandler+0x88>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <SPI2_IRQHandler+0x24>
			pBufRx[usBufPosRx] = ucByte;
 8005920:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <SPI2_IRQHandler+0x88>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <SPI2_IRQHandler+0x8c>)
 8005926:	8812      	ldrh	r2, [r2, #0]
 8005928:	4413      	add	r3, r2
 800592a:	79fa      	ldrb	r2, [r7, #7]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
	}

	{
		if (usBufPosTx < usBufCnt)
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <SPI2_IRQHandler+0x90>)
 8005932:	881a      	ldrh	r2, [r3, #0]
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <SPI2_IRQHandler+0x94>)
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d215      	bcs.n	8005968 <SPI2_IRQHandler+0x5c>
		{
			if (pBufTx)
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <SPI2_IRQHandler+0x98>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <SPI2_IRQHandler+0x4a>
				*(uint8_t*)&SPI2->DR = pBufTx[usBufPosTx];
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <SPI2_IRQHandler+0x98>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a14      	ldr	r2, [pc, #80]	; (800599c <SPI2_IRQHandler+0x90>)
 800594a:	8812      	ldrh	r2, [r2, #0]
 800594c:	4413      	add	r3, r2
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <SPI2_IRQHandler+0x84>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	7013      	strb	r3, [r2, #0]
 8005954:	e002      	b.n	800595c <SPI2_IRQHandler+0x50>
			else
				*(uint8_t*)&SPI2->DR = SPI_EMPTY_BYTE;
 8005956:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <SPI2_IRQHandler+0x84>)
 8005958:	22ff      	movs	r2, #255	; 0xff
 800595a:	701a      	strb	r2, [r3, #0]

			usBufPosTx++;
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <SPI2_IRQHandler+0x90>)
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <SPI2_IRQHandler+0x90>)
 8005966:	801a      	strh	r2, [r3, #0]
	/*	else{
			GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		}*/
	}

	if (++usBufPosRx >= usBufCnt)
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <SPI2_IRQHandler+0x8c>)
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <SPI2_IRQHandler+0x8c>)
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	4b08      	ldr	r3, [pc, #32]	; (8005998 <SPI2_IRQHandler+0x8c>)
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <SPI2_IRQHandler+0x94>)
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <SPI2_IRQHandler+0x7a>
	{
		SpiActive = 0;
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <SPI2_IRQHandler+0x9c>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
	//	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
		//SPI_ON_READY_ISR_CB(0);
	}

}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr
 8005990:	4000380c 	.word	0x4000380c
 8005994:	20000d24 	.word	0x20000d24
 8005998:	20000d28 	.word	0x20000d28
 800599c:	20000d2a 	.word	0x20000d2a
 80059a0:	20000d2c 	.word	0x20000d2c
 80059a4:	20000d20 	.word	0x20000d20
 80059a8:	20000d2e 	.word	0x20000d2e

080059ac <SPI_FLASH_CONFIG>:



void SPI_FLASH_CONFIG(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
//	NVIC_InitTypeDef		NVIC_InitStruct;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 80059b2:	2201      	movs	r2, #1
 80059b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059b8:	4825      	ldr	r0, [pc, #148]	; (8005a50 <SPI_FLASH_CONFIG+0xa4>)
 80059ba:	f000 fb46 	bl	800604a <GPIO_WriteBit>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 80059be:	2201      	movs	r2, #1
 80059c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059c4:	4822      	ldr	r0, [pc, #136]	; (8005a50 <SPI_FLASH_CONFIG+0xa4>)
 80059c6:	f000 fb40 	bl	800604a <GPIO_WriteBit>
//	SPI2->CR1 |= SPI_CR1_SPE;


	SPI_InitTypeDef			SPI_FLASH_Initstruct;

	SPI_Cmd(SPI2, DISABLE);
 80059ca:	2100      	movs	r1, #0
 80059cc:	4821      	ldr	r0, [pc, #132]	; (8005a54 <SPI_FLASH_CONFIG+0xa8>)
 80059ce:	f000 fe8a 	bl	80066e6 <SPI_Cmd>
//	NVIC_DisableIRQ(SPI2_IRQn);

	/* Initialize the SPI_Direction member */
	SPI_FLASH_Initstruct.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 80059d2:	2300      	movs	r3, #0
 80059d4:	80bb      	strh	r3, [r7, #4]
    /* initialize the SPI_Mode member */
	SPI_FLASH_Initstruct.SPI_Mode = SPI_Mode_Master;
 80059d6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80059da:	80fb      	strh	r3, [r7, #6]
	/* initialize the SPI_DataSize member */
	SPI_FLASH_Initstruct.SPI_DataSize = SPI_DataSize_8b;
 80059dc:	2300      	movs	r3, #0
 80059de:	813b      	strh	r3, [r7, #8]
	/* Initialize the SPI_CPOL member */
	SPI_FLASH_Initstruct.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_High;SPI_CPOL_Low;
 80059e0:	2300      	movs	r3, #0
 80059e2:	817b      	strh	r3, [r7, #10]
	/* Initialize the SPI_CPHA member */
	SPI_FLASH_Initstruct.SPI_CPHA = SPI_CPHA_1Edge;
 80059e4:	2300      	movs	r3, #0
 80059e6:	81bb      	strh	r3, [r7, #12]
	/* Initialize the SPI_NSS member */
	SPI_FLASH_Initstruct.SPI_NSS = SPI_NSS_Soft;//SPI_NSS_Hard;//SPI_NSS_Soft;//SPI_NSS_Hard;
 80059e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ec:	81fb      	strh	r3, [r7, #14]
	/* Initialize the SPI_BaudRatePrescaler member */
	SPI_FLASH_Initstruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_256;//SPI_BaudRatePrescaler_4;
 80059ee:	2338      	movs	r3, #56	; 0x38
 80059f0:	823b      	strh	r3, [r7, #16]
	/* Initialize the SPI_FirstBit member */
	SPI_FLASH_Initstruct.SPI_FirstBit = SPI_FirstBit_MSB;//SPI_FirstBit_MSB;//SPI_FirstBit_LSB;
 80059f2:	2300      	movs	r3, #0
 80059f4:	827b      	strh	r3, [r7, #18]
	/* Initialize the SPI_CRCPolynomial member */
	SPI_FLASH_Initstruct.SPI_CRCPolynomial = 7;
 80059f6:	2307      	movs	r3, #7
 80059f8:	82bb      	strh	r3, [r7, #20]

	SPI_Init (SPI2,  &SPI_FLASH_Initstruct);
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4815      	ldr	r0, [pc, #84]	; (8005a54 <SPI_FLASH_CONFIG+0xa8>)
 8005a00:	f000 fe2e 	bl	8006660 <SPI_Init>
	//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE|SPI_I2S_IT_TXE, ENABLE);

	SPI_CalculateCRC ( SPI2, DISABLE);
 8005a04:	2100      	movs	r1, #0
 8005a06:	4813      	ldr	r0, [pc, #76]	; (8005a54 <SPI_FLASH_CONFIG+0xa8>)
 8005a08:	f000 fef5 	bl	80067f6 <SPI_CalculateCRC>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_NSS_PIN,1);
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a12:	480f      	ldr	r0, [pc, #60]	; (8005a50 <SPI_FLASH_CONFIG+0xa4>)
 8005a14:	f000 fb19 	bl	800604a <GPIO_WriteBit>

	SPI_SSOutputCmd ( SPI2, ENABLE);
 8005a18:	2101      	movs	r1, #1
 8005a1a:	480e      	ldr	r0, [pc, #56]	; (8005a54 <SPI_FLASH_CONFIG+0xa8>)
 8005a1c:	f000 fecc 	bl	80067b8 <SPI_SSOutputCmd>
	uint32_t tmpreg = 0;
	tmpreg=RCC->CFGR;
	RCC->CFGR=tmpreg|0x00000500;
	RCC_PLLCmd(ENABLE);
*/
	SPI_I2S_ITConfig( SPI2_NUM, SPI_I2S_IT_RXNE, ENABLE );
 8005a20:	2201      	movs	r2, #1
 8005a22:	2160      	movs	r1, #96	; 0x60
 8005a24:	480b      	ldr	r0, [pc, #44]	; (8005a54 <SPI_FLASH_CONFIG+0xa8>)
 8005a26:	f000 fe7d 	bl	8006724 <SPI_I2S_ITConfig>
	NVIC_SetPriority(SPI2_IRQn, 3);
 8005a2a:	2103      	movs	r1, #3
 8005a2c:	2024      	movs	r0, #36	; 0x24
 8005a2e:	f7ff fe85 	bl	800573c <NVIC_SetPriority>
	NVIC_EnableIRQ(SPI2_IRQn);
 8005a32:	2024      	movs	r0, #36	; 0x24
 8005a34:	f7ff fe50 	bl	80056d8 <NVIC_EnableIRQ>



	SPI_Cmd(SPI2, ENABLE);
 8005a38:	2101      	movs	r1, #1
 8005a3a:	4806      	ldr	r0, [pc, #24]	; (8005a54 <SPI_FLASH_CONFIG+0xa8>)
 8005a3c:	f000 fe53 	bl	80066e6 <SPI_Cmd>

	SpiActive = 0;
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <SPI_FLASH_CONFIG+0xac>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init ( &NVIC_InitStruct );
*/


}
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40010c00 	.word	0x40010c00
 8005a54:	40003800 	.word	0x40003800
 8005a58:	20000d2e 	.word	0x20000d2e

08005a5c <spiFlash_Read>:

extern volatile uint8_t SpiActive;


void spiFlash_Read( uint32_t dwAddrRead, uint16_t bCnt, uint8_t* pBuf )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	460b      	mov	r3, r1
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	817b      	strh	r3, [r7, #10]
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a70:	4820      	ldr	r0, [pc, #128]	; (8005af4 <spiFlash_Read+0x98>)
 8005a72:	f000 faea 	bl	800604a <GPIO_WriteBit>
	buf_txrx[0] = CMD_READ_DATA;
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <spiFlash_Read+0x9c>)
 8005a78:	2203      	movs	r2, #3
 8005a7a:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrRead >> 16);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	0c1b      	lsrs	r3, r3, #16
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <spiFlash_Read+0x9c>)
 8005a84:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrRead >> 8);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <spiFlash_Read+0x9c>)
 8005a8e:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrRead >> 0);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <spiFlash_Read+0x9c>)
 8005a96:	70da      	strb	r2, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 8005a98:	4b18      	ldr	r3, [pc, #96]	; (8005afc <spiFlash_Read+0xa0>)
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <spiFlash_Read+0x9c>)
 8005a9c:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 8005a9e:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <spiFlash_Read+0xa4>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 4;
 8005aa4:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <spiFlash_Read+0xa8>)
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = NULL;
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <spiFlash_Read+0xa0>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]
	a_buf_rx[1] = pBuf;
 8005ab0:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <spiFlash_Read+0xa4>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6053      	str	r3, [r2, #4]
	a_buf_len[1] = bCnt;
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <spiFlash_Read+0xa8>)
 8005ab8:	897b      	ldrh	r3, [r7, #10]
 8005aba:	8053      	strh	r3, [r2, #2]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ac2:	480c      	ldr	r0, [pc, #48]	; (8005af4 <spiFlash_Read+0x98>)
 8005ac4:	f000 fac1 	bl	800604a <GPIO_WriteBit>

	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 8005ac8:	2302      	movs	r3, #2
 8005aca:	4a0e      	ldr	r2, [pc, #56]	; (8005b04 <spiFlash_Read+0xa8>)
 8005acc:	490c      	ldr	r1, [pc, #48]	; (8005b00 <spiFlash_Read+0xa4>)
 8005ace:	480b      	ldr	r0, [pc, #44]	; (8005afc <spiFlash_Read+0xa0>)
 8005ad0:	f7ff feec 	bl	80058ac <SpiSendRecvFlash>
	while(SpiActive);
 8005ad4:	bf00      	nop
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <spiFlash_Read+0xac>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1fa      	bne.n	8005ad6 <spiFlash_Read+0x7a>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ae6:	4803      	ldr	r0, [pc, #12]	; (8005af4 <spiFlash_Read+0x98>)
 8005ae8:	f000 faaf 	bl	800604a <GPIO_WriteBit>

}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40010c00 	.word	0x40010c00
 8005af8:	20000d44 	.word	0x20000d44
 8005afc:	20000d30 	.word	0x20000d30
 8005b00:	20000d38 	.word	0x20000d38
 8005b04:	20000d40 	.word	0x20000d40
 8005b08:	20000d2e 	.word	0x20000d2e

08005b0c <spiFlash_write>:

uint8_t spiFlash_write( uint32_t dwAddrWrite, uint16_t bCnt, uint8_t* pBuf )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	460b      	mov	r3, r1
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	817b      	strh	r3, [r7, #10]
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	75fb      	strb	r3, [r7, #23]
	uint16_t i;
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b24:	4822      	ldr	r0, [pc, #136]	; (8005bb0 <spiFlash_write+0xa4>)
 8005b26:	f000 fa90 	bl	800604a <GPIO_WriteBit>
	buf_txrx[0] = CMD_PAGE_PROGRAMM;
 8005b2a:	4b22      	ldr	r3, [pc, #136]	; (8005bb4 <spiFlash_write+0xa8>)
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwAddrWrite >> 16);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <spiFlash_write+0xa8>)
 8005b38:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwAddrWrite >> 8);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <spiFlash_write+0xa8>)
 8005b42:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwAddrWrite >> 0);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <spiFlash_write+0xa8>)
 8005b4a:	70da      	strb	r2, [r3, #3]
	a_buf_tx[0] = buf_txrx;
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <spiFlash_write+0xac>)
 8005b4e:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <spiFlash_write+0xa8>)
 8005b50:	601a      	str	r2, [r3, #0]
	a_buf_rx[0] = NULL;
 8005b52:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <spiFlash_write+0xb0>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
	a_buf_len[0] = 4;
 8005b58:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <spiFlash_write+0xb4>)
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	801a      	strh	r2, [r3, #0]

	a_buf_tx[1] = pBuf;
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <spiFlash_write+0xac>)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6053      	str	r3, [r2, #4]
	a_buf_rx[1] = NULL;
 8005b64:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <spiFlash_write+0xb0>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	605a      	str	r2, [r3, #4]
	a_buf_len[1] = bCnt;
 8005b6a:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <spiFlash_write+0xb4>)
 8005b6c:	897b      	ldrh	r3, [r7, #10]
 8005b6e:	8053      	strh	r3, [r2, #2]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005b70:	2200      	movs	r2, #0
 8005b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b76:	480e      	ldr	r0, [pc, #56]	; (8005bb0 <spiFlash_write+0xa4>)
 8005b78:	f000 fa67 	bl	800604a <GPIO_WriteBit>

	SpiSendRecvFlash(a_buf_tx, a_buf_rx, a_buf_len, 2);
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <spiFlash_write+0xb4>)
 8005b80:	490e      	ldr	r1, [pc, #56]	; (8005bbc <spiFlash_write+0xb0>)
 8005b82:	480d      	ldr	r0, [pc, #52]	; (8005bb8 <spiFlash_write+0xac>)
 8005b84:	f7ff fe92 	bl	80058ac <SpiSendRecvFlash>
	while(SpiActive);
 8005b88:	bf00      	nop
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <spiFlash_write+0xb8>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1fa      	bne.n	8005b8a <spiFlash_write+0x7e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005b94:	2201      	movs	r2, #1
 8005b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b9a:	4805      	ldr	r0, [pc, #20]	; (8005bb0 <spiFlash_write+0xa4>)
 8005b9c:	f000 fa55 	bl	800604a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	75fb      	strb	r3, [r7, #23]

	return res;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40010c00 	.word	0x40010c00
 8005bb4:	20000d44 	.word	0x20000d44
 8005bb8:	20000d30 	.word	0x20000d30
 8005bbc:	20000d38 	.word	0x20000d38
 8005bc0:	20000d40 	.word	0x20000d40
 8005bc4:	20000d2e 	.word	0x20000d2e

08005bc8 <spiFlash_readStatus>:

uint8_t spiFlash_readStatus( uint8_t cmd )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t bRegStatus;
//	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
	spi_buf_tx[0] = cmd;
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <spiFlash_readStatus+0x54>)
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	7013      	strb	r3, [r2, #0]
	spi_buf_tx[1] = 0xff;
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <spiFlash_readStatus+0x54>)
 8005bda:	22ff      	movs	r2, #255	; 0xff
 8005bdc:	705a      	strb	r2, [r3, #1]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005bde:	2200      	movs	r2, #0
 8005be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005be4:	480e      	ldr	r0, [pc, #56]	; (8005c20 <spiFlash_readStatus+0x58>)
 8005be6:	f000 fa30 	bl	800604a <GPIO_WriteBit>

	SPI_Send_Recv(spi_buf_tx, spi_buf_rx, 2);
 8005bea:	2202      	movs	r2, #2
 8005bec:	490d      	ldr	r1, [pc, #52]	; (8005c24 <spiFlash_readStatus+0x5c>)
 8005bee:	480b      	ldr	r0, [pc, #44]	; (8005c1c <spiFlash_readStatus+0x54>)
 8005bf0:	f7ff fe18 	bl	8005824 <SPI_Send_Recv>
	while(SpiActive);
 8005bf4:	bf00      	nop
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <spiFlash_readStatus+0x60>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1fa      	bne.n	8005bf6 <spiFlash_readStatus+0x2e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005c00:	2201      	movs	r2, #1
 8005c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c06:	4806      	ldr	r0, [pc, #24]	; (8005c20 <spiFlash_readStatus+0x58>)
 8005c08:	f000 fa1f 	bl	800604a <GPIO_WriteBit>

	bRegStatus = spi_buf_rx[1];
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <spiFlash_readStatus+0x5c>)
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	73fb      	strb	r3, [r7, #15]


	return bRegStatus;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000d4c 	.word	0x20000d4c
 8005c20:	40010c00 	.word	0x40010c00
 8005c24:	20000d6c 	.word	0x20000d6c
 8005c28:	20000d2e 	.word	0x20000d2e

08005c2c <spiFlash_wrtEnbl>:

uint8_t spiFlash_wrtEnbl()
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 8005c32:	230a      	movs	r3, #10
 8005c34:	71fb      	strb	r3, [r7, #7]
	//GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);

	buf_txrx[0] = CMD_WRITE_ENABLE;
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <spiFlash_wrtEnbl+0x4c>)
 8005c38:	2206      	movs	r2, #6
 8005c3a:	701a      	strb	r2, [r3, #0]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c42:	480e      	ldr	r0, [pc, #56]	; (8005c7c <spiFlash_wrtEnbl+0x50>)
 8005c44:	f000 fa01 	bl	800604a <GPIO_WriteBit>
	SPI_Send_Recv(buf_txrx, NULL, 1);
 8005c48:	2201      	movs	r2, #1
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	480a      	ldr	r0, [pc, #40]	; (8005c78 <spiFlash_wrtEnbl+0x4c>)
 8005c4e:	f7ff fde9 	bl	8005824 <SPI_Send_Recv>
	while(SpiActive);
 8005c52:	bf00      	nop
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <spiFlash_wrtEnbl+0x54>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1fa      	bne.n	8005c54 <spiFlash_wrtEnbl+0x28>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c64:	4805      	ldr	r0, [pc, #20]	; (8005c7c <spiFlash_wrtEnbl+0x50>)
 8005c66:	f000 f9f0 	bl	800604a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	71fb      	strb	r3, [r7, #7]

	return res;
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000d44 	.word	0x20000d44
 8005c7c:	40010c00 	.word	0x40010c00
 8005c80:	20000d2e 	.word	0x20000d2e

08005c84 <spiFlash_wrtStatReg>:


uint8_t spiFlash_wrtStatReg()
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	71fb      	strb	r3, [r7, #7]
	//GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);

	buf_txrx[0] = CMD_WRITE_STATUS_REGISTER;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <spiFlash_wrtStatReg+0x54>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = NULL;
 8005c94:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <spiFlash_wrtStatReg+0x54>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	705a      	strb	r2, [r3, #1]
	//buf_txrx[2] = 0xff;

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ca0:	480e      	ldr	r0, [pc, #56]	; (8005cdc <spiFlash_wrtStatReg+0x58>)
 8005ca2:	f000 f9d2 	bl	800604a <GPIO_WriteBit>
	SPI_Send_Recv(buf_txrx, NULL, 2);
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	2100      	movs	r1, #0
 8005caa:	480b      	ldr	r0, [pc, #44]	; (8005cd8 <spiFlash_wrtStatReg+0x54>)
 8005cac:	f7ff fdba 	bl	8005824 <SPI_Send_Recv>
	while(SpiActive);
 8005cb0:	bf00      	nop
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <spiFlash_wrtStatReg+0x5c>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1fa      	bne.n	8005cb2 <spiFlash_wrtStatReg+0x2e>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cc2:	4806      	ldr	r0, [pc, #24]	; (8005cdc <spiFlash_wrtStatReg+0x58>)
 8005cc4:	f000 f9c1 	bl	800604a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	71fb      	strb	r3, [r7, #7]

	return res;
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000d44 	.word	0x20000d44
 8005cdc:	40010c00 	.word	0x40010c00
 8005ce0:	20000d2e 	.word	0x20000d2e

08005ce4 <spiFlash_eraseSector>:
	return result;
}


uint8_t spiFlash_eraseSector( uint32_t dwSectAddr )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	uint8_t res = FLASH_RES_ERROR_AGAIN;
 8005cec:	230a      	movs	r3, #10
 8005cee:	73fb      	strb	r3, [r7, #15]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cf6:	4819      	ldr	r0, [pc, #100]	; (8005d5c <spiFlash_eraseSector+0x78>)
 8005cf8:	f000 f9a7 	bl	800604a <GPIO_WriteBit>

	buf_txrx[0] = CMD_ERASE_4KB;
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <spiFlash_eraseSector+0x7c>)
 8005cfe:	2220      	movs	r2, #32
 8005d00:	701a      	strb	r2, [r3, #0]
	buf_txrx[1] = (uint8_t)(dwSectAddr >> 16);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <spiFlash_eraseSector+0x7c>)
 8005d0a:	705a      	strb	r2, [r3, #1]
	buf_txrx[2] = (uint8_t)(dwSectAddr >> 8);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <spiFlash_eraseSector+0x7c>)
 8005d14:	709a      	strb	r2, [r3, #2]
	buf_txrx[3] = (uint8_t)(dwSectAddr >> 0);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <spiFlash_eraseSector+0x7c>)
 8005d1c:	70da      	strb	r2, [r3, #3]

	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,0);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d24:	480d      	ldr	r0, [pc, #52]	; (8005d5c <spiFlash_eraseSector+0x78>)
 8005d26:	f000 f990 	bl	800604a <GPIO_WriteBit>

	SPI_Send_Recv(buf_txrx, NULL, 4);
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	480c      	ldr	r0, [pc, #48]	; (8005d60 <spiFlash_eraseSector+0x7c>)
 8005d30:	f7ff fd78 	bl	8005824 <SPI_Send_Recv>
	while(SpiActive){};
 8005d34:	bf00      	nop
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <spiFlash_eraseSector+0x80>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1fa      	bne.n	8005d36 <spiFlash_eraseSector+0x52>
	GPIO_WriteBit(SPI_GPIO_PORT, SPI_FLASH_NSS,1);
 8005d40:	2201      	movs	r2, #1
 8005d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d46:	4805      	ldr	r0, [pc, #20]	; (8005d5c <spiFlash_eraseSector+0x78>)
 8005d48:	f000 f97f 	bl	800604a <GPIO_WriteBit>

	res = FLASH_RES_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]

	return res;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40010c00 	.word	0x40010c00
 8005d60:	20000d44 	.word	0x20000d44
 8005d64:	20000d2e 	.word	0x20000d2e

08005d68 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005d70:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <NVIC_PriorityGroupConfig+0x20>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d7c:	60d3      	str	r3, [r2, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr
 8005d88:	e000ed00 	.word	0xe000ed00

08005d8c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	230f      	movs	r3, #15
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d03a      	beq.n	8005e1e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005da8:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <NVIC_Init+0xbc>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f1c3 0304 	rsb	r3, r3, #4
 8005dbc:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	789b      	ldrb	r3, [r3, #2]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4013      	ands	r3, r2
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <NVIC_Init+0xc0>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	b2c9      	uxtb	r1, r1
 8005df6:	4413      	add	r3, r2
 8005df8:	460a      	mov	r2, r1
 8005dfa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e06:	4911      	ldr	r1, [pc, #68]	; (8005e4c <NVIC_Init+0xc0>)
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	0952      	lsrs	r2, r2, #5
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005e12:	2201      	movs	r2, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e18:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005e1c:	e00f      	b.n	8005e3e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e26:	4909      	ldr	r1, [pc, #36]	; (8005e4c <NVIC_Init+0xc0>)
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	0952      	lsrs	r2, r2, #5
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005e32:	2201      	movs	r2, #1
 8005e34:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005e36:	f100 0320 	add.w	r3, r0, #32
 8005e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr
 8005e48:	e000ed00 	.word	0xe000ed00
 8005e4c:	e000e100 	.word	0xe000e100

08005e50 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8005e5c:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <EXTI_GetFlagStatus+0x30>)
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e001      	b.n	8005e72 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40010400 	.word	0x40010400

08005e84 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005e8c:	4a03      	ldr	r2, [pc, #12]	; (8005e9c <EXTI_ClearITPendingBit+0x18>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6153      	str	r3, [r2, #20]
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr
 8005e9c:	40010400 	.word	0x40010400

08005ea0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	; 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	78db      	ldrb	r3, [r3, #3]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	78db      	ldrb	r3, [r3, #3]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <GPIO_Init+0x44>
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	789b      	ldrb	r3, [r3, #2]
 8005edc:	461a      	mov	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d044      	beq.n	8005f78 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	e038      	b.n	8005f6c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8005efa:	2201      	movs	r2, #1
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d126      	bne.n	8005f66 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005f1e:	220f      	movs	r2, #15
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	78db      	ldrb	r3, [r3, #3]
 8005f44:	2b28      	cmp	r3, #40	; 0x28
 8005f46:	d105      	bne.n	8005f54 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8005f48:	2201      	movs	r2, #1
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	615a      	str	r2, [r3, #20]
 8005f52:	e008      	b.n	8005f66 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	78db      	ldrb	r3, [r3, #3]
 8005f58:	2b48      	cmp	r3, #72	; 0x48
 8005f5a:	d104      	bne.n	8005f66 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	409a      	lsls	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	d9c3      	bls.n	8005efa <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	2bff      	cmp	r3, #255	; 0xff
 8005f7e:	d946      	bls.n	800600e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005f86:	2300      	movs	r3, #0
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e03a      	b.n	8006002 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	2201      	movs	r2, #1
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d127      	bne.n	8005ffc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005fb2:	220f      	movs	r2, #15
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	78db      	ldrb	r3, [r3, #3]
 8005fd8:	2b28      	cmp	r3, #40	; 0x28
 8005fda:	d105      	bne.n	8005fe8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	78db      	ldrb	r3, [r3, #3]
 8005fec:	2b48      	cmp	r3, #72	; 0x48
 8005fee:	d105      	bne.n	8005ffc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	3301      	adds	r3, #1
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b07      	cmp	r3, #7
 8006006:	d9c1      	bls.n	8005f8c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	605a      	str	r2, [r3, #4]
  }
}
 800600e:	bf00      	nop
 8006010:	3724      	adds	r7, #36	; 0x24
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	887b      	ldrh	r3, [r7, #2]
 800602e:	4013      	ands	r3, r2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8006034:	2301      	movs	r3, #1
 8006036:	73fb      	strb	r3, [r7, #15]
 8006038:	e001      	b.n	800603e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800603a:	2300      	movs	r3, #0
 800603c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	807b      	strh	r3, [r7, #2]
 8006056:	4613      	mov	r3, r2
 8006058:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 800605a:	787b      	ldrb	r3, [r7, #1]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006060:	887a      	ldrh	r2, [r7, #2]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8006066:	e002      	b.n	800606e <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8006068:	887a      	ldrh	r2, [r7, #2]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	615a      	str	r2, [r3, #20]
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006086:	2300      	movs	r3, #0
 8006088:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800608a:	2304      	movs	r3, #4
 800608c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800608e:	4b57      	ldr	r3, [pc, #348]	; (80061ec <I2C_Init+0x174>)
 8006090:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	889b      	ldrh	r3, [r3, #4]
 8006096:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8006098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800609a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800609e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80060a0:	f107 0308 	add.w	r3, r7, #8
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 f9d9 	bl	800645c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4a4f      	ldr	r2, [pc, #316]	; (80061f0 <I2C_Init+0x178>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0c9b      	lsrs	r3, r3, #18
 80060b8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80060ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060be:	4313      	orrs	r3, r2
 80060c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060c6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a44      	ldr	r2, [pc, #272]	; (80061f4 <I2C_Init+0x17c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d815      	bhi.n	8006112 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80060f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d801      	bhi.n	80060fe <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80060fa:	2304      	movs	r3, #4
 80060fc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80060fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006102:	4313      	orrs	r3, r2
 8006104:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8006106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006108:	3301      	adds	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	841a      	strh	r2, [r3, #32]
 8006110:	e040      	b.n	8006194 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	88db      	ldrh	r3, [r3, #6]
 8006116:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800611a:	4293      	cmp	r3, r2
 800611c:	d109      	bne.n	8006132 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4613      	mov	r3, r2
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	4413      	add	r3, r2
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006130:	e00e      	b.n	8006150 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009a      	lsls	r2, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8006148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800614a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800614e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8006150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800615a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8006162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006166:	4313      	orrs	r3, r2
 8006168:	b29b      	uxth	r3, r3
 800616a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006172:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8006174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <I2C_Init+0x180>)
 8006180:	fb82 1203 	smull	r1, r2, r2, r3
 8006184:	1192      	asrs	r2, r2, #6
 8006186:	17db      	asrs	r3, r3, #31
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	b29b      	uxth	r3, r3
 800618c:	3301      	adds	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006198:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80061b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061b2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80061b6:	f023 0302 	bic.w	r3, r3, #2
 80061ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	889a      	ldrh	r2, [r3, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	895b      	ldrh	r3, [r3, #10]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ca:	4313      	orrs	r3, r2
 80061cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061d2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	899a      	ldrh	r2, [r3, #12]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	891b      	ldrh	r3, [r3, #8]
 80061dc:	4313      	orrs	r3, r2
 80061de:	b29a      	uxth	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	811a      	strh	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	007a1200 	.word	0x007a1200
 80061f0:	431bde83 	.word	0x431bde83
 80061f4:	000186a0 	.word	0x000186a0
 80061f8:	10624dd3 	.word	0x10624dd3

080061fc <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d008      	beq.n	8006220 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 800621e:	e007      	b.n	8006230 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	801a      	strh	r2, [r3, #0]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr

0800623a <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006256:	b29a      	uxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 800625c:	e007      	b.n	800626e <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	801a      	strh	r2, [r3, #0]
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr

08006278 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800629a:	e007      	b.n	80062ac <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	801a      	strh	r2, [r3, #0]
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	821a      	strh	r2, [r3, #16]
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
 80062e0:	4613      	mov	r3, r2
 80062e2:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80062e4:	78bb      	ldrb	r3, [r7, #2]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	70fb      	strb	r3, [r7, #3]
 80062f2:	e003      	b.n	80062fc <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	821a      	strh	r2, [r3, #16]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr

0800630e <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800630e:	b480      	push	{r7}
 8006310:	b087      	sub	sp, #28
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	2300      	movs	r3, #0
 8006322:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8006324:	2300      	movs	r3, #0
 8006326:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8a9b      	ldrh	r3, [r3, #20]
 800632c:	b29b      	uxth	r3, r3
 800632e:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8b1b      	ldrh	r3, [r3, #24]
 8006334:	b29b      	uxth	r3, r3
 8006336:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	041b      	lsls	r3, r3, #16
 800633c:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006348:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	4013      	ands	r3, r2
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d102      	bne.n	800635c <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
 800635a:	e001      	b.n	8006360 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8006374:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <RCC_HSEConfig+0x58>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <RCC_HSEConfig+0x58>)
 800637a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800637e:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8006380:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <RCC_HSEConfig+0x58>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a0f      	ldr	r2, [pc, #60]	; (80063c4 <RCC_HSEConfig+0x58>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800638a:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d004      	beq.n	800639e <RCC_HSEConfig+0x32>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800639a:	d007      	beq.n	80063ac <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 800639c:	e00d      	b.n	80063ba <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <RCC_HSEConfig+0x58>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <RCC_HSEConfig+0x58>)
 80063a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
      break;
 80063aa:	e006      	b.n	80063ba <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <RCC_HSEConfig+0x58>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <RCC_HSEConfig+0x58>)
 80063b2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80063b6:	6013      	str	r3, [r2, #0]
      break;
 80063b8:	bf00      	nop
  }
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	40021000 	.word	0x40021000

080063c8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]

  tmpreg = RCC->CFGR;
 80063d6:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <RCC_PLLConfig+0x38>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80063f0:	4a03      	ldr	r2, [pc, #12]	; (8006400 <RCC_PLLConfig+0x38>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6053      	str	r3, [r2, #4]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr
 8006400:	40021000 	.word	0x40021000

08006404 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800640e:	4a04      	ldr	r2, [pc, #16]	; (8006420 <RCC_PLLCmd+0x1c>)
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	6013      	str	r3, [r2, #0]
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	42420060 	.word	0x42420060

08006424 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
  tmpreg = RCC->CFGR;
 8006430:	4b09      	ldr	r3, [pc, #36]	; (8006458 <RCC_SYSCLKConfig+0x34>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006446:	4a04      	ldr	r2, [pc, #16]	; (8006458 <RCC_SYSCLKConfig+0x34>)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6053      	str	r3, [r2, #4]
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40021000 	.word	0x40021000

0800645c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	2300      	movs	r3, #0
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8006474:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d011      	beq.n	80064a8 <RCC_GetClocksFreq+0x4c>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b08      	cmp	r3, #8
 8006488:	d83a      	bhi.n	8006500 <RCC_GetClocksFreq+0xa4>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <RCC_GetClocksFreq+0x3c>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b04      	cmp	r3, #4
 8006494:	d004      	beq.n	80064a0 <RCC_GetClocksFreq+0x44>
 8006496:	e033      	b.n	8006500 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a47      	ldr	r2, [pc, #284]	; (80065b8 <RCC_GetClocksFreq+0x15c>)
 800649c:	601a      	str	r2, [r3, #0]
      break;
 800649e:	e033      	b.n	8006508 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a45      	ldr	r2, [pc, #276]	; (80065b8 <RCC_GetClocksFreq+0x15c>)
 80064a4:	601a      	str	r2, [r3, #0]
      break;
 80064a6:	e02f      	b.n	8006508 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80064a8:	4b42      	ldr	r3, [pc, #264]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80064b0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80064b2:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ba:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	0c9b      	lsrs	r3, r3, #18
 80064c0:	3302      	adds	r3, #2
 80064c2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4a3b      	ldr	r2, [pc, #236]	; (80065bc <RCC_GetClocksFreq+0x160>)
 80064ce:	fb03 f202 	mul.w	r2, r3, r2
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80064d6:	e017      	b.n	8006508 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80064d8:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4a35      	ldr	r2, [pc, #212]	; (80065bc <RCC_GetClocksFreq+0x160>)
 80064e8:	fb03 f202 	mul.w	r2, r3, r2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
      break;
 80064f0:	e00a      	b.n	8006508 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	4a30      	ldr	r2, [pc, #192]	; (80065b8 <RCC_GetClocksFreq+0x15c>)
 80064f6:	fb03 f202 	mul.w	r2, r3, r2
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
      break;
 80064fe:	e003      	b.n	8006508 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <RCC_GetClocksFreq+0x15c>)
 8006504:	601a      	str	r2, [r3, #0]
      break;
 8006506:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8006508:	4b2a      	ldr	r3, [pc, #168]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006510:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <RCC_GetClocksFreq+0x164>)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4413      	add	r3, r2
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	40da      	lsrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8006530:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006538:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <RCC_GetClocksFreq+0x164>)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	4413      	add	r3, r2
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	40da      	lsrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8006558:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006560:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	0adb      	lsrs	r3, r3, #11
 8006566:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <RCC_GetClocksFreq+0x164>)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	40da      	lsrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <RCC_GetClocksFreq+0x158>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006588:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	0b9b      	lsrs	r3, r3, #14
 800658e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8006590:	4a0c      	ldr	r2, [pc, #48]	; (80065c4 <RCC_GetClocksFreq+0x168>)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr
 80065b4:	40021000 	.word	0x40021000
 80065b8:	007a1200 	.word	0x007a1200
 80065bc:	003d0900 	.word	0x003d0900
 80065c0:	2000044c 	.word	0x2000044c
 80065c4:	2000045c 	.word	0x2000045c

080065c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80065da:	4b09      	ldr	r3, [pc, #36]	; (8006600 <RCC_APB2PeriphClockCmd+0x38>)
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	4908      	ldr	r1, [pc, #32]	; (8006600 <RCC_APB2PeriphClockCmd+0x38>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80065e6:	e006      	b.n	80065f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <RCC_APB2PeriphClockCmd+0x38>)
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	4903      	ldr	r1, [pc, #12]	; (8006600 <RCC_APB2PeriphClockCmd+0x38>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	618b      	str	r3, [r1, #24]
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	40021000 	.word	0x40021000

08006604 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <RCC_APB1PeriphClockCmd+0x38>)
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	4908      	ldr	r1, [pc, #32]	; (800663c <RCC_APB1PeriphClockCmd+0x38>)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4313      	orrs	r3, r2
 8006620:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8006622:	e006      	b.n	8006632 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <RCC_APB1PeriphClockCmd+0x38>)
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	43db      	mvns	r3, r3
 800662c:	4903      	ldr	r1, [pc, #12]	; (800663c <RCC_APB1PeriphClockCmd+0x38>)
 800662e:	4013      	ands	r3, r2
 8006630:	61cb      	str	r3, [r1, #28]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	40021000 	.word	0x40021000

08006640 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800664a:	4a04      	ldr	r2, [pc, #16]	; (800665c <RCC_ClockSecuritySystemCmd+0x1c>)
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	4242004c 	.word	0x4242004c

08006660 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8006674:	89fb      	ldrh	r3, [r7, #14]
 8006676:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800667a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	881a      	ldrh	r2, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	885b      	ldrh	r3, [r3, #2]
 8006684:	4313      	orrs	r3, r2
 8006686:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800668c:	4313      	orrs	r3, r2
 800668e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006694:	4313      	orrs	r3, r2
 8006696:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800669c:	4313      	orrs	r3, r2
 800669e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80066b4:	4313      	orrs	r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	89fa      	ldrh	r2, [r7, #14]
 80066c2:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8b9b      	ldrh	r3, [r3, #28]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	8a1a      	ldrh	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	821a      	strh	r2, [r3, #16]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8006708:	e007      	b.n	800671a <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006714:	b29a      	uxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	801a      	strh	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
 8006730:	4613      	mov	r3, r2
 8006732:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8006734:	2300      	movs	r3, #0
 8006736:	81fb      	strh	r3, [r7, #14]
 8006738:	2300      	movs	r3, #0
 800673a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	b2db      	uxtb	r3, r3
 8006742:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	2201      	movs	r2, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800674e:	78bb      	ldrb	r3, [r7, #2]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	889b      	ldrh	r3, [r3, #4]
 8006758:	b29a      	uxth	r2, r3
 800675a:	89bb      	ldrh	r3, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	b29a      	uxth	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8006764:	e009      	b.n	800677a <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	889b      	ldrh	r3, [r3, #4]
 800676a:	b29a      	uxth	r2, r3
 800676c:	89bb      	ldrh	r3, [r7, #12]
 800676e:	43db      	mvns	r3, r3
 8006770:	b29b      	uxth	r3, r3
 8006772:	4013      	ands	r3, r2
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	809a      	strh	r2, [r3, #4]
}
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr

08006784 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	887a      	ldrh	r2, [r7, #2]
 8006794:	819a      	strh	r2, [r3, #12]
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	899b      	ldrh	r3, [r3, #12]
 80067ac:	b29b      	uxth	r3, r3
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	889b      	ldrh	r3, [r3, #4]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 80067da:	e007      	b.n	80067ec <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	889b      	ldrh	r3, [r3, #4]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f023 0304 	bic.w	r3, r3, #4
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	809a      	strh	r2, [r3, #4]
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
  }
}
 8006818:	e007      	b.n	800682a <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= CR1_CRCEN_Reset;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	801a      	strh	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	891b      	ldrh	r3, [r3, #8]
 8006848:	b29a      	uxth	r2, r3
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	4013      	ands	r3, r2
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	e001      	b.n	800685e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr
	...

0800686c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	81fb      	strh	r3, [r7, #14]

  tmpcr1 = TIMx->CR1;  
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a2e      	ldr	r2, [pc, #184]	; (800693c <TIM_TimeBaseInit+0xd0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <TIM_TimeBaseInit+0x44>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <TIM_TimeBaseInit+0xd4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_TimeBaseInit+0x44>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006896:	d00b      	beq.n	80068b0 <TIM_TimeBaseInit+0x44>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2a      	ldr	r2, [pc, #168]	; (8006944 <TIM_TimeBaseInit+0xd8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_TimeBaseInit+0x44>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a29      	ldr	r2, [pc, #164]	; (8006948 <TIM_TimeBaseInit+0xdc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a28      	ldr	r2, [pc, #160]	; (800694c <TIM_TimeBaseInit+0xe0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d108      	bne.n	80068c2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80068b0:	89fb      	ldrh	r3, [r7, #14]
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	885a      	ldrh	r2, [r3, #2]
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	4313      	orrs	r3, r2
 80068c0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a22      	ldr	r2, [pc, #136]	; (8006950 <TIM_TimeBaseInit+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00c      	beq.n	80068e4 <TIM_TimeBaseInit+0x78>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a21      	ldr	r2, [pc, #132]	; (8006954 <TIM_TimeBaseInit+0xe8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d008      	beq.n	80068e4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80068d2:	89fb      	ldrh	r3, [r7, #14]
 80068d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	88da      	ldrh	r2, [r3, #6]
 80068de:	89fb      	ldrh	r3, [r7, #14]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	89fa      	ldrh	r2, [r7, #14]
 80068e8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	889a      	ldrh	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	881a      	ldrh	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a0f      	ldr	r2, [pc, #60]	; (800693c <TIM_TimeBaseInit+0xd0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00f      	beq.n	8006922 <TIM_TimeBaseInit+0xb6>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a0e      	ldr	r2, [pc, #56]	; (8006940 <TIM_TimeBaseInit+0xd4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00b      	beq.n	8006922 <TIM_TimeBaseInit+0xb6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a12      	ldr	r2, [pc, #72]	; (8006958 <TIM_TimeBaseInit+0xec>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d007      	beq.n	8006922 <TIM_TimeBaseInit+0xb6>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a11      	ldr	r2, [pc, #68]	; (800695c <TIM_TimeBaseInit+0xf0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_TimeBaseInit+0xb6>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a10      	ldr	r2, [pc, #64]	; (8006960 <TIM_TimeBaseInit+0xf4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d104      	bne.n	800692c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	7a1b      	ldrb	r3, [r3, #8]
 8006926:	b29a      	uxth	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	829a      	strh	r2, [r3, #20]
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40013400 	.word	0x40013400
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40001000 	.word	0x40001000
 8006954:	40001400 	.word	0x40001400
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800

08006964 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8006986:	e007      	b.n	8006998 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	801a      	strh	r2, [r3, #0]
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	807b      	strh	r3, [r7, #2]
 80069ae:	4613      	mov	r3, r2
 80069b0:	707b      	strb	r3, [r7, #1]
  if (NewState != DISABLE)
 80069b2:	787b      	ldrb	r3, [r7, #1]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	899b      	ldrh	r3, [r3, #12]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	887b      	ldrh	r3, [r7, #2]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80069c8:	e009      	b.n	80069de <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	899b      	ldrh	r3, [r3, #12]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	887b      	ldrh	r3, [r7, #2]
 80069d2:	43db      	mvns	r3, r3
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	4013      	ands	r3, r2
 80069d8:	b29a      	uxth	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	819a      	strh	r2, [r3, #12]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	81bb      	strh	r3, [r7, #12]
 80069fc:	2300      	movs	r3, #0
 80069fe:	817b      	strh	r3, [r7, #10]
   
  itstatus = TIMx->SR & TIM_IT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8a1b      	ldrh	r3, [r3, #16]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	887b      	ldrh	r3, [r7, #2]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	899b      	ldrh	r3, [r3, #12]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	887b      	ldrh	r3, [r7, #2]
 8006a14:	4013      	ands	r3, r2
 8006a16:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8006a18:	89bb      	ldrh	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <TIM_GetITStatus+0x42>
 8006a1e:	897b      	ldrh	r3, [r7, #10]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8006a24:	2301      	movs	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	e001      	b.n	8006a2e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	807b      	strh	r3, [r7, #2]
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8006a46:	887b      	ldrh	r3, [r7, #2]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	821a      	strh	r2, [r3, #16]
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr
	...

08006a5c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08c      	sub	sp, #48	; 0x30
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8006a66:	2300      	movs	r3, #0
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8006a72:	2300      	movs	r3, #0
 8006a74:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  usartxbase = (uint32_t)USARTx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	8a1b      	ldrh	r3, [r3, #16]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8006a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a88:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	88db      	ldrh	r3, [r3, #6]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	899b      	ldrh	r3, [r3, #12]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8006aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aae:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	889a      	ldrh	r2, [r3, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	891b      	ldrh	r3, [r3, #8]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8a9b      	ldrh	r3, [r3, #20]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8006ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8006ae8:	4013      	ands	r3, r2
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	899b      	ldrh	r3, [r3, #12]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	4313      	orrs	r3, r2
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8006b00:	f107 0308 	add.w	r3, r7, #8
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fca9 	bl	800645c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4a2e      	ldr	r2, [pc, #184]	; (8006bc8 <USART_Init+0x16c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d102      	bne.n	8006b18 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b16:	e001      	b.n	8006b1c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	899b      	ldrh	r3, [r3, #12]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	b21b      	sxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da0c      	bge.n	8006b42 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8006b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009a      	lsls	r2, r3, #2
 8006b32:	441a      	add	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b40:	e00b      	b.n	8006b5a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8006b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009a      	lsls	r2, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	4a1b      	ldr	r2, [pc, #108]	; (8006bcc <USART_Init+0x170>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	2264      	movs	r2, #100	; 0x64
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	899b      	ldrh	r3, [r3, #12]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b21b      	sxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	da0c      	bge.n	8006b9e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	3332      	adds	r3, #50	; 0x32
 8006b8a:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <USART_Init+0x170>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b9c:	e00b      	b.n	8006bb6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	3332      	adds	r3, #50	; 0x32
 8006ba4:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <USART_Init+0x170>)
 8006ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	811a      	strh	r2, [r3, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	3730      	adds	r7, #48	; 0x30
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40013800 	.word	0x40013800
 8006bcc:	51eb851f 	.word	0x51eb851f

08006bd0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  if (NewState != DISABLE)
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	899b      	ldrh	r3, [r3, #12]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8006bf2:	e007      	b.n	8006c04 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	899b      	ldrh	r3, [r3, #12]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	819a      	strh	r2, [r3, #12]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr

08006c0e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b087      	sub	sp, #28
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	807b      	strh	r3, [r7, #2]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
  /* The CTS interrupt is not available for UART4 and UART5 */
  
  usartxbase = (uint32_t)USARTx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8006c32:	887b      	ldrh	r3, [r7, #2]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8006c3c:	887b      	ldrh	r3, [r7, #2]
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8006c44:	2201      	movs	r2, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d103      	bne.n	8006c5c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	330c      	adds	r3, #12
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	e009      	b.n	8006c70 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d103      	bne.n	8006c6a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	3310      	adds	r3, #16
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e002      	b.n	8006c70 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	3314      	adds	r3, #20
 8006c6e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8006c70:	787b      	ldrb	r3, [r7, #1]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d006      	beq.n	8006c84 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8006c82:	e006      	b.n	8006c92 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6819      	ldr	r1, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	43da      	mvns	r2, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	400a      	ands	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	807b      	strh	r3, [r7, #2]
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8006ca8:	887b      	ldrh	r3, [r7, #2]
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	809a      	strh	r2, [r3, #4]
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	889b      	ldrh	r3, [r3, #4]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd0:	b29b      	uxth	r3, r3
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  /* The CTS flag is not available for UART4 and UART5 */
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	887b      	ldrh	r3, [r7, #2]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
 8006d00:	e001      	b.n	8006d06 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	81fb      	strh	r3, [r7, #14]
 8006d22:	2300      	movs	r3, #0
 8006d24:	81bb      	strh	r3, [r7, #12]
  
  bitpos = USART_IT >> 0x08;
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8006d2c:	89fb      	ldrh	r3, [r7, #14]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8006d36:	89bb      	ldrh	r3, [r7, #12]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	801a      	strh	r2, [r3, #0]
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
	...

08006d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006d4c:	480c      	ldr	r0, [pc, #48]	; (8006d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006d4e:	490d      	ldr	r1, [pc, #52]	; (8006d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d50:	4a0d      	ldr	r2, [pc, #52]	; (8006d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d54:	e002      	b.n	8006d5c <LoopCopyDataInit>

08006d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d5a:	3304      	adds	r3, #4

08006d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d60:	d3f9      	bcc.n	8006d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d62:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d64:	4c0a      	ldr	r4, [pc, #40]	; (8006d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d68:	e001      	b.n	8006d6e <LoopFillZerobss>

08006d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d6c:	3204      	adds	r2, #4

08006d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d70:	d3fb      	bcc.n	8006d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006d72:	f7f9 f9f3 	bl	800015c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d76:	f000 fab7 	bl	80072e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d7a:	f7f9 fbd7 	bl	800052c <main>
  bx lr
 8006d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8006d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d84:	200004c4 	.word	0x200004c4
  ldr r2, =_sidata
 8006d88:	08008934 	.word	0x08008934
  ldr r2, =_sbss
 8006d8c:	200004c8 	.word	0x200004c8
  ldr r4, =_ebss
 8006d90:	20000e80 	.word	0x20000e80

08006d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d94:	e7fe      	b.n	8006d94 <ADC1_2_IRQHandler>
	...

08006d98 <Usart2Init>:
static int g_iEnd = 0;

int flag_usart = 0;

//USART2 для передачи на компьютер
void Usart2Init(void) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART2_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART2 initialization: PA2 - USART2_TX, PA3 - USART2_RX */

	USART2_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_PORT, ENABLE );
 8006d9e:	2101      	movs	r1, #1
 8006da0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006da4:	f7ff fc2e 	bl	8006604 <RCC_APB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8006da8:	2302      	movs	r3, #2
 8006daa:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8006dac:	2318      	movs	r3, #24
 8006dae:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_TX_PIN;
 8006db0:	2304      	movs	r3, #4
 8006db2:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 8006db4:	f107 0314 	add.w	r3, r7, #20
 8006db8:	4619      	mov	r1, r3
 8006dba:	4821      	ldr	r0, [pc, #132]	; (8006e40 <Usart2Init+0xa8>)
 8006dbc:	f7ff f870 	bl	8005ea0 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8006dc0:	2348      	movs	r3, #72	; 0x48
 8006dc2:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART2_RX_PIN;
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART2_GPIO_PORT, &GPIO_InitStruct );
 8006dc8:	f107 0314 	add.w	r3, r7, #20
 8006dcc:	4619      	mov	r1, r3
 8006dce:	481c      	ldr	r0, [pc, #112]	; (8006e40 <Usart2Init+0xa8>)
 8006dd0:	f7ff f866 	bl	8005ea0 <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART2_RCC_APBPORT, ENABLE );
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006dda:	f7ff fbf5 	bl	80065c8 <RCC_APB2PeriphClockCmd>

	USART2_InitStruct.USART_BaudRate = 9600;//для работы с SPI2 только эта скорость подходит
 8006dde:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006de2:	607b      	str	r3, [r7, #4]
	USART2_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8006de4:	2300      	movs	r3, #0
 8006de6:	823b      	strh	r3, [r7, #16]
	USART2_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8006de8:	230c      	movs	r3, #12
 8006dea:	81fb      	strh	r3, [r7, #14]
	USART2_InitStruct.USART_Parity = USART_Parity_No;
 8006dec:	2300      	movs	r3, #0
 8006dee:	81bb      	strh	r3, [r7, #12]
	USART2_InitStruct.USART_StopBits = USART_StopBits_1;
 8006df0:	2300      	movs	r3, #0
 8006df2:	817b      	strh	r3, [r7, #10]
	USART2_InitStruct.USART_WordLength = USART_WordLength_8b;
 8006df4:	2300      	movs	r3, #0
 8006df6:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART2_NUM, &USART2_InitStruct );
 8006df8:	1d3b      	adds	r3, r7, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4811      	ldr	r0, [pc, #68]	; (8006e44 <Usart2Init+0xac>)
 8006dfe:	f7ff fe2d 	bl	8006a5c <USART_Init>

	USART_Cmd ( USART2_NUM, ENABLE );
 8006e02:	2101      	movs	r1, #1
 8006e04:	480f      	ldr	r0, [pc, #60]	; (8006e44 <Usart2Init+0xac>)
 8006e06:	f7ff fee3 	bl	8006bd0 <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 8006e0a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8006e0e:	f7fe ffab 	bl	8005d68 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQ;
 8006e12:	2326      	movs	r3, #38	; 0x26
 8006e14:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8006e22:	463b      	mov	r3, r7
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe ffb1 	bl	8005d8c <NVIC_Init>

	USART_ITConfig ( USART2_NUM, USART_IT_RXNE, ENABLE );
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f240 5125 	movw	r1, #1317	; 0x525
 8006e30:	4804      	ldr	r0, [pc, #16]	; (8006e44 <Usart2Init+0xac>)
 8006e32:	f7ff feec 	bl	8006c0e <USART_ITConfig>

}
 8006e36:	bf00      	nop
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40010800 	.word	0x40010800
 8006e44:	40004400 	.word	0x40004400

08006e48 <Usart2_SendData>:
//******************************************************************


//******************************************************************
void Usart2_SendData (char* strcmd, int sz_cmd){
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
//Передача на копьютер до символа окончания строки (0x00).
	for(int ik=0;ik<sz_cmd;ik++){
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	e013      	b.n	8006e80 <Usart2_SendData+0x38>
	    //if(strcmd[ik]!=0x00){
 		  while(USART_GetFlagStatus(USART2_NUM, USART_FLAG_TXE) == RESET){}
 8006e58:	bf00      	nop
 8006e5a:	2180      	movs	r1, #128	; 0x80
 8006e5c:	480d      	ldr	r0, [pc, #52]	; (8006e94 <Usart2_SendData+0x4c>)
 8006e5e:	f7ff ff3d 	bl	8006cdc <USART_GetFlagStatus>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f8      	beq.n	8006e5a <Usart2_SendData+0x12>
		  USART_SendData(USART2_NUM, strcmd[ik]);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4619      	mov	r1, r3
 8006e74:	4807      	ldr	r0, [pc, #28]	; (8006e94 <Usart2_SendData+0x4c>)
 8006e76:	f7ff ff11 	bl	8006c9c <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	dbe7      	blt.n	8006e58 <Usart2_SendData+0x10>
	    //}
	}

}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40004400 	.word	0x40004400

08006e98 <SCAN_UsartInit>:

//******************************************************************
//******************************************************************
void SCAN_UsartInit(void) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
	USART_InitTypeDef		USART_InitStruct;
	NVIC_InitTypeDef		NVIC_InitStruct;

	/* USART1 initialization: PA9 - USART1_TX, PA10 - USART1_RX */

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_PORT, ENABLE );
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	2004      	movs	r0, #4
 8006ea2:	f7ff fb91 	bl	80065c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8006eaa:	2318      	movs	r3, #24
 8006eac:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_TX_PIN;
 8006eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eb2:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 8006eb4:	f107 0314 	add.w	r3, r7, #20
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4821      	ldr	r0, [pc, #132]	; (8006f40 <SCAN_UsartInit+0xa8>)
 8006ebc:	f7fe fff0 	bl	8005ea0 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8006ec0:	2348      	movs	r3, #72	; 0x48
 8006ec2:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = USART_RX_PIN;
 8006ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec8:	82bb      	strh	r3, [r7, #20]
	GPIO_Init ( USART_GPIO_PORT, &GPIO_InitStruct );
 8006eca:	f107 0314 	add.w	r3, r7, #20
 8006ece:	4619      	mov	r1, r3
 8006ed0:	481b      	ldr	r0, [pc, #108]	; (8006f40 <SCAN_UsartInit+0xa8>)
 8006ed2:	f7fe ffe5 	bl	8005ea0 <GPIO_Init>

	USART_RCC_PERIPH_CLOCK_CMD ( USART_RCC_APBPORT, ENABLE );
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006edc:	f7ff fb74 	bl	80065c8 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 9600;
 8006ee0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006ee4:	607b      	str	r3, [r7, #4]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8006eea:	230c      	movs	r3, #12
 8006eec:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	813b      	strh	r3, [r7, #8]
	USART_Init ( USART_NUM, &USART_InitStruct );
 8006efa:	1d3b      	adds	r3, r7, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4811      	ldr	r0, [pc, #68]	; (8006f44 <SCAN_UsartInit+0xac>)
 8006f00:	f7ff fdac 	bl	8006a5c <USART_Init>

	USART_Cmd ( USART_NUM, ENABLE );
 8006f04:	2101      	movs	r1, #1
 8006f06:	480f      	ldr	r0, [pc, #60]	; (8006f44 <SCAN_UsartInit+0xac>)
 8006f08:	f7ff fe62 	bl	8006bd0 <USART_Cmd>

	NVIC_PriorityGroupConfig ( NVIC_GROUP );
 8006f0c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8006f10:	f7fe ff2a 	bl	8005d68 <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART_IRQ;
 8006f14:	2325      	movs	r3, #37	; 0x25
 8006f16:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	70bb      	strb	r3, [r7, #2]
	NVIC_Init ( &NVIC_InitStruct );
 8006f24:	463b      	mov	r3, r7
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe ff30 	bl	8005d8c <NVIC_Init>

	USART_ITConfig ( USART_NUM, USART_IT_RXNE, ENABLE );
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f240 5125 	movw	r1, #1317	; 0x525
 8006f32:	4804      	ldr	r0, [pc, #16]	; (8006f44 <SCAN_UsartInit+0xac>)
 8006f34:	f7ff fe6b 	bl	8006c0e <USART_ITConfig>
}
 8006f38:	bf00      	nop
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40010800 	.word	0x40010800
 8006f44:	40013800 	.word	0x40013800

08006f48 <SCAN_SendCMD>:



void SCAN_SendCMD (char* strcmd,int sz_cmd){
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]

	for(int ik=0;ik<sz_cmd;ik++){
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e013      	b.n	8006f80 <SCAN_SendCMD+0x38>

		 while (READ_BIT(USART_NUM->SR, USART_SR_TXE) != (USART_SR_TXE)) {}
 8006f58:	bf00      	nop
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <SCAN_SendCMD+0x4c>)
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f64:	2b80      	cmp	r3, #128	; 0x80
 8006f66:	d1f8      	bne.n	8006f5a <SCAN_SendCMD+0x12>

		USART_SendData(USART_NUM, strcmd[ik]);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	4807      	ldr	r0, [pc, #28]	; (8006f94 <SCAN_SendCMD+0x4c>)
 8006f76:	f7ff fe91 	bl	8006c9c <USART_SendData>
	for(int ik=0;ik<sz_cmd;ik++){
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	dbe7      	blt.n	8006f58 <SCAN_SendCMD+0x10>
	}


}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40013800 	.word	0x40013800

08006f98 <USART_NUM_IRQHandler>:

void USART_NUM_IRQHandler ( void ) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus ( USART_NUM, USART_FLAG_RXNE ) == SET) {
 8006f9c:	2120      	movs	r1, #32
 8006f9e:	4824      	ldr	r0, [pc, #144]	; (8007030 <USART_NUM_IRQHandler+0x98>)
 8006fa0:	f7ff fe9c 	bl	8006cdc <USART_GetFlagStatus>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d13f      	bne.n	800702a <USART_NUM_IRQHandler+0x92>
		if(b_getversion){
 8006faa:	4b22      	ldr	r3, [pc, #136]	; (8007034 <USART_NUM_IRQHandler+0x9c>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01e      	beq.n	8006ff0 <USART_NUM_IRQHandler+0x58>

			USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 8006fb2:	f240 5125 	movw	r1, #1317	; 0x525
 8006fb6:	481e      	ldr	r0, [pc, #120]	; (8007030 <USART_NUM_IRQHandler+0x98>)
 8006fb8:	f7ff feab 	bl	8006d12 <USART_ClearITPendingBit>
			ScanerVersion [ cntbyteversion++ ] = USART_ReceiveData ( USART_NUM );
 8006fbc:	481c      	ldr	r0, [pc, #112]	; (8007030 <USART_NUM_IRQHandler+0x98>)
 8006fbe:	f7ff fe7e 	bl	8006cbe <USART_ReceiveData>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <USART_NUM_IRQHandler+0xa0>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	b2d1      	uxtb	r1, r2
 8006fce:	4a1a      	ldr	r2, [pc, #104]	; (8007038 <USART_NUM_IRQHandler+0xa0>)
 8006fd0:	7011      	strb	r1, [r2, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	b2c1      	uxtb	r1, r0
 8006fd6:	4b19      	ldr	r3, [pc, #100]	; (800703c <USART_NUM_IRQHandler+0xa4>)
 8006fd8:	5499      	strb	r1, [r3, r2]
			if (cntbyteversion>71){
 8006fda:	4b17      	ldr	r3, [pc, #92]	; (8007038 <USART_NUM_IRQHandler+0xa0>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b47      	cmp	r3, #71	; 0x47
 8006fe0:	d923      	bls.n	800702a <USART_NUM_IRQHandler+0x92>
				b_getversion=DISABLE;
 8006fe2:	4b14      	ldr	r3, [pc, #80]	; (8007034 <USART_NUM_IRQHandler+0x9c>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
				cntbyteversion=0;
 8006fe8:	4b13      	ldr	r3, [pc, #76]	; (8007038 <USART_NUM_IRQHandler+0xa0>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
		g_iEnd %= QUEUE_LEN;
		}
	}
}
 8006fee:	e01c      	b.n	800702a <USART_NUM_IRQHandler+0x92>
		USART_ClearITPendingBit ( USART_NUM, USART_IT_RXNE );
 8006ff0:	f240 5125 	movw	r1, #1317	; 0x525
 8006ff4:	480e      	ldr	r0, [pc, #56]	; (8007030 <USART_NUM_IRQHandler+0x98>)
 8006ff6:	f7ff fe8c 	bl	8006d12 <USART_ClearITPendingBit>
		g_aInputQueue [ g_iEnd++ ] = USART_ReceiveData ( USART_NUM );
 8006ffa:	480d      	ldr	r0, [pc, #52]	; (8007030 <USART_NUM_IRQHandler+0x98>)
 8006ffc:	f7ff fe5f 	bl	8006cbe <USART_ReceiveData>
 8007000:	4603      	mov	r3, r0
 8007002:	4618      	mov	r0, r3
 8007004:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <USART_NUM_IRQHandler+0xa8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	490d      	ldr	r1, [pc, #52]	; (8007040 <USART_NUM_IRQHandler+0xa8>)
 800700c:	600a      	str	r2, [r1, #0]
 800700e:	b2c1      	uxtb	r1, r0
 8007010:	4a0c      	ldr	r2, [pc, #48]	; (8007044 <USART_NUM_IRQHandler+0xac>)
 8007012:	54d1      	strb	r1, [r2, r3]
		g_iEnd %= QUEUE_LEN;
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <USART_NUM_IRQHandler+0xa8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	425a      	negs	r2, r3
 800701a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800701e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007022:	bf58      	it	pl
 8007024:	4253      	negpl	r3, r2
 8007026:	4a06      	ldr	r2, [pc, #24]	; (8007040 <USART_NUM_IRQHandler+0xa8>)
 8007028:	6013      	str	r3, [r2, #0]
}
 800702a:	bf00      	nop
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40013800 	.word	0x40013800
 8007034:	20000600 	.word	0x20000600
 8007038:	20000d8c 	.word	0x20000d8c
 800703c:	20000d90 	.word	0x20000d90
 8007040:	20000e64 	.word	0x20000e64
 8007044:	20000e20 	.word	0x20000e20

08007048 <FIFO_GetNextData>:




ErrorStatus FIFO_GetNextData ( char * pResult ) {
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]

	if ( g_iBegin != g_iEnd ) {
 8007054:	4b10      	ldr	r3, [pc, #64]	; (8007098 <FIFO_GetNextData+0x50>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	4b10      	ldr	r3, [pc, #64]	; (800709c <FIFO_GetNextData+0x54>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d015      	beq.n	800708c <FIFO_GetNextData+0x44>
		*pResult = g_aInputQueue [ g_iBegin++ ];
 8007060:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <FIFO_GetNextData+0x50>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	490c      	ldr	r1, [pc, #48]	; (8007098 <FIFO_GetNextData+0x50>)
 8007068:	600a      	str	r2, [r1, #0]
 800706a:	4a0d      	ldr	r2, [pc, #52]	; (80070a0 <FIFO_GetNextData+0x58>)
 800706c:	5cd2      	ldrb	r2, [r2, r3]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	701a      	strb	r2, [r3, #0]
		g_iBegin %= QUEUE_LEN;
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <FIFO_GetNextData+0x50>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	425a      	negs	r2, r3
 8007078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800707c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007080:	bf58      	it	pl
 8007082:	4253      	negpl	r3, r2
 8007084:	4a04      	ldr	r2, [pc, #16]	; (8007098 <FIFO_GetNextData+0x50>)
 8007086:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 8007088:	2301      	movs	r3, #1
 800708a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr
 8007098:	20000e60 	.word	0x20000e60
 800709c:	20000e64 	.word	0x20000e64
 80070a0:	20000e20 	.word	0x20000e20

080070a4 <Date_GetNextDate>:



ErrorStatus Date_GetNextDate(char *dResult ){
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	ErrorStatus res = ERROR;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
	if(date_iBegin != date_iEnd){
 80070b0:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <Date_GetNextDate+0x50>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <Date_GetNextDate+0x54>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d015      	beq.n	80070e8 <Date_GetNextDate+0x44>
		*dResult = date_InputQueue[date_iBegin++];
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <Date_GetNextDate+0x50>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	490c      	ldr	r1, [pc, #48]	; (80070f4 <Date_GetNextDate+0x50>)
 80070c4:	600a      	str	r2, [r1, #0]
 80070c6:	4a0d      	ldr	r2, [pc, #52]	; (80070fc <Date_GetNextDate+0x58>)
 80070c8:	5cd2      	ldrb	r2, [r2, r3]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	701a      	strb	r2, [r3, #0]
		date_iBegin %= DATE_LEN;
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <Date_GetNextDate+0x50>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	425a      	negs	r2, r3
 80070d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80070dc:	bf58      	it	pl
 80070de:	4253      	negpl	r3, r2
 80070e0:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <Date_GetNextDate+0x50>)
 80070e2:	6013      	str	r3, [r2, #0]
		res = SUCCESS;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	20000e18 	.word	0x20000e18
 80070f8:	20000e1c 	.word	0x20000e1c
 80070fc:	20000dd8 	.word	0x20000dd8

08007100 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus ( USART2_NUM, USART_FLAG_RXNE) == SET){
 8007104:	2120      	movs	r1, #32
 8007106:	4814      	ldr	r0, [pc, #80]	; (8007158 <USART2_IRQHandler+0x58>)
 8007108:	f7ff fde8 	bl	8006cdc <USART_GetFlagStatus>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d11f      	bne.n	8007152 <USART2_IRQHandler+0x52>
		flag_usart = 1;
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <USART2_IRQHandler+0x5c>)
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]
		USART_ClearITPendingBit(USART2_NUM, USART_IT_RXNE);
 8007118:	f240 5125 	movw	r1, #1317	; 0x525
 800711c:	480e      	ldr	r0, [pc, #56]	; (8007158 <USART2_IRQHandler+0x58>)
 800711e:	f7ff fdf8 	bl	8006d12 <USART_ClearITPendingBit>
		date_InputQueue [ date_iEnd++ ] = USART_ReceiveData(USART2_NUM);
 8007122:	480d      	ldr	r0, [pc, #52]	; (8007158 <USART2_IRQHandler+0x58>)
 8007124:	f7ff fdcb 	bl	8006cbe <USART_ReceiveData>
 8007128:	4603      	mov	r3, r0
 800712a:	4618      	mov	r0, r3
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <USART2_IRQHandler+0x60>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	490b      	ldr	r1, [pc, #44]	; (8007160 <USART2_IRQHandler+0x60>)
 8007134:	600a      	str	r2, [r1, #0]
 8007136:	b2c1      	uxtb	r1, r0
 8007138:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <USART2_IRQHandler+0x64>)
 800713a:	54d1      	strb	r1, [r2, r3]
		date_iEnd %= DATE_LEN;
 800713c:	4b08      	ldr	r3, [pc, #32]	; (8007160 <USART2_IRQHandler+0x60>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	425a      	negs	r2, r3
 8007142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007146:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800714a:	bf58      	it	pl
 800714c:	4253      	negpl	r3, r2
 800714e:	4a04      	ldr	r2, [pc, #16]	; (8007160 <USART2_IRQHandler+0x60>)
 8007150:	6013      	str	r3, [r2, #0]

	}
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40004400 	.word	0x40004400
 800715c:	20000e68 	.word	0x20000e68
 8007160:	20000e1c 	.word	0x20000e1c
 8007164:	20000dd8 	.word	0x20000dd8

08007168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
	return 1;
 800716c:	2301      	movs	r3, #1
}
 800716e:	4618      	mov	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <_kill>:

int _kill(int pid, int sig)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007180:	f000 f8ac 	bl	80072dc <__errno>
 8007184:	4603      	mov	r3, r0
 8007186:	2216      	movs	r2, #22
 8007188:	601a      	str	r2, [r3, #0]
	return -1;
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <_exit>:

void _exit (int status)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800719e:	f04f 31ff 	mov.w	r1, #4294967295
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff ffe7 	bl	8007176 <_kill>
	while (1) {}		/* Make sure we hang here */
 80071a8:	e7fe      	b.n	80071a8 <_exit+0x12>

080071aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b086      	sub	sp, #24
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e00a      	b.n	80071d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80071bc:	f3af 8000 	nop.w
 80071c0:	4601      	mov	r1, r0
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	60ba      	str	r2, [r7, #8]
 80071c8:	b2ca      	uxtb	r2, r1
 80071ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	3301      	adds	r3, #1
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	dbf0      	blt.n	80071bc <_read+0x12>
	}

return len;
 80071da:	687b      	ldr	r3, [r7, #4]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	e009      	b.n	800720a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	60ba      	str	r2, [r7, #8]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3301      	adds	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	429a      	cmp	r2, r3
 8007210:	dbf1      	blt.n	80071f6 <_write+0x12>
	}
	return len;
 8007212:	687b      	ldr	r3, [r7, #4]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <_close>:

int _close(int file)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	return -1;
 8007224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007242:	605a      	str	r2, [r3, #4]
	return 0;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <_isatty>:

int _isatty(int file)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
	return 1;
 8007258:	2301      	movs	r3, #1
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
	return 0;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <_sbrk+0x50>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <_sbrk+0x16>
		heap_end = &end;
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <_sbrk+0x50>)
 800728e:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <_sbrk+0x54>)
 8007290:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007292:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <_sbrk+0x50>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007298:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <_sbrk+0x50>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4413      	add	r3, r2
 80072a0:	466a      	mov	r2, sp
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d907      	bls.n	80072b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80072a6:	f000 f819 	bl	80072dc <__errno>
 80072aa:	4603      	mov	r3, r0
 80072ac:	220c      	movs	r2, #12
 80072ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295
 80072b4:	e006      	b.n	80072c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <_sbrk+0x50>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4413      	add	r3, r2
 80072be:	4a03      	ldr	r2, [pc, #12]	; (80072cc <_sbrk+0x50>)
 80072c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80072c2:	68fb      	ldr	r3, [r7, #12]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20000e6c 	.word	0x20000e6c
 80072d0:	20000e80 	.word	0x20000e80

080072d4 <atoi>:
 80072d4:	220a      	movs	r2, #10
 80072d6:	2100      	movs	r1, #0
 80072d8:	f000 b9b0 	b.w	800763c <strtol>

080072dc <__errno>:
 80072dc:	4b01      	ldr	r3, [pc, #4]	; (80072e4 <__errno+0x8>)
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20000460 	.word	0x20000460

080072e8 <__libc_init_array>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	2600      	movs	r6, #0
 80072ec:	4d0c      	ldr	r5, [pc, #48]	; (8007320 <__libc_init_array+0x38>)
 80072ee:	4c0d      	ldr	r4, [pc, #52]	; (8007324 <__libc_init_array+0x3c>)
 80072f0:	1b64      	subs	r4, r4, r5
 80072f2:	10a4      	asrs	r4, r4, #2
 80072f4:	42a6      	cmp	r6, r4
 80072f6:	d109      	bne.n	800730c <__libc_init_array+0x24>
 80072f8:	f001 f9aa 	bl	8008650 <_init>
 80072fc:	2600      	movs	r6, #0
 80072fe:	4d0a      	ldr	r5, [pc, #40]	; (8007328 <__libc_init_array+0x40>)
 8007300:	4c0a      	ldr	r4, [pc, #40]	; (800732c <__libc_init_array+0x44>)
 8007302:	1b64      	subs	r4, r4, r5
 8007304:	10a4      	asrs	r4, r4, #2
 8007306:	42a6      	cmp	r6, r4
 8007308:	d105      	bne.n	8007316 <__libc_init_array+0x2e>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007310:	4798      	blx	r3
 8007312:	3601      	adds	r6, #1
 8007314:	e7ee      	b.n	80072f4 <__libc_init_array+0xc>
 8007316:	f855 3b04 	ldr.w	r3, [r5], #4
 800731a:	4798      	blx	r3
 800731c:	3601      	adds	r6, #1
 800731e:	e7f2      	b.n	8007306 <__libc_init_array+0x1e>
 8007320:	0800892c 	.word	0x0800892c
 8007324:	0800892c 	.word	0x0800892c
 8007328:	0800892c 	.word	0x0800892c
 800732c:	08008930 	.word	0x08008930

08007330 <memcmp>:
 8007330:	b510      	push	{r4, lr}
 8007332:	3901      	subs	r1, #1
 8007334:	4402      	add	r2, r0
 8007336:	4290      	cmp	r0, r2
 8007338:	d101      	bne.n	800733e <memcmp+0xe>
 800733a:	2000      	movs	r0, #0
 800733c:	e005      	b.n	800734a <memcmp+0x1a>
 800733e:	7803      	ldrb	r3, [r0, #0]
 8007340:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007344:	42a3      	cmp	r3, r4
 8007346:	d001      	beq.n	800734c <memcmp+0x1c>
 8007348:	1b18      	subs	r0, r3, r4
 800734a:	bd10      	pop	{r4, pc}
 800734c:	3001      	adds	r0, #1
 800734e:	e7f2      	b.n	8007336 <memcmp+0x6>

08007350 <memcpy>:
 8007350:	440a      	add	r2, r1
 8007352:	4291      	cmp	r1, r2
 8007354:	f100 33ff 	add.w	r3, r0, #4294967295
 8007358:	d100      	bne.n	800735c <memcpy+0xc>
 800735a:	4770      	bx	lr
 800735c:	b510      	push	{r4, lr}
 800735e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007362:	4291      	cmp	r1, r2
 8007364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007368:	d1f9      	bne.n	800735e <memcpy+0xe>
 800736a:	bd10      	pop	{r4, pc}

0800736c <memmove>:
 800736c:	4288      	cmp	r0, r1
 800736e:	b510      	push	{r4, lr}
 8007370:	eb01 0402 	add.w	r4, r1, r2
 8007374:	d902      	bls.n	800737c <memmove+0x10>
 8007376:	4284      	cmp	r4, r0
 8007378:	4623      	mov	r3, r4
 800737a:	d807      	bhi.n	800738c <memmove+0x20>
 800737c:	1e43      	subs	r3, r0, #1
 800737e:	42a1      	cmp	r1, r4
 8007380:	d008      	beq.n	8007394 <memmove+0x28>
 8007382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800738a:	e7f8      	b.n	800737e <memmove+0x12>
 800738c:	4601      	mov	r1, r0
 800738e:	4402      	add	r2, r0
 8007390:	428a      	cmp	r2, r1
 8007392:	d100      	bne.n	8007396 <memmove+0x2a>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800739a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800739e:	e7f7      	b.n	8007390 <memmove+0x24>

080073a0 <memset>:
 80073a0:	4603      	mov	r3, r0
 80073a2:	4402      	add	r2, r0
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d100      	bne.n	80073aa <memset+0xa>
 80073a8:	4770      	bx	lr
 80073aa:	f803 1b01 	strb.w	r1, [r3], #1
 80073ae:	e7f9      	b.n	80073a4 <memset+0x4>

080073b0 <strcat>:
 80073b0:	4602      	mov	r2, r0
 80073b2:	b510      	push	{r4, lr}
 80073b4:	7814      	ldrb	r4, [r2, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	3201      	adds	r2, #1
 80073ba:	2c00      	cmp	r4, #0
 80073bc:	d1fa      	bne.n	80073b4 <strcat+0x4>
 80073be:	3b01      	subs	r3, #1
 80073c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	d1f9      	bne.n	80073c0 <strcat+0x10>
 80073cc:	bd10      	pop	{r4, pc}

080073ce <strcpy>:
 80073ce:	4603      	mov	r3, r0
 80073d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d4:	f803 2b01 	strb.w	r2, [r3], #1
 80073d8:	2a00      	cmp	r2, #0
 80073da:	d1f9      	bne.n	80073d0 <strcpy+0x2>
 80073dc:	4770      	bx	lr

080073de <strlcpy>:
 80073de:	460b      	mov	r3, r1
 80073e0:	b510      	push	{r4, lr}
 80073e2:	b162      	cbz	r2, 80073fe <strlcpy+0x20>
 80073e4:	3a01      	subs	r2, #1
 80073e6:	d008      	beq.n	80073fa <strlcpy+0x1c>
 80073e8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80073ec:	f800 4b01 	strb.w	r4, [r0], #1
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	d1f7      	bne.n	80073e4 <strlcpy+0x6>
 80073f4:	1a58      	subs	r0, r3, r1
 80073f6:	3801      	subs	r0, #1
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	2200      	movs	r2, #0
 80073fc:	7002      	strb	r2, [r0, #0]
 80073fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007402:	2a00      	cmp	r2, #0
 8007404:	d1fb      	bne.n	80073fe <strlcpy+0x20>
 8007406:	e7f5      	b.n	80073f4 <strlcpy+0x16>

08007408 <strncat>:
 8007408:	b530      	push	{r4, r5, lr}
 800740a:	4604      	mov	r4, r0
 800740c:	7825      	ldrb	r5, [r4, #0]
 800740e:	4623      	mov	r3, r4
 8007410:	3401      	adds	r4, #1
 8007412:	2d00      	cmp	r5, #0
 8007414:	d1fa      	bne.n	800740c <strncat+0x4>
 8007416:	3a01      	subs	r2, #1
 8007418:	d304      	bcc.n	8007424 <strncat+0x1c>
 800741a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800741e:	f803 4b01 	strb.w	r4, [r3], #1
 8007422:	b904      	cbnz	r4, 8007426 <strncat+0x1e>
 8007424:	bd30      	pop	{r4, r5, pc}
 8007426:	2a00      	cmp	r2, #0
 8007428:	d1f5      	bne.n	8007416 <strncat+0xe>
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e7f3      	b.n	8007416 <strncat+0xe>

0800742e <strpbrk>:
 800742e:	b570      	push	{r4, r5, r6, lr}
 8007430:	4603      	mov	r3, r0
 8007432:	7800      	ldrb	r0, [r0, #0]
 8007434:	b190      	cbz	r0, 800745c <strpbrk+0x2e>
 8007436:	460c      	mov	r4, r1
 8007438:	4618      	mov	r0, r3
 800743a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800743e:	b14d      	cbz	r5, 8007454 <strpbrk+0x26>
 8007440:	460a      	mov	r2, r1
 8007442:	e001      	b.n	8007448 <strpbrk+0x1a>
 8007444:	42ae      	cmp	r6, r5
 8007446:	d009      	beq.n	800745c <strpbrk+0x2e>
 8007448:	4614      	mov	r4, r2
 800744a:	f812 6b01 	ldrb.w	r6, [r2], #1
 800744e:	2e00      	cmp	r6, #0
 8007450:	d1f8      	bne.n	8007444 <strpbrk+0x16>
 8007452:	e7f1      	b.n	8007438 <strpbrk+0xa>
 8007454:	7823      	ldrb	r3, [r4, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bf08      	it	eq
 800745a:	2000      	moveq	r0, #0
 800745c:	bd70      	pop	{r4, r5, r6, pc}

0800745e <strstr>:
 800745e:	780a      	ldrb	r2, [r1, #0]
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	b96a      	cbnz	r2, 8007480 <strstr+0x22>
 8007464:	bd70      	pop	{r4, r5, r6, pc}
 8007466:	429a      	cmp	r2, r3
 8007468:	d109      	bne.n	800747e <strstr+0x20>
 800746a:	460c      	mov	r4, r1
 800746c:	4605      	mov	r5, r0
 800746e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f6      	beq.n	8007464 <strstr+0x6>
 8007476:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800747a:	429e      	cmp	r6, r3
 800747c:	d0f7      	beq.n	800746e <strstr+0x10>
 800747e:	3001      	adds	r0, #1
 8007480:	7803      	ldrb	r3, [r0, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ef      	bne.n	8007466 <strstr+0x8>
 8007486:	4618      	mov	r0, r3
 8007488:	e7ec      	b.n	8007464 <strstr+0x6>
	...

0800748c <strtok>:
 800748c:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <strtok+0x5c>)
 800748e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007492:	681f      	ldr	r7, [r3, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007498:	460e      	mov	r6, r1
 800749a:	b9ec      	cbnz	r4, 80074d8 <strtok+0x4c>
 800749c:	2050      	movs	r0, #80	; 0x50
 800749e:	f000 f907 	bl	80076b0 <malloc>
 80074a2:	4602      	mov	r2, r0
 80074a4:	65b8      	str	r0, [r7, #88]	; 0x58
 80074a6:	b920      	cbnz	r0, 80074b2 <strtok+0x26>
 80074a8:	2157      	movs	r1, #87	; 0x57
 80074aa:	4b10      	ldr	r3, [pc, #64]	; (80074ec <strtok+0x60>)
 80074ac:	4810      	ldr	r0, [pc, #64]	; (80074f0 <strtok+0x64>)
 80074ae:	f000 f8cf 	bl	8007650 <__assert_func>
 80074b2:	e9c0 4400 	strd	r4, r4, [r0]
 80074b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80074ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80074be:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80074c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80074c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80074ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80074ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80074d2:	6184      	str	r4, [r0, #24]
 80074d4:	7704      	strb	r4, [r0, #28]
 80074d6:	6244      	str	r4, [r0, #36]	; 0x24
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074de:	2301      	movs	r3, #1
 80074e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	f000 b806 	b.w	80074f4 <__strtok_r>
 80074e8:	20000460 	.word	0x20000460
 80074ec:	080086e8 	.word	0x080086e8
 80074f0:	080086ff 	.word	0x080086ff

080074f4 <__strtok_r>:
 80074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f6:	b908      	cbnz	r0, 80074fc <__strtok_r+0x8>
 80074f8:	6810      	ldr	r0, [r2, #0]
 80074fa:	b188      	cbz	r0, 8007520 <__strtok_r+0x2c>
 80074fc:	4604      	mov	r4, r0
 80074fe:	460f      	mov	r7, r1
 8007500:	4620      	mov	r0, r4
 8007502:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007506:	f817 6b01 	ldrb.w	r6, [r7], #1
 800750a:	b91e      	cbnz	r6, 8007514 <__strtok_r+0x20>
 800750c:	b965      	cbnz	r5, 8007528 <__strtok_r+0x34>
 800750e:	4628      	mov	r0, r5
 8007510:	6015      	str	r5, [r2, #0]
 8007512:	e005      	b.n	8007520 <__strtok_r+0x2c>
 8007514:	42b5      	cmp	r5, r6
 8007516:	d1f6      	bne.n	8007506 <__strtok_r+0x12>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f0      	bne.n	80074fe <__strtok_r+0xa>
 800751c:	6014      	str	r4, [r2, #0]
 800751e:	7003      	strb	r3, [r0, #0]
 8007520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007522:	461c      	mov	r4, r3
 8007524:	e00c      	b.n	8007540 <__strtok_r+0x4c>
 8007526:	b915      	cbnz	r5, 800752e <__strtok_r+0x3a>
 8007528:	460e      	mov	r6, r1
 800752a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800752e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007532:	42ab      	cmp	r3, r5
 8007534:	d1f7      	bne.n	8007526 <__strtok_r+0x32>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f3      	beq.n	8007522 <__strtok_r+0x2e>
 800753a:	2300      	movs	r3, #0
 800753c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007540:	6014      	str	r4, [r2, #0]
 8007542:	e7ed      	b.n	8007520 <__strtok_r+0x2c>

08007544 <_strtol_l.constprop.0>:
 8007544:	2b01      	cmp	r3, #1
 8007546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800754a:	4680      	mov	r8, r0
 800754c:	d001      	beq.n	8007552 <_strtol_l.constprop.0+0xe>
 800754e:	2b24      	cmp	r3, #36	; 0x24
 8007550:	d906      	bls.n	8007560 <_strtol_l.constprop.0+0x1c>
 8007552:	f7ff fec3 	bl	80072dc <__errno>
 8007556:	2316      	movs	r3, #22
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	2000      	movs	r0, #0
 800755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007560:	460d      	mov	r5, r1
 8007562:	4f35      	ldr	r7, [pc, #212]	; (8007638 <_strtol_l.constprop.0+0xf4>)
 8007564:	4628      	mov	r0, r5
 8007566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800756a:	5de6      	ldrb	r6, [r4, r7]
 800756c:	f016 0608 	ands.w	r6, r6, #8
 8007570:	d1f8      	bne.n	8007564 <_strtol_l.constprop.0+0x20>
 8007572:	2c2d      	cmp	r4, #45	; 0x2d
 8007574:	d12f      	bne.n	80075d6 <_strtol_l.constprop.0+0x92>
 8007576:	2601      	movs	r6, #1
 8007578:	782c      	ldrb	r4, [r5, #0]
 800757a:	1c85      	adds	r5, r0, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d057      	beq.n	8007630 <_strtol_l.constprop.0+0xec>
 8007580:	2b10      	cmp	r3, #16
 8007582:	d109      	bne.n	8007598 <_strtol_l.constprop.0+0x54>
 8007584:	2c30      	cmp	r4, #48	; 0x30
 8007586:	d107      	bne.n	8007598 <_strtol_l.constprop.0+0x54>
 8007588:	7828      	ldrb	r0, [r5, #0]
 800758a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800758e:	2858      	cmp	r0, #88	; 0x58
 8007590:	d149      	bne.n	8007626 <_strtol_l.constprop.0+0xe2>
 8007592:	2310      	movs	r3, #16
 8007594:	786c      	ldrb	r4, [r5, #1]
 8007596:	3502      	adds	r5, #2
 8007598:	2700      	movs	r7, #0
 800759a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800759e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80075a2:	fbbe f9f3 	udiv	r9, lr, r3
 80075a6:	4638      	mov	r0, r7
 80075a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80075ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80075b0:	f1bc 0f09 	cmp.w	ip, #9
 80075b4:	d814      	bhi.n	80075e0 <_strtol_l.constprop.0+0x9c>
 80075b6:	4664      	mov	r4, ip
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	dd22      	ble.n	8007602 <_strtol_l.constprop.0+0xbe>
 80075bc:	2f00      	cmp	r7, #0
 80075be:	db1d      	blt.n	80075fc <_strtol_l.constprop.0+0xb8>
 80075c0:	4581      	cmp	r9, r0
 80075c2:	d31b      	bcc.n	80075fc <_strtol_l.constprop.0+0xb8>
 80075c4:	d101      	bne.n	80075ca <_strtol_l.constprop.0+0x86>
 80075c6:	45a2      	cmp	sl, r4
 80075c8:	db18      	blt.n	80075fc <_strtol_l.constprop.0+0xb8>
 80075ca:	2701      	movs	r7, #1
 80075cc:	fb00 4003 	mla	r0, r0, r3, r4
 80075d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075d4:	e7ea      	b.n	80075ac <_strtol_l.constprop.0+0x68>
 80075d6:	2c2b      	cmp	r4, #43	; 0x2b
 80075d8:	bf04      	itt	eq
 80075da:	782c      	ldrbeq	r4, [r5, #0]
 80075dc:	1c85      	addeq	r5, r0, #2
 80075de:	e7cd      	b.n	800757c <_strtol_l.constprop.0+0x38>
 80075e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80075e4:	f1bc 0f19 	cmp.w	ip, #25
 80075e8:	d801      	bhi.n	80075ee <_strtol_l.constprop.0+0xaa>
 80075ea:	3c37      	subs	r4, #55	; 0x37
 80075ec:	e7e4      	b.n	80075b8 <_strtol_l.constprop.0+0x74>
 80075ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80075f2:	f1bc 0f19 	cmp.w	ip, #25
 80075f6:	d804      	bhi.n	8007602 <_strtol_l.constprop.0+0xbe>
 80075f8:	3c57      	subs	r4, #87	; 0x57
 80075fa:	e7dd      	b.n	80075b8 <_strtol_l.constprop.0+0x74>
 80075fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007600:	e7e6      	b.n	80075d0 <_strtol_l.constprop.0+0x8c>
 8007602:	2f00      	cmp	r7, #0
 8007604:	da07      	bge.n	8007616 <_strtol_l.constprop.0+0xd2>
 8007606:	2322      	movs	r3, #34	; 0x22
 8007608:	4670      	mov	r0, lr
 800760a:	f8c8 3000 	str.w	r3, [r8]
 800760e:	2a00      	cmp	r2, #0
 8007610:	d0a4      	beq.n	800755c <_strtol_l.constprop.0+0x18>
 8007612:	1e69      	subs	r1, r5, #1
 8007614:	e005      	b.n	8007622 <_strtol_l.constprop.0+0xde>
 8007616:	b106      	cbz	r6, 800761a <_strtol_l.constprop.0+0xd6>
 8007618:	4240      	negs	r0, r0
 800761a:	2a00      	cmp	r2, #0
 800761c:	d09e      	beq.n	800755c <_strtol_l.constprop.0+0x18>
 800761e:	2f00      	cmp	r7, #0
 8007620:	d1f7      	bne.n	8007612 <_strtol_l.constprop.0+0xce>
 8007622:	6011      	str	r1, [r2, #0]
 8007624:	e79a      	b.n	800755c <_strtol_l.constprop.0+0x18>
 8007626:	2430      	movs	r4, #48	; 0x30
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1b5      	bne.n	8007598 <_strtol_l.constprop.0+0x54>
 800762c:	2308      	movs	r3, #8
 800762e:	e7b3      	b.n	8007598 <_strtol_l.constprop.0+0x54>
 8007630:	2c30      	cmp	r4, #48	; 0x30
 8007632:	d0a9      	beq.n	8007588 <_strtol_l.constprop.0+0x44>
 8007634:	230a      	movs	r3, #10
 8007636:	e7af      	b.n	8007598 <_strtol_l.constprop.0+0x54>
 8007638:	08008799 	.word	0x08008799

0800763c <strtol>:
 800763c:	4613      	mov	r3, r2
 800763e:	460a      	mov	r2, r1
 8007640:	4601      	mov	r1, r0
 8007642:	4802      	ldr	r0, [pc, #8]	; (800764c <strtol+0x10>)
 8007644:	6800      	ldr	r0, [r0, #0]
 8007646:	f7ff bf7d 	b.w	8007544 <_strtol_l.constprop.0>
 800764a:	bf00      	nop
 800764c:	20000460 	.word	0x20000460

08007650 <__assert_func>:
 8007650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007652:	4614      	mov	r4, r2
 8007654:	461a      	mov	r2, r3
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <__assert_func+0x2c>)
 8007658:	4605      	mov	r5, r0
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68d8      	ldr	r0, [r3, #12]
 800765e:	b14c      	cbz	r4, 8007674 <__assert_func+0x24>
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <__assert_func+0x30>)
 8007662:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007666:	9100      	str	r1, [sp, #0]
 8007668:	462b      	mov	r3, r5
 800766a:	4906      	ldr	r1, [pc, #24]	; (8007684 <__assert_func+0x34>)
 800766c:	f000 f80e 	bl	800768c <fiprintf>
 8007670:	f000 fcc0 	bl	8007ff4 <abort>
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <__assert_func+0x38>)
 8007676:	461c      	mov	r4, r3
 8007678:	e7f3      	b.n	8007662 <__assert_func+0x12>
 800767a:	bf00      	nop
 800767c:	20000460 	.word	0x20000460
 8007680:	0800875c 	.word	0x0800875c
 8007684:	08008769 	.word	0x08008769
 8007688:	08008797 	.word	0x08008797

0800768c <fiprintf>:
 800768c:	b40e      	push	{r1, r2, r3}
 800768e:	b503      	push	{r0, r1, lr}
 8007690:	4601      	mov	r1, r0
 8007692:	ab03      	add	r3, sp, #12
 8007694:	4805      	ldr	r0, [pc, #20]	; (80076ac <fiprintf+0x20>)
 8007696:	f853 2b04 	ldr.w	r2, [r3], #4
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f000 f913 	bl	80078c8 <_vfiprintf_r>
 80076a2:	b002      	add	sp, #8
 80076a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a8:	b003      	add	sp, #12
 80076aa:	4770      	bx	lr
 80076ac:	20000460 	.word	0x20000460

080076b0 <malloc>:
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <malloc+0xc>)
 80076b2:	4601      	mov	r1, r0
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	f000 b86b 	b.w	8007790 <_malloc_r>
 80076ba:	bf00      	nop
 80076bc:	20000460 	.word	0x20000460

080076c0 <_free_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4605      	mov	r5, r0
 80076c4:	2900      	cmp	r1, #0
 80076c6:	d040      	beq.n	800774a <_free_r+0x8a>
 80076c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076cc:	1f0c      	subs	r4, r1, #4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bfb8      	it	lt
 80076d2:	18e4      	addlt	r4, r4, r3
 80076d4:	f000 fec0 	bl	8008458 <__malloc_lock>
 80076d8:	4a1c      	ldr	r2, [pc, #112]	; (800774c <_free_r+0x8c>)
 80076da:	6813      	ldr	r3, [r2, #0]
 80076dc:	b933      	cbnz	r3, 80076ec <_free_r+0x2c>
 80076de:	6063      	str	r3, [r4, #4]
 80076e0:	6014      	str	r4, [r2, #0]
 80076e2:	4628      	mov	r0, r5
 80076e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e8:	f000 bebc 	b.w	8008464 <__malloc_unlock>
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	d908      	bls.n	8007702 <_free_r+0x42>
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	1821      	adds	r1, r4, r0
 80076f4:	428b      	cmp	r3, r1
 80076f6:	bf01      	itttt	eq
 80076f8:	6819      	ldreq	r1, [r3, #0]
 80076fa:	685b      	ldreq	r3, [r3, #4]
 80076fc:	1809      	addeq	r1, r1, r0
 80076fe:	6021      	streq	r1, [r4, #0]
 8007700:	e7ed      	b.n	80076de <_free_r+0x1e>
 8007702:	461a      	mov	r2, r3
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	b10b      	cbz	r3, 800770c <_free_r+0x4c>
 8007708:	42a3      	cmp	r3, r4
 800770a:	d9fa      	bls.n	8007702 <_free_r+0x42>
 800770c:	6811      	ldr	r1, [r2, #0]
 800770e:	1850      	adds	r0, r2, r1
 8007710:	42a0      	cmp	r0, r4
 8007712:	d10b      	bne.n	800772c <_free_r+0x6c>
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	4401      	add	r1, r0
 8007718:	1850      	adds	r0, r2, r1
 800771a:	4283      	cmp	r3, r0
 800771c:	6011      	str	r1, [r2, #0]
 800771e:	d1e0      	bne.n	80076e2 <_free_r+0x22>
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	4401      	add	r1, r0
 8007726:	6011      	str	r1, [r2, #0]
 8007728:	6053      	str	r3, [r2, #4]
 800772a:	e7da      	b.n	80076e2 <_free_r+0x22>
 800772c:	d902      	bls.n	8007734 <_free_r+0x74>
 800772e:	230c      	movs	r3, #12
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	e7d6      	b.n	80076e2 <_free_r+0x22>
 8007734:	6820      	ldr	r0, [r4, #0]
 8007736:	1821      	adds	r1, r4, r0
 8007738:	428b      	cmp	r3, r1
 800773a:	bf01      	itttt	eq
 800773c:	6819      	ldreq	r1, [r3, #0]
 800773e:	685b      	ldreq	r3, [r3, #4]
 8007740:	1809      	addeq	r1, r1, r0
 8007742:	6021      	streq	r1, [r4, #0]
 8007744:	6063      	str	r3, [r4, #4]
 8007746:	6054      	str	r4, [r2, #4]
 8007748:	e7cb      	b.n	80076e2 <_free_r+0x22>
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	20000e70 	.word	0x20000e70

08007750 <sbrk_aligned>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	4e0e      	ldr	r6, [pc, #56]	; (800778c <sbrk_aligned+0x3c>)
 8007754:	460c      	mov	r4, r1
 8007756:	6831      	ldr	r1, [r6, #0]
 8007758:	4605      	mov	r5, r0
 800775a:	b911      	cbnz	r1, 8007762 <sbrk_aligned+0x12>
 800775c:	f000 fb7a 	bl	8007e54 <_sbrk_r>
 8007760:	6030      	str	r0, [r6, #0]
 8007762:	4621      	mov	r1, r4
 8007764:	4628      	mov	r0, r5
 8007766:	f000 fb75 	bl	8007e54 <_sbrk_r>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	d00a      	beq.n	8007784 <sbrk_aligned+0x34>
 800776e:	1cc4      	adds	r4, r0, #3
 8007770:	f024 0403 	bic.w	r4, r4, #3
 8007774:	42a0      	cmp	r0, r4
 8007776:	d007      	beq.n	8007788 <sbrk_aligned+0x38>
 8007778:	1a21      	subs	r1, r4, r0
 800777a:	4628      	mov	r0, r5
 800777c:	f000 fb6a 	bl	8007e54 <_sbrk_r>
 8007780:	3001      	adds	r0, #1
 8007782:	d101      	bne.n	8007788 <sbrk_aligned+0x38>
 8007784:	f04f 34ff 	mov.w	r4, #4294967295
 8007788:	4620      	mov	r0, r4
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	20000e74 	.word	0x20000e74

08007790 <_malloc_r>:
 8007790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007794:	1ccd      	adds	r5, r1, #3
 8007796:	f025 0503 	bic.w	r5, r5, #3
 800779a:	3508      	adds	r5, #8
 800779c:	2d0c      	cmp	r5, #12
 800779e:	bf38      	it	cc
 80077a0:	250c      	movcc	r5, #12
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	4607      	mov	r7, r0
 80077a6:	db01      	blt.n	80077ac <_malloc_r+0x1c>
 80077a8:	42a9      	cmp	r1, r5
 80077aa:	d905      	bls.n	80077b8 <_malloc_r+0x28>
 80077ac:	230c      	movs	r3, #12
 80077ae:	2600      	movs	r6, #0
 80077b0:	603b      	str	r3, [r7, #0]
 80077b2:	4630      	mov	r0, r6
 80077b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b8:	4e2e      	ldr	r6, [pc, #184]	; (8007874 <_malloc_r+0xe4>)
 80077ba:	f000 fe4d 	bl	8008458 <__malloc_lock>
 80077be:	6833      	ldr	r3, [r6, #0]
 80077c0:	461c      	mov	r4, r3
 80077c2:	bb34      	cbnz	r4, 8007812 <_malloc_r+0x82>
 80077c4:	4629      	mov	r1, r5
 80077c6:	4638      	mov	r0, r7
 80077c8:	f7ff ffc2 	bl	8007750 <sbrk_aligned>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	4604      	mov	r4, r0
 80077d0:	d14d      	bne.n	800786e <_malloc_r+0xde>
 80077d2:	6834      	ldr	r4, [r6, #0]
 80077d4:	4626      	mov	r6, r4
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d140      	bne.n	800785c <_malloc_r+0xcc>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	4631      	mov	r1, r6
 80077de:	4638      	mov	r0, r7
 80077e0:	eb04 0803 	add.w	r8, r4, r3
 80077e4:	f000 fb36 	bl	8007e54 <_sbrk_r>
 80077e8:	4580      	cmp	r8, r0
 80077ea:	d13a      	bne.n	8007862 <_malloc_r+0xd2>
 80077ec:	6821      	ldr	r1, [r4, #0]
 80077ee:	3503      	adds	r5, #3
 80077f0:	1a6d      	subs	r5, r5, r1
 80077f2:	f025 0503 	bic.w	r5, r5, #3
 80077f6:	3508      	adds	r5, #8
 80077f8:	2d0c      	cmp	r5, #12
 80077fa:	bf38      	it	cc
 80077fc:	250c      	movcc	r5, #12
 80077fe:	4638      	mov	r0, r7
 8007800:	4629      	mov	r1, r5
 8007802:	f7ff ffa5 	bl	8007750 <sbrk_aligned>
 8007806:	3001      	adds	r0, #1
 8007808:	d02b      	beq.n	8007862 <_malloc_r+0xd2>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	442b      	add	r3, r5
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	e00e      	b.n	8007830 <_malloc_r+0xa0>
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	1b52      	subs	r2, r2, r5
 8007816:	d41e      	bmi.n	8007856 <_malloc_r+0xc6>
 8007818:	2a0b      	cmp	r2, #11
 800781a:	d916      	bls.n	800784a <_malloc_r+0xba>
 800781c:	1961      	adds	r1, r4, r5
 800781e:	42a3      	cmp	r3, r4
 8007820:	6025      	str	r5, [r4, #0]
 8007822:	bf18      	it	ne
 8007824:	6059      	strne	r1, [r3, #4]
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	bf08      	it	eq
 800782a:	6031      	streq	r1, [r6, #0]
 800782c:	5162      	str	r2, [r4, r5]
 800782e:	604b      	str	r3, [r1, #4]
 8007830:	4638      	mov	r0, r7
 8007832:	f104 060b 	add.w	r6, r4, #11
 8007836:	f000 fe15 	bl	8008464 <__malloc_unlock>
 800783a:	f026 0607 	bic.w	r6, r6, #7
 800783e:	1d23      	adds	r3, r4, #4
 8007840:	1af2      	subs	r2, r6, r3
 8007842:	d0b6      	beq.n	80077b2 <_malloc_r+0x22>
 8007844:	1b9b      	subs	r3, r3, r6
 8007846:	50a3      	str	r3, [r4, r2]
 8007848:	e7b3      	b.n	80077b2 <_malloc_r+0x22>
 800784a:	6862      	ldr	r2, [r4, #4]
 800784c:	42a3      	cmp	r3, r4
 800784e:	bf0c      	ite	eq
 8007850:	6032      	streq	r2, [r6, #0]
 8007852:	605a      	strne	r2, [r3, #4]
 8007854:	e7ec      	b.n	8007830 <_malloc_r+0xa0>
 8007856:	4623      	mov	r3, r4
 8007858:	6864      	ldr	r4, [r4, #4]
 800785a:	e7b2      	b.n	80077c2 <_malloc_r+0x32>
 800785c:	4634      	mov	r4, r6
 800785e:	6876      	ldr	r6, [r6, #4]
 8007860:	e7b9      	b.n	80077d6 <_malloc_r+0x46>
 8007862:	230c      	movs	r3, #12
 8007864:	4638      	mov	r0, r7
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	f000 fdfc 	bl	8008464 <__malloc_unlock>
 800786c:	e7a1      	b.n	80077b2 <_malloc_r+0x22>
 800786e:	6025      	str	r5, [r4, #0]
 8007870:	e7de      	b.n	8007830 <_malloc_r+0xa0>
 8007872:	bf00      	nop
 8007874:	20000e70 	.word	0x20000e70

08007878 <__sfputc_r>:
 8007878:	6893      	ldr	r3, [r2, #8]
 800787a:	b410      	push	{r4}
 800787c:	3b01      	subs	r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	6093      	str	r3, [r2, #8]
 8007882:	da07      	bge.n	8007894 <__sfputc_r+0x1c>
 8007884:	6994      	ldr	r4, [r2, #24]
 8007886:	42a3      	cmp	r3, r4
 8007888:	db01      	blt.n	800788e <__sfputc_r+0x16>
 800788a:	290a      	cmp	r1, #10
 800788c:	d102      	bne.n	8007894 <__sfputc_r+0x1c>
 800788e:	bc10      	pop	{r4}
 8007890:	f000 baf0 	b.w	8007e74 <__swbuf_r>
 8007894:	6813      	ldr	r3, [r2, #0]
 8007896:	1c58      	adds	r0, r3, #1
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	7019      	strb	r1, [r3, #0]
 800789c:	4608      	mov	r0, r1
 800789e:	bc10      	pop	{r4}
 80078a0:	4770      	bx	lr

080078a2 <__sfputs_r>:
 80078a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	18d5      	adds	r5, r2, r3
 80078ac:	42ac      	cmp	r4, r5
 80078ae:	d101      	bne.n	80078b4 <__sfputs_r+0x12>
 80078b0:	2000      	movs	r0, #0
 80078b2:	e007      	b.n	80078c4 <__sfputs_r+0x22>
 80078b4:	463a      	mov	r2, r7
 80078b6:	4630      	mov	r0, r6
 80078b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078bc:	f7ff ffdc 	bl	8007878 <__sfputc_r>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d1f3      	bne.n	80078ac <__sfputs_r+0xa>
 80078c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078c8 <_vfiprintf_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	460d      	mov	r5, r1
 80078ce:	4614      	mov	r4, r2
 80078d0:	4698      	mov	r8, r3
 80078d2:	4606      	mov	r6, r0
 80078d4:	b09d      	sub	sp, #116	; 0x74
 80078d6:	b118      	cbz	r0, 80078e0 <_vfiprintf_r+0x18>
 80078d8:	6983      	ldr	r3, [r0, #24]
 80078da:	b90b      	cbnz	r3, 80078e0 <_vfiprintf_r+0x18>
 80078dc:	f000 fca8 	bl	8008230 <__sinit>
 80078e0:	4b89      	ldr	r3, [pc, #548]	; (8007b08 <_vfiprintf_r+0x240>)
 80078e2:	429d      	cmp	r5, r3
 80078e4:	d11b      	bne.n	800791e <_vfiprintf_r+0x56>
 80078e6:	6875      	ldr	r5, [r6, #4]
 80078e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ea:	07d9      	lsls	r1, r3, #31
 80078ec:	d405      	bmi.n	80078fa <_vfiprintf_r+0x32>
 80078ee:	89ab      	ldrh	r3, [r5, #12]
 80078f0:	059a      	lsls	r2, r3, #22
 80078f2:	d402      	bmi.n	80078fa <_vfiprintf_r+0x32>
 80078f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078f6:	f000 fd39 	bl	800836c <__retarget_lock_acquire_recursive>
 80078fa:	89ab      	ldrh	r3, [r5, #12]
 80078fc:	071b      	lsls	r3, r3, #28
 80078fe:	d501      	bpl.n	8007904 <_vfiprintf_r+0x3c>
 8007900:	692b      	ldr	r3, [r5, #16]
 8007902:	b9eb      	cbnz	r3, 8007940 <_vfiprintf_r+0x78>
 8007904:	4629      	mov	r1, r5
 8007906:	4630      	mov	r0, r6
 8007908:	f000 fb06 	bl	8007f18 <__swsetup_r>
 800790c:	b1c0      	cbz	r0, 8007940 <_vfiprintf_r+0x78>
 800790e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007910:	07dc      	lsls	r4, r3, #31
 8007912:	d50e      	bpl.n	8007932 <_vfiprintf_r+0x6a>
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	b01d      	add	sp, #116	; 0x74
 800791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791e:	4b7b      	ldr	r3, [pc, #492]	; (8007b0c <_vfiprintf_r+0x244>)
 8007920:	429d      	cmp	r5, r3
 8007922:	d101      	bne.n	8007928 <_vfiprintf_r+0x60>
 8007924:	68b5      	ldr	r5, [r6, #8]
 8007926:	e7df      	b.n	80078e8 <_vfiprintf_r+0x20>
 8007928:	4b79      	ldr	r3, [pc, #484]	; (8007b10 <_vfiprintf_r+0x248>)
 800792a:	429d      	cmp	r5, r3
 800792c:	bf08      	it	eq
 800792e:	68f5      	ldreq	r5, [r6, #12]
 8007930:	e7da      	b.n	80078e8 <_vfiprintf_r+0x20>
 8007932:	89ab      	ldrh	r3, [r5, #12]
 8007934:	0598      	lsls	r0, r3, #22
 8007936:	d4ed      	bmi.n	8007914 <_vfiprintf_r+0x4c>
 8007938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800793a:	f000 fd18 	bl	800836e <__retarget_lock_release_recursive>
 800793e:	e7e9      	b.n	8007914 <_vfiprintf_r+0x4c>
 8007940:	2300      	movs	r3, #0
 8007942:	9309      	str	r3, [sp, #36]	; 0x24
 8007944:	2320      	movs	r3, #32
 8007946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800794a:	2330      	movs	r3, #48	; 0x30
 800794c:	f04f 0901 	mov.w	r9, #1
 8007950:	f8cd 800c 	str.w	r8, [sp, #12]
 8007954:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007b14 <_vfiprintf_r+0x24c>
 8007958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800795c:	4623      	mov	r3, r4
 800795e:	469a      	mov	sl, r3
 8007960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007964:	b10a      	cbz	r2, 800796a <_vfiprintf_r+0xa2>
 8007966:	2a25      	cmp	r2, #37	; 0x25
 8007968:	d1f9      	bne.n	800795e <_vfiprintf_r+0x96>
 800796a:	ebba 0b04 	subs.w	fp, sl, r4
 800796e:	d00b      	beq.n	8007988 <_vfiprintf_r+0xc0>
 8007970:	465b      	mov	r3, fp
 8007972:	4622      	mov	r2, r4
 8007974:	4629      	mov	r1, r5
 8007976:	4630      	mov	r0, r6
 8007978:	f7ff ff93 	bl	80078a2 <__sfputs_r>
 800797c:	3001      	adds	r0, #1
 800797e:	f000 80aa 	beq.w	8007ad6 <_vfiprintf_r+0x20e>
 8007982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007984:	445a      	add	r2, fp
 8007986:	9209      	str	r2, [sp, #36]	; 0x24
 8007988:	f89a 3000 	ldrb.w	r3, [sl]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80a2 	beq.w	8007ad6 <_vfiprintf_r+0x20e>
 8007992:	2300      	movs	r3, #0
 8007994:	f04f 32ff 	mov.w	r2, #4294967295
 8007998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800799c:	f10a 0a01 	add.w	sl, sl, #1
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	9307      	str	r3, [sp, #28]
 80079a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079a8:	931a      	str	r3, [sp, #104]	; 0x68
 80079aa:	4654      	mov	r4, sl
 80079ac:	2205      	movs	r2, #5
 80079ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b2:	4858      	ldr	r0, [pc, #352]	; (8007b14 <_vfiprintf_r+0x24c>)
 80079b4:	f000 fd42 	bl	800843c <memchr>
 80079b8:	9a04      	ldr	r2, [sp, #16]
 80079ba:	b9d8      	cbnz	r0, 80079f4 <_vfiprintf_r+0x12c>
 80079bc:	06d1      	lsls	r1, r2, #27
 80079be:	bf44      	itt	mi
 80079c0:	2320      	movmi	r3, #32
 80079c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079c6:	0713      	lsls	r3, r2, #28
 80079c8:	bf44      	itt	mi
 80079ca:	232b      	movmi	r3, #43	; 0x2b
 80079cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d0:	f89a 3000 	ldrb.w	r3, [sl]
 80079d4:	2b2a      	cmp	r3, #42	; 0x2a
 80079d6:	d015      	beq.n	8007a04 <_vfiprintf_r+0x13c>
 80079d8:	4654      	mov	r4, sl
 80079da:	2000      	movs	r0, #0
 80079dc:	f04f 0c0a 	mov.w	ip, #10
 80079e0:	9a07      	ldr	r2, [sp, #28]
 80079e2:	4621      	mov	r1, r4
 80079e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079e8:	3b30      	subs	r3, #48	; 0x30
 80079ea:	2b09      	cmp	r3, #9
 80079ec:	d94e      	bls.n	8007a8c <_vfiprintf_r+0x1c4>
 80079ee:	b1b0      	cbz	r0, 8007a1e <_vfiprintf_r+0x156>
 80079f0:	9207      	str	r2, [sp, #28]
 80079f2:	e014      	b.n	8007a1e <_vfiprintf_r+0x156>
 80079f4:	eba0 0308 	sub.w	r3, r0, r8
 80079f8:	fa09 f303 	lsl.w	r3, r9, r3
 80079fc:	4313      	orrs	r3, r2
 80079fe:	46a2      	mov	sl, r4
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	e7d2      	b.n	80079aa <_vfiprintf_r+0xe2>
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	1d19      	adds	r1, r3, #4
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	9103      	str	r1, [sp, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bfbb      	ittet	lt
 8007a10:	425b      	neglt	r3, r3
 8007a12:	f042 0202 	orrlt.w	r2, r2, #2
 8007a16:	9307      	strge	r3, [sp, #28]
 8007a18:	9307      	strlt	r3, [sp, #28]
 8007a1a:	bfb8      	it	lt
 8007a1c:	9204      	strlt	r2, [sp, #16]
 8007a1e:	7823      	ldrb	r3, [r4, #0]
 8007a20:	2b2e      	cmp	r3, #46	; 0x2e
 8007a22:	d10c      	bne.n	8007a3e <_vfiprintf_r+0x176>
 8007a24:	7863      	ldrb	r3, [r4, #1]
 8007a26:	2b2a      	cmp	r3, #42	; 0x2a
 8007a28:	d135      	bne.n	8007a96 <_vfiprintf_r+0x1ce>
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	3402      	adds	r4, #2
 8007a2e:	1d1a      	adds	r2, r3, #4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	9203      	str	r2, [sp, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bfb8      	it	lt
 8007a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007b18 <_vfiprintf_r+0x250>
 8007a42:	2203      	movs	r2, #3
 8007a44:	4650      	mov	r0, sl
 8007a46:	7821      	ldrb	r1, [r4, #0]
 8007a48:	f000 fcf8 	bl	800843c <memchr>
 8007a4c:	b140      	cbz	r0, 8007a60 <_vfiprintf_r+0x198>
 8007a4e:	2340      	movs	r3, #64	; 0x40
 8007a50:	eba0 000a 	sub.w	r0, r0, sl
 8007a54:	fa03 f000 	lsl.w	r0, r3, r0
 8007a58:	9b04      	ldr	r3, [sp, #16]
 8007a5a:	3401      	adds	r4, #1
 8007a5c:	4303      	orrs	r3, r0
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	2206      	movs	r2, #6
 8007a66:	482d      	ldr	r0, [pc, #180]	; (8007b1c <_vfiprintf_r+0x254>)
 8007a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a6c:	f000 fce6 	bl	800843c <memchr>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d03f      	beq.n	8007af4 <_vfiprintf_r+0x22c>
 8007a74:	4b2a      	ldr	r3, [pc, #168]	; (8007b20 <_vfiprintf_r+0x258>)
 8007a76:	bb1b      	cbnz	r3, 8007ac0 <_vfiprintf_r+0x1f8>
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	3307      	adds	r3, #7
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	3308      	adds	r3, #8
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a86:	443b      	add	r3, r7
 8007a88:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8a:	e767      	b.n	800795c <_vfiprintf_r+0x94>
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	2001      	movs	r0, #1
 8007a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a94:	e7a5      	b.n	80079e2 <_vfiprintf_r+0x11a>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f04f 0c0a 	mov.w	ip, #10
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	3401      	adds	r4, #1
 8007aa0:	9305      	str	r3, [sp, #20]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aa8:	3a30      	subs	r2, #48	; 0x30
 8007aaa:	2a09      	cmp	r2, #9
 8007aac:	d903      	bls.n	8007ab6 <_vfiprintf_r+0x1ee>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0c5      	beq.n	8007a3e <_vfiprintf_r+0x176>
 8007ab2:	9105      	str	r1, [sp, #20]
 8007ab4:	e7c3      	b.n	8007a3e <_vfiprintf_r+0x176>
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	2301      	movs	r3, #1
 8007aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007abe:	e7f0      	b.n	8007aa2 <_vfiprintf_r+0x1da>
 8007ac0:	ab03      	add	r3, sp, #12
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	462a      	mov	r2, r5
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <_vfiprintf_r+0x25c>)
 8007aca:	a904      	add	r1, sp, #16
 8007acc:	f3af 8000 	nop.w
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	1c78      	adds	r0, r7, #1
 8007ad4:	d1d6      	bne.n	8007a84 <_vfiprintf_r+0x1bc>
 8007ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ad8:	07d9      	lsls	r1, r3, #31
 8007ada:	d405      	bmi.n	8007ae8 <_vfiprintf_r+0x220>
 8007adc:	89ab      	ldrh	r3, [r5, #12]
 8007ade:	059a      	lsls	r2, r3, #22
 8007ae0:	d402      	bmi.n	8007ae8 <_vfiprintf_r+0x220>
 8007ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae4:	f000 fc43 	bl	800836e <__retarget_lock_release_recursive>
 8007ae8:	89ab      	ldrh	r3, [r5, #12]
 8007aea:	065b      	lsls	r3, r3, #25
 8007aec:	f53f af12 	bmi.w	8007914 <_vfiprintf_r+0x4c>
 8007af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007af2:	e711      	b.n	8007918 <_vfiprintf_r+0x50>
 8007af4:	ab03      	add	r3, sp, #12
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	462a      	mov	r2, r5
 8007afa:	4630      	mov	r0, r6
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <_vfiprintf_r+0x25c>)
 8007afe:	a904      	add	r1, sp, #16
 8007b00:	f000 f882 	bl	8007c08 <_printf_i>
 8007b04:	e7e4      	b.n	8007ad0 <_vfiprintf_r+0x208>
 8007b06:	bf00      	nop
 8007b08:	080088ec 	.word	0x080088ec
 8007b0c:	0800890c 	.word	0x0800890c
 8007b10:	080088cc 	.word	0x080088cc
 8007b14:	08008899 	.word	0x08008899
 8007b18:	0800889f 	.word	0x0800889f
 8007b1c:	080088a3 	.word	0x080088a3
 8007b20:	00000000 	.word	0x00000000
 8007b24:	080078a3 	.word	0x080078a3

08007b28 <_printf_common>:
 8007b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	4699      	mov	r9, r3
 8007b30:	688a      	ldr	r2, [r1, #8]
 8007b32:	690b      	ldr	r3, [r1, #16]
 8007b34:	4607      	mov	r7, r0
 8007b36:	4293      	cmp	r3, r2
 8007b38:	bfb8      	it	lt
 8007b3a:	4613      	movlt	r3, r2
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b42:	460c      	mov	r4, r1
 8007b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b48:	b10a      	cbz	r2, 8007b4e <_printf_common+0x26>
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	6033      	str	r3, [r6, #0]
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	0699      	lsls	r1, r3, #26
 8007b52:	bf42      	ittt	mi
 8007b54:	6833      	ldrmi	r3, [r6, #0]
 8007b56:	3302      	addmi	r3, #2
 8007b58:	6033      	strmi	r3, [r6, #0]
 8007b5a:	6825      	ldr	r5, [r4, #0]
 8007b5c:	f015 0506 	ands.w	r5, r5, #6
 8007b60:	d106      	bne.n	8007b70 <_printf_common+0x48>
 8007b62:	f104 0a19 	add.w	sl, r4, #25
 8007b66:	68e3      	ldr	r3, [r4, #12]
 8007b68:	6832      	ldr	r2, [r6, #0]
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	42ab      	cmp	r3, r5
 8007b6e:	dc28      	bgt.n	8007bc2 <_printf_common+0x9a>
 8007b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b74:	1e13      	subs	r3, r2, #0
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	bf18      	it	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	0692      	lsls	r2, r2, #26
 8007b7e:	d42d      	bmi.n	8007bdc <_printf_common+0xb4>
 8007b80:	4649      	mov	r1, r9
 8007b82:	4638      	mov	r0, r7
 8007b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b88:	47c0      	blx	r8
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d020      	beq.n	8007bd0 <_printf_common+0xa8>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	68e5      	ldr	r5, [r4, #12]
 8007b92:	f003 0306 	and.w	r3, r3, #6
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	bf18      	it	ne
 8007b9a:	2500      	movne	r5, #0
 8007b9c:	6832      	ldr	r2, [r6, #0]
 8007b9e:	f04f 0600 	mov.w	r6, #0
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	bf08      	it	eq
 8007ba6:	1aad      	subeq	r5, r5, r2
 8007ba8:	6922      	ldr	r2, [r4, #16]
 8007baa:	bf08      	it	eq
 8007bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	bfc4      	itt	gt
 8007bb4:	1a9b      	subgt	r3, r3, r2
 8007bb6:	18ed      	addgt	r5, r5, r3
 8007bb8:	341a      	adds	r4, #26
 8007bba:	42b5      	cmp	r5, r6
 8007bbc:	d11a      	bne.n	8007bf4 <_printf_common+0xcc>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e008      	b.n	8007bd4 <_printf_common+0xac>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	4638      	mov	r0, r7
 8007bca:	47c0      	blx	r8
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d103      	bne.n	8007bd8 <_printf_common+0xb0>
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd8:	3501      	adds	r5, #1
 8007bda:	e7c4      	b.n	8007b66 <_printf_common+0x3e>
 8007bdc:	2030      	movs	r0, #48	; 0x30
 8007bde:	18e1      	adds	r1, r4, r3
 8007be0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bea:	4422      	add	r2, r4
 8007bec:	3302      	adds	r3, #2
 8007bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bf2:	e7c5      	b.n	8007b80 <_printf_common+0x58>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	47c0      	blx	r8
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d0e6      	beq.n	8007bd0 <_printf_common+0xa8>
 8007c02:	3601      	adds	r6, #1
 8007c04:	e7d9      	b.n	8007bba <_printf_common+0x92>
	...

08007c08 <_printf_i>:
 8007c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	7e0f      	ldrb	r7, [r1, #24]
 8007c0e:	4691      	mov	r9, r2
 8007c10:	2f78      	cmp	r7, #120	; 0x78
 8007c12:	4680      	mov	r8, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	469a      	mov	sl, r3
 8007c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c1e:	d807      	bhi.n	8007c30 <_printf_i+0x28>
 8007c20:	2f62      	cmp	r7, #98	; 0x62
 8007c22:	d80a      	bhi.n	8007c3a <_printf_i+0x32>
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	f000 80d9 	beq.w	8007ddc <_printf_i+0x1d4>
 8007c2a:	2f58      	cmp	r7, #88	; 0x58
 8007c2c:	f000 80a4 	beq.w	8007d78 <_printf_i+0x170>
 8007c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c38:	e03a      	b.n	8007cb0 <_printf_i+0xa8>
 8007c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c3e:	2b15      	cmp	r3, #21
 8007c40:	d8f6      	bhi.n	8007c30 <_printf_i+0x28>
 8007c42:	a101      	add	r1, pc, #4	; (adr r1, 8007c48 <_printf_i+0x40>)
 8007c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c48:	08007ca1 	.word	0x08007ca1
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007c31 	.word	0x08007c31
 8007c54:	08007c31 	.word	0x08007c31
 8007c58:	08007c31 	.word	0x08007c31
 8007c5c:	08007c31 	.word	0x08007c31
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007c31 	.word	0x08007c31
 8007c68:	08007c31 	.word	0x08007c31
 8007c6c:	08007c31 	.word	0x08007c31
 8007c70:	08007c31 	.word	0x08007c31
 8007c74:	08007dc3 	.word	0x08007dc3
 8007c78:	08007ce5 	.word	0x08007ce5
 8007c7c:	08007da5 	.word	0x08007da5
 8007c80:	08007c31 	.word	0x08007c31
 8007c84:	08007c31 	.word	0x08007c31
 8007c88:	08007de5 	.word	0x08007de5
 8007c8c:	08007c31 	.word	0x08007c31
 8007c90:	08007ce5 	.word	0x08007ce5
 8007c94:	08007c31 	.word	0x08007c31
 8007c98:	08007c31 	.word	0x08007c31
 8007c9c:	08007dad 	.word	0x08007dad
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	602a      	str	r2, [r5, #0]
 8007ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e0a4      	b.n	8007dfe <_printf_i+0x1f6>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	6829      	ldr	r1, [r5, #0]
 8007cb8:	0606      	lsls	r6, r0, #24
 8007cba:	f101 0304 	add.w	r3, r1, #4
 8007cbe:	d50a      	bpl.n	8007cd6 <_printf_i+0xce>
 8007cc0:	680e      	ldr	r6, [r1, #0]
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	2e00      	cmp	r6, #0
 8007cc6:	da03      	bge.n	8007cd0 <_printf_i+0xc8>
 8007cc8:	232d      	movs	r3, #45	; 0x2d
 8007cca:	4276      	negs	r6, r6
 8007ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd0:	230a      	movs	r3, #10
 8007cd2:	485e      	ldr	r0, [pc, #376]	; (8007e4c <_printf_i+0x244>)
 8007cd4:	e019      	b.n	8007d0a <_printf_i+0x102>
 8007cd6:	680e      	ldr	r6, [r1, #0]
 8007cd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cdc:	602b      	str	r3, [r5, #0]
 8007cde:	bf18      	it	ne
 8007ce0:	b236      	sxthne	r6, r6
 8007ce2:	e7ef      	b.n	8007cc4 <_printf_i+0xbc>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	1d19      	adds	r1, r3, #4
 8007cea:	6029      	str	r1, [r5, #0]
 8007cec:	0601      	lsls	r1, r0, #24
 8007cee:	d501      	bpl.n	8007cf4 <_printf_i+0xec>
 8007cf0:	681e      	ldr	r6, [r3, #0]
 8007cf2:	e002      	b.n	8007cfa <_printf_i+0xf2>
 8007cf4:	0646      	lsls	r6, r0, #25
 8007cf6:	d5fb      	bpl.n	8007cf0 <_printf_i+0xe8>
 8007cf8:	881e      	ldrh	r6, [r3, #0]
 8007cfa:	2f6f      	cmp	r7, #111	; 0x6f
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2308      	moveq	r3, #8
 8007d00:	230a      	movne	r3, #10
 8007d02:	4852      	ldr	r0, [pc, #328]	; (8007e4c <_printf_i+0x244>)
 8007d04:	2100      	movs	r1, #0
 8007d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d0a:	6865      	ldr	r5, [r4, #4]
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	bfa8      	it	ge
 8007d10:	6821      	ldrge	r1, [r4, #0]
 8007d12:	60a5      	str	r5, [r4, #8]
 8007d14:	bfa4      	itt	ge
 8007d16:	f021 0104 	bicge.w	r1, r1, #4
 8007d1a:	6021      	strge	r1, [r4, #0]
 8007d1c:	b90e      	cbnz	r6, 8007d22 <_printf_i+0x11a>
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	d04d      	beq.n	8007dbe <_printf_i+0x1b6>
 8007d22:	4615      	mov	r5, r2
 8007d24:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d28:	fb03 6711 	mls	r7, r3, r1, r6
 8007d2c:	5dc7      	ldrb	r7, [r0, r7]
 8007d2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d32:	4637      	mov	r7, r6
 8007d34:	42bb      	cmp	r3, r7
 8007d36:	460e      	mov	r6, r1
 8007d38:	d9f4      	bls.n	8007d24 <_printf_i+0x11c>
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d10b      	bne.n	8007d56 <_printf_i+0x14e>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	07de      	lsls	r6, r3, #31
 8007d42:	d508      	bpl.n	8007d56 <_printf_i+0x14e>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	6861      	ldr	r1, [r4, #4]
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	bfde      	ittt	le
 8007d4c:	2330      	movle	r3, #48	; 0x30
 8007d4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d56:	1b52      	subs	r2, r2, r5
 8007d58:	6122      	str	r2, [r4, #16]
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4640      	mov	r0, r8
 8007d60:	f8cd a000 	str.w	sl, [sp]
 8007d64:	aa03      	add	r2, sp, #12
 8007d66:	f7ff fedf 	bl	8007b28 <_printf_common>
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d14c      	bne.n	8007e08 <_printf_i+0x200>
 8007d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d72:	b004      	add	sp, #16
 8007d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d78:	4834      	ldr	r0, [pc, #208]	; (8007e4c <_printf_i+0x244>)
 8007d7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d7e:	6829      	ldr	r1, [r5, #0]
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d86:	6029      	str	r1, [r5, #0]
 8007d88:	061d      	lsls	r5, r3, #24
 8007d8a:	d514      	bpl.n	8007db6 <_printf_i+0x1ae>
 8007d8c:	07df      	lsls	r7, r3, #31
 8007d8e:	bf44      	itt	mi
 8007d90:	f043 0320 	orrmi.w	r3, r3, #32
 8007d94:	6023      	strmi	r3, [r4, #0]
 8007d96:	b91e      	cbnz	r6, 8007da0 <_printf_i+0x198>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	f023 0320 	bic.w	r3, r3, #32
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	2310      	movs	r3, #16
 8007da2:	e7af      	b.n	8007d04 <_printf_i+0xfc>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	f043 0320 	orr.w	r3, r3, #32
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	2378      	movs	r3, #120	; 0x78
 8007dae:	4828      	ldr	r0, [pc, #160]	; (8007e50 <_printf_i+0x248>)
 8007db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007db4:	e7e3      	b.n	8007d7e <_printf_i+0x176>
 8007db6:	0659      	lsls	r1, r3, #25
 8007db8:	bf48      	it	mi
 8007dba:	b2b6      	uxthmi	r6, r6
 8007dbc:	e7e6      	b.n	8007d8c <_printf_i+0x184>
 8007dbe:	4615      	mov	r5, r2
 8007dc0:	e7bb      	b.n	8007d3a <_printf_i+0x132>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	6826      	ldr	r6, [r4, #0]
 8007dc6:	1d18      	adds	r0, r3, #4
 8007dc8:	6961      	ldr	r1, [r4, #20]
 8007dca:	6028      	str	r0, [r5, #0]
 8007dcc:	0635      	lsls	r5, r6, #24
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	d501      	bpl.n	8007dd6 <_printf_i+0x1ce>
 8007dd2:	6019      	str	r1, [r3, #0]
 8007dd4:	e002      	b.n	8007ddc <_printf_i+0x1d4>
 8007dd6:	0670      	lsls	r0, r6, #25
 8007dd8:	d5fb      	bpl.n	8007dd2 <_printf_i+0x1ca>
 8007dda:	8019      	strh	r1, [r3, #0]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4615      	mov	r5, r2
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	e7ba      	b.n	8007d5a <_printf_i+0x152>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	2100      	movs	r1, #0
 8007de8:	1d1a      	adds	r2, r3, #4
 8007dea:	602a      	str	r2, [r5, #0]
 8007dec:	681d      	ldr	r5, [r3, #0]
 8007dee:	6862      	ldr	r2, [r4, #4]
 8007df0:	4628      	mov	r0, r5
 8007df2:	f000 fb23 	bl	800843c <memchr>
 8007df6:	b108      	cbz	r0, 8007dfc <_printf_i+0x1f4>
 8007df8:	1b40      	subs	r0, r0, r5
 8007dfa:	6060      	str	r0, [r4, #4]
 8007dfc:	6863      	ldr	r3, [r4, #4]
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	2300      	movs	r3, #0
 8007e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e06:	e7a8      	b.n	8007d5a <_printf_i+0x152>
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	47d0      	blx	sl
 8007e12:	3001      	adds	r0, #1
 8007e14:	d0ab      	beq.n	8007d6e <_printf_i+0x166>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	079b      	lsls	r3, r3, #30
 8007e1a:	d413      	bmi.n	8007e44 <_printf_i+0x23c>
 8007e1c:	68e0      	ldr	r0, [r4, #12]
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	4298      	cmp	r0, r3
 8007e22:	bfb8      	it	lt
 8007e24:	4618      	movlt	r0, r3
 8007e26:	e7a4      	b.n	8007d72 <_printf_i+0x16a>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	4632      	mov	r2, r6
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4640      	mov	r0, r8
 8007e30:	47d0      	blx	sl
 8007e32:	3001      	adds	r0, #1
 8007e34:	d09b      	beq.n	8007d6e <_printf_i+0x166>
 8007e36:	3501      	adds	r5, #1
 8007e38:	68e3      	ldr	r3, [r4, #12]
 8007e3a:	9903      	ldr	r1, [sp, #12]
 8007e3c:	1a5b      	subs	r3, r3, r1
 8007e3e:	42ab      	cmp	r3, r5
 8007e40:	dcf2      	bgt.n	8007e28 <_printf_i+0x220>
 8007e42:	e7eb      	b.n	8007e1c <_printf_i+0x214>
 8007e44:	2500      	movs	r5, #0
 8007e46:	f104 0619 	add.w	r6, r4, #25
 8007e4a:	e7f5      	b.n	8007e38 <_printf_i+0x230>
 8007e4c:	080088aa 	.word	0x080088aa
 8007e50:	080088bb 	.word	0x080088bb

08007e54 <_sbrk_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	2300      	movs	r3, #0
 8007e58:	4d05      	ldr	r5, [pc, #20]	; (8007e70 <_sbrk_r+0x1c>)
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	f7ff fa0c 	bl	800727c <_sbrk>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_sbrk_r+0x1a>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_sbrk_r+0x1a>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	20000e7c 	.word	0x20000e7c

08007e74 <__swbuf_r>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	460e      	mov	r6, r1
 8007e78:	4614      	mov	r4, r2
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	b118      	cbz	r0, 8007e86 <__swbuf_r+0x12>
 8007e7e:	6983      	ldr	r3, [r0, #24]
 8007e80:	b90b      	cbnz	r3, 8007e86 <__swbuf_r+0x12>
 8007e82:	f000 f9d5 	bl	8008230 <__sinit>
 8007e86:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <__swbuf_r+0x98>)
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	d12b      	bne.n	8007ee4 <__swbuf_r+0x70>
 8007e8c:	686c      	ldr	r4, [r5, #4]
 8007e8e:	69a3      	ldr	r3, [r4, #24]
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	071a      	lsls	r2, r3, #28
 8007e96:	d52f      	bpl.n	8007ef8 <__swbuf_r+0x84>
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	b36b      	cbz	r3, 8007ef8 <__swbuf_r+0x84>
 8007e9c:	6923      	ldr	r3, [r4, #16]
 8007e9e:	6820      	ldr	r0, [r4, #0]
 8007ea0:	b2f6      	uxtb	r6, r6
 8007ea2:	1ac0      	subs	r0, r0, r3
 8007ea4:	6963      	ldr	r3, [r4, #20]
 8007ea6:	4637      	mov	r7, r6
 8007ea8:	4283      	cmp	r3, r0
 8007eaa:	dc04      	bgt.n	8007eb6 <__swbuf_r+0x42>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 f92a 	bl	8008108 <_fflush_r>
 8007eb4:	bb30      	cbnz	r0, 8007f04 <__swbuf_r+0x90>
 8007eb6:	68a3      	ldr	r3, [r4, #8]
 8007eb8:	3001      	adds	r0, #1
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	60a3      	str	r3, [r4, #8]
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	6022      	str	r2, [r4, #0]
 8007ec4:	701e      	strb	r6, [r3, #0]
 8007ec6:	6963      	ldr	r3, [r4, #20]
 8007ec8:	4283      	cmp	r3, r0
 8007eca:	d004      	beq.n	8007ed6 <__swbuf_r+0x62>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	07db      	lsls	r3, r3, #31
 8007ed0:	d506      	bpl.n	8007ee0 <__swbuf_r+0x6c>
 8007ed2:	2e0a      	cmp	r6, #10
 8007ed4:	d104      	bne.n	8007ee0 <__swbuf_r+0x6c>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 f915 	bl	8008108 <_fflush_r>
 8007ede:	b988      	cbnz	r0, 8007f04 <__swbuf_r+0x90>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <__swbuf_r+0x9c>)
 8007ee6:	429c      	cmp	r4, r3
 8007ee8:	d101      	bne.n	8007eee <__swbuf_r+0x7a>
 8007eea:	68ac      	ldr	r4, [r5, #8]
 8007eec:	e7cf      	b.n	8007e8e <__swbuf_r+0x1a>
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <__swbuf_r+0xa0>)
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	bf08      	it	eq
 8007ef4:	68ec      	ldreq	r4, [r5, #12]
 8007ef6:	e7ca      	b.n	8007e8e <__swbuf_r+0x1a>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	f000 f80c 	bl	8007f18 <__swsetup_r>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d0cb      	beq.n	8007e9c <__swbuf_r+0x28>
 8007f04:	f04f 37ff 	mov.w	r7, #4294967295
 8007f08:	e7ea      	b.n	8007ee0 <__swbuf_r+0x6c>
 8007f0a:	bf00      	nop
 8007f0c:	080088ec 	.word	0x080088ec
 8007f10:	0800890c 	.word	0x0800890c
 8007f14:	080088cc 	.word	0x080088cc

08007f18 <__swsetup_r>:
 8007f18:	4b32      	ldr	r3, [pc, #200]	; (8007fe4 <__swsetup_r+0xcc>)
 8007f1a:	b570      	push	{r4, r5, r6, lr}
 8007f1c:	681d      	ldr	r5, [r3, #0]
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	b125      	cbz	r5, 8007f2e <__swsetup_r+0x16>
 8007f24:	69ab      	ldr	r3, [r5, #24]
 8007f26:	b913      	cbnz	r3, 8007f2e <__swsetup_r+0x16>
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f000 f981 	bl	8008230 <__sinit>
 8007f2e:	4b2e      	ldr	r3, [pc, #184]	; (8007fe8 <__swsetup_r+0xd0>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d10f      	bne.n	8007f54 <__swsetup_r+0x3c>
 8007f34:	686c      	ldr	r4, [r5, #4]
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f3c:	0719      	lsls	r1, r3, #28
 8007f3e:	d42c      	bmi.n	8007f9a <__swsetup_r+0x82>
 8007f40:	06dd      	lsls	r5, r3, #27
 8007f42:	d411      	bmi.n	8007f68 <__swsetup_r+0x50>
 8007f44:	2309      	movs	r3, #9
 8007f46:	6033      	str	r3, [r6, #0]
 8007f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	e03e      	b.n	8007fd2 <__swsetup_r+0xba>
 8007f54:	4b25      	ldr	r3, [pc, #148]	; (8007fec <__swsetup_r+0xd4>)
 8007f56:	429c      	cmp	r4, r3
 8007f58:	d101      	bne.n	8007f5e <__swsetup_r+0x46>
 8007f5a:	68ac      	ldr	r4, [r5, #8]
 8007f5c:	e7eb      	b.n	8007f36 <__swsetup_r+0x1e>
 8007f5e:	4b24      	ldr	r3, [pc, #144]	; (8007ff0 <__swsetup_r+0xd8>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	bf08      	it	eq
 8007f64:	68ec      	ldreq	r4, [r5, #12]
 8007f66:	e7e6      	b.n	8007f36 <__swsetup_r+0x1e>
 8007f68:	0758      	lsls	r0, r3, #29
 8007f6a:	d512      	bpl.n	8007f92 <__swsetup_r+0x7a>
 8007f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f6e:	b141      	cbz	r1, 8007f82 <__swsetup_r+0x6a>
 8007f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f74:	4299      	cmp	r1, r3
 8007f76:	d002      	beq.n	8007f7e <__swsetup_r+0x66>
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff fba1 	bl	80076c0 <_free_r>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	6363      	str	r3, [r4, #52]	; 0x34
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	6063      	str	r3, [r4, #4]
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	f043 0308 	orr.w	r3, r3, #8
 8007f98:	81a3      	strh	r3, [r4, #12]
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	b94b      	cbnz	r3, 8007fb2 <__swsetup_r+0x9a>
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa8:	d003      	beq.n	8007fb2 <__swsetup_r+0x9a>
 8007faa:	4621      	mov	r1, r4
 8007fac:	4630      	mov	r0, r6
 8007fae:	f000 fa05 	bl	80083bc <__smakebuf_r>
 8007fb2:	89a0      	ldrh	r0, [r4, #12]
 8007fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fb8:	f010 0301 	ands.w	r3, r0, #1
 8007fbc:	d00a      	beq.n	8007fd4 <__swsetup_r+0xbc>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60a3      	str	r3, [r4, #8]
 8007fc2:	6963      	ldr	r3, [r4, #20]
 8007fc4:	425b      	negs	r3, r3
 8007fc6:	61a3      	str	r3, [r4, #24]
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	b943      	cbnz	r3, 8007fde <__swsetup_r+0xc6>
 8007fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fd0:	d1ba      	bne.n	8007f48 <__swsetup_r+0x30>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	0781      	lsls	r1, r0, #30
 8007fd6:	bf58      	it	pl
 8007fd8:	6963      	ldrpl	r3, [r4, #20]
 8007fda:	60a3      	str	r3, [r4, #8]
 8007fdc:	e7f4      	b.n	8007fc8 <__swsetup_r+0xb0>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	e7f7      	b.n	8007fd2 <__swsetup_r+0xba>
 8007fe2:	bf00      	nop
 8007fe4:	20000460 	.word	0x20000460
 8007fe8:	080088ec 	.word	0x080088ec
 8007fec:	0800890c 	.word	0x0800890c
 8007ff0:	080088cc 	.word	0x080088cc

08007ff4 <abort>:
 8007ff4:	2006      	movs	r0, #6
 8007ff6:	b508      	push	{r3, lr}
 8007ff8:	f000 fa62 	bl	80084c0 <raise>
 8007ffc:	2001      	movs	r0, #1
 8007ffe:	f7ff f8ca 	bl	8007196 <_exit>
	...

08008004 <__sflush_r>:
 8008004:	898a      	ldrh	r2, [r1, #12]
 8008006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008008:	4605      	mov	r5, r0
 800800a:	0710      	lsls	r0, r2, #28
 800800c:	460c      	mov	r4, r1
 800800e:	d457      	bmi.n	80080c0 <__sflush_r+0xbc>
 8008010:	684b      	ldr	r3, [r1, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	dc04      	bgt.n	8008020 <__sflush_r+0x1c>
 8008016:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	dc01      	bgt.n	8008020 <__sflush_r+0x1c>
 800801c:	2000      	movs	r0, #0
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008022:	2e00      	cmp	r6, #0
 8008024:	d0fa      	beq.n	800801c <__sflush_r+0x18>
 8008026:	2300      	movs	r3, #0
 8008028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800802c:	682f      	ldr	r7, [r5, #0]
 800802e:	602b      	str	r3, [r5, #0]
 8008030:	d032      	beq.n	8008098 <__sflush_r+0x94>
 8008032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	075a      	lsls	r2, r3, #29
 8008038:	d505      	bpl.n	8008046 <__sflush_r+0x42>
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	1ac0      	subs	r0, r0, r3
 800803e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008040:	b10b      	cbz	r3, 8008046 <__sflush_r+0x42>
 8008042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008044:	1ac0      	subs	r0, r0, r3
 8008046:	2300      	movs	r3, #0
 8008048:	4602      	mov	r2, r0
 800804a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800804c:	4628      	mov	r0, r5
 800804e:	6a21      	ldr	r1, [r4, #32]
 8008050:	47b0      	blx	r6
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	d106      	bne.n	8008066 <__sflush_r+0x62>
 8008058:	6829      	ldr	r1, [r5, #0]
 800805a:	291d      	cmp	r1, #29
 800805c:	d82c      	bhi.n	80080b8 <__sflush_r+0xb4>
 800805e:	4a29      	ldr	r2, [pc, #164]	; (8008104 <__sflush_r+0x100>)
 8008060:	40ca      	lsrs	r2, r1
 8008062:	07d6      	lsls	r6, r2, #31
 8008064:	d528      	bpl.n	80080b8 <__sflush_r+0xb4>
 8008066:	2200      	movs	r2, #0
 8008068:	6062      	str	r2, [r4, #4]
 800806a:	6922      	ldr	r2, [r4, #16]
 800806c:	04d9      	lsls	r1, r3, #19
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	d504      	bpl.n	800807c <__sflush_r+0x78>
 8008072:	1c42      	adds	r2, r0, #1
 8008074:	d101      	bne.n	800807a <__sflush_r+0x76>
 8008076:	682b      	ldr	r3, [r5, #0]
 8008078:	b903      	cbnz	r3, 800807c <__sflush_r+0x78>
 800807a:	6560      	str	r0, [r4, #84]	; 0x54
 800807c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800807e:	602f      	str	r7, [r5, #0]
 8008080:	2900      	cmp	r1, #0
 8008082:	d0cb      	beq.n	800801c <__sflush_r+0x18>
 8008084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008088:	4299      	cmp	r1, r3
 800808a:	d002      	beq.n	8008092 <__sflush_r+0x8e>
 800808c:	4628      	mov	r0, r5
 800808e:	f7ff fb17 	bl	80076c0 <_free_r>
 8008092:	2000      	movs	r0, #0
 8008094:	6360      	str	r0, [r4, #52]	; 0x34
 8008096:	e7c2      	b.n	800801e <__sflush_r+0x1a>
 8008098:	6a21      	ldr	r1, [r4, #32]
 800809a:	2301      	movs	r3, #1
 800809c:	4628      	mov	r0, r5
 800809e:	47b0      	blx	r6
 80080a0:	1c41      	adds	r1, r0, #1
 80080a2:	d1c7      	bne.n	8008034 <__sflush_r+0x30>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0c4      	beq.n	8008034 <__sflush_r+0x30>
 80080aa:	2b1d      	cmp	r3, #29
 80080ac:	d001      	beq.n	80080b2 <__sflush_r+0xae>
 80080ae:	2b16      	cmp	r3, #22
 80080b0:	d101      	bne.n	80080b6 <__sflush_r+0xb2>
 80080b2:	602f      	str	r7, [r5, #0]
 80080b4:	e7b2      	b.n	800801c <__sflush_r+0x18>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	e7ae      	b.n	800801e <__sflush_r+0x1a>
 80080c0:	690f      	ldr	r7, [r1, #16]
 80080c2:	2f00      	cmp	r7, #0
 80080c4:	d0aa      	beq.n	800801c <__sflush_r+0x18>
 80080c6:	0793      	lsls	r3, r2, #30
 80080c8:	bf18      	it	ne
 80080ca:	2300      	movne	r3, #0
 80080cc:	680e      	ldr	r6, [r1, #0]
 80080ce:	bf08      	it	eq
 80080d0:	694b      	ldreq	r3, [r1, #20]
 80080d2:	1bf6      	subs	r6, r6, r7
 80080d4:	600f      	str	r7, [r1, #0]
 80080d6:	608b      	str	r3, [r1, #8]
 80080d8:	2e00      	cmp	r6, #0
 80080da:	dd9f      	ble.n	800801c <__sflush_r+0x18>
 80080dc:	4633      	mov	r3, r6
 80080de:	463a      	mov	r2, r7
 80080e0:	4628      	mov	r0, r5
 80080e2:	6a21      	ldr	r1, [r4, #32]
 80080e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80080e8:	47e0      	blx	ip
 80080ea:	2800      	cmp	r0, #0
 80080ec:	dc06      	bgt.n	80080fc <__sflush_r+0xf8>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	e790      	b.n	800801e <__sflush_r+0x1a>
 80080fc:	4407      	add	r7, r0
 80080fe:	1a36      	subs	r6, r6, r0
 8008100:	e7ea      	b.n	80080d8 <__sflush_r+0xd4>
 8008102:	bf00      	nop
 8008104:	20400001 	.word	0x20400001

08008108 <_fflush_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	690b      	ldr	r3, [r1, #16]
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b913      	cbnz	r3, 8008118 <_fflush_r+0x10>
 8008112:	2500      	movs	r5, #0
 8008114:	4628      	mov	r0, r5
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	b118      	cbz	r0, 8008122 <_fflush_r+0x1a>
 800811a:	6983      	ldr	r3, [r0, #24]
 800811c:	b90b      	cbnz	r3, 8008122 <_fflush_r+0x1a>
 800811e:	f000 f887 	bl	8008230 <__sinit>
 8008122:	4b14      	ldr	r3, [pc, #80]	; (8008174 <_fflush_r+0x6c>)
 8008124:	429c      	cmp	r4, r3
 8008126:	d11b      	bne.n	8008160 <_fflush_r+0x58>
 8008128:	686c      	ldr	r4, [r5, #4]
 800812a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0ef      	beq.n	8008112 <_fflush_r+0xa>
 8008132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008134:	07d0      	lsls	r0, r2, #31
 8008136:	d404      	bmi.n	8008142 <_fflush_r+0x3a>
 8008138:	0599      	lsls	r1, r3, #22
 800813a:	d402      	bmi.n	8008142 <_fflush_r+0x3a>
 800813c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800813e:	f000 f915 	bl	800836c <__retarget_lock_acquire_recursive>
 8008142:	4628      	mov	r0, r5
 8008144:	4621      	mov	r1, r4
 8008146:	f7ff ff5d 	bl	8008004 <__sflush_r>
 800814a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800814c:	4605      	mov	r5, r0
 800814e:	07da      	lsls	r2, r3, #31
 8008150:	d4e0      	bmi.n	8008114 <_fflush_r+0xc>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	059b      	lsls	r3, r3, #22
 8008156:	d4dd      	bmi.n	8008114 <_fflush_r+0xc>
 8008158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800815a:	f000 f908 	bl	800836e <__retarget_lock_release_recursive>
 800815e:	e7d9      	b.n	8008114 <_fflush_r+0xc>
 8008160:	4b05      	ldr	r3, [pc, #20]	; (8008178 <_fflush_r+0x70>)
 8008162:	429c      	cmp	r4, r3
 8008164:	d101      	bne.n	800816a <_fflush_r+0x62>
 8008166:	68ac      	ldr	r4, [r5, #8]
 8008168:	e7df      	b.n	800812a <_fflush_r+0x22>
 800816a:	4b04      	ldr	r3, [pc, #16]	; (800817c <_fflush_r+0x74>)
 800816c:	429c      	cmp	r4, r3
 800816e:	bf08      	it	eq
 8008170:	68ec      	ldreq	r4, [r5, #12]
 8008172:	e7da      	b.n	800812a <_fflush_r+0x22>
 8008174:	080088ec 	.word	0x080088ec
 8008178:	0800890c 	.word	0x0800890c
 800817c:	080088cc 	.word	0x080088cc

08008180 <std>:
 8008180:	2300      	movs	r3, #0
 8008182:	b510      	push	{r4, lr}
 8008184:	4604      	mov	r4, r0
 8008186:	e9c0 3300 	strd	r3, r3, [r0]
 800818a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800818e:	6083      	str	r3, [r0, #8]
 8008190:	8181      	strh	r1, [r0, #12]
 8008192:	6643      	str	r3, [r0, #100]	; 0x64
 8008194:	81c2      	strh	r2, [r0, #14]
 8008196:	6183      	str	r3, [r0, #24]
 8008198:	4619      	mov	r1, r3
 800819a:	2208      	movs	r2, #8
 800819c:	305c      	adds	r0, #92	; 0x5c
 800819e:	f7ff f8ff 	bl	80073a0 <memset>
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <std+0x38>)
 80081a4:	6224      	str	r4, [r4, #32]
 80081a6:	6263      	str	r3, [r4, #36]	; 0x24
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <std+0x3c>)
 80081aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80081ac:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <std+0x40>)
 80081ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <std+0x44>)
 80081b2:	6323      	str	r3, [r4, #48]	; 0x30
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	bf00      	nop
 80081b8:	080084f9 	.word	0x080084f9
 80081bc:	0800851b 	.word	0x0800851b
 80081c0:	08008553 	.word	0x08008553
 80081c4:	08008577 	.word	0x08008577

080081c8 <_cleanup_r>:
 80081c8:	4901      	ldr	r1, [pc, #4]	; (80081d0 <_cleanup_r+0x8>)
 80081ca:	f000 b8af 	b.w	800832c <_fwalk_reent>
 80081ce:	bf00      	nop
 80081d0:	08008109 	.word	0x08008109

080081d4 <__sfmoreglue>:
 80081d4:	2268      	movs	r2, #104	; 0x68
 80081d6:	b570      	push	{r4, r5, r6, lr}
 80081d8:	1e4d      	subs	r5, r1, #1
 80081da:	4355      	muls	r5, r2
 80081dc:	460e      	mov	r6, r1
 80081de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081e2:	f7ff fad5 	bl	8007790 <_malloc_r>
 80081e6:	4604      	mov	r4, r0
 80081e8:	b140      	cbz	r0, 80081fc <__sfmoreglue+0x28>
 80081ea:	2100      	movs	r1, #0
 80081ec:	e9c0 1600 	strd	r1, r6, [r0]
 80081f0:	300c      	adds	r0, #12
 80081f2:	60a0      	str	r0, [r4, #8]
 80081f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081f8:	f7ff f8d2 	bl	80073a0 <memset>
 80081fc:	4620      	mov	r0, r4
 80081fe:	bd70      	pop	{r4, r5, r6, pc}

08008200 <__sfp_lock_acquire>:
 8008200:	4801      	ldr	r0, [pc, #4]	; (8008208 <__sfp_lock_acquire+0x8>)
 8008202:	f000 b8b3 	b.w	800836c <__retarget_lock_acquire_recursive>
 8008206:	bf00      	nop
 8008208:	20000e79 	.word	0x20000e79

0800820c <__sfp_lock_release>:
 800820c:	4801      	ldr	r0, [pc, #4]	; (8008214 <__sfp_lock_release+0x8>)
 800820e:	f000 b8ae 	b.w	800836e <__retarget_lock_release_recursive>
 8008212:	bf00      	nop
 8008214:	20000e79 	.word	0x20000e79

08008218 <__sinit_lock_acquire>:
 8008218:	4801      	ldr	r0, [pc, #4]	; (8008220 <__sinit_lock_acquire+0x8>)
 800821a:	f000 b8a7 	b.w	800836c <__retarget_lock_acquire_recursive>
 800821e:	bf00      	nop
 8008220:	20000e7a 	.word	0x20000e7a

08008224 <__sinit_lock_release>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__sinit_lock_release+0x8>)
 8008226:	f000 b8a2 	b.w	800836e <__retarget_lock_release_recursive>
 800822a:	bf00      	nop
 800822c:	20000e7a 	.word	0x20000e7a

08008230 <__sinit>:
 8008230:	b510      	push	{r4, lr}
 8008232:	4604      	mov	r4, r0
 8008234:	f7ff fff0 	bl	8008218 <__sinit_lock_acquire>
 8008238:	69a3      	ldr	r3, [r4, #24]
 800823a:	b11b      	cbz	r3, 8008244 <__sinit+0x14>
 800823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008240:	f7ff bff0 	b.w	8008224 <__sinit_lock_release>
 8008244:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008248:	6523      	str	r3, [r4, #80]	; 0x50
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <__sinit+0x68>)
 800824c:	4a13      	ldr	r2, [pc, #76]	; (800829c <__sinit+0x6c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	62a2      	str	r2, [r4, #40]	; 0x28
 8008252:	42a3      	cmp	r3, r4
 8008254:	bf08      	it	eq
 8008256:	2301      	moveq	r3, #1
 8008258:	4620      	mov	r0, r4
 800825a:	bf08      	it	eq
 800825c:	61a3      	streq	r3, [r4, #24]
 800825e:	f000 f81f 	bl	80082a0 <__sfp>
 8008262:	6060      	str	r0, [r4, #4]
 8008264:	4620      	mov	r0, r4
 8008266:	f000 f81b 	bl	80082a0 <__sfp>
 800826a:	60a0      	str	r0, [r4, #8]
 800826c:	4620      	mov	r0, r4
 800826e:	f000 f817 	bl	80082a0 <__sfp>
 8008272:	2200      	movs	r2, #0
 8008274:	2104      	movs	r1, #4
 8008276:	60e0      	str	r0, [r4, #12]
 8008278:	6860      	ldr	r0, [r4, #4]
 800827a:	f7ff ff81 	bl	8008180 <std>
 800827e:	2201      	movs	r2, #1
 8008280:	2109      	movs	r1, #9
 8008282:	68a0      	ldr	r0, [r4, #8]
 8008284:	f7ff ff7c 	bl	8008180 <std>
 8008288:	2202      	movs	r2, #2
 800828a:	2112      	movs	r1, #18
 800828c:	68e0      	ldr	r0, [r4, #12]
 800828e:	f7ff ff77 	bl	8008180 <std>
 8008292:	2301      	movs	r3, #1
 8008294:	61a3      	str	r3, [r4, #24]
 8008296:	e7d1      	b.n	800823c <__sinit+0xc>
 8008298:	080086e4 	.word	0x080086e4
 800829c:	080081c9 	.word	0x080081c9

080082a0 <__sfp>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	4607      	mov	r7, r0
 80082a4:	f7ff ffac 	bl	8008200 <__sfp_lock_acquire>
 80082a8:	4b1e      	ldr	r3, [pc, #120]	; (8008324 <__sfp+0x84>)
 80082aa:	681e      	ldr	r6, [r3, #0]
 80082ac:	69b3      	ldr	r3, [r6, #24]
 80082ae:	b913      	cbnz	r3, 80082b6 <__sfp+0x16>
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff ffbd 	bl	8008230 <__sinit>
 80082b6:	3648      	adds	r6, #72	; 0x48
 80082b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082bc:	3b01      	subs	r3, #1
 80082be:	d503      	bpl.n	80082c8 <__sfp+0x28>
 80082c0:	6833      	ldr	r3, [r6, #0]
 80082c2:	b30b      	cbz	r3, 8008308 <__sfp+0x68>
 80082c4:	6836      	ldr	r6, [r6, #0]
 80082c6:	e7f7      	b.n	80082b8 <__sfp+0x18>
 80082c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082cc:	b9d5      	cbnz	r5, 8008304 <__sfp+0x64>
 80082ce:	4b16      	ldr	r3, [pc, #88]	; (8008328 <__sfp+0x88>)
 80082d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082d4:	60e3      	str	r3, [r4, #12]
 80082d6:	6665      	str	r5, [r4, #100]	; 0x64
 80082d8:	f000 f847 	bl	800836a <__retarget_lock_init_recursive>
 80082dc:	f7ff ff96 	bl	800820c <__sfp_lock_release>
 80082e0:	2208      	movs	r2, #8
 80082e2:	4629      	mov	r1, r5
 80082e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082ec:	6025      	str	r5, [r4, #0]
 80082ee:	61a5      	str	r5, [r4, #24]
 80082f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082f4:	f7ff f854 	bl	80073a0 <memset>
 80082f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008300:	4620      	mov	r0, r4
 8008302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008304:	3468      	adds	r4, #104	; 0x68
 8008306:	e7d9      	b.n	80082bc <__sfp+0x1c>
 8008308:	2104      	movs	r1, #4
 800830a:	4638      	mov	r0, r7
 800830c:	f7ff ff62 	bl	80081d4 <__sfmoreglue>
 8008310:	4604      	mov	r4, r0
 8008312:	6030      	str	r0, [r6, #0]
 8008314:	2800      	cmp	r0, #0
 8008316:	d1d5      	bne.n	80082c4 <__sfp+0x24>
 8008318:	f7ff ff78 	bl	800820c <__sfp_lock_release>
 800831c:	230c      	movs	r3, #12
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	e7ee      	b.n	8008300 <__sfp+0x60>
 8008322:	bf00      	nop
 8008324:	080086e4 	.word	0x080086e4
 8008328:	ffff0001 	.word	0xffff0001

0800832c <_fwalk_reent>:
 800832c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008330:	4606      	mov	r6, r0
 8008332:	4688      	mov	r8, r1
 8008334:	2700      	movs	r7, #0
 8008336:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800833a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800833e:	f1b9 0901 	subs.w	r9, r9, #1
 8008342:	d505      	bpl.n	8008350 <_fwalk_reent+0x24>
 8008344:	6824      	ldr	r4, [r4, #0]
 8008346:	2c00      	cmp	r4, #0
 8008348:	d1f7      	bne.n	800833a <_fwalk_reent+0xe>
 800834a:	4638      	mov	r0, r7
 800834c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008350:	89ab      	ldrh	r3, [r5, #12]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d907      	bls.n	8008366 <_fwalk_reent+0x3a>
 8008356:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800835a:	3301      	adds	r3, #1
 800835c:	d003      	beq.n	8008366 <_fwalk_reent+0x3a>
 800835e:	4629      	mov	r1, r5
 8008360:	4630      	mov	r0, r6
 8008362:	47c0      	blx	r8
 8008364:	4307      	orrs	r7, r0
 8008366:	3568      	adds	r5, #104	; 0x68
 8008368:	e7e9      	b.n	800833e <_fwalk_reent+0x12>

0800836a <__retarget_lock_init_recursive>:
 800836a:	4770      	bx	lr

0800836c <__retarget_lock_acquire_recursive>:
 800836c:	4770      	bx	lr

0800836e <__retarget_lock_release_recursive>:
 800836e:	4770      	bx	lr

08008370 <__swhatbuf_r>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	460e      	mov	r6, r1
 8008374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008378:	4614      	mov	r4, r2
 800837a:	2900      	cmp	r1, #0
 800837c:	461d      	mov	r5, r3
 800837e:	b096      	sub	sp, #88	; 0x58
 8008380:	da08      	bge.n	8008394 <__swhatbuf_r+0x24>
 8008382:	2200      	movs	r2, #0
 8008384:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008388:	602a      	str	r2, [r5, #0]
 800838a:	061a      	lsls	r2, r3, #24
 800838c:	d410      	bmi.n	80083b0 <__swhatbuf_r+0x40>
 800838e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008392:	e00e      	b.n	80083b2 <__swhatbuf_r+0x42>
 8008394:	466a      	mov	r2, sp
 8008396:	f000 f915 	bl	80085c4 <_fstat_r>
 800839a:	2800      	cmp	r0, #0
 800839c:	dbf1      	blt.n	8008382 <__swhatbuf_r+0x12>
 800839e:	9a01      	ldr	r2, [sp, #4]
 80083a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083a8:	425a      	negs	r2, r3
 80083aa:	415a      	adcs	r2, r3
 80083ac:	602a      	str	r2, [r5, #0]
 80083ae:	e7ee      	b.n	800838e <__swhatbuf_r+0x1e>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	2000      	movs	r0, #0
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	b016      	add	sp, #88	; 0x58
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080083bc <__smakebuf_r>:
 80083bc:	898b      	ldrh	r3, [r1, #12]
 80083be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083c0:	079d      	lsls	r5, r3, #30
 80083c2:	4606      	mov	r6, r0
 80083c4:	460c      	mov	r4, r1
 80083c6:	d507      	bpl.n	80083d8 <__smakebuf_r+0x1c>
 80083c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	6123      	str	r3, [r4, #16]
 80083d0:	2301      	movs	r3, #1
 80083d2:	6163      	str	r3, [r4, #20]
 80083d4:	b002      	add	sp, #8
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	466a      	mov	r2, sp
 80083da:	ab01      	add	r3, sp, #4
 80083dc:	f7ff ffc8 	bl	8008370 <__swhatbuf_r>
 80083e0:	9900      	ldr	r1, [sp, #0]
 80083e2:	4605      	mov	r5, r0
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff f9d3 	bl	8007790 <_malloc_r>
 80083ea:	b948      	cbnz	r0, 8008400 <__smakebuf_r+0x44>
 80083ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f0:	059a      	lsls	r2, r3, #22
 80083f2:	d4ef      	bmi.n	80083d4 <__smakebuf_r+0x18>
 80083f4:	f023 0303 	bic.w	r3, r3, #3
 80083f8:	f043 0302 	orr.w	r3, r3, #2
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	e7e3      	b.n	80083c8 <__smakebuf_r+0xc>
 8008400:	4b0d      	ldr	r3, [pc, #52]	; (8008438 <__smakebuf_r+0x7c>)
 8008402:	62b3      	str	r3, [r6, #40]	; 0x28
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	6020      	str	r0, [r4, #0]
 8008408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	9b00      	ldr	r3, [sp, #0]
 8008410:	6120      	str	r0, [r4, #16]
 8008412:	6163      	str	r3, [r4, #20]
 8008414:	9b01      	ldr	r3, [sp, #4]
 8008416:	b15b      	cbz	r3, 8008430 <__smakebuf_r+0x74>
 8008418:	4630      	mov	r0, r6
 800841a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800841e:	f000 f8e3 	bl	80085e8 <_isatty_r>
 8008422:	b128      	cbz	r0, 8008430 <__smakebuf_r+0x74>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	89a0      	ldrh	r0, [r4, #12]
 8008432:	4305      	orrs	r5, r0
 8008434:	81a5      	strh	r5, [r4, #12]
 8008436:	e7cd      	b.n	80083d4 <__smakebuf_r+0x18>
 8008438:	080081c9 	.word	0x080081c9

0800843c <memchr>:
 800843c:	4603      	mov	r3, r0
 800843e:	b510      	push	{r4, lr}
 8008440:	b2c9      	uxtb	r1, r1
 8008442:	4402      	add	r2, r0
 8008444:	4293      	cmp	r3, r2
 8008446:	4618      	mov	r0, r3
 8008448:	d101      	bne.n	800844e <memchr+0x12>
 800844a:	2000      	movs	r0, #0
 800844c:	e003      	b.n	8008456 <memchr+0x1a>
 800844e:	7804      	ldrb	r4, [r0, #0]
 8008450:	3301      	adds	r3, #1
 8008452:	428c      	cmp	r4, r1
 8008454:	d1f6      	bne.n	8008444 <memchr+0x8>
 8008456:	bd10      	pop	{r4, pc}

08008458 <__malloc_lock>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__malloc_lock+0x8>)
 800845a:	f7ff bf87 	b.w	800836c <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20000e78 	.word	0x20000e78

08008464 <__malloc_unlock>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__malloc_unlock+0x8>)
 8008466:	f7ff bf82 	b.w	800836e <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20000e78 	.word	0x20000e78

08008470 <_raise_r>:
 8008470:	291f      	cmp	r1, #31
 8008472:	b538      	push	{r3, r4, r5, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	d904      	bls.n	8008484 <_raise_r+0x14>
 800847a:	2316      	movs	r3, #22
 800847c:	6003      	str	r3, [r0, #0]
 800847e:	f04f 30ff 	mov.w	r0, #4294967295
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008486:	b112      	cbz	r2, 800848e <_raise_r+0x1e>
 8008488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800848c:	b94b      	cbnz	r3, 80084a2 <_raise_r+0x32>
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f830 	bl	80084f4 <_getpid_r>
 8008494:	462a      	mov	r2, r5
 8008496:	4601      	mov	r1, r0
 8008498:	4620      	mov	r0, r4
 800849a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849e:	f000 b817 	b.w	80084d0 <_kill_r>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d00a      	beq.n	80084bc <_raise_r+0x4c>
 80084a6:	1c59      	adds	r1, r3, #1
 80084a8:	d103      	bne.n	80084b2 <_raise_r+0x42>
 80084aa:	2316      	movs	r3, #22
 80084ac:	6003      	str	r3, [r0, #0]
 80084ae:	2001      	movs	r0, #1
 80084b0:	e7e7      	b.n	8008482 <_raise_r+0x12>
 80084b2:	2400      	movs	r4, #0
 80084b4:	4628      	mov	r0, r5
 80084b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084ba:	4798      	blx	r3
 80084bc:	2000      	movs	r0, #0
 80084be:	e7e0      	b.n	8008482 <_raise_r+0x12>

080084c0 <raise>:
 80084c0:	4b02      	ldr	r3, [pc, #8]	; (80084cc <raise+0xc>)
 80084c2:	4601      	mov	r1, r0
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	f7ff bfd3 	b.w	8008470 <_raise_r>
 80084ca:	bf00      	nop
 80084cc:	20000460 	.word	0x20000460

080084d0 <_kill_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	2300      	movs	r3, #0
 80084d4:	4d06      	ldr	r5, [pc, #24]	; (80084f0 <_kill_r+0x20>)
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	f7fe fe4a 	bl	8007176 <_kill>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	d102      	bne.n	80084ec <_kill_r+0x1c>
 80084e6:	682b      	ldr	r3, [r5, #0]
 80084e8:	b103      	cbz	r3, 80084ec <_kill_r+0x1c>
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	bf00      	nop
 80084f0:	20000e7c 	.word	0x20000e7c

080084f4 <_getpid_r>:
 80084f4:	f7fe be38 	b.w	8007168 <_getpid>

080084f8 <__sread>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	460c      	mov	r4, r1
 80084fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008500:	f000 f894 	bl	800862c <_read_r>
 8008504:	2800      	cmp	r0, #0
 8008506:	bfab      	itete	ge
 8008508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800850a:	89a3      	ldrhlt	r3, [r4, #12]
 800850c:	181b      	addge	r3, r3, r0
 800850e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008512:	bfac      	ite	ge
 8008514:	6563      	strge	r3, [r4, #84]	; 0x54
 8008516:	81a3      	strhlt	r3, [r4, #12]
 8008518:	bd10      	pop	{r4, pc}

0800851a <__swrite>:
 800851a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800851e:	461f      	mov	r7, r3
 8008520:	898b      	ldrh	r3, [r1, #12]
 8008522:	4605      	mov	r5, r0
 8008524:	05db      	lsls	r3, r3, #23
 8008526:	460c      	mov	r4, r1
 8008528:	4616      	mov	r6, r2
 800852a:	d505      	bpl.n	8008538 <__swrite+0x1e>
 800852c:	2302      	movs	r3, #2
 800852e:	2200      	movs	r2, #0
 8008530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008534:	f000 f868 	bl	8008608 <_lseek_r>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	4632      	mov	r2, r6
 800853c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	4628      	mov	r0, r5
 8008544:	463b      	mov	r3, r7
 8008546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800854a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800854e:	f000 b817 	b.w	8008580 <_write_r>

08008552 <__sseek>:
 8008552:	b510      	push	{r4, lr}
 8008554:	460c      	mov	r4, r1
 8008556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800855a:	f000 f855 	bl	8008608 <_lseek_r>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	bf15      	itete	ne
 8008564:	6560      	strne	r0, [r4, #84]	; 0x54
 8008566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800856a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800856e:	81a3      	strheq	r3, [r4, #12]
 8008570:	bf18      	it	ne
 8008572:	81a3      	strhne	r3, [r4, #12]
 8008574:	bd10      	pop	{r4, pc}

08008576 <__sclose>:
 8008576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857a:	f000 b813 	b.w	80085a4 <_close_r>
	...

08008580 <_write_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4604      	mov	r4, r0
 8008584:	4608      	mov	r0, r1
 8008586:	4611      	mov	r1, r2
 8008588:	2200      	movs	r2, #0
 800858a:	4d05      	ldr	r5, [pc, #20]	; (80085a0 <_write_r+0x20>)
 800858c:	602a      	str	r2, [r5, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	f7fe fe28 	bl	80071e4 <_write>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d102      	bne.n	800859e <_write_r+0x1e>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	b103      	cbz	r3, 800859e <_write_r+0x1e>
 800859c:	6023      	str	r3, [r4, #0]
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	20000e7c 	.word	0x20000e7c

080085a4 <_close_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	2300      	movs	r3, #0
 80085a8:	4d05      	ldr	r5, [pc, #20]	; (80085c0 <_close_r+0x1c>)
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	602b      	str	r3, [r5, #0]
 80085b0:	f7fe fe34 	bl	800721c <_close>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_close_r+0x1a>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_close_r+0x1a>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	20000e7c 	.word	0x20000e7c

080085c4 <_fstat_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	2300      	movs	r3, #0
 80085c8:	4d06      	ldr	r5, [pc, #24]	; (80085e4 <_fstat_r+0x20>)
 80085ca:	4604      	mov	r4, r0
 80085cc:	4608      	mov	r0, r1
 80085ce:	4611      	mov	r1, r2
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	f7fe fe2e 	bl	8007232 <_fstat>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d102      	bne.n	80085e0 <_fstat_r+0x1c>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	b103      	cbz	r3, 80085e0 <_fstat_r+0x1c>
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	bd38      	pop	{r3, r4, r5, pc}
 80085e2:	bf00      	nop
 80085e4:	20000e7c 	.word	0x20000e7c

080085e8 <_isatty_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	2300      	movs	r3, #0
 80085ec:	4d05      	ldr	r5, [pc, #20]	; (8008604 <_isatty_r+0x1c>)
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	f7fe fe2c 	bl	8007250 <_isatty>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_isatty_r+0x1a>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_isatty_r+0x1a>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	20000e7c 	.word	0x20000e7c

08008608 <_lseek_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	2200      	movs	r2, #0
 8008612:	4d05      	ldr	r5, [pc, #20]	; (8008628 <_lseek_r+0x20>)
 8008614:	602a      	str	r2, [r5, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	f7fe fe24 	bl	8007264 <_lseek>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_lseek_r+0x1e>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	b103      	cbz	r3, 8008626 <_lseek_r+0x1e>
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	20000e7c 	.word	0x20000e7c

0800862c <_read_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	4611      	mov	r1, r2
 8008634:	2200      	movs	r2, #0
 8008636:	4d05      	ldr	r5, [pc, #20]	; (800864c <_read_r+0x20>)
 8008638:	602a      	str	r2, [r5, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f7fe fdb5 	bl	80071aa <_read>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_read_r+0x1e>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_read_r+0x1e>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	20000e7c 	.word	0x20000e7c

08008650 <_init>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	bf00      	nop
 8008654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008656:	bc08      	pop	{r3}
 8008658:	469e      	mov	lr, r3
 800865a:	4770      	bx	lr

0800865c <_fini>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	bf00      	nop
 8008660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008662:	bc08      	pop	{r3}
 8008664:	469e      	mov	lr, r3
 8008666:	4770      	bx	lr
